{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "819bff5f-3179-4ba0-8d3b-119821283711",
        "name": "Clear Cache",
        "item": [
          {
            "id": "fa001f7d-e93c-4435-ae1e-57ecb5f874a2",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4efaaa7f-62d2-4916-a9d5-7e4e9ff1cee4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "dec49aad-904a-42c9-afc8-e950a3a1c0e1"
                }
              }
            ]
          },
          {
            "id": "b855f7de-df23-4c44-ba20-99de91ca33d4",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fedd928c-fead-4f3b-9bbc-a99a14800515",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ba3ed123-fc54-48c5-8da5-afb7edd1358e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1e5c5763-7a7c-4b81-852f-5699031707bf",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "53b2cfb1-c998-40e5-8a90-0c6f0557f17e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bd8f8a80-eaea-4ed0-bffc-92bf1ab80207",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "607338e9-6b55-417b-aa88-a2faf3eaf0e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ddaa96fa-092f-4492-965d-e954651e05d8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "06058223-9ee7-44c3-8b3c-c6b823d981f7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ae307e15-d111-451b-ac7e-de2c76c11943"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0a08dba7-9265-4bb7-b480-1b400bd418b8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d597533e-4477-4df9-bcff-ca57c935f4ce"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "05c74f7e-eb0a-45d0-8987-e0e07f2f34e7",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "97434277-2f68-4445-a35d-de7486301dc7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "051b3a37-8ef6-4961-b231-ebcdc53d2bbc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2c474df4-c838-4126-9a7a-9edee8525c04"
            }
          }
        ]
      },
      {
        "id": "584fbd65-5abe-489d-884e-fcee3233580d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "039535e9-2d37-4f90-927d-22b2b580c382",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5af8451f-05eb-4fe9-8342-e159c87e1056",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d75c2db4-78e8-41ee-93d5-274a2ff3b11c",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b130f18f-8469-4498-91d5-3c37a42436cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3f692cdd-9efc-4b73-bc66-c8002cbeb10f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20bef7fb-b3ac-4182-bd37-5ae0d249ccfa",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f543c64b-ceec-4315-bbe3-cc28b4950993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b583adb-7fc7-4650-90ee-1478fd82a6b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0720ca4-a0c9-4c46-8fe9-1485d397609a",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d39bd57f-5a57-42f1-be94-6a3e730343c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "131aa571-6d5f-4496-b397-82cc525c3131"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fd661be4-5347-492d-9096-3a54f2a7dc0d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e6847045-a42e-4355-b584-0a70a212a73e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c625929-fcde-43b7-b192-4e20493cfadc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "77b32668-adcf-4991-bd4a-033672b0c152"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d054e5aa-16f2-4dba-9435-2dbab42ff7e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc29dfeb-4098-4ea8-9a39-5b16594859bf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "630cd4c1-05f7-4acf-9395-ea36ccb0518b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9e63cf04-115d-4c14-8cdf-1eb5f46bb80a",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ff4fcc0-67e9-44cb-82de-38eb5b09b8bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "3db9561a-e217-4ec7-923f-fcaee13a4a22"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dee0cbdb-d9fc-4806-a3ac-baba7bb39665",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "7c253463-355b-4a61-90e0-ad38dc1d8ef5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ba2c598e-d1aa-4ab3-82a6-35e21feebc71",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d5770e8d-307a-4a2e-90b0-383583f72456"
            }
          }
        ]
      },
      {
        "id": "737ae800-7930-4242-8e41-fc8eb8c337db",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4154cd68-1889-463b-8737-1e2e62ed416f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "48937813-e768-40f4-b942-cf16c776533d",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "945824cd-02e7-40e1-8347-7c2bd859045d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2054c890-45ad-4287-a6ad-d5c0ab222cd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f354b172-b4ff-49b4-bda9-a7144a4c5186"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f9135bc-1b5b-450e-a328-497808f9b874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9fa81216-e987-4753-b7d5-af277aadb52f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a97b89f1-5120-4c4e-8c96-676ac0002630",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ac1ca5-796a-4caa-b099-4da8cd515074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9995087-7790-4f17-88c1-2bd82e9ab880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c5e341-0dbf-4dcd-a510-cfec31f0793c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb3ae0bb-ee7e-446c-a07c-72c29e14336e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4168b706-6955-4ee7-bf54-93f51a696b26",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "931c13a8-773e-4fa6-bf8d-83b99fdf332b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cc65524-1857-4da4-9bef-0434deb9983e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dc0e3a0-1b62-468e-8c84-c5e49a2ee686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7690f93d-1771-4f64-9432-84a2ceb63205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16817af3-03f6-4e52-a284-0ebd3f571a05",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "881c1f48-ae13-4e3c-b3fc-6622d416eafc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb60f09a-537d-40dd-b76a-02404939783d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4138020b-4460-4819-9b58-c5c030adfd83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0bb46a09-5d63-404a-ad85-7b4cfacb28f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dcf10b2-791c-4820-b367-1aa4e431a12b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3633bc0f-f20d-4acd-b4d6-12a43581d795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8df22f3e-3112-47f7-92c7-d237ff9d3c4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da6ed78-ef72-428f-ae1b-a866eb68d070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "14c5cfbc-60ef-42bd-9e42-382a6ecb0605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23de7067-aee9-491f-8084-427da7d1353c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d29938df-51ce-409d-b7dc-96e16674d8a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40e51790-8ead-4616-813b-05240ba64d22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8397b4b8-6163-4341-be40-44ddc92584f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24582c94-1165-47d5-ae1a-5b3a40260879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f96afa7d-272a-4539-b082-eaaaf7cc9b0d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e77b7d9-6d62-42bd-a179-a015f8a0f14c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af72090b-bf39-49d6-a5f4-84933fb37e17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459539cf-8623-4db6-bb5e-4610e29eb783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e8151ee-5f29-4c63-a6de-9fedbd88a3af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18fb4b09-f284-41e1-90c1-bca9af9e1a16",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cbb6028-8fed-429f-9156-6d3c81629c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "782c501b-0e80-46cc-ad5f-1d6626e4699a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24dd20d3-69c2-4fd6-b640-ea45728ff013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea198ed9-678e-4094-8595-89859343fcf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfec45f8-4a26-45eb-98e5-9f273252baac",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8a947cc-2cf4-4bc1-b785-14c78e932381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48767998-7f03-451b-b417-286c495da45e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae25c92f-4235-44f2-bba4-15754938c83a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "76c1d594-9142-4313-a4ff-0054320f6e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faeceb31-c5ba-406d-9e42-cf53d3bc489a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ec146d-e3ca-4bc9-bd1b-408e9dbd1b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3d176fe-b5b0-411c-8a4c-91ed4e00a911"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b67f044-71d9-43ba-862d-f32cf0afab0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "58202075-210d-4fbb-8402-c22038a0ae12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31984a70-283b-4ac0-b4ec-bc94df213b2f",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8312408c-2e72-44a5-888e-57664cd6c4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7da4a9ca-e4cd-48eb-9702-08f8a598ec6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "910b21c6-084c-48ab-abf8-9cab1cc2c9c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "60db6bcf-7c7a-4ae3-bdab-01679e278fb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50579f16-8fa1-44ee-8c78-6ec811f0bfb8",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a60a18-1911-4164-8d47-68c9a0906622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f455bfe8-ac48-4542-8790-eaef434648ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "230a8bb2-cab7-44e4-91c0-7471b0cef081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab566c1d-724c-4c52-b948-472f95e22156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbcffcb1-1a64-4a37-b4bd-ed87cc27e6d7",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82f570df-1d7d-4c15-b6f7-6271aef88102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1c435ba-2ae7-4274-a1a6-05060ce7767a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91c0f4ff-5870-4df7-8e5d-c319e7ecdf10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a232d002-9fca-4fba-a7e7-7f6178564bc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c649158-599b-4060-a30d-d19dbde6e793",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "901354e5-a188-4807-a515-e0d0586a7f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "365a3d68-384e-47ea-a520-b304760114fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fad0b68-bf23-405f-8d8d-7bfd89983824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db709740-3a86-425a-a5f7-a20c0efbe823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e34a22-45be-43f7-b7ea-b25dd41e2dc7",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2864939a-1fa1-4a1a-8556-0d83803e3d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfbeb753-8d16-42e8-9040-e71727d5a6ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "341ecc4c-b719-447f-8e3b-05e556c767f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4cf1f540-7920-4f5b-bac8-9501d48c8328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6634ffe9-30a1-4dc2-b410-e8d43fe42b3f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "390e8bc9-8749-457f-a51a-331310290f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7123f5fe-4fff-41cb-80b8-d03edff24e9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5740a267-2f4f-4a2e-afe6-a4c1a7fcaa45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8197a338-99b9-4d8d-bbe0-6afae20bb6af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "163c8315-ca51-4047-83cc-abd2e1878f88",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e945e60-bdbc-40fd-9824-6cb7e9cd539f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c0af2fe-1097-41fa-950b-da736764140e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "211dbb6e-2ba8-4695-b098-9893668046e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75ce7db0-d216-40a8-a3a7-cd3a00bc3348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9a763df-c21c-4f97-b97d-1a06b8d43245",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ead56bb-379a-48ff-aaae-0e78c1b0644b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88f80934-552e-40ec-9c61-6629d9c41336"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "019cc7d9-b979-46ad-b006-fe0dd9fc3bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba9d0806-c68b-4e18-979a-f7ec6cf0ebef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59fd6e1b-8526-44c8-a736-cb5b9ca16c55",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a3f02be-111a-4717-b56e-88acf0d929df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ed330a6-e1f2-44c8-be06-4d15b95db08d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "970037ef-8e6e-4a01-b142-5d7876190b38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2017b085-7505-4f21-a7c4-0213a83c86a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea6e97d3-ed0b-4720-9b40-9f4594768b1d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0232b8a0-34fc-403d-8622-7d8b1aa47082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78a26cc6-6b47-4d67-81e9-ed5b26796e7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4111482d-fe12-48fd-82ac-47585c1691b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa06fb4d-6c23-4635-8908-66a0142cc1c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9886a7d9-59c8-4e99-9f7f-03657afc2e2c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47b322cb-604d-47fc-8f8a-019545143d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faaefa4b-cdfc-4817-84a1-8b575e05e968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a650142-b5c9-4c17-ad29-a9ed046b435f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "810ad99a-8588-4579-a8c3-d151985faa92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06451ca2-e42b-478e-818d-1bf043a83fae",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b99270fb-ce3f-45e3-b79b-54f1152293e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7295af94-4b05-4d24-88ab-d25d1204d03d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c75d4b-f991-42a6-834d-63aeda4cced0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "625e2fa5-e0af-4d10-a772-0ef68c887550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18897c53-1702-40e5-97c7-992e455e05eb",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbaf7a60-8b4e-4af8-bb25-5ef68f7ff2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e198cf2-d71a-4ffc-b744-80f6316ba89d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff303149-477d-4c43-9cd3-3d99ada9e37d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e7264a6d-da39-40bd-b005-39c838269bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad9963e-6e5b-4703-8cc8-0945a2233516",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0a809f8-4002-4451-86a3-7ff3dbfbdfcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04b659da-ae24-4ea3-8f00-ec0926584111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2991e97f-42cc-4a57-b1a3-14d82183147d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d07c5dca-a9cc-4855-921c-2486993a2a3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e6af2e6-9c2b-4510-a9fe-176d3c07dad0",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9419410-1f8b-4b20-8d7d-39e92cf7f2bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "384cc13f-ae94-49fb-92d9-e1369a7929ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4069306-8221-404d-8c18-fe099a167bda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1797fe1c-cb73-4e2d-9220-d5d23922bf93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebb8dfdb-0ed2-4fe1-82d7-f8285da43137",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7962d669-3edf-4a0b-8284-0e0a9985b7ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06753f5f-1498-470b-bbc2-3b30a68c4607"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de401ec2-88d9-497c-ae82-c1dc3e1b756e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "28d402fc-4b28-46e9-8c0f-f15c04d784bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0efebe17-4980-44df-a4bd-837f182760bb",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1461a27a-a08e-44d9-a24c-0c1cfb2d7988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2a9bce5-1694-4fed-b21c-b345964173f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92665c6b-e8fe-4e7d-bb05-792558a59911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a851ba8-312e-4583-9153-fe7121f7fc6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d17eab4-804d-46b3-b0f8-dbf7a4792742",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "745f78c5-5b09-41ba-8112-bd3cbc16eb4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "146251be-18c7-4f45-97e2-dc2701592fe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9deb45c0-3b32-4934-b478-5e32e901e5d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "86c0e38e-d6ed-40ac-a8ae-4c71c7465c07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c366aa6-a10d-420b-b941-74851a4a327d",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c01071ba-c622-4e3e-8ccb-80ed50b3609f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cb091ba-2645-487e-b1af-e9ef0283e3b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf56a589-e22a-49d9-ac13-ad751c61a74d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba30f9b2-bd6a-4d1b-8c93-28eb215d5e6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79feea58-ff2c-4b31-a405-3ce8a0d2e745",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce48da3-4a6f-4d47-b8d2-025ff45e5c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cabca7a8-5059-4e20-ab89-a8508ad3e633"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afb38667-2b66-4043-86d7-895585a21bdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9aa4b2e-e556-4a38-b48b-fc621d8c2dc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d2da93-b203-4671-af57-b7076c5525c6",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d2fe673-6c47-4ce6-8abf-d425c9a55b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c01c1eda-a14e-4298-aba4-7af10836069e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92aa6296-8698-498e-83b5-3d7b08e21320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5693a46a-7110-4cf1-b47f-6b238ff72574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ccb4fb-60f7-4f6c-8a99-1ce619897bf3",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c1bb4e5-489f-4105-adef-07e5f7288ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6afb81b1-c05d-495c-aee9-1a368dcb26a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "148b44d4-e0ea-46f9-a8e1-5ca6be7e94f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "36dd33a4-9298-4412-997a-30c49c652afc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac1aa82a-bb6d-4bd3-aeb1-04bf8f27ce3f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f70fa10-6d90-4178-affa-ea43a29d1869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d92d77cd-3b6d-4147-9c80-45c3e4319eb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7693e4a-60a6-459c-939b-abdf766f108b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b705bc67-d7e8-42d7-8d2a-b55b5a1027c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "740e34ef-82d8-4d77-8049-f19deaf979c7",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3daaa903-b3ae-4ce5-9eef-60c4592e1616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed68d50a-1cef-42c8-8075-5ef199dfa6c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "624ae7ef-fabf-4b21-9674-855fc5eeda56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "27a4812f-3417-48c2-8721-f75605801196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41489d7-f629-439a-a795-5547ee24635b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfe7698e-221b-4353-9317-fa1b93d32851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fadfa6ac-b6be-42c5-bd1f-227adbfc8a1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dc6165f-75f4-4d39-a37a-fcad541ab82c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c886bf44-6202-4c1c-b2aa-1df22d944336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30ae1230-f4ee-482f-8899-92cbba5fc89d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea9fc2b-bbe1-4571-8589-f0a3b26fc6c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ea200758-38c9-4dc5-980d-a745f88830b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0cec77d-24d6-4127-9bfc-32ca171f4bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ab5cbf0a-3a57-46bd-976c-a0c1a35354cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d927c5e5-a244-4687-87be-9f5fc41958c9",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6651f597-99ee-4f0a-9c45-325396420330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ff891de-113b-4c8b-951c-08856af981a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b5e9268-f637-45cb-948e-968609ecd156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "335f911b-c8fd-4c61-ae65-0297b0fb211f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "381830b1-18ec-44b8-9e22-b49bd40f21e4",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7746e10-8895-4c19-9e75-3502eedeb29c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad2d3596-5ccc-4dd2-aa68-46fd728f23b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f29ccc92-1ec7-48d2-b67b-793071dc6b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "335b0198-67ce-4249-9a43-2f4c0be60321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f91acb-dc51-4102-91b1-5996d8189985",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c302022-f8bf-43f5-8458-05db5f79d4f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89a09300-4c3c-4762-ad64-b16b32ed4261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa2e611d-498c-489e-b5e0-13d9874c4920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "21df6a70-77cc-4a1d-85ab-c6a95e79d454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8527ba7e-37cc-4053-8a17-8f5966c325f4",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d26bdb-af6e-4495-9649-1af0d24e20f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cee6b9fe-b120-4417-9021-0ee461cdbcd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f232720e-1291-4cfd-a1c3-956103bc662c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f9ee6ee-027c-4d7d-b304-67dfec07a81f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27a4085f-8ba2-4c70-8982-b03fe3a6f49b",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff37c076-7afe-4b8d-b193-20314112a9bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d21e34e4-781c-4466-9c24-14499eb605a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c54af99d-7ec6-430a-bbeb-09a38755bddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "83a96cd1-1c57-45af-bfc8-86c414a88db0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcb6bc76-e48d-4cf5-8e1e-ebc37563878c",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ca56d33-d034-4a21-96ce-477688efecd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99e047a8-d127-43cd-8994-34fc173d4856"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c05a5c85-dec5-4c80-80f5-09a50b56607b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "6a7fd425-f9ad-4ba2-be1a-d668e11c9b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36957332-67b9-46a8-a75e-cf905324ab1f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f14a7a-0ef7-4c90-b3b4-eb1211638bcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d85c6db0-962d-41d7-b2fb-3177afefe277"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfa0b76c-1e97-4526-aa69-ace0f61f4cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0791177-66d9-4316-9016-78b356cab09d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "082b06a0-f28e-4c0a-9d8a-de29e3f91f57",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "462d184c-9f83-49f1-8d6d-624bc4b2c00d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abfbc5b8-1a72-4b75-814e-a4ce8be89691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e516ecc5-6989-49e4-a1ea-27535122143c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b5a8edb-f81f-4624-940f-929cd713857f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bf89f81-7b45-491e-b0fc-feb76259e27e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aed5c13-62c2-409d-8e46-aaff62d66f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26a31f49-b83c-4d19-868c-3248683d900a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35205ca0-3acc-40f2-8a57-ac5ec4b2d714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd94a4a3-ec84-4b53-b7cf-485624145b2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83551b5a-d6d2-4fb8-9a72-0346c6855dba",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f950abc4-c81d-425b-9b07-63ae45141176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0e15c6e-0ca4-4800-a982-4fff26b0c458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20875810-fdfd-4585-9123-d5e634e16702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "383dff46-b343-44ca-b149-368aa9430eac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d0045fa-9ec8-40df-b6eb-c99db5a65347",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b056a650-97f6-4c23-a122-656712af13ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cced6171-8723-407c-972d-f5857b4b20ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4e4ec71-aec5-4462-b9a6-a6a6cc578104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8265ad29-3016-4e09-8514-bb39648eb4b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9444657b-c2f9-4c0d-af45-222319b410e7",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be5eedc8-8699-4be9-a1c8-dca313f81ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f187815-f9eb-4874-b3da-a841e0a954bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33edb4ee-5268-4e82-878a-e1443b18dc9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "86429b0f-6d87-4ec3-bf34-2a9d250826e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2709ca9b-ffbc-47e6-9c21-bc36812e1083",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd10a7c-e629-4c3f-8ff4-36e7ebb38b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1db4f11b-cd9b-45dc-8891-85fec2686734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d935d63d-4d3c-403f-a765-42b106dd60f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "61f43692-d1bc-4eac-9a2a-83bc7c22d6fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4e09fa7-49cd-4ee5-8908-3d2d4f94efae",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba3b290d-3652-4dda-9b21-060eee7d354a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c21bc21-078a-41a3-8078-6d8a98869361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e07357df-bfe0-4133-a052-2f8bda11fc0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "88c6ae3a-8704-463d-81ab-8df834a8a673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52380838-7667-4304-977a-c19ee3bfe10a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f6a439-60d9-4a86-beda-3a1248ffa71f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "128bf1b0-6abf-46c3-b1b3-866ece535e7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f68086eb-dc1d-47f3-bd2c-6bee23a3e3f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1073917-9ce8-4942-8d41-986843e000cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d89d32f-fce8-4a99-9c17-dc59556c3dab",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63fb0389-bea1-4747-8f44-724635d669ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bd6b319-4531-4c18-b4e5-8e369e487442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf03916f-f5e7-4013-a666-c9de8583a126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcc42af2-1429-4bc5-980d-6a4dd3e3744d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0507e6af-fa25-47b9-a1d5-fc4a5c5b458e",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e2d0b7-67bb-452a-8fa7-80b80c13f06f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1007aa57-0d01-4f99-ba0d-5aa27269c92a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd8c85e6-5364-4db8-b9ed-53184057b706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5193a3dd-f9c7-4571-b004-6560eb072573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "463c2d78-12f6-416c-965c-6be89b054df2",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a699f8f-75ee-440c-9f4d-3b20c3dbe03c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12b32220-a960-4f3b-b965-335f87534040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c283542-f17d-43e1-8fbf-a1bdd84138ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "02ca5434-0214-4de7-a109-bd649041b6be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e4de52a-94b8-4227-8196-d3744dd6ea11",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b00bd90b-61a1-4e38-8c90-1a291e7a634a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03986481-e8c8-4f01-8402-d365a6f1a848"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "066b58eb-c84b-4389-98fa-8f0ab27f0b68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "acb63373-c43c-4702-ba04-cac7054b420d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a813ff92-e30a-4dd5-a8f0-bf21bb7e28c2",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1cf17fd-95f9-4ae2-8438-1f856ccde3a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9deef7fb-7a8a-4bc5-8794-f179f587bf89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45e07561-1682-4ad3-a364-3b8785cdd1ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "dd1120ee-0ab5-4297-bba4-087c8ccc8c40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13bf3e35-c8ca-4ad7-8906-262d63989164",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b23eab-83fc-4b6c-9afa-5bd1371feeb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57600b74-86ec-4afb-818d-c1d52f0c3d61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d1ebd77-6d3d-4499-b361-aa637dd065e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb3dae58-56ee-4ca1-90c3-d2c71c6775b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c05affd-4f42-4b05-9fc8-6260ecc0554c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a62614f-f9c8-4307-9db6-bc363157de3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6c2ff6c-e764-4a71-8133-5c17ee72d447"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de2cd183-e205-4a3b-a307-4caa9b8ff54c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fceb3dbe-7c75-41e4-ade1-1997d121887b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3def0f0a-f6cd-4dbc-8141-cec959e39f63",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "843efa53-63ef-4a1c-b27e-029e2b5caea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4af7bc81-203a-4738-a7d8-75e8694b41a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2de4b56c-335d-48c2-8972-0734f0f4a1d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "66d6405a-4d87-42cb-8323-7004afc96044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a2c6d3f-76a0-4985-a3e8-cf30e902d228",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe366ee-11b8-406e-9e71-ebdea23e9431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf6132c7-0478-479f-ba10-49162f688c17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d903a0a-7dc9-4f3c-8274-db9a9450b3c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b691f5c-9b6b-4048-b897-c2f4a756fe69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2823f40-fc28-4548-aff3-3e62e1511034",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "838f945e-d1f5-4f82-a7f1-9a3ea29c8141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a8f7ee5-4665-4f6a-93f9-c6f2d2f214ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c16fdd-a19c-48fd-94f6-c4191551a2c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2b7a8e42-489b-48f5-a769-f27829a3bbfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18cf55a8-eca6-4482-9b02-01a1b2cf9717",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c6aedb-339e-4232-a2d4-ca900ce9a055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65676d2f-3af3-4694-8ff1-aabbde786f2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8c1ac3b-be0c-417d-8689-21e62c6cd7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5e90de1-aba5-409c-8fe1-0104b790cfa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa3f3354-983a-4ece-a617-29f27fb0cad1",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b8dfa0-032b-4f0d-a0ec-74675ada1a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbb5937f-bac1-4094-b51d-fc2b9d0692fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1e05bc5-e6d1-41b5-9d95-e12c739accad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ec51401-00d8-4842-b248-47838659266f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a83703ce-3e5b-400e-8b9f-9d6075cf1fb9",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef7acb36-a7f7-4904-8ed2-457196290bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04cb11ae-6c47-484b-9c54-ef4277e26611"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c6bebd-3c13-429a-9f13-47c4070c1a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef2492a0-e4ef-47b1-9e13-944f990bc504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e991e524-3aa2-4a6e-a0db-bca9f8784dab",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4534c180-595a-4729-ae7d-8a1a24d4269a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d76b2c79-1c39-4478-a384-bf5ea0ec2fa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e617fd34-4448-4d68-8af9-98e0f80e77f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bebc8c22-5ae9-48f6-a068-b4404137a84c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ccbba41-d063-43bd-85b9-ad58336ed059",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa0fb752-010f-4b5d-9b36-22d5a60e31e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3b57ec6-8266-48a6-88dd-27b44b293352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f280e7a1-6529-4be0-951a-098fca930d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d903bee-1551-49a7-b2b7-66c055c9ac9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30bbed03-627a-49f1-b78c-27a4b1743e96",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd1858ff-ff38-41e5-bcd7-97000128d3b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d6acd47-b424-4346-a494-0d9e9daab51a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5271ca5-7109-4b9b-b537-ae71f9356bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "12313656-8a43-42e5-b688-28a1f7bbd667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f624fbe9-6f94-4f35-894c-142ea7a01b49",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e242bf-0b66-4704-80e0-8ed3ab67eda7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "390549b3-60ce-42a6-b682-d95ffafab2a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00669cdb-4c0e-4980-8f09-e9e58603bbc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ba88ac4-c859-44b7-b6c7-c723d875c159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a691612-c09d-4e9e-986c-5175474cdcd7",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d5f4285-22c4-4e99-bb43-842603fd2b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39d2208a-ebd6-422b-8b2d-21f6870ec8a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7683d5e0-4ef5-4b2b-9a9a-c4732d0b5911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c6f0252-72d0-46b9-96e1-625e85e0fa2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ad427bc-1a9b-4c54-8360-247b44c477d0",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4953e03e-500d-4769-809b-3b40239a8203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a96fd9e6-e964-4c89-8d23-c13ef9c88cbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "979c67b8-fe77-4251-866d-e3b181e4962a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0412ac76-398c-4eb6-b0f8-e1dc237e1fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4bd5cf0-8a24-4f72-86a2-74750f92fe83",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a893f7-d078-408b-be17-3603ab03e9eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ee17fa8-eeac-4978-bb63-3a59cc1e0d6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79aeff42-d3a9-4d5a-9315-8dce1840f4f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8f05ec6-54b6-4b72-a716-95c1c3646d95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd447089-6154-46cb-a751-4d56faf25e23",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "551266a4-c5ef-4bff-8d8e-6089a13b083a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3ddb422-9d91-422e-8a44-32c28b4b86dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8387204-7967-447b-b0e0-5630ddc52e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "df5720cb-3d3a-4cb7-a63e-3e2a18d67142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d2af01-ece1-47d2-9f7d-b2ed8479ea79",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd48071-7b03-4a58-a2a0-93f77d0fdac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f245bc5-6b52-4910-ae9b-6a6be364f7b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d811a4da-f9f9-4f43-87b1-3b9f17f6f570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc021c16-2ff3-499b-987f-be56b5638acc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae05be0e-4096-4c02-bda2-39b73eb0b4ed",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17746f7c-a255-41c9-92ac-e3f211a1c2ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd9737aa-0a74-4d4b-b802-30dfa92fe2f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ebccc0-6f89-43db-89a1-ba692b61e961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1763b8de-69c5-4cc9-8e9c-22997c6dfeaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c573187a-17d5-4511-91fd-ac7b36541148",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc80e967-445f-428b-9f3d-547a3559e850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b60f9bd-b2e3-4e43-9bbe-b26a9458b960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "634b8710-650c-4a2a-a1e0-443af477112e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6e29954-d560-46ee-8890-4d3978065430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98537a7-236b-42cf-ad06-5eed56c936cf",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "491fad17-fb1f-4b64-b85e-ae74307186c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43c6700f-5d8d-4759-9fdd-df80b73fe320"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fabbcb0-f893-4f9e-a08c-f048f6271f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ef4a074-63bf-4d25-a0cc-ca6d5e15ffdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f599f1-9f67-490b-9f05-e860f14d6191",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad3ba4e-7c40-4353-b803-2e13fcab8c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a368ca59-f040-4495-a5c0-148f5280a61b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "379c91a9-c33f-4d49-9e00-d5781f208f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff1b57ba-40bf-401a-a184-eff4d145826b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b245588-21d5-406e-bd18-dae3b2bff1f5",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae8bc54-dd64-4838-928c-3fea055cfda0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "041470ec-eb8c-40bc-ba3d-ec2072b0d71a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "638b7bed-7f9f-4db8-a336-db96766de95f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9757108b-ae92-4fb8-9358-b4baa51d00e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494bb9aa-c635-46fd-b48c-e7cb97cf00e8",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5426d7cb-ddc1-4994-89c6-9fdd73516049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5809e048-e218-4676-b929-ba8e4e3be070"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "678dad4b-8dfe-456e-9c18-d5090243cce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ab5f29f-3285-4e66-b69d-c7fcac2eca92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e4e970f-35ca-469b-8734-4e6c8870fec7",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43a0aa5c-0e8f-423f-8c49-4b38d2e87f00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07432ace-464d-4ef9-a228-c9da0b9ac1a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "269ea097-0461-4fea-8f0b-43f20e116c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f85a0f31-60c7-4f66-a0c7-13d6a4b16e0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a3ad41d-8780-4b18-a691-0fc4afc0cf41",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba09650b-bcc7-4bc0-a40d-4a3332f8dded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c2c53f3-4cfa-47be-9f14-6f1dfd6213a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c832bc5-8a8f-4772-ab3b-4f9bba034820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "110378e7-5b19-4d59-b28d-05ad76636c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff440494-1f17-4b98-a87a-7f0e250d0d36",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "916fde7a-b786-4d68-99c5-d68ada130959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7c64172-3431-4f75-b89d-c9e308a6beec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c1e93f-a44b-45db-aa78-860d860fa662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "20572927-1640-46dc-84c5-790b1cb805bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd0011c-03fa-4804-94d7-c4fe7584914f",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd99263-c190-4237-a996-d41927ee5266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70c953c4-51c2-46d6-a1c5-7f4afda47171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c85e2fc-3790-410c-a59f-8eb83df6cf25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b47095d9-f37d-40fa-b056-f0def5eed793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a651db3-12c2-4545-bf29-b66808ad6cf6",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47faa77b-b750-437b-8c23-7b289891949b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90659f69-d7cc-4443-9cba-66621d9d6982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "450d33d6-9771-4de6-99ed-d175f4186e40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "795d2440-3570-4d86-9e85-ef4bf33380cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad0ef615-6e16-4c49-a71f-f9a6a533a1d8",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73563230-2d4a-4065-9c6e-aa6197982721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02698b7d-4a3d-4c57-b9c8-fe8fc870f43c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1e2c2a1-70a2-4b17-9dbe-4147e4566d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "69e4675c-1987-4f9e-bb6a-f80e9dd6f56d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "109b3d02-82f8-43bb-8e9d-9fe727ded74f",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ffa052e-bf28-4dc0-8a35-d9013e7ca967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1601f68-aa9b-4598-a3ef-05320916d5b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e11e065-37a1-4fc8-a846-3b403579146e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6735c269-5deb-4a33-a010-795c25ae8067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43c83b58-3948-4345-b028-e5bcc8b7a195",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2565531e-2636-4e75-8b9b-fa04e80e07ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a8f17d9-9c45-4c56-9536-b6781bdd2c72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caa6dc70-dc28-40cf-a5b0-afc017221784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f0b8dc0-37fc-4548-8cd6-1140abc18c81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c18b0568-ff8e-43af-9e88-c0902db7fb6b",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a396fc-5407-4515-b9ba-2a5168f5a8ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03329926-86f6-46f8-a046-1acf17478aad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7bbd9a5-7c3d-4367-9bf9-386daa3a4aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "244362bc-a7e7-44d0-adfb-3c8308729416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4b33aaa-a9f1-46e6-add8-5ebdfe87cf01",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5b207f4-7530-49fa-84f9-72934b01ec94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc7a05a9-23fd-49f9-bfb9-f2335d2ebe57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a95e45-10f4-44c6-ba5c-fbf3d7ee7601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "09062aef-b533-4879-aa6a-e480209c1cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ed4510e-0927-4a02-8aa8-5d7ee078a567",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4932a18-41ea-4cb5-9d88-6c6a0d4be209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b5bd401-b321-4f4a-ac7f-b52ac4367f2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1b5274a-6a90-4532-8c76-0682dda48d6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3df782b-6d12-4440-b7f2-fe403f79591f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86c556fa-0400-4003-b69c-1fb393180a41",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "406c1fd2-f579-4909-a5ea-be2ebc9cdcfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5424b366-7fd3-4d8a-855d-257cdb4a06ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c7ab894-4de8-401f-a139-02bc8629fe72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f667c51c-5482-4218-a9bd-c4bb37fdd81b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d18d376-7872-4d58-86f0-86e68652d512",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e539caae-ffb4-43e2-8436-23602b106143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d2bb0884-7b01-445b-93e3-9cea83b2552b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ced203b-8866-4947-83a3-e1ea37f4b6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "38532edf-143a-48a5-8400-25ea748fa0ca"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "caf5750f-5f35-4a0c-be50-9145f94d3e2c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8ef4674a-af9c-4242-9cd3-7595123310e2",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab25b57b-9b71-4624-a518-c9ee5405d39e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d1d9d16-f2a0-40ad-8bdb-6fa01b41bdb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a00cb459-4e81-40a2-b862-bc7798d412aa",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc4305a8-f134-472b-8cc9-5dc0dbf3f77b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "43388317-ca0a-44e5-8a63-04157dd07aa6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83d3c982-7d38-41f9-bb5e-9683cc40b30b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4eeca09b-1093-4b5d-b5b0-74745aef04dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d442dbe5-851c-457a-a693-23b883e7b14d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6e263071-1ae9-4e2d-9fd8-15819ef1e948",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "121d2773-9a32-4301-92c6-e2ec42e7a8b8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "160d3e3f-fe0c-417c-ae4a-39605fd23248",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c1302078-e5d6-4035-b4ba-e63f4ce7f024"
                }
              }
            ]
          },
          {
            "id": "a0afdf3f-eb3c-4d41-888e-680d89845ad6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "220770e8-e24b-4e32-9df5-f35da534d4a4",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7945e29d-6c5d-4736-b43f-e25eb2b869c9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a7337e2b-1489-4d0b-86ea-42584582b470"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f38807d9-29f1-4f1e-875d-d680005162d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c290e5f3-ff62-4d6d-9157-b8269c0cc510"
                    }
                  }
                ]
              },
              {
                "id": "58331733-6973-4c6e-b351-fb3d17a1a714",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9e288442-5c38-42f7-999e-2dadf90d195b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "90cec087-5797-46f8-8493-73059df417cf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d9bdc5b-98b7-4e1c-bd4c-b9dbd30d9e58",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cef794da-3076-4660-8ab1-8786d1d19de4"
                    }
                  }
                ]
              },
              {
                "id": "4a6ff9e4-72b2-416a-9172-7cc152574afa",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "53c9f3bf-114b-42e0-ba84-97d1ee5a8e08",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "429e7200-55ef-4669-809e-4c52b97512de"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "07c3ba90-4349-4177-b705-4c68863d7cfb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "728124a4-a440-4f81-a53d-ccd370f057b8"
                    }
                  }
                ]
              },
              {
                "id": "a60ae703-4a28-4ffd-8eba-7b2b6958186d",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "46d77ee7-0bd0-4964-993a-1cc3b123da7c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "50165805-e83d-4c60-a914-376831b39e2e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6ea9f752-46d5-4b9b-bf27-adcbcff2e3d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "52d5e4b7-3ae6-4724-8881-9e7208d9f4f4"
                    }
                  }
                ]
              },
              {
                "id": "40618740-eceb-4721-947c-277f20084e20",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0cb27fc-9c4d-4df0-931f-3e18f1ebf867",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c8155cc2-6900-4e64-8cd9-166b00153f87"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5350efc2-a3c1-4a1b-ae7e-caa8450e101a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d2e4e3d8-5584-40df-be62-f7223842ee39"
                    }
                  }
                ]
              },
              {
                "id": "e9d6525a-8b89-479f-9cdc-3a57a39c128e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "78b15964-2a78-4f52-8369-d04ba58c7c08",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e2ef97dd-14c3-4e21-ab9d-1b3f549c5d7b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4f2e3cf-4a4b-42a3-aaca-046e8027662f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b2f95252-6d8b-4cc9-86e7-c0a224962e3d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c0dac6b3-9374-4503-ba0c-c89cbf4a02c5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "35c029b6-7aae-4fca-bedb-1867d0cb6182"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ab31ffd2-3dfa-43f8-a30e-adc59aeccd6c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3e19b1fe-5cd3-4500-8317-ba7d6aa97b27"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a72a9922-f84f-4f75-9b18-7f2e479ce2bf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "87a9e985-6e7f-4cf4-8e45-e2e0656a60f4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "37f51492-9d3b-45ca-8b68-b504961d413f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5eeb634c-12cf-4aa7-8ed9-8ef13a80e88b"
            }
          }
        ]
      },
      {
        "id": "bd9c3325-1fcd-4ba2-9530-c9418f7ad45c",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e397a2a2-f187-45b3-9291-c11464c0b25a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b6756700-70c1-47db-af03-23214c5e763d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4d542c3a-11d6-42f6-b230-27e7af168559",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "663ca9da-7ac9-4e46-948a-0d100953b255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20af2531-fd10-4528-8c83-14ba410a782e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6283ee6-f8a5-4f65-b744-717335e374e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "545ae2ee-23a6-4b0f-a622-f54be1044823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f6a889-026e-4dfb-bde4-88e404edbf5c",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82357ab1-4b79-44a7-815b-947550d47761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36f27b47-a2da-4d22-805a-a3b0275e27a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de0265c-334e-42ee-b816-117ef8080476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a7b40ee-1da3-4baa-98dd-5433e27d2a50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "125a646b-650b-4713-b433-e865da5b84e9",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d493059a-8539-4826-aa7f-65c85c051bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7bceb26-80bb-42c5-9e49-09d0b52df611"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7edc5d50-9628-45f0-a0e6-26b75e20f731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "80e9c800-f670-4ad7-951b-8fc36bbb83f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "133713a3-296d-421c-b86c-0ad687fb61e8",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e905fbc-283c-4394-9f36-72a9781805e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3787f17e-b2e5-4090-a350-7c96f588c46e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55bee596-fc4b-44ff-a861-de00d82af249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "710d98e0-7b99-4a4b-be27-9839b570d3da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd68083-62ee-4bcc-a9cb-c70d810e0326",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bdf1791-759b-47f8-8832-dffb8b773e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abbf0526-af67-4af0-b266-e1d5b730905d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c267d4-7fbf-48b9-a333-d332f547a606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9181d837-92d1-4fa4-b95d-77fc6c5d8d74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb269b3d-fb59-4ce1-b902-9f1c16b648b2",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d63b8dac-0576-4a0a-927e-9f912a7dd291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "874eb9d7-f951-44d2-9e66-622bbe9fd111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61ebcb48-f657-4f02-a50d-c3b3c5e734e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c681fc3-9979-4a85-9b7c-8f7221bb0d16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5373640-004d-419b-85b5-4de43a577842",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c94c1310-1ca6-4b91-af92-d5c3e0207dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03b70205-8cd0-4ecf-9afa-2689238a9539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82170479-6450-49d7-a974-6d6b8f43fefe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7250c879-6b94-40f2-8a14-228434dd26dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f37c0336-1370-43d0-9c57-136fa2ef0674",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef3b93dc-90bd-4267-b3a1-cab18ca0a711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b37500f-5698-4160-916a-c13016c1aad4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "346c528e-cd46-4c38-8b34-c44dc8473ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b883c5d8-057a-4cd7-b3d0-204d317aa927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fda0bd66-543d-41fa-b314-3f448c36b970",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d0b0df-06c0-4fac-be9a-0a8f921b2eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "146d8434-cb71-49f1-9dce-0b263d9041f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c25da549-653c-4b5c-b0c6-0fa0018d8a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2c482a4-ee75-4665-b9a8-8b3c5eb4fec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d03c7b-635d-4993-8ec9-5f91972a4732",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "891bf9b9-4029-480e-a112-ee1c029b49fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ab3f5e9-4ac0-48eb-95ea-e7302d0018be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43052456-821a-4165-beac-d4f2ed6d3577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "00efba02-6411-4138-80f2-18f9003cd0be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "071ec3d7-b614-4d4c-b2b0-ce0d6cd7090e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e40235c-427e-4e9a-98a3-850258f1ef2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18b7271c-f6b0-48d4-a4b5-5c0c666253e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "670cec58-bc16-48a8-acd9-da0df4f83eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "dadac259-f5e8-4948-acfe-a5f37d386fac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ee4ae5-b733-4179-97c0-93fe8815ebd5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53de7ad9-b0be-41a4-bbfe-3b8d35695ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8295a078-19c7-40d1-bb30-d37af5ba444b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "010a1019-aeae-4e78-bb7d-b25c1646fce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fc9aa3f6-d278-4299-a79e-8cf8b506963e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f11751ff-39ff-41bd-9947-68c73c8b22ff",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a54092f5-cabd-4454-b4bc-b8447c177922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aefd8a95-f34b-4fa3-8a95-3d34e0df6579"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b01a455b-af95-4e72-8cbd-324944ab96c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2aeadd8-2b44-4a1e-a1a2-551876d3f987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a2307da-6d99-40a7-a26f-5a0c5f2191a7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d625c70-0102-4c24-acc8-bc955da885a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ab670c8-2d22-4725-a6b0-47811495c3d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6457d04-be9e-4f37-a555-4298dd920594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "51800a79-ef6d-48d8-a970-826258a42f23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8080d93-83f0-4fcc-a3b9-20beccc02a4d",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d297ef9f-1297-419a-9701-9df9d39b4fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8b6b03c-94b2-4b3c-ae21-215d557bae5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d66261-71b0-4b73-a907-6199917dd9ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3c4af6f-f751-4714-8869-41b06dc47e30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "275d3b9f-b2b0-4d58-bf61-5016b89a18cd",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61b1a0a9-d4a4-4fde-8f44-b128efbfa8d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "248ff4a1-6840-4fb7-85d1-fed9a65c0faf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e394049-7ca3-4e91-9d1e-33a930bc9551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8b590fb-5d0a-4c13-a8bf-bef8b1ef3bfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d37657b-8558-4d22-af4f-6517ca7cac81",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa92587-771e-4d8d-ade9-d54ba56ef106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce7cd2d8-9e40-4ec3-971f-a2e5ebf0fefb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc6eb1ad-8196-49b4-bb07-9d87a0425ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9334912-45aa-48ff-a0c3-f845d90d8743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2897b13c-0a62-4f33-a189-c6dab9446bfc",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ed5639-d9d7-4897-9ba4-3af4e78bafd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "297e17e7-0cbf-436c-bc7b-193f57b73fd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31d68504-aa56-4453-ad8e-af0aa1a446d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3366f044-ef94-41d6-98fd-f3d03600f8e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb991ed3-991e-4232-a2f4-904a4ab89c4b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e06bc9-01ab-4e7e-8b74-f47242a93445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b338a6ba-7b1e-4c8e-a612-7e66ae89d0eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac820d34-d8e8-47ab-abfe-f40f7ee5e870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02bee824-5ee4-4d57-b374-d6214ea48166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "139d53ed-932d-427d-940b-c165c4419b37",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a38d3bee-3169-4f7d-ac01-57de9d4553b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72d0fddd-0d0e-4903-92c9-9eb5c00b0900"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7024d4e-cf77-4169-91fc-fc52beeb7490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84ef9755-1b7a-4da9-853c-a066e42e5b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5242b823-df7e-4bfd-941e-bd054bdc415d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9cc362b-1140-41ae-a6e5-b2753af73275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ab7208e-c5a8-442a-a275-26d75182b822"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "130b70ab-6e5f-4888-b773-20b65c47d1d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e31d26c-1c4e-4ba4-8c42-eded93adbe75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27b9c741-c307-4349-9328-167d1b20d99d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "946be7a8-79f8-4a02-b399-737dcd29c4ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f469f9e3-9515-4e32-83e2-b72d776a536b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f77317b5-70c9-4fb1-81d2-63ff5e5e12c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cff3a40-ee75-4b7d-a3a4-59b046d7fd08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a060d4b4-2dd7-4181-a082-e5977f3fe136",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93b8a3be-b3c9-4581-a694-87f097bf454e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2ba8727-7664-4998-a9b0-1cdd7d7a2aa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66273043-1afc-4355-8c4d-d0b570dd3424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20414005-1f82-46cb-9726-40f1637492a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03abb6bd-1e3b-4d6c-bed0-4dff65de96ac",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "816f44e0-914f-4c56-be8d-b50b38059076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e40c614-9447-4fdb-aa4d-08a98ab760e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c391d339-950b-4bb6-92df-c503307722fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "03e573cd-a2c2-4af6-8c1b-223a5f93c7be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "779346b7-bd58-4c37-ab16-3076ddbbe41f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad369d9e-1165-4769-bf65-480f2003b493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4959442-606d-4932-9ecf-00740f848b49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f00ce54e-89e8-472a-9c95-46603d6dbb25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f62b9423-2ff8-4b09-950b-25984788a112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6316421d-2a42-4a0b-8cfd-206ab42f7d47",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8924f79-2227-4df4-a801-aabd84df63df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f232641-cedb-4e64-97c6-710d6408ac96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fa9039f-8f21-4436-b7c9-e070eeb1cc6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd0b42a3-5bca-466b-8069-634072b74987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7ce109a-72c8-41b1-8d8b-5825432ef55f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7d1f3e-1899-4976-9452-8d7b57a47240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71fa329b-756e-4476-ac19-3f096409fdd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89151c10-58b1-41b3-835d-612e312ceaeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56c7c956-0d6c-4c08-8de5-36d88dc7fd47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0bad639-1e19-4a26-a0c5-322ca62078cc",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e743d74b-fc84-4572-96ff-b0030b9019b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4f409ef-106c-45df-9534-546ad52deaa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9b72b55-1c28-428f-a3ce-5158d4b86c37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce26cab8-6e83-4b25-9034-3da80fb8a441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf378bf2-5b67-49c7-8439-ac748b156135",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da12e70-86c9-4bff-ae3c-838107044be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef230d04-f205-40d7-919e-f206e7f7ce90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9718d9b-260f-4f5e-8d17-42446cc8c10d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66039456-f30f-478f-8f2b-ec62fea52c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "041d7b3c-ec49-4d1c-ba80-d94ec52474e1",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ee3146-6246-453d-a587-26d86ea7722b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28877d15-aacf-482c-977c-5a94308a07b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01753218-3c3b-402c-a578-8a63e7bd9ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6380b9e-f3fc-40c7-b674-bd35178882cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "784f8d29-a745-498c-bf7e-a36d4dff6771",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aba6b9d-1c75-4e7c-b84b-0b0ed93017b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70e4babf-df08-4136-868a-6391bbde43bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa9bc30b-2e06-481a-ba7b-400da328e6e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13fb172f-1fbf-42cd-ab5e-d54549b1a02c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "420bd2fa-5758-409c-84f0-f123bf467314",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a35b3529-2162-41ca-a302-83805dd3da99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cb0a203-806a-4d72-b5b3-42cecd388c72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a21894c-df47-4936-9efe-c976c6235885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43dbc848-4fc8-4707-b358-b4bac18a0eb6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c897898a-c669-49b7-a9d0-4cb8dcd49905",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2723238e-5928-4fc6-b763-250497146371",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "540822ca-d3c7-4b8c-a699-ca7c2761fb76",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6f8647af-62f1-408b-b4fb-db152a35232c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40460286-5dd0-4ef8-94f4-3e178ae2c374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "41b6b18c-0a22-48e6-bf9b-8e16a4891bf1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "988a6800-4f60-4f60-8f2a-4397bdef89c5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7dfe4d93-390d-4bfc-b016-1529f9ff07ca"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "be098d7a-e88a-4fe8-b7fb-adfdcb582646",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee9c48ff-54a1-46e8-9e35-0a74b6a0176a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b386f923-d96b-4e21-ba9c-8437df99d8bd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2495d2f6-a1e6-4462-b2e9-713bfb24254f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "92940d73-6c65-478f-ba08-096c6ff5a8ca",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a2dbf74b-280b-4b5c-aa55-d29bf73470dc"
            }
          }
        ]
      },
      {
        "id": "af4f9cff-75f4-4b34-a532-6edc40c19832",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "43be103e-6187-46b1-a545-f24fef9cdae8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2fb84a78-c9b6-4d00-a125-98f06a482820",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4633ad35-d103-4339-92c9-da0d99fe5e43",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b4beb2-79b0-4d35-9cff-7bec16ee409c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e9ac7a0-a393-4b27-940b-ec0a8aa5fc8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a368f744-448a-4f4a-b1ed-b541b4d19c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e9c235c-d12f-44f4-afb3-e13fafe8a88a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "054b1c4b-add8-4cf1-a463-aaf2d9610097",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "722f1fda-600e-46cb-ae98-729b776f9296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb7443eb-2157-47a5-b97d-0c806bb4c0d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1db91c6-85cb-4701-b524-fccbeeb39ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "79aa6fae-319c-440f-bf5b-8e140dba1d6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c23d421a-82c5-4a1a-be55-69c380c840ab",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cc02eb3-0dd4-42c8-85b1-2a88461cdab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce38dce9-0138-4859-8a11-078377d8a3a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d1ce2c5-9c98-4ce2-87b4-5bc47b3edf06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa876698-075e-49e4-b02a-fe84be2829ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a7d7a3e-4818-4103-b02b-6f1b40183256",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "169f155b-68c3-43f9-ad24-2b8928e0b236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "451c0513-6825-44f2-b145-bbae429330e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ccb894-1aa7-4edd-9409-20e019155cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "76c9b825-874f-42f1-9d0b-8db9b0fae365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a258834-5e99-43b9-9a42-e06e2b2f727b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61a5f71-9666-4627-a1fc-fd9c6e1b4015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a039f362-684d-45f3-bb37-997826da52b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "319d71df-87db-4a39-b987-8c86afeee65a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "26766627-8566-4381-8984-8b6e6701e5e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8de960d7-019d-4c0f-baec-b4dd4db3b95c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e7d0313-3326-41d7-8f7d-b35332ae256e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "327bf5ca-0c68-415e-84c6-7182459b229b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0714038-b351-4ab6-a643-0b943371c30f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a340e5e8-3716-44bb-a487-d92d87d994a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b089785-ec1e-4e57-9469-8e0e8e368d77",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "911f36d3-97f4-415e-88d6-f87af130c47a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5391607-1372-4162-a39a-c437ca2e74f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e88e9c2-afbb-4070-b6b6-089da6990416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "515b1cd4-60a9-4534-961f-15adb1fbcd83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23414e07-d856-435b-9341-185b36e333a7",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b62ea215-3971-43d7-8127-df8d98d06b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df078c69-29da-45da-8ba1-d787ac6fb8aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46570cc2-1550-488d-bec0-67f64c1d57ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3700999-826f-4ec7-b1f4-ea450c7a14bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c15a6892-7348-4e8c-8896-7b3bbc1f5a58",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "532f36ad-372d-465d-818d-21213bdc5f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f7d101a-8ba7-47e7-86b2-e8955cc8b991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b515f90-d872-4a32-aabe-ece47e280923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc186bc7-e3d4-43e1-b67e-d478f684e5ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e6a84de-f5da-435a-a13f-cc7b1658d194",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93ecf6c6-7bf0-4cbb-badb-7b77052bb83a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09a28a8c-b339-4bff-bde1-22756dec852a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "820612fd-55df-4968-9c7e-e6e142d507bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "28ae51da-3804-4765-8492-1cf43086b4b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6f9edd8-8278-4a90-8658-173274e3eb36",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9edf26e-5300-4129-a778-9a8360177b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30ceeb12-c8dc-4cc2-9d9b-03954d7405c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42f9e580-dcb4-446f-9dbb-7adbad76a790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "30a9f8db-f802-414b-9f91-0e9b378d8cff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e492c2-250b-4d45-9d95-815b608b6637",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "655660d8-f1b8-4b76-9185-e39742bf4520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdbf85b0-0c10-4815-83ae-9869f72c9a5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d290b47-0475-4ee9-a041-e2cb3cf418aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ed451439-9aaa-41ca-ba56-62df07040933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c73850d-de74-4e53-83f3-f04cee356b5c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2288dbe-82b3-4d0a-a767-31e43d5cefca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "844bfa94-a327-41d9-b2cd-0618b41c79bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e345afa9-937f-4037-9c1a-11a19faac0b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f96d9ea7-0994-45b3-8d40-aa4a05cc3b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc05b3b-04c1-4ef3-bede-e56840bb895c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53223037-d4fa-46d6-95e1-50abf0eba5ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac0c40b3-846b-4e9c-8d25-c456be98a06f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72cae25c-1613-47fc-a20d-4afa227bca66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c345f3ce-a0e2-4d19-912e-32d802f4cd70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be6cf2a-5060-49c6-9735-92da78f1e95c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "855f9e4d-a7aa-4651-89cf-1a4ac677993a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58c83f4f-70e5-4741-ac8b-3c9b1e6a8bb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be1b5e2b-e553-439b-80e5-c60afb17ab0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b35fdce-45ae-4ad1-9e26-3065cdb618ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "168a8724-34a9-47b8-8dc0-592576576af3",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffce4cd5-5807-4139-a052-96040029de4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "151f9dd6-117e-428f-a727-76a68ea4b35d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96ee3b3a-f1b1-40fb-a3da-f7927a79192b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d6e54c1-11eb-42d4-9237-de6a455c7538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "167a7118-9141-4a79-905b-4b042d60aa61",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db07381f-9719-479e-b85e-50e79ff7b97a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41686ddc-6740-4067-bb34-0a849671b02f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0dcdd4f-4f53-450c-99ba-b09c99e8e603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "5eedb72f-8af3-4aec-af64-e18b231a8399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be773a5f-5fa3-499b-b5e9-1923fe156f90",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f241ac-116f-4a76-bef5-c64224ee7bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "518a1ce8-4d27-4300-882a-48239766df3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55af239f-6bd7-40e7-ae52-21f4349e75d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b077843d-1655-4df0-b3a3-e959bbd578df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf066fa-6cef-46ee-a127-d81041a2fcab",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba465499-6e7a-4491-9634-26adf36b0184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6b8170f-f290-45d8-8a46-4e4c75686886"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5126c8f-6683-4624-aa33-a182de5dbf6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd8465fd-554a-4b87-87da-5953b708a6f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea3e6082-cc0f-4d3c-8ea6-f8e1836b6477",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad93fc94-2bbf-46be-a17a-d9d1944d5f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b03541e3-917f-42ce-9b3e-ebe6b08185df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a22fffbd-4148-47cb-b0fb-f6ef6cb1e46a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7cc4082f-04de-400b-9d42-f8b9e39a149c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c97a97-5ea4-42dc-9f54-bce81ec520a3",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dbe7cf4-d25f-4317-920b-90373645b2be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f376d502-6df1-4252-a834-bf8f6b4edabf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42fff6ae-4386-4fbd-99a7-7443a81657b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31c82454-5bf3-4eae-9377-a8c77f09efb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef3d97a2-95b9-4104-b5b3-95b62508fd47",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcc6039e-e6d6-48f0-99eb-6551875f6691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3df04d5-5c73-42cf-b637-3a9ec7cbd692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cf1ede6-0f02-4869-8624-1bf3b2e1f901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf661fad-4f27-4bce-a4de-43ab0710d62a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0607d78-1c30-492e-a666-4ffb0efba658",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bba7ea2-16b9-4a45-81f3-67c9ebd9fb46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "125473ae-bf20-484e-ac40-06f2675b31b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b13186ad-81c7-417a-b669-9313f30c797c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bddfb8eb-427c-4e2d-8385-4bacafb38f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e38f567b-8ed7-45e3-8ac2-1b7f9743d680",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dbb09cf-cf12-4494-bfbe-dea2b34b1408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caf78d91-fefe-4efe-af01-6ac52e8ffe00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d89ae51-9fea-4826-a1f0-1b1891f586ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c22710c-4106-42ff-bf7c-88e03e07fa0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a8d210-d99a-4ce9-8b1d-44c993c50b70",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd731130-5650-4886-bd2b-de6598855d3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08ae3fca-984c-40a0-897b-e69ba470adee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d607a2a-8b72-4693-b0d8-8d54d9dda840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4db3c74-f359-4939-a9ac-d5cad3da6137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db87b4d-301e-44e2-a12c-a74eac275f20",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c9506d7-4cdb-4d13-98b3-8f68cdcb7dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c40b17c7-2cb0-40de-8680-c2153b46e000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ceb419a-bf36-4088-a099-4a4e0f7d1c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "773ca400-fb45-474b-9fdc-2a02787f06ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03a96b83-5d35-4f64-916c-958fba3e37f2",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b3322d-4dff-42c5-95e7-5a6f7e6fe58b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04135920-3a29-4a57-8216-b8991fa9fb7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11d369c4-0fcf-448a-b294-c0bc30bbdd27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d8a1435-9334-4ba3-9248-09fb835ab303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab01d55f-a68c-4436-919f-e450c1f1e3f0",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37f8bf93-cf24-4361-a2b4-a0f3fd2dc61f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c63f22e-e70f-47a1-8e92-ce50206ef2a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2954acb3-bd7a-4322-9a12-c7c7942e17b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fed9d88-6216-4f00-bb46-edae9bd7fbdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a83a42e-0986-4ed3-96ce-cab3ca2ede1e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c97851-7d9a-450f-bd35-5f866d86e6c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bee263b-1620-4c98-b41e-388c895fbed3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af5f25d4-3391-42ea-87b7-20c7de4ad0a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9072a35-7f0a-4fa5-830b-72052292d0a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "456bac8b-a129-49db-8db8-eed1959fce55",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce3f508-aa1e-4fac-a465-d32c51de53ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4d138e3-106a-4283-ae5a-fd15b16f2225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3509746e-3b5a-4bc0-815c-0bb1c613eba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78661092-48f4-41c4-9093-d3a0dfb1bfef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e882a8a-e281-43e5-9f54-f63cdfc8c239",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c0c955e-1e57-4620-947b-b5dc8a714a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94f402aa-f402-441e-99db-ce2c7c31fbac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56e63b69-1152-41d0-b0c6-86e8b0fac159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39338165-9ddf-4563-ad5d-6cf4460fa40f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e253ad9-2961-4948-8912-382e6055e0cf",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "107f4851-5c3a-4f92-9eff-9e76b51b8cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "744db7ac-e4d6-4b03-902a-ce375664e936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa48fe2-17b5-4432-b598-d608dd69b7a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad394f0e-8bee-4fae-b7bb-6ff9d3f84914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fab7e8b1-77af-4b50-a5e7-2ece1bbb9066",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f39fede0-2432-45f5-b8f2-af930b57fcac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "543dc698-e322-454c-8d83-b42f58fc6948"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1c28196-22f7-4a0c-b8c0-3b3eb0f9a9b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5653dc02-9e16-4f31-85b4-45054059d132"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c467fdc-4eb1-43df-aa10-2d0646bf7630",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b8ca1a-c5ba-4777-ac96-b96779f84f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1737e105-9252-417c-bb64-8062121134c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046e04a0-2d3c-4c13-980c-e4a5d9cf3a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cab7a64a-43ff-4915-8929-c0dc61fcdb47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc3a3de-8de2-4ffd-86b5-753ee5e29c0c",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a99d01c5-b6c9-4c4d-aa1f-1ef1d3170533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe3554bd-714c-4816-b236-0cf1a57a2a6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5015d79-65fb-4090-ac15-26e0063e0f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4dd4f43e-7a56-43f1-9d2f-2899645b2d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a76ce3-be3e-4202-ac9c-02132184bb38",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb6d615-b733-4ea0-8b81-a8610ff0a3ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "723f03a7-1102-4eba-8652-4a5b26d02256"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de0e007a-1cc3-4cd4-bb3a-64e13a7b4e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "badf0ae3-2a1d-4e4e-8167-7f077f292833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2098e1fc-72f8-4f34-b499-3da0fac9e07b",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc2a200-7779-4bf1-93c8-d3e0d47992bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b585c961-8097-4b76-a979-e8fff78437db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d03263d8-057b-46da-a149-30965d4a74dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2285d26-ae8f-4a6b-b871-f84c40ff6dda"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8e1ce651-6a7a-4de3-8e6a-835d9f40f2be",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2dc69def-0a40-4b8e-b416-7819197670d3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec7a310-c020-42a8-8de5-f312027580ba",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "bd76c4f4-24e6-46a0-83d2-32ae67d5efba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e33151b-f2b4-46f7-9dc6-a9337aa96c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2fbf5ef8-4d98-4832-8447-896d0ea9cc71"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63cfa097-6076-49dc-85e4-1c91b9597cf6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f79e4a48-0e06-4778-9c98-83492d2b1b50"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ff6fd33e-f1a6-4c79-9a2c-04e4711927e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c5b13ee-ca8f-46ed-bdaf-81711322cda0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dc8618ca-be0c-4417-b51d-66c9770c7b24",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "157544cc-3e92-4d66-8cb9-63d78902c6db"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fa752d79-79e5-4ebb-8e06-7f70a987c8cb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b1a50f1c-3f95-4f2b-9c49-a9ffc65ef44c"
            }
          }
        ]
      },
      {
        "id": "035166f8-8920-4376-b506-d0198f716670",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "7abe2378-f74a-40bf-a807-5e3844673e74",
            "name": "Negative Testing",
            "item": [
              {
                "id": "77b253d7-f7a9-450d-9b9e-43bed74067ee",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dd8baead-b552-497c-aefb-8c5aba61de11",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29181539-fabb-48be-86f7-94944964f2f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ba2148f-d819-4a25-bbdc-8f4a623347e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f23596b2-ace7-40dd-b6f0-3b7f7660dfbb",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c11bac3-6838-4901-a060-0680cc8d5bb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c43d936-c182-4c48-acdc-cfb3aa3636c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63fe7d7f-46d3-4d10-94dc-4f4879c6455e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b3bdb3c-66fe-465b-83d1-1a882f7767aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c89f932-e222-4bb5-8ee4-e37033cb77e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dacf56c4-655e-4f7a-bf91-20e253927818",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42363db7-324a-481e-b59f-f4757a0592c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "652c40a7-cd93-4624-8cbe-7c6911c261dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "520c81e3-883f-4474-9c8e-73b4a4805473",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18172713-e7aa-4df7-85d2-329bf92c6705",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e799e49d-cb17-4246-824c-954a0c3e0dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecc53dd0-b231-4918-9f83-d4c0d9ad498a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41881cde-bd42-40c5-8f8d-7c1410648c3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d336b58-5428-49f2-87cf-0eae054af900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d32ce2-f57a-4ecf-b899-715926006891",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b5a22ed-05b3-4804-a5d3-4e76b15ab550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bd433e3-7b08-49da-8577-fb4ccef6b727"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da3200e-440a-4d0b-80ec-86fb18658988",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ca2c594-e195-43ed-b7bf-5a69261a0d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caea5f8b-63a1-4648-8b7e-e328b3c5705c",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72d4888a-6e20-4fb3-9374-023b5c25fb2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41ab18c5-78df-4acc-baae-d72d6cf7a682"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb3461b1-3eb6-451a-b486-6e5d4c8a115e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "709ac6ec-f1f0-420c-b8af-a6cc34fee17c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7300f9c-57c4-448b-9ea0-f596a3c24307",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b554824a-c55f-42b1-9707-e38e587d90cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6fc259e-237c-497a-a598-67f0dfb3252a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abdf6aa6-9fde-4006-86bf-524d25f8c7c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10622965-339f-4985-8e8b-de2a0232722c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6687715a-4b55-48bf-8c4a-0ba02287027e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "368297ca-25cc-4b04-a48a-5d038c725f79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ea5fc9e-2b33-4a8d-bf67-69639096ad73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bc22399-4c35-44d4-b05f-ac37ea9b00e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9013e158-534f-4212-b53f-204a9554629e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9f1005e-42e7-4e2f-9214-902efbbb3133",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44b39a56-6656-4f43-ada9-9229133e5757",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64c8b383-7d39-48dc-a115-90fcb4861aa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f9d133c-6831-4df4-a21e-ec95ace95bbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22bb324f-ad9f-4f44-869a-55d4b72edaa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aedb7685-c5d9-42b0-8ce9-1afc8dd2ddef",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19754517-445b-43fe-9911-da85774e2db0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f90ab71c-e9f0-4e2e-89a4-6c1cf5fbf7d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e849607f-d338-4086-8788-2712c933d7ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ffafd83-6f2c-4c1b-ab34-32fd43118f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddd096d2-d747-4698-bb80-522044f79e0c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac295b3-3300-4848-b40e-143b6acbe4dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e448b231-06f4-4805-b6f1-35ec778a0436"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3862331-b38c-4dc0-a714-4b788a7821a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ffda175-8a7f-47ee-8159-780149bcf252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8e6855a-ffd5-4765-857c-541610e195fa",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbca9a91-7e13-464a-8927-086c1616305c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b32cd0a-7212-40c8-8073-6d7e56003285"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b26c9c3-26b6-4143-9874-2f1a175ce227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4492ad5-d46a-4507-8aa6-8a1780859557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24ed8586-6bd8-4c7c-96c5-606838086ff2",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51528d81-6ecd-4ed2-96ef-41bb74cae0a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1ef0871-253b-4ff6-8b83-aa91535a142c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c0fc9c-4586-4e3f-b2a7-c3fd442bb930",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8963a75-b4e1-4ed3-ad32-4dd536634337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8487ca58-ee07-4934-ba08-0591154259ba",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef5a56b7-aed9-4d4e-b10e-9193c66ef589",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc9c00eb-a4a9-4bf2-8cf5-0f4e49edb3da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54515a13-dbba-4e2c-bc01-4b6c88a756a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4c0acc0-cf69-4677-bff5-08b63229f591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46f2783f-b698-41d8-a328-cfccb18e6639",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e6a8903-0980-42d9-8f30-bc5995ff0cf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b949ed47-a6c3-4bf7-b6d9-1e375f69dc1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3dd7911-b212-438e-be23-5a6bd8dbca36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94cc9948-3f64-4e4b-9fe3-653cb1f9f796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf76ff5c-50af-47b2-86c4-480ec903295d",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a367fa-c0f7-44d0-8a4a-f24e51a39da9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f16ac07a-e71f-42c9-8d97-3f00b9a3546d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d866d9c8-ece1-47d6-8ba0-a252ef8cd478",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a47d6d7c-3499-4c45-b6b5-138bc5fcb915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7150d5db-ca02-429e-8aa1-83b5451e539c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5cc9c01-c7bd-45df-83fa-9117cde3425d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f54042fc-9cea-419a-baf4-a63dc038b44e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a2a8691-effe-401b-b614-304fb8bba575",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57121296-c98b-4dff-8e56-2e96ac0c8fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a3242d4-1c0a-4dce-aecb-2b29d3e9e2a1",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af497e6d-2c82-4959-ba02-12d838bd8955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bd04110-eccd-4972-9783-4adf95cfbd5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "699e3632-e37e-421b-b090-c41ead47a1e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c19e7e57-17fb-48d8-99a5-14f520602ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d2e5a84-8d17-4e1d-8cec-441e7bf87ecb",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c5ac47-4a39-4f2c-8c8b-5c2fc7b1d103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd48236a-3227-40d9-a982-35b75436a006"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f170836-4b27-4130-a46e-a22112d09648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78932636-8bda-4d8d-b2a8-0062b09b694b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b03a1ad-f012-4be0-bc39-141ee3a689f0",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df4fce2-9d43-4b72-bc10-771fe96b2f2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0f59f4f-8e42-4106-9599-3e9fe9c6804b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7059b00-f69c-4590-9836-0480d5a67e00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cde54f15-330a-4171-b35f-b9b28cce3d37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c27cc51d-aab6-4fee-9ebe-0b4a999f073c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8fb21f2-0430-48bb-bd9f-d3fe5ece24fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e47234b-12eb-4427-a8c7-24cb0f1a11c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfcb366b-6402-40c3-a5ef-534aa143355a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f72acbd9-05fb-4cad-8544-22b9d29809f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3301658c-37cd-4151-ae5b-66d6d44153d7",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d659455-f524-4c13-a333-13b1dc8d04ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8860cb9-8082-4295-881e-320440dbce8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eccd7436-1ae8-4a7c-bac7-54174d26ae52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c361ff77-8cd0-4151-9648-f325ad98813c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25c0740e-b563-4ac8-b56f-dc7272bf3fa4",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "124d4432-b1e5-4a5b-adf8-ca9511552a46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d78c8ac3-198d-4155-bed4-854f1f91dba5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05769913-20f5-4174-b6b1-5af647c57da7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "165da722-7285-4824-8a6a-4d2026cf4f6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be19539-860c-4e79-8faf-f085daf3a8ba",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ade7f96-edb9-4e95-bfac-a67a527d72ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69afd173-99a5-4001-9e05-c50b95b4880d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c436d67-179b-419d-bcc7-ed2df7fbb3a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d857368-d3a5-4bdc-b25a-d76509385c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c079ee25-def7-4038-bef5-984e150e99e2",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53c62bc1-f9d9-4174-883f-4c327ee80d33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ab5a550-b880-4edb-9561-e0ea672f2470"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c269538c-0a79-4af3-ac98-8c4556878f84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff61929b-cf0b-422f-a651-1bb4b73dc317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39a4322d-74fa-4bd2-b780-e54661ed918f",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9534fb71-983e-42ab-a125-8c95565e8f95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bb11928-1d64-408b-a99c-5a7da94cd838"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0a6a4a9-64dc-4dce-acbb-dba6ae312651",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66ca3c6b-9b24-415f-a6ba-918abbdfb053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73fc019e-055c-4990-b129-f470f991a257",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ff95c8c-7515-4370-8547-c83468d71bdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c45ada3-ed43-4288-ae2e-193e994d983e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1ed69b-4711-474a-a6bb-5b78d64bf69f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd2ef164-813d-43d4-a489-0de6f5675a47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5168b0c2-b51f-4660-8c6f-18273c24bd9d",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d895e0ee-0a3c-4046-b688-1e1b0875938b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4441dac2-ec29-41f9-912b-feb3f4a58729"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da8b2775-b58e-46ea-a950-60c8d207c23f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13c30b6a-8f37-444a-8a4c-d37c5a9ce3e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "035555e5-db33-4e05-86f7-e4e6008a9881",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81869f87-e333-4e35-8266-e1906b455cf1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "068f2c9b-a26a-4844-be8e-9733d5169603"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "997c9f64-04cd-43b8-95e6-00c96ceb0c6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e846ad29-4593-4c4e-8a6a-c448ccf4efd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a02d54ee-5b19-4e46-a559-153d652c1fc4",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae2d1e5-10b4-435f-bf7a-ceec23e1d189",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2f68dc7-3e70-4555-aa35-7f6a10560a85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "789934d5-9113-4f64-abf2-9a2ff7595ed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6d2fddb-25ca-45f3-bab4-b33ed35398fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01c7f647-52c6-474a-acd8-2b2677fe7275",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d5be4e9-8c8b-4fe2-9c28-5da74152c8e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8d65006-b84e-4c49-8e18-7fa0da1792ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "557af870-d6f2-4098-a2d2-a9dd74dcc426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "785a6cc6-3ad6-498c-b3f0-10b9d303d936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c447e99e-a70d-49b7-a24e-5b3077f2aa3b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "624db200-4811-4ece-bacc-35b14343f463",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1eab1f10-6cb5-40ce-beb7-9abbd6b50064"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c23b4f4-e8d1-45fa-9db5-9ff37626be75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fa09f14-79d8-4317-ba66-8aeeea067127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac1fc38-6c9f-4093-b747-b74391d1d8fa",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4564e3c-732d-47eb-993e-2778777636a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5c52c15-fceb-4d32-b5ed-a72c304e79c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "787d9cfd-b651-492f-8071-a01ea02241b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1946531f-49f8-4e42-bf3b-1bec27a8c707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88d0e611-9d0c-4d88-bf8e-c0bf68eb6bb4",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6318c3e8-e0f9-46d8-907a-46864980ab95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32fc9bdb-266f-49e7-aad6-146be163b993"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56ad2e79-ad84-4aa0-a208-bad920826770",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36f84e68-90b2-4c56-9ee0-02437c99eaf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a064661b-2e5b-464f-93c6-0c3ff2f39129",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b332c3e-8756-40d7-9761-1c4dce1085dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41a0064a-fe24-4b02-8700-99550955b7f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b388d907-0220-4ec4-9f1c-99448e66ebfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "638ff4b9-ad67-43b4-8a1a-7a3efd8ff5b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7fe35a8-be81-4363-888f-9fbf52019438",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45c4b6f4-45c4-4e80-adcc-39b2b5c03975",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e28eb20b-b500-4f0f-b035-c1ab01fe47ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e255ce-fb57-4430-bcef-e8f12d2bbd81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e37f8188-3683-4908-8073-2a4d2f86c5eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eebc56a7-c827-4e87-b4e0-3553e95c6814",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0910d4d2-fb70-4ca3-bcc0-8726fde26353",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1949dad9-6504-44a1-94c5-aa6b6a0f1b4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85aac20b-eed7-4a9b-aa12-16c2ad4ef62b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d27fe62f-40cd-482d-8b12-7c6c8666d950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad84729-af00-4e94-a459-0a4d47f7ae59",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "175498a9-3abd-4c76-9f28-f80372f6d07f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "721c1aa7-1fd6-41c1-8b64-e95446914a13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f327831e-5f6b-418b-9c9f-4d17dee6de9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eb55d9e-f215-4e86-a1e8-b33589610747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dd553ed-3950-4f60-ae70-4d338bb2e83a",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "505e5581-9a5a-4eb9-9b4c-9d7df932b162",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "432a8b43-5149-4fbb-9ddc-e59ad563bf8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ea5385-2686-4c2b-ac68-7dafee8e92aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0dec05f-dcfb-4dea-a542-ca605fe1ee26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a97bfa8-ad99-4417-92fc-c392b4024fd1",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db4dd633-83cd-45ad-9595-0462e86c0df7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75c54d00-54bf-47ef-9c96-94d5e9631b74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95808645-183a-4f0c-b25c-e6edde0db9aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f07f9891-7dfe-4976-b636-d808e88bac73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4472866e-4f33-4b30-83b0-0e410a41b0ab",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d225dec-27f6-4273-a05f-f0cf90688ec9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ccddb38-da41-4640-a13e-8429c7200fec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eb3abb1-c305-44e4-b566-d6b6a367c0e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de1984b3-be7d-4dae-93a3-31c3a839fe2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "208d5fa2-5dcf-4204-9f18-cb1dbe4d1b3c",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43a7f344-e1c3-4781-8bd5-4b485dd6b152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "918853cf-5d74-49e4-a716-2964c78d0fe3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f19ca9f-1632-4917-871f-ed15b6b97f53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac9df7e5-6949-440c-9564-d832811a1128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a37ddf55-4b63-4e69-8300-df54f1448632",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "611081f5-d960-41d1-837c-66938c4d4959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f166621e-81aa-4e2d-9317-506e6f80be22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd2468f-7909-46bf-baec-2376723d5b90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76c9ca54-063c-46df-a50f-4df34eab2ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2788a7dd-14aa-4089-ae73-a1c5ef0233ae",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b14a1dc-8ce1-42ed-909a-3da2947b6d44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e1fdb39-347b-42c4-bf62-1263368e8e6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f24f6369-3070-4095-9dfc-c565c771e3b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8f31746-6e24-482f-9038-d1c9908e9f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "861a2205-daa5-4e51-b4e9-170b4b75f8f9",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97811274-77f1-4745-b321-a51b95f55698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b29abca0-f777-467c-b923-b0e9352e8728"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4156df92-176c-44f0-b5e6-031b5a66d49f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f018e70-6130-4258-95a3-3efd161f59d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b9e77d0-5872-44f0-9bad-0d76b3050cfa",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10eaeb12-a3ad-4a1c-861f-191f2628a15b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbae9822-8868-4db4-af20-3482575eb94a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7436c7-6ed5-4c99-97f0-c4acedf4debb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fccab42-a906-476f-a017-52e795f04831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f1c5a4b-b3a8-40fc-ad1d-09dc1ec482b3",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "386ad8a9-55cd-4470-9c96-a120c96f6a83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e20c071-a72d-471e-b172-60299d6516ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c785814-0ba6-4e12-b94d-beb52ef41b24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa52617b-e95e-433f-9d39-60aad659f825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "438b32c6-ab10-416e-967f-c29c9e545436",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "505a1221-865c-4629-9f63-98903d25374c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8763800d-6987-424a-b7d7-f23cd7bf2e47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ed0753-cf62-4834-b6ee-200a5d8311ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e24136dd-c5a8-44d0-96d7-10bcb4a555c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ea186a1-4f63-4561-bf4c-ebaaa259d2f1",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8de496cc-3e92-40d2-a55e-69a40f805b8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de7cbc52-3352-4591-85e4-9985b7fcade8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7006dd9-9d52-47c6-aa28-7cf520fe2865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35405d60-c159-47fa-97bd-64db17389914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d9893f-2613-4d94-af19-dc04c70653a1",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc7ff4a-4566-439e-a601-dcc685b51843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "569bba92-fa9d-426f-87e7-73d400641d15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e037ea10-128f-403a-8ba1-492cef0f6afd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ba00591-7ad8-42d1-9b55-f417fde1413b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac9b318-9f00-403c-972a-797ed4e19b2b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "696de77f-4f5e-4c32-baac-7d6d57cc003c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55e049c4-1ca8-4068-8967-510430693736"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e75b0294-f6a3-430b-a809-675fa75b1afc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "179494cc-d719-48e9-b3ca-4fee4239870f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdfdd5c9-52bf-493b-b7ef-1ceb259c1a59",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f7f461-5354-4f02-b59f-859bf4b74805",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec662b47-0d4c-4c94-b085-af1b5e8448dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d737d69-aae8-45b7-adfa-374508784a9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d723b29a-3d2d-4072-8b79-4ea2178c9094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ab5fb5-2884-4e2b-8553-bf8bdd17b486",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a641c85c-0530-47c8-8fc8-663c5a08538a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cbc9b97-40da-49b1-a597-77fe53daa624"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30097610-d627-4ac0-82a0-672c97429f87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38f64527-ff65-4afb-861c-999a4309409e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0963d649-dbcb-46d6-963a-4c9a29b732d7",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410344f0-051a-47cc-931f-b1df66c9d0a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bc75bd6-265c-4551-8f5b-12ba6072a9d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6596d35-4541-46d0-82e3-390b65dc60cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a747c1e-bab4-498b-9c0e-3808f8e583b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fefbaa9a-8bc9-4404-a128-6357f40a48f9",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f84a2096-0079-4dea-86db-5bb709d86671",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe1507c6-7304-4f62-aa14-400e265ef969"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "636c2181-64ff-4c1e-8673-d27b1aa39e51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "271fef60-cbc8-457a-985c-62e2e02ee9dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d8e0483-7a59-477b-a796-6000bf4c8a3f",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e32f6685-7307-4b0e-afc2-e97674e03729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c601d602-4e88-472f-9c13-993b1c4feb7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e26b914e-6512-4802-b245-efe2d5b1a9ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cc97ab8-0bb4-49d0-bd14-6b831ada97bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a831fe52-db19-43c2-a978-75dd91d21ec2",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "090f1aad-1c9f-466e-b1b0-c3e8ef1b84db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3f60a3e-de80-46aa-a4f5-1ddafb167590"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87b96b35-6396-420a-8f41-d2685e4559e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c62b0ed5-4e73-46af-9c32-202249d71664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "768516b9-2af0-4271-92a3-f7c88adad37f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13086826-8edd-4a9b-a8f7-fa7d3d2a050a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "308c56b2-a720-4f9e-b978-61c5d7dc4368"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e33a361-b78a-4d0c-b798-4c7da8e4b6e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b94224d6-56d9-417c-85e2-ed6bd609ee27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09de0173-e59f-4aea-92b7-efebd4d14c76",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87cef34f-6357-40c8-8c66-96ac5d01fd9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "182f7594-2ef1-4798-a86b-60d3cf5d69c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "170a8d97-37cf-48fd-8325-9a4211ec5a0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d50f0606-7e66-435e-b49a-27bf642fa3f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "666c2a58-9ebc-4967-98d0-91f792017ae5",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def309c2-5362-4792-a4ba-3c0d0b98393f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c97d5463-8bd6-4d41-a89c-863294ff2839"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c7122c-f1ad-4c4d-bfd3-22e5db70c7ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e9b478e-8c5f-47ad-a595-f5aff705a747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93bd7c76-e00e-4eec-beeb-bde6dc552768",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70056a3a-5d4d-4c96-a5e7-64b8930367ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f0cd744-d703-47b4-8105-a4ebfc6c28b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c0b8c9-81db-4fff-a70b-475be2f2b604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe3518c1-7617-466b-9a12-6880accb8775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95ed24d2-75ef-4c5f-a6e6-445153373b67",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2726eeae-0693-4454-bdb4-7a03d73abc0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78c3d401-0913-4b48-abdc-771dbc3a8a87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "670c98c6-9305-45d2-b660-b6f89e2fa91f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb2a7982-8a22-4963-b49b-01e8af5b2590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86c23257-6c57-4dea-b7c9-b50f1abdcc5c",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f9c2d36-116b-48c1-95e1-7aea9001abad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1fb76bc-4170-4294-9704-d0e1806bd154"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b013135-40d9-46ae-a7ca-fb1e77bcb797",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9644f58-ce42-4545-8ce2-d53f6dc68676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa4af34-bc77-435e-9fcb-164349761ffe",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a00942-43f3-44f3-9b36-30599e559cdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0b505e2-cb5f-4c26-9d15-22701fc8549b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaa29ebd-9b2b-4877-b55c-ae58969f5451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54e4aa91-83ea-46ae-bee3-623d6f5e6d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "902d7d68-a80e-4dbc-a42c-291af6220e9b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c661c52e-b0b3-4536-8938-923d52062212",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "568a19ef-fb4c-4f07-bd01-76990bf4fd2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0584610e-3462-4088-ab7f-94301a12eb49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6700f28a-f5ac-4478-b25b-1acf12ada265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "683298fa-cbee-473a-8faf-3d83af1464dc",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9e514b4-b2d8-4c86-8aac-7674c555ceca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7530b543-fb1e-4cf5-8b97-e60960377b6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95721412-8cde-4aaa-aec9-04785ffc752c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1eaf714-2035-4344-b0a4-19b1e084219a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9573013a-7d1e-4aba-a06d-326f50d1e31a",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff448573-4f80-41cd-953d-441cb2e0bc86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fafa172-0269-403f-8b72-c85e7e9b9085"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b91a7508-332b-4bd3-9858-a0e95b91d44e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf168c83-d738-4228-ab53-60899fff5b7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b70d6b33-eb51-4d7d-9328-a31fb73207bc",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12ce68a2-4515-4265-b1f1-b506a5404979",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bcb39d8-d38f-4f7a-86b4-7f964cab370d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a5d1384-21f4-405c-a460-583d55b497ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82790393-d24d-455e-82f7-318e483fcf68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fb17356-d695-4b9e-b42d-dbadf8bb396e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb92ad7-a1a2-41b3-aaef-aa5cd6f2a8f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1df11297-19ac-4129-a677-961d4d046fe1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a13cbc9-b79d-4863-90e7-a7e94d045437",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2afa39f1-56c9-4e6e-90f2-b281507bd1b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89aa6e28-fe95-43ef-861e-5c5eece6fde8",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a9e9b8-2ab3-429e-9696-03792a9630d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ed79dd0-93bd-4deb-944b-85a1151f4fc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9d8b03-c73d-496e-a7e0-e5cf816f0980",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcca7f24-d99a-49fa-be08-0f068572d92d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d1c45e-4d51-4a45-a0c1-6eefe7251d50",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fae1b7cd-75c4-417c-a404-8cc803a15794",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64c0aac9-dcd0-4370-9dbf-f6a42ef323f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ad37dfb-9a6b-4697-ae49-bedf8c91c616",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca913a57-b865-4e22-8c90-e7cee2ecb095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8704114a-0694-4b54-8137-15630d5315de",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7593b67e-41ae-4be1-a1a9-011b31a345bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4dcb33d0-40b6-4032-ab74-a2ca21ce2497"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ccdc2c4-a014-471a-be80-4e2762db62b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84989feb-d10f-489c-a311-b37ce73131f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b95b2ba7-ba7d-4b70-838f-90cd2fea9ee6",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6757e01-9084-4a5a-a86e-cd226251fa5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "788c8d6d-a77e-4d28-8c1e-0fb1ac6a8a5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8116dbf6-2081-46f7-b01b-858eba23788b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c91fdb9b-921e-4e87-9143-6270033de4ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad23f077-585d-4c37-b56c-08c762b53eb7",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f325cf82-5833-4921-946f-22df6f0cc3ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d78ce34b-a587-4058-8bf2-026a421e3997"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3f764d5-391b-438f-ac12-3bcb4b17ac1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86f8befe-95bb-45a0-9977-6d99040040c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e08a56-32cf-4c29-b44a-b730de05fc2b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a978c9ce-5662-4ecb-8aa2-4481ed4b58ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ab0eab3-ca63-4da6-beec-8301f6ff17f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf8ee5c-4f64-4cba-b527-050d960adf51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cf859f7-cbc7-476b-8a5a-c8d897008210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b503f8-b385-4b7d-b743-d92b01a40a62",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a25f08-50f3-46ac-9147-78be8a83edd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6b08c5e-9ec5-4301-9809-ff7af112ab3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cbab7a4-8f6d-402f-be13-968d0ab807fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a65d3995-18b1-4a31-9896-d84ec44cf68a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64a7bca9-1cb5-4449-88c5-8df4269f44da",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85c8687e-adef-4e01-a06f-478528b361d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c238c281-2533-4413-996a-9bed7db63e7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bbd6096-fdc2-41e3-afdf-46671563fec8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1ebf8ee-7348-4145-bf8f-d9660c71d01b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3499dca-3fcc-4a95-80bc-27c6a432b805",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df3343ee-fa25-4549-80a6-5fb1dbb90d99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11b9f48b-9b63-48ce-b35c-c2006601fb4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f342061d-1f80-4932-b2a1-664df004f328",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e349d66-eb68-4da4-b2f4-a01cdfb958b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ede8e29-40cd-4ed5-88b6-9588e239381c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8cf918f-8169-4832-bbe7-a06e3f5c5707",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87f19247-cf10-4fa2-a962-a7da3c99cf00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f90aee4-bd7e-4b61-9043-4c12cde61f1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4a38185-8e20-446f-b8a4-b5adab07b236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "accc2988-d3ed-4417-b93c-5595a0eb7c11",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4040f56d-dd31-44a9-8bc8-97b8e153c642",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f612aa9b-4ea7-4fb3-bc3d-acd3430d811b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e41d3d00-c0a5-455a-a321-6f333375aad7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cc21871-4d34-40d1-b3e3-33305f6c48ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "806312da-258e-4d3c-97b3-b9776ccc58bf",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef578fc-36fa-4cb5-b835-c4343bf6d0e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1124e677-00ed-404e-8b7c-b6ff1b5e6e05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3321331b-d866-431a-a1ca-77d6cf4718d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b20d2ba7-9b4f-41d2-8ce6-dca99ec553fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2786b6c0-915c-40fa-a44a-8b5f35786046",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b5e791c-362d-4e94-9148-eb19d43c5ec2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa3cb099-8356-4b52-b96b-3574773f13ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccfb62a9-0d25-4799-9f0e-68359568a339",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a93b4162-fa22-486f-b47e-bb2487b618e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff66a015-6cc5-4468-8d55-3d5293607044",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b47ed797-5e4d-49ed-8323-e2d9e2070edc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a270f0f-6eaa-4c91-9d96-d2ab1ad2cffd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5617d9f7-6ff7-435a-9530-893745d7338b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5459f4c3-fab4-44f6-acd9-a8f89fafe11d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04ca829c-695e-4496-92f9-84093896f802",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2f99499-6056-4fec-9840-73a828b44608",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6311ba20-97f4-4ad9-bd3e-225ad8652129"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9c4bc3b-ecec-46bf-b2fd-ffce206ddac3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0527d2b7-7a0b-4067-92de-8c2fcd856019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd298df6-ef66-42ca-92ec-da56d76cc444",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8cb0f67-85f8-4c22-8693-6e8f83763654",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "842e99e3-9c4e-498c-99ac-b5553eb5f2e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8857a5f5-f416-46da-b569-a40fcb0f9e7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "680b3c0b-fa56-4bb0-94fa-406be05ea3bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "872821ec-5786-4bb7-b3d1-ff8bd24a1f4e",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d79f73a5-70a2-42a3-a5da-92ee0d6e2d0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ee49342-3faf-4cb2-b2c3-bfd8f7fd3efa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc0030f8-1fe8-46fc-8c1a-c488612fe946",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e801ef4a-5b7b-4d70-90ea-7c4b11cc5b83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "702ce826-2ecc-4096-962a-d72d59ebed8e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb44f7c3-2018-4414-bf2c-9e884cb66f5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "309ebeac-5d57-4b88-b9bf-c787de27989d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e989fd0-98d0-4ae2-9e71-2dd53e847810",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ffb288c-ddc4-4edf-9607-b300880e4da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e78b4bf6-9210-485a-9040-9d7a4abd9475",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c030197d-2b48-4def-8877-028265362605",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d179be43-0eda-4db2-a53f-29b409ffe8b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be97e541-9624-49b8-8658-8f7632c20109",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60cb4c67-66e5-45df-a235-da30e6ae1023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ca5067f-84d6-41d8-ab44-b1296a773587",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39deef1c-c147-4449-8cc2-6d9aff98015a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f256bbaa-a0b7-4d92-8076-4df21349458a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae2b4f9-dba4-4dd7-8ee1-65f7dfeb7a13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c79bc5e2-d3f9-4aa6-8650-1b799f31fafb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e78dff23-267e-49fe-98a2-fa7b06baf5bc",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b30310f6-0d4b-4d04-91f0-8e92bc31d43c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7d747ab-d356-4eb3-9b58-308a3c27c485"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "055a0640-575d-49e6-82ad-aa9ca0ab53ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b88afe17-a941-4883-ad17-5cf042d73f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9a2409a-5101-447c-bab8-92af22fae06c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31de94dd-019e-40f3-9e06-cf9ce92794cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60ffe026-cf7d-4002-ac5d-37efccb6eae2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c82c1b03-b95b-4919-acfb-28c61a5776d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01346b64-84ad-421c-a16a-2e38563c14bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf39e65-2c41-4506-b4b1-85b11e50e964",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e224967-491d-489b-989b-d9a9a8725314",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe41dd17-cb9d-4ed8-9079-33919d65745d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7389c90f-980e-4e3d-8a35-245fa0570670",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96457f30-78c6-4b3e-b5ab-9105ed2f0829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "957d8a75-e083-4ce8-879f-f3741343ca06",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d739beed-c3fb-44a2-876d-e447b3cecb2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a13911e0-2a0b-488e-9678-f151c9ca679f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ade6a9-20ba-4118-ac5a-fe2962fc5545",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d62f782-88ec-45b8-b93c-135140fa4066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d8337b1-b2b4-446d-859a-7f12b15600cc",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb3742f9-db46-4cb8-9a8a-9550818ab175",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2537159-7eba-4d5e-bebe-c99ba761e651"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "350cb6f9-57a1-4f57-b020-0417b9e4a188",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f46f87d3-d661-45b9-be96-28e6c401dbbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3ab32f8-a1f1-4088-aae7-3dc394cfeac4",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd788f1-6e3c-47f2-9a26-ccba43672347",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c02516f0-22ea-499a-bf4c-711979afcbc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e38c7a5-b86f-495a-873b-d3707107decc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66f02dbc-9f83-4e6b-b18f-e53540fd4aa8"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "529fa013-0291-44cc-9283-9a58536c4df8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8261bab0-892a-4b48-ade4-2f7c65d33fba"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "850e685c-e279-447a-9e7e-79ad4cfbc449",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9a2dc7f5-c865-489c-8dad-08a6d9f4599a"
                    }
                  }
                ]
              },
              {
                "id": "88fafab6-cac7-4b53-b3b4-a8dcd24b4b18",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a7ddf841-787f-4599-8bc7-8d314663cfaf",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc098de-7a23-4800-8ea7-2d162b88c604",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5a1c7f52-bd7a-4d9f-98a9-120a0b0906f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f55af95-3b90-49c4-9865-feffe7503cf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fee099ad-b0d0-4589-af92-ef6a93e14996"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "97f5a82f-9940-4bc4-9f88-41c047ddeaa9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c731fdf-8f5f-4cc9-ac64-5f8c1d782c43"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6769562-aa0d-4295-a6b0-8ff0e1e223f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a3dd9bc-e90b-412b-8100-bf20d7b5d50c"
                    }
                  }
                ]
              },
              {
                "id": "2227e821-4c8e-4c93-aa51-da9afe4d5bf4",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "eee75f6c-5cd2-45cb-b1a4-c873c3ea200b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f65c5772-a0cd-4226-8ce2-10cb2bc91afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "fd2761cc-1ac2-40c7-9190-3730f40ff3f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ce6c1b-f36c-4a70-9a87-df862a89d7ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "089e8ec5-1c83-405b-842d-5ecd02d2bb1f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6dc8f7a8-1338-42be-9a07-0d0dc2719b6d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3fb71510-2091-49db-9888-a232cdfab072",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0dac27c1-b46f-411c-ade8-1ae99792f1fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "70b23225-323f-4417-a5c6-b2050d6d269d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "411b1243-f8b4-4bb5-9421-adeb7ef3f775",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c89fb345-f9d8-499e-a047-1295c8d30bb8"
                    }
                  }
                ]
              },
              {
                "id": "26789741-0819-43bf-a6fd-d4dd24b36663",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "56111fad-b532-4653-baac-f339da8f7eba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "69eb5e95-279a-46d4-9f35-f23cfaefffea"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d2e40d2b-f957-412e-9358-96145a02a506",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "378f544b-39a6-4e2c-a9d5-54a4411a46bc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cb43bfdf-51fe-4feb-83df-90ded5b02810",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2b85aec1-4d4a-4de3-a29f-ad3ca3af0f68"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bb85094e-bbf2-44f2-b39b-d3cfc539d2c4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6125c5c1-0981-42be-910b-5f2596045c12"
            }
          }
        ]
      },
      {
        "id": "cab1b87e-f5d2-4cf8-8b30-fab1dd1204f5",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "3f130b7f-f804-4063-b964-7aee73869eb0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0800172c-9423-430a-b5ee-ffcdde0d0637",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bc4a74ab-ba3e-4f9d-a7a6-2fad9acb5d18",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "383dfea2-1f7d-438b-a259-377bd37c4e1d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a1d02b4e-5aab-418d-beaf-6a45cd59c53f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b760f361-196d-4990-9497-68563f58f012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3fc7ab88-dcc9-4fdd-868d-f017cb9b3fd9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a4087766-a41f-48cb-8c70-4776de2e2c9d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f341340-7c6a-459f-b004-bbb41cb2b4d1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b162713-4a2e-4cd1-85b3-27abc28aac48",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7e4ccd1-0454-480a-bf7a-d309b303432a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b684716d-3828-4264-b08c-00203bf149e7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "4ca0cbf5-b831-42d4-8ca1-94a0d5684928"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "204568f5-2826-486a-ab7f-e545ea576505",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b66fc52a-a4bd-4b18-aa36-9ab2294017d2"
            }
          }
        ]
      },
      {
        "id": "1df3fd78-6af1-4580-97e3-3bafd7ffc0e3",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "10e8fcad-3f5d-44fc-a8eb-90edb6aca1e4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e052b694-70bd-409a-b64d-a9c1c39dd9a8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "621177df-a740-4944-ac83-92b3b3cbdbb7",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c54b7b18-d8d7-4db5-aba9-65502a0e6311",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce3c7ef6-3fe9-4194-9d70-af55082d3d2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7861b40-f7cd-45f3-a6c4-5d254e3aa28f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31bef06b-6fa7-4b0f-afa0-96c8dfc0db8a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2fc21a18-9322-4a42-a3ac-cd01241a8808",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0eba5229-216b-4941-8ee8-64dc7f19cd69"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ece30e9-cc25-4b21-813f-be6bc69a3ea9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b0649a7-0c4c-4b3b-9b93-3feb2e21ee15"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c02069b6-8028-4ec9-9bbd-4f023ad31ac1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d58321a6-3f9a-4a70-925f-59e5eadf9d75"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "031a9bf5-9117-4b34-a92f-6080d1915d4d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "84c7561f-d080-4938-ac6e-720d5622418c"
            }
          }
        ]
      },
      {
        "id": "707f2cd6-d42d-430d-8d57-f4d3da90d39b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "39b9b3a5-5d69-4a49-8fc3-43d55bfc89fc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8d9733b5-6ecd-405a-865e-599213ef9ca8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0e22e127-c556-47c4-8432-5fdc44cb9f92",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e575099-9fd1-43c8-9ea0-7ea17a729d9e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df1c0d40-8ec4-45e9-ac01-496e83acb583"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52348818-2475-427c-80c6-a0f1ad3fc6a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e96d0a5-551e-42ec-ac61-672038647150"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "84e02215-e61d-4c71-8af1-5d19536cbb23",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "86d34671-c2b1-4ebe-895e-42244e25fadd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0337103-8a06-4ea3-811e-89d801a56725",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dc6e4497-67d4-4393-9e37-f17ee380de2d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "576d06f7-8726-4b97-a4da-fa737b7c2b31",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "100a9e06-2c7f-4f9f-b905-ed670aabc286"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "54ba1ae2-82cc-4f7f-ba3e-fc4c1cdc9cb7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "03bcbd81-bf1c-4bc3-89d4-728890095096"
            }
          }
        ]
      },
      {
        "id": "32e47066-0907-4f44-a5fb-8e14c3c23195",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ab6b3076-88f9-4144-bafb-ea775f22a580",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fe135216-55fc-4cdb-a054-2cf3af0fa93e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "baf6e90c-8fa0-4179-8941-c4debcf15dd3",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "58cc30bf-ced9-4ddb-8e14-fa0d4341b94d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e6abcf9f-230d-4469-a754-441886507c8c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 33
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 238.84154929577454,
      "responseMin": 16,
      "responseMax": 8659,
      "responseSd": 800.5034152651203,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1688950097212,
      "completed": 1688950178781
    },
    "executions": [
      {
        "id": "fa001f7d-e93c-4435-ae1e-57ecb5f874a2",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3a91cce9-d8dc-4a05-809e-c0ff7ed164ab",
          "httpRequestId": "6c987a09-9307-4010-b7cc-92f70a2467fa"
        },
        "item": {
          "id": "fa001f7d-e93c-4435-ae1e-57ecb5f874a2",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "e7340e20-895e-4f33-9878-4f00a1abd1ca",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 0
        }
      },
      {
        "id": "b855f7de-df23-4c44-ba20-99de91ca33d4",
        "cursor": {
          "ref": "f8f14549-daae-4ffb-ba11-d8f0fbfcab3d",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "73627fe1-fe49-4904-8ea7-e821cb0c18bc"
        },
        "item": {
          "id": "b855f7de-df23-4c44-ba20-99de91ca33d4",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "149f97f2-496b-4771-9259-a1f9d38e26f4",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 0
        }
      },
      {
        "id": "bd8f8a80-eaea-4ed0-bffc-92bf1ab80207",
        "cursor": {
          "ref": "cc7f0f2a-d8d3-4dbe-844f-d7d3d5e78d9e",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "bd2fa0d0-cee7-49df-b103-62a9f529d668"
        },
        "item": {
          "id": "bd8f8a80-eaea-4ed0-bffc-92bf1ab80207",
          "name": "did_json"
        },
        "response": {
          "id": "fade5d58-341c-4616-b663-544c9bddff7b",
          "status": "OK",
          "code": 200,
          "responseTime": 1595,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d75c2db4-78e8-41ee-93d5-274a2ff3b11c",
        "cursor": {
          "ref": "3d490787-c9c3-4cca-ae44-ba846385e45a",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8edf74cb-bce5-49e3-b69b-bb0bd2d55c76"
        },
        "item": {
          "id": "d75c2db4-78e8-41ee-93d5-274a2ff3b11c",
          "name": "did:invalid"
        },
        "response": {
          "id": "e08531d9-5ea3-4390-bb1d-8cfc094227ff",
          "status": "Not Found",
          "code": 404,
          "responseTime": 668,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "d75c2db4-78e8-41ee-93d5-274a2ff3b11c",
        "cursor": {
          "ref": "3d490787-c9c3-4cca-ae44-ba846385e45a",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8edf74cb-bce5-49e3-b69b-bb0bd2d55c76"
        },
        "item": {
          "id": "d75c2db4-78e8-41ee-93d5-274a2ff3b11c",
          "name": "did:invalid"
        },
        "response": {
          "id": "e08531d9-5ea3-4390-bb1d-8cfc094227ff",
          "status": "Not Found",
          "code": 404,
          "responseTime": 668,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "20bef7fb-b3ac-4182-bd37-5ae0d249ccfa",
        "cursor": {
          "ref": "ce8271fc-cbf7-4d39-acbe-8f777b81508f",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "14968172-71df-4296-bdbe-68a821a103a3"
        },
        "item": {
          "id": "20bef7fb-b3ac-4182-bd37-5ae0d249ccfa",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "5dcb474d-79bc-4133-8693-355f8e095c45",
          "status": "Not Found",
          "code": 404,
          "responseTime": 48,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0720ca4-a0c9-4c46-8fe9-1485d397609a",
        "cursor": {
          "ref": "1bae1e15-446f-4fb0-8192-d3b8ef3bb556",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d447ee79-7a92-4f66-8f31-0a9e1183965a"
        },
        "item": {
          "id": "e0720ca4-a0c9-4c46-8fe9-1485d397609a",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "5d85fa5c-7abd-429c-a738-f44a1c8c390f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 47,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6847045-a42e-4355-b584-0a70a212a73e",
        "cursor": {
          "ref": "c3997bbe-a4fd-41cb-ae43-4fb52ed61089",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "78a571ff-0bd4-4142-a925-0a7e8d966b18"
        },
        "item": {
          "id": "e6847045-a42e-4355-b584-0a70a212a73e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "fc1d583b-7f46-415a-be7e-917fb4b01895",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "9e63cf04-115d-4c14-8cdf-1eb5f46bb80a",
        "cursor": {
          "ref": "946ef756-7166-4284-8856-f66aba5dbda3",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ee2812ca-4049-4615-b242-7997dbface21"
        },
        "item": {
          "id": "9e63cf04-115d-4c14-8cdf-1eb5f46bb80a",
          "name": "identifiers"
        },
        "response": {
          "id": "5af9815a-0fa0-4086-b2af-412527cb60f7",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "945824cd-02e7-40e1-8347-7c2bd859045d",
        "cursor": {
          "ref": "1bed2580-4a2d-4c37-9755-2b4869134e7d",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "d35d8a86-5a88-443e-bb99-4ec711356038"
        },
        "item": {
          "id": "945824cd-02e7-40e1-8347-7c2bd859045d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e5db8954-fd10-4252-8c3b-15eb90bd6e7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a97b89f1-5120-4c4e-8c96-676ac0002630",
        "cursor": {
          "ref": "962b2e58-ee67-470d-bcfc-2012bf2185a9",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "129f1549-9694-47cb-8073-dc7679b9cf04"
        },
        "item": {
          "id": "a97b89f1-5120-4c4e-8c96-676ac0002630",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e7f27d8f-d5d9-42f1-94ac-3a058cce4bdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4168b706-6955-4ee7-bf54-93f51a696b26",
        "cursor": {
          "ref": "2ff149a8-ced3-464e-8b8c-2a15d899b01d",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "abd9790b-02f6-496d-852c-8e6702b77a38"
        },
        "item": {
          "id": "4168b706-6955-4ee7-bf54-93f51a696b26",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "147ac80f-a5fc-4a01-850b-567d0b11be82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 234,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16817af3-03f6-4e52-a284-0ebd3f571a05",
        "cursor": {
          "ref": "e5a0c48d-f430-454c-a3dd-d00b560d6cde",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "cae608bd-c1af-4b7a-a7e1-653e4ade2e95"
        },
        "item": {
          "id": "16817af3-03f6-4e52-a284-0ebd3f571a05",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ae3dc193-65e7-45ce-b0bf-f939f12a922d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dcf10b2-791c-4820-b367-1aa4e431a12b",
        "cursor": {
          "ref": "0b57dd7f-3901-497f-9028-981e3f828d59",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "94fb4947-9379-4956-9494-11356a329fc5"
        },
        "item": {
          "id": "5dcf10b2-791c-4820-b367-1aa4e431a12b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "9150e3f4-6fcc-4462-a592-be3588ea4d43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23de7067-aee9-491f-8084-427da7d1353c",
        "cursor": {
          "ref": "11de149a-6b68-4c4f-afbb-5e3a7994ae8c",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "835d6140-e2a9-4304-a24f-f6267f178ad6"
        },
        "item": {
          "id": "23de7067-aee9-491f-8084-427da7d1353c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "fbc43517-96e3-4646-aff3-a834513266a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f96afa7d-272a-4539-b082-eaaaf7cc9b0d",
        "cursor": {
          "ref": "35fa4ee0-dbf9-4a44-8514-f5760ce9139b",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6a54fb0f-f770-4c7f-a43d-e83df3cf4d81"
        },
        "item": {
          "id": "f96afa7d-272a-4539-b082-eaaaf7cc9b0d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "27a06d36-8a50-484f-9f60-81045be90e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18fb4b09-f284-41e1-90c1-bca9af9e1a16",
        "cursor": {
          "ref": "f8169491-9a5c-472e-a518-1e1196ccd73a",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "e483c290-038a-42fd-9591-0ebf31b53ae0"
        },
        "item": {
          "id": "18fb4b09-f284-41e1-90c1-bca9af9e1a16",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "37961f91-4611-46b9-9afb-b36b7f9b800f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfec45f8-4a26-45eb-98e5-9f273252baac",
        "cursor": {
          "ref": "301ea3b0-4f3c-412b-9817-ef58dfe7ee2e",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9fc8eb8e-9868-435f-b659-36ce332d5a2b"
        },
        "item": {
          "id": "cfec45f8-4a26-45eb-98e5-9f273252baac",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e431224c-6749-481d-885a-15927a148ba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faeceb31-c5ba-406d-9e42-cf53d3bc489a",
        "cursor": {
          "ref": "2eda500a-b482-4252-9315-2b7fe914194e",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6164bb7d-53ec-4dd7-b0fe-0e7c646bf7f6"
        },
        "item": {
          "id": "faeceb31-c5ba-406d-9e42-cf53d3bc489a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "376ecd6d-5e5f-4584-932b-5281bf78874c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31984a70-283b-4ac0-b4ec-bc94df213b2f",
        "cursor": {
          "ref": "da0c3474-f0a8-4b45-adaa-7383b8fe5546",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7177ee6f-3391-4149-b496-6629b89e5b2f"
        },
        "item": {
          "id": "31984a70-283b-4ac0-b4ec-bc94df213b2f",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "824bcc00-7e8e-46dc-961d-d6f8d54cc482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50579f16-8fa1-44ee-8c78-6ec811f0bfb8",
        "cursor": {
          "ref": "80799975-46bc-4a8a-bf42-7701fc78a975",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f80022bd-adc9-4b30-92ef-0109641b8daa"
        },
        "item": {
          "id": "50579f16-8fa1-44ee-8c78-6ec811f0bfb8",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "cd19f3af-d82c-4377-a4f7-707d000b19f6",
          "status": "Created",
          "code": 201,
          "responseTime": 1500,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "dbcffcb1-1a64-4a37-b4bd-ed87cc27e6d7",
        "cursor": {
          "ref": "b8a42e6c-b326-4bcf-9ce8-3a3fb738ef18",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "26a3112a-f67e-4db4-b4c6-cf22dafc0a45"
        },
        "item": {
          "id": "dbcffcb1-1a64-4a37-b4bd-ed87cc27e6d7",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3ae782f5-4250-42c2-ac90-73014f849d62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c649158-599b-4060-a30d-d19dbde6e793",
        "cursor": {
          "ref": "226478c0-d2de-4750-870f-041c47ac3b51",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "43e4f773-8763-4961-ad24-c7d8139dae96"
        },
        "item": {
          "id": "3c649158-599b-4060-a30d-d19dbde6e793",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d87d8c4e-4df9-4a47-a2e0-00bfb9f431d2",
          "status": "Created",
          "code": 201,
          "responseTime": 8659,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "72e34a22-45be-43f7-b7ea-b25dd41e2dc7",
        "cursor": {
          "ref": "7c888b68-db16-4400-8ae3-3500aed2187b",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9a86e11e-b81d-4656-8ff2-223067f93e8d"
        },
        "item": {
          "id": "72e34a22-45be-43f7-b7ea-b25dd41e2dc7",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e3876f40-cdde-4203-a68f-e0503fc3b9b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6634ffe9-30a1-4dc2-b410-e8d43fe42b3f",
        "cursor": {
          "ref": "cc4056ac-360b-49ba-9287-c4b23e0d5557",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "9d4da220-e320-414a-bc5a-f080c3873827"
        },
        "item": {
          "id": "6634ffe9-30a1-4dc2-b410-e8d43fe42b3f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "e830af7a-b557-4044-acee-1697bb3551a8",
          "status": "Created",
          "code": 201,
          "responseTime": 5555,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "163c8315-ca51-4047-83cc-abd2e1878f88",
        "cursor": {
          "ref": "637f319a-596b-480c-8f0b-4cc1bc58c6b2",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c51c25eb-e6b2-473e-a5e8-7af7eb7c517b"
        },
        "item": {
          "id": "163c8315-ca51-4047-83cc-abd2e1878f88",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "2174c41c-eb5a-49ed-a4d9-74f6bb3ff2e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9a763df-c21c-4f97-b97d-1a06b8d43245",
        "cursor": {
          "ref": "73f0a610-ffbc-4b5f-b1e0-614319c1f006",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "5d62c5d4-7bcf-449c-8260-2e33163103c1"
        },
        "item": {
          "id": "c9a763df-c21c-4f97-b97d-1a06b8d43245",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "3c0395b9-cb97-4a56-91a9-84dc74ca7e0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59fd6e1b-8526-44c8-a736-cb5b9ca16c55",
        "cursor": {
          "ref": "6f08afee-c4f6-4cbe-91db-b3a67b828697",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c9733fc1-181f-4f54-b2ff-49a338353d30"
        },
        "item": {
          "id": "59fd6e1b-8526-44c8-a736-cb5b9ca16c55",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "0964f924-7464-4560-b954-fa173abe026b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea6e97d3-ed0b-4720-9b40-9f4594768b1d",
        "cursor": {
          "ref": "60ae40fd-9e4b-4de0-a113-07b0fb016420",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "69282d9a-c0fc-405a-ab22-e1b7e80d895e"
        },
        "item": {
          "id": "ea6e97d3-ed0b-4720-9b40-9f4594768b1d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f1277e0f-31f3-4dbf-93e0-2af1565fc4d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9886a7d9-59c8-4e99-9f7f-03657afc2e2c",
        "cursor": {
          "ref": "519ce5c5-2826-4e1e-a3c0-ba38ae6c0d77",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9b1fcf26-7d59-4620-9b26-2d6a29a816ab"
        },
        "item": {
          "id": "9886a7d9-59c8-4e99-9f7f-03657afc2e2c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "6799d945-c21f-4597-abef-967642184f61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06451ca2-e42b-478e-818d-1bf043a83fae",
        "cursor": {
          "ref": "140a757d-7a46-4913-a79f-c6204f29d279",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ec814c70-3e74-4067-b3be-6f1519ccf1ba"
        },
        "item": {
          "id": "06451ca2-e42b-478e-818d-1bf043a83fae",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "907f68cf-4bd9-46c2-a7c3-0f67c7c1b750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18897c53-1702-40e5-97c7-992e455e05eb",
        "cursor": {
          "ref": "06cf2132-729f-4802-8115-55bf47f0e557",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "fe9eef90-9738-4d67-a792-cbadd4b177e7"
        },
        "item": {
          "id": "18897c53-1702-40e5-97c7-992e455e05eb",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "74beceb1-7f7f-4870-b84e-e8fbc0eb1c4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad9963e-6e5b-4703-8cc8-0945a2233516",
        "cursor": {
          "ref": "3918e754-0d47-44a8-b4be-a665341570c5",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "db81f3d6-7925-487d-b191-b1e11015f0ad"
        },
        "item": {
          "id": "dad9963e-6e5b-4703-8cc8-0945a2233516",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "d3b6e9db-268e-4282-86e1-be194d518863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e6af2e6-9c2b-4510-a9fe-176d3c07dad0",
        "cursor": {
          "ref": "d635224f-6ea0-4430-88a6-ae043198647a",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "69ae7576-ce5a-465e-9536-0a5abafaf594"
        },
        "item": {
          "id": "8e6af2e6-9c2b-4510-a9fe-176d3c07dad0",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "76c9a849-3cf2-4c4b-a1af-aed270ade694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebb8dfdb-0ed2-4fe1-82d7-f8285da43137",
        "cursor": {
          "ref": "eb2841ec-7447-4739-b532-f5767afe5f9f",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "a0cee837-13ae-42c1-ab0f-eadb96c2a469"
        },
        "item": {
          "id": "ebb8dfdb-0ed2-4fe1-82d7-f8285da43137",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d3e00f8e-75c5-4cf5-b7b2-34f507b0c89c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0efebe17-4980-44df-a4bd-837f182760bb",
        "cursor": {
          "ref": "f711ddc3-7e60-4c5f-9664-68084e439707",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "fb442838-5b80-4f69-969c-fe095d7a3822"
        },
        "item": {
          "id": "0efebe17-4980-44df-a4bd-837f182760bb",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "8d695ed0-7199-4cfe-b0bc-6d9264e4b1e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d17eab4-804d-46b3-b0f8-dbf7a4792742",
        "cursor": {
          "ref": "3ab76e6d-128e-4992-a1d9-27f98dbc3df8",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7f89aaf8-add7-4555-95aa-bad5d132b96d"
        },
        "item": {
          "id": "2d17eab4-804d-46b3-b0f8-dbf7a4792742",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "dd4f2d85-2e31-4a8a-ae0c-d6b9c08336ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c366aa6-a10d-420b-b941-74851a4a327d",
        "cursor": {
          "ref": "d7272a01-4681-4c80-b96d-a96127d68efb",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "8ef2d482-f102-49b9-b935-365075edc2f0"
        },
        "item": {
          "id": "8c366aa6-a10d-420b-b941-74851a4a327d",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "eb7ab824-5ef6-4a30-8eb8-fca969d3fe84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79feea58-ff2c-4b31-a405-3ce8a0d2e745",
        "cursor": {
          "ref": "2030853a-e3ae-42cd-baf6-47a1f82fe59f",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2fc47f1b-ce14-4084-aa79-c7bf794746b4"
        },
        "item": {
          "id": "79feea58-ff2c-4b31-a405-3ce8a0d2e745",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a0259b10-8581-4948-9d4c-feb2ed73f3b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d2da93-b203-4671-af57-b7076c5525c6",
        "cursor": {
          "ref": "f08e3d3f-480d-48cd-9ad0-babffa530d1d",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6c8717da-8896-4f6d-a5b1-143a9070e348"
        },
        "item": {
          "id": "b8d2da93-b203-4671-af57-b7076c5525c6",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "8f9ea6bb-1482-4654-9683-8047a805b03b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83ccb4fb-60f7-4f6c-8a99-1ce619897bf3",
        "cursor": {
          "ref": "4c6ee38b-9425-4c98-9c5d-718d2e0aba55",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "07a9486b-1607-479e-b413-089fdcf47514"
        },
        "item": {
          "id": "83ccb4fb-60f7-4f6c-8a99-1ce619897bf3",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "aa64dd2d-585f-4383-ae44-bd3748381f3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac1aa82a-bb6d-4bd3-aeb1-04bf8f27ce3f",
        "cursor": {
          "ref": "2fc8d24a-dd67-4abe-a754-2a7d4030bbef",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "7133e963-f5e6-416b-87cd-ab880ed236c6"
        },
        "item": {
          "id": "ac1aa82a-bb6d-4bd3-aeb1-04bf8f27ce3f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "4db2ee98-2c1e-4915-89b2-d24c2b538919",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "740e34ef-82d8-4d77-8049-f19deaf979c7",
        "cursor": {
          "ref": "337de51d-f69a-4e01-bfc5-8c3452021225",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c4c571da-adc7-4fdf-a189-fce9cb95425d"
        },
        "item": {
          "id": "740e34ef-82d8-4d77-8049-f19deaf979c7",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "bf48e09d-35a8-499f-b613-3375669f51a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d41489d7-f629-439a-a795-5547ee24635b",
        "cursor": {
          "ref": "07575476-781f-4365-a09d-8f97063575bd",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "77d885fe-a454-4a7a-a220-fa142d69bead"
        },
        "item": {
          "id": "d41489d7-f629-439a-a795-5547ee24635b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "df2f1044-9fa8-44ed-a196-21cf7c5e51e0",
          "status": "Created",
          "code": 201,
          "responseTime": 2876,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "30ae1230-f4ee-482f-8899-92cbba5fc89d",
        "cursor": {
          "ref": "1a43dea0-1f93-49a8-95e1-0da713a61540",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1e66d00f-0d3c-4101-b33c-38cc3bc215ee"
        },
        "item": {
          "id": "30ae1230-f4ee-482f-8899-92cbba5fc89d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "af5056d1-770c-4a33-9a3c-ed6ed166157f",
          "status": "Created",
          "code": 201,
          "responseTime": 2891,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "d927c5e5-a244-4687-87be-9f5fc41958c9",
        "cursor": {
          "ref": "a63991e2-35b1-4218-979a-2300fa6f5e50",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a7a8d88c-b800-4a46-9e01-192c255e42d5"
        },
        "item": {
          "id": "d927c5e5-a244-4687-87be-9f5fc41958c9",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e1d2e9b6-a2b6-4a8f-98aa-38a65ea5b954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "381830b1-18ec-44b8-9e22-b49bd40f21e4",
        "cursor": {
          "ref": "ec524d39-5316-4e7b-92c6-df066a3b789a",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6e1ecfba-288b-4498-ba53-ad912f9ebc3b"
        },
        "item": {
          "id": "381830b1-18ec-44b8-9e22-b49bd40f21e4",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8df765ba-82e5-49e8-9936-83afc58dd84b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f91acb-dc51-4102-91b1-5996d8189985",
        "cursor": {
          "ref": "bdeed2cd-501e-4d72-b507-437a8ed10739",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "96985bd0-f9f1-4674-b7d4-6094978d258f"
        },
        "item": {
          "id": "64f91acb-dc51-4102-91b1-5996d8189985",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "08ad2ebe-ac63-475c-88a5-ebdcaf070639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8527ba7e-37cc-4053-8a17-8f5966c325f4",
        "cursor": {
          "ref": "0967acad-c6aa-4f5d-84f2-610b1b922a8d",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "4fc19f25-e96d-4d5a-a648-42df9f86afb5"
        },
        "item": {
          "id": "8527ba7e-37cc-4053-8a17-8f5966c325f4",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "70bfbb53-95da-4a51-8577-516c6da5c35d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27a4085f-8ba2-4c70-8982-b03fe3a6f49b",
        "cursor": {
          "ref": "06add257-6d2c-436f-972b-d894ac014104",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a9fc5ce6-ba55-4251-a775-8c46c9049569"
        },
        "item": {
          "id": "27a4085f-8ba2-4c70-8982-b03fe3a6f49b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ebd1d51f-7e53-4612-9056-5a6a5d6cd154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcb6bc76-e48d-4cf5-8e1e-ebc37563878c",
        "cursor": {
          "ref": "7e5fe345-c0cb-4aee-a56e-daaf7e23f743",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "609c1b3e-c833-4ad7-b3b7-b23a79b83711"
        },
        "item": {
          "id": "dcb6bc76-e48d-4cf5-8e1e-ebc37563878c",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4771267b-40e9-498d-b8c0-331d7e347d54",
          "status": "Created",
          "code": 201,
          "responseTime": 2679,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "36957332-67b9-46a8-a75e-cf905324ab1f",
        "cursor": {
          "ref": "410b0204-17a6-4efc-a242-068bee12b803",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6ae1be9e-ad71-4791-9d79-1ee4cc5ba1cc"
        },
        "item": {
          "id": "36957332-67b9-46a8-a75e-cf905324ab1f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "57308418-aee0-4c46-a592-bfcc4fe7ab10",
          "status": "Created",
          "code": 201,
          "responseTime": 2961,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "082b06a0-f28e-4c0a-9d8a-de29e3f91f57",
        "cursor": {
          "ref": "f6ee761a-d3ea-46c8-930a-6559dd35df74",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "73fef5dc-c54f-4824-8eee-66f4f18220cd"
        },
        "item": {
          "id": "082b06a0-f28e-4c0a-9d8a-de29e3f91f57",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ca8cf9c7-90d8-408f-ac7f-eb3e4004a2c7",
          "status": "Created",
          "code": 201,
          "responseTime": 2439,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "1bf89f81-7b45-491e-b0fc-feb76259e27e",
        "cursor": {
          "ref": "8b59bbb6-4bb2-4083-89b2-d306f21194bb",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "24c13a8e-cfa9-4109-a0e6-52c2ea2772dc"
        },
        "item": {
          "id": "1bf89f81-7b45-491e-b0fc-feb76259e27e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "1db9876d-256c-498c-9536-fd7ad936bb25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83551b5a-d6d2-4fb8-9a72-0346c6855dba",
        "cursor": {
          "ref": "2419299d-58f1-433a-ac28-717fbd2e1cd6",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "6d53eeec-0090-40c0-91c7-1138a050e9c7"
        },
        "item": {
          "id": "83551b5a-d6d2-4fb8-9a72-0346c6855dba",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a5ae3b44-527f-42c5-aea5-8aa7b16a5da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d0045fa-9ec8-40df-b6eb-c99db5a65347",
        "cursor": {
          "ref": "146d331b-45fa-4b30-b49f-e505ef4c8679",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "44d58ae2-a011-42a8-ae02-4ee978b8df43"
        },
        "item": {
          "id": "0d0045fa-9ec8-40df-b6eb-c99db5a65347",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "79cdc276-a120-4a2b-b466-c2768026f279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9444657b-c2f9-4c0d-af45-222319b410e7",
        "cursor": {
          "ref": "272ad445-e9e4-4683-aa15-caba268e309a",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2e8d68ef-d334-41ba-b7bb-7cd477265ffd"
        },
        "item": {
          "id": "9444657b-c2f9-4c0d-af45-222319b410e7",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "55ea4519-8566-4791-880a-9b186be96b0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2709ca9b-ffbc-47e6-9c21-bc36812e1083",
        "cursor": {
          "ref": "a869375f-5c23-4f59-9f52-00c4a4791d41",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6e75f59d-0cea-493a-bf13-ea6214c00325"
        },
        "item": {
          "id": "2709ca9b-ffbc-47e6-9c21-bc36812e1083",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c59516cd-47c8-4c91-98d2-f37bc3bec1bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4e09fa7-49cd-4ee5-8908-3d2d4f94efae",
        "cursor": {
          "ref": "c034e66c-8da4-4486-9aab-e1947a54b65a",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "99ac45d3-edd9-477c-be27-21020bd6f1fe"
        },
        "item": {
          "id": "b4e09fa7-49cd-4ee5-8908-3d2d4f94efae",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "8972bc41-d93d-4a86-9b32-4bbfd9730e8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52380838-7667-4304-977a-c19ee3bfe10a",
        "cursor": {
          "ref": "b611a503-0665-41b8-bc6d-d6d31466601c",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "8f1f4e4f-ce26-4389-956b-fec41d64a74c"
        },
        "item": {
          "id": "52380838-7667-4304-977a-c19ee3bfe10a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "3f9293ed-b7aa-4d9f-95d2-70fb12161dc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d89d32f-fce8-4a99-9c17-dc59556c3dab",
        "cursor": {
          "ref": "34685da6-f04b-4281-99d0-5e38cd627c9b",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "9ae00c16-70e8-4997-9525-292388fdd675"
        },
        "item": {
          "id": "9d89d32f-fce8-4a99-9c17-dc59556c3dab",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "294ff0e4-b934-440f-bd36-f18fb02cb3a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0507e6af-fa25-47b9-a1d5-fc4a5c5b458e",
        "cursor": {
          "ref": "da95ed4a-b22f-4fe2-9af8-f6b0ee098bc7",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1d7577bf-d901-47b5-9a3f-5ae6d300a79a"
        },
        "item": {
          "id": "0507e6af-fa25-47b9-a1d5-fc4a5c5b458e",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "4f8a7cda-69c7-47f2-a815-9d2a0c2b1791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "463c2d78-12f6-416c-965c-6be89b054df2",
        "cursor": {
          "ref": "83fa9406-7901-4b1b-abad-86f22260df57",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "3f39fe57-3629-4b62-8629-17a278ee685d"
        },
        "item": {
          "id": "463c2d78-12f6-416c-965c-6be89b054df2",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1f2fce65-efc9-494d-a44d-19873458537d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e4de52a-94b8-4227-8196-d3744dd6ea11",
        "cursor": {
          "ref": "340b3eb4-c122-4f38-b031-c677c906ca47",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "13f0d521-3cba-4019-b00b-46c62c455c09"
        },
        "item": {
          "id": "7e4de52a-94b8-4227-8196-d3744dd6ea11",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b8816d3e-e781-44a6-9689-6b91ed1c5ae8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a813ff92-e30a-4dd5-a8f0-bf21bb7e28c2",
        "cursor": {
          "ref": "d541341c-188e-4368-b761-09ffcb6e0183",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "3105fa77-b7ed-4545-a4c0-cded4fc548ea"
        },
        "item": {
          "id": "a813ff92-e30a-4dd5-a8f0-bf21bb7e28c2",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "9bdd25f5-8d2e-4789-8408-b2beb6d3dd5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13bf3e35-c8ca-4ad7-8906-262d63989164",
        "cursor": {
          "ref": "535edc23-256f-464d-9c50-1e3ef9a43dcb",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "242e5541-a8b4-4430-aca4-96001642f909"
        },
        "item": {
          "id": "13bf3e35-c8ca-4ad7-8906-262d63989164",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "d0e16e27-b5d8-4169-8639-51e3a2ce993c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c05affd-4f42-4b05-9fc8-6260ecc0554c",
        "cursor": {
          "ref": "463859c5-32e5-432b-a8b4-a6d05f21a548",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "3f30dbc7-b844-4059-93e6-498be1f17c10"
        },
        "item": {
          "id": "5c05affd-4f42-4b05-9fc8-6260ecc0554c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ace429f9-f6d2-424d-bdee-1a3ca39e412c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3def0f0a-f6cd-4dbc-8141-cec959e39f63",
        "cursor": {
          "ref": "27a6507b-c550-4d27-b480-867ab089965f",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "1e64027d-c6cc-477d-aaff-6b6659c0a006"
        },
        "item": {
          "id": "3def0f0a-f6cd-4dbc-8141-cec959e39f63",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "14face3f-9953-4a22-b80d-c0a2e934d5e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a2c6d3f-76a0-4985-a3e8-cf30e902d228",
        "cursor": {
          "ref": "a20ccb6d-ffb0-4553-95a0-4506e731509f",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "be2cdb6b-1560-4611-a9e9-f5e1e097d7fb"
        },
        "item": {
          "id": "1a2c6d3f-76a0-4985-a3e8-cf30e902d228",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "a688fb9a-6e70-4c14-948d-e19a467a05ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2823f40-fc28-4548-aff3-3e62e1511034",
        "cursor": {
          "ref": "44e9e3c6-6907-4fac-a3ae-1cfe0173167d",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "54c276ea-243a-4771-a35b-05a259671910"
        },
        "item": {
          "id": "e2823f40-fc28-4548-aff3-3e62e1511034",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "552175a0-2c98-4e96-830a-ac991152a701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18cf55a8-eca6-4482-9b02-01a1b2cf9717",
        "cursor": {
          "ref": "924dc561-482a-49e1-b3ff-7fed8456fcd8",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "1af68299-00fb-4bff-9a66-a5eea2dba0dd"
        },
        "item": {
          "id": "18cf55a8-eca6-4482-9b02-01a1b2cf9717",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "60d76f7b-77f5-46dd-a7ec-2328c33c5bf3",
          "status": "Created",
          "code": 201,
          "responseTime": 2177,
          "responseSize": 976
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "fa3f3354-983a-4ece-a617-29f27fb0cad1",
        "cursor": {
          "ref": "c00cb093-895b-4066-a1fa-de6f05f58b87",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "444ebe8f-d845-4d01-a182-a2fadb45e862"
        },
        "item": {
          "id": "fa3f3354-983a-4ece-a617-29f27fb0cad1",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "010af714-65d2-429f-a9bc-bffe16f97a2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a83703ce-3e5b-400e-8b9f-9d6075cf1fb9",
        "cursor": {
          "ref": "02004c4b-c1cf-4c24-8fda-fbec244d02af",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9f585a7b-a65c-4bbe-9805-8a9f4b50110a"
        },
        "item": {
          "id": "a83703ce-3e5b-400e-8b9f-9d6075cf1fb9",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "f4743109-494e-4076-b97c-558152e7f964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e991e524-3aa2-4a6e-a0db-bca9f8784dab",
        "cursor": {
          "ref": "711b5ee0-9694-4f39-a318-e89f2c8627b8",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "bf91750e-5ece-4458-b8ea-3a7386177d61"
        },
        "item": {
          "id": "e991e524-3aa2-4a6e-a0db-bca9f8784dab",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "597503b6-5174-4e00-b995-b3fc0715b43a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ccbba41-d063-43bd-85b9-ad58336ed059",
        "cursor": {
          "ref": "91e0f2a7-607b-40da-a011-e5075cd76f8e",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "40b918fc-4b64-4edc-af22-2fbf81619871"
        },
        "item": {
          "id": "0ccbba41-d063-43bd-85b9-ad58336ed059",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f9a3ce0c-297f-4da6-8dc9-083a2531a6e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30bbed03-627a-49f1-b78c-27a4b1743e96",
        "cursor": {
          "ref": "5b1f0060-8870-4801-92d9-7f4495ebe368",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "2d28708e-0b37-42b5-ac70-d6715925be16"
        },
        "item": {
          "id": "30bbed03-627a-49f1-b78c-27a4b1743e96",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2798f078-6ea1-4e9f-9a1d-36708e742b45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f624fbe9-6f94-4f35-894c-142ea7a01b49",
        "cursor": {
          "ref": "c287f29f-8d7d-45d5-bf0b-9920d5ceaca1",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a59bc8e1-c234-46e2-846e-8e820be732b7"
        },
        "item": {
          "id": "f624fbe9-6f94-4f35-894c-142ea7a01b49",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b5c10460-fe16-44c7-95e8-27d683b159b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a691612-c09d-4e9e-986c-5175474cdcd7",
        "cursor": {
          "ref": "562f600f-0c8c-4798-a01b-64583a63ff99",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "2481ddf2-e8a3-483d-b1e2-288ec5793d4f"
        },
        "item": {
          "id": "6a691612-c09d-4e9e-986c-5175474cdcd7",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "60881d2f-7f03-48e0-ad01-c42e76f97827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ad427bc-1a9b-4c54-8360-247b44c477d0",
        "cursor": {
          "ref": "62a75161-901a-44ad-8963-90efb9146ce9",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f443eecb-11df-44a2-9931-413b696fa70c"
        },
        "item": {
          "id": "1ad427bc-1a9b-4c54-8360-247b44c477d0",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "0c7796f7-ce42-4f3b-9196-819d41df4f42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4bd5cf0-8a24-4f72-86a2-74750f92fe83",
        "cursor": {
          "ref": "083c1d1c-6531-48e7-9332-996ab836c2ec",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "0bbc8acd-555d-4122-8f8a-8f2eb1810c2c"
        },
        "item": {
          "id": "e4bd5cf0-8a24-4f72-86a2-74750f92fe83",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "72c89d02-585f-472f-ae11-44d24954bc62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd447089-6154-46cb-a751-4d56faf25e23",
        "cursor": {
          "ref": "26755b06-4fea-4c68-8579-503ef24d903d",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "7af46c74-7f55-448f-9c99-46687e2aa823"
        },
        "item": {
          "id": "dd447089-6154-46cb-a751-4d56faf25e23",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "13ab8854-ceda-44e9-be86-bd9731618777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2d2af01-ece1-47d2-9f7d-b2ed8479ea79",
        "cursor": {
          "ref": "1ef60451-42d1-4cdd-96ef-9d74d4078d11",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "effb25f8-1125-4603-b469-67eb929e4cd3"
        },
        "item": {
          "id": "e2d2af01-ece1-47d2-9f7d-b2ed8479ea79",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "11713c2b-62c7-4b39-8844-097928c05023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae05be0e-4096-4c02-bda2-39b73eb0b4ed",
        "cursor": {
          "ref": "f91ede91-42c8-4a0a-adda-5280e3756f25",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "2043c920-70c5-4bd3-9860-c295ac0b6a4a"
        },
        "item": {
          "id": "ae05be0e-4096-4c02-bda2-39b73eb0b4ed",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c4647f73-1e2c-4046-a834-b0e7e2c1aa70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c573187a-17d5-4511-91fd-ac7b36541148",
        "cursor": {
          "ref": "e213037b-1c95-4e1b-92be-9bc2df1a623a",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c3eac337-9514-4ab9-859f-fb37121d0a51"
        },
        "item": {
          "id": "c573187a-17d5-4511-91fd-ac7b36541148",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "32910572-5b07-456c-a294-6578a1fb505a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c98537a7-236b-42cf-ad06-5eed56c936cf",
        "cursor": {
          "ref": "13da6d2d-5d13-4bf4-81e7-76f2c393c7d0",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "06c86df6-9957-4db7-9e27-0ddbf387d796"
        },
        "item": {
          "id": "c98537a7-236b-42cf-ad06-5eed56c936cf",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "81bf69d2-d28c-44ec-b578-45d3011979fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11f599f1-9f67-490b-9f05-e860f14d6191",
        "cursor": {
          "ref": "0e1bfd0a-aaa7-455d-a6cd-e4013f12cc9b",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c10bf2c3-8a89-4135-936e-841c7c5dc9fc"
        },
        "item": {
          "id": "11f599f1-9f67-490b-9f05-e860f14d6191",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "d3cf9d24-c3c4-4c22-94c9-eea5922c6e2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b245588-21d5-406e-bd18-dae3b2bff1f5",
        "cursor": {
          "ref": "e34ddee2-6d26-4e09-8fe7-3c538561d958",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ea1f5f1c-d6b8-4e71-85e2-72bf44f609cd"
        },
        "item": {
          "id": "0b245588-21d5-406e-bd18-dae3b2bff1f5",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "0a7f9046-77d8-4861-8336-63a8a6d3e274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "494bb9aa-c635-46fd-b48c-e7cb97cf00e8",
        "cursor": {
          "ref": "7ad45765-4c66-4d7a-85f9-92a5f7e6e110",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "81589ad9-3325-4f8d-b722-a4df0e9a1118"
        },
        "item": {
          "id": "494bb9aa-c635-46fd-b48c-e7cb97cf00e8",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "51bdaf96-bafd-451c-9473-11265b6e54f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e4e970f-35ca-469b-8734-4e6c8870fec7",
        "cursor": {
          "ref": "84c9fb0b-ada8-430c-bdce-ef574170896a",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "bf121bb7-4a06-4570-8d55-3712c8922a08"
        },
        "item": {
          "id": "7e4e970f-35ca-469b-8734-4e6c8870fec7",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "327590c0-3ab3-4fba-bd6a-6156060d056b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a3ad41d-8780-4b18-a691-0fc4afc0cf41",
        "cursor": {
          "ref": "61c0b76c-64bd-4d4a-bf89-4c65d50f396b",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "5308a12b-e611-415e-aedc-4a80d521b8fd"
        },
        "item": {
          "id": "3a3ad41d-8780-4b18-a691-0fc4afc0cf41",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "20cb09f0-be8c-4991-9d98-49e37ef1c74d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff440494-1f17-4b98-a87a-7f0e250d0d36",
        "cursor": {
          "ref": "1c809a35-7047-4470-be36-6d51fdd61e0a",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "cee38226-3e3b-4a4e-a1ce-5a49098d3600"
        },
        "item": {
          "id": "ff440494-1f17-4b98-a87a-7f0e250d0d36",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "ed84307d-4742-4ba6-b9cb-40ba9c1dfcfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bd0011c-03fa-4804-94d7-c4fe7584914f",
        "cursor": {
          "ref": "0e01b30c-37dd-4df8-87a1-d558749f4252",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a45b4d99-75ca-4520-89d3-6015e03524aa"
        },
        "item": {
          "id": "2bd0011c-03fa-4804-94d7-c4fe7584914f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "ed178cb4-2e0c-48e1-9ad1-0ca7d1b0baaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a651db3-12c2-4545-bf29-b66808ad6cf6",
        "cursor": {
          "ref": "2de31236-9325-4775-89f0-d6bbc8843568",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "3704de59-ba80-4bde-b0aa-990f955ae23c"
        },
        "item": {
          "id": "5a651db3-12c2-4545-bf29-b66808ad6cf6",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "5caa4078-1327-4bd4-b9cb-ba5123fa9492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad0ef615-6e16-4c49-a71f-f9a6a533a1d8",
        "cursor": {
          "ref": "fb541e9c-048b-424e-b8ff-f9d2c783e61a",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "31e23cfd-733a-45de-9e32-ef7cf810bc82"
        },
        "item": {
          "id": "ad0ef615-6e16-4c49-a71f-f9a6a533a1d8",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "7d544ae7-e460-42fa-a943-c4034859dfd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "109b3d02-82f8-43bb-8e9d-9fe727ded74f",
        "cursor": {
          "ref": "4a14b529-e7ba-4b66-acb0-6219138de255",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "1fb13720-391d-48f9-a184-c263ddb20713"
        },
        "item": {
          "id": "109b3d02-82f8-43bb-8e9d-9fe727ded74f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d535cd1b-c6b0-4bd5-b65a-fb954be89b7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43c83b58-3948-4345-b028-e5bcc8b7a195",
        "cursor": {
          "ref": "516e8ee7-6aea-4427-aaea-85441cd7a4bf",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "1bd80438-3586-46e6-83fc-46b0b6aae207"
        },
        "item": {
          "id": "43c83b58-3948-4345-b028-e5bcc8b7a195",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "862ba806-d86a-47a9-a71a-733af25036e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c18b0568-ff8e-43af-9e88-c0902db7fb6b",
        "cursor": {
          "ref": "99f7e0bd-f8ec-47c3-bad7-7df99f4c3590",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "f6f2a3ff-7bc9-4e58-a17f-db1d37115756"
        },
        "item": {
          "id": "c18b0568-ff8e-43af-9e88-c0902db7fb6b",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "1aa96838-4b6b-4587-9e0c-e63df6455571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4b33aaa-a9f1-46e6-add8-5ebdfe87cf01",
        "cursor": {
          "ref": "06e16c04-6879-48e1-b3f4-ed88dee6f0f6",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c99e8934-4e41-4a0b-a61b-35f4b325479e"
        },
        "item": {
          "id": "c4b33aaa-a9f1-46e6-add8-5ebdfe87cf01",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "dbd66867-f96e-4b63-9ef4-89f3672b2d4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ed4510e-0927-4a02-8aa8-5d7ee078a567",
        "cursor": {
          "ref": "b8db2ade-5fb3-4b10-aab7-8b3b4478c01f",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "b8a7b672-742d-45db-b6ce-432e1a610034"
        },
        "item": {
          "id": "4ed4510e-0927-4a02-8aa8-5d7ee078a567",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "cacd8c7d-739b-4219-b450-0bb2106b6245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86c556fa-0400-4003-b69c-1fb393180a41",
        "cursor": {
          "ref": "dc886df8-c44e-446d-9ee4-e709eabdb6c9",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "365a0998-080f-4343-8265-2f573866212d"
        },
        "item": {
          "id": "86c556fa-0400-4003-b69c-1fb393180a41",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "2463cd77-e577-4912-8228-4409feb742b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d18d376-7872-4d58-86f0-86e68652d512",
        "cursor": {
          "ref": "3607c012-5b83-403c-8841-7e7d2ea41ed9",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "175aa6d3-6358-4985-bacc-0dfd756ef16f"
        },
        "item": {
          "id": "4d18d376-7872-4d58-86f0-86e68652d512",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "201e89bd-f665-4876-a421-8b39a25f4d09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef4674a-af9c-4242-9cd3-7595123310e2",
        "cursor": {
          "ref": "66b93b21-a07f-4554-83ea-27de23355652",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "8445fb0d-b8f6-4ee6-82da-5c7c43ad644e"
        },
        "item": {
          "id": "8ef4674a-af9c-4242-9cd3-7595123310e2",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "642394d2-abec-46d8-b39a-9db4dfdc8c84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "220770e8-e24b-4e32-9df5-f35da534d4a4",
        "cursor": {
          "ref": "bfec9bc9-babe-4add-ab8a-5155e0b192d8",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "01405ba9-5655-46e8-a3e8-e01cd1076455"
        },
        "item": {
          "id": "220770e8-e24b-4e32-9df5-f35da534d4a4",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e4d5ac0b-e413-4eb5-abd3-5de57e0b580a",
          "status": "Created",
          "code": 201,
          "responseTime": 2252,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "58331733-6973-4c6e-b351-fb3d17a1a714",
        "cursor": {
          "ref": "7d175943-c700-4e1f-85b5-2b7a17808434",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5e52aec5-1ee0-4c09-b563-83198eaeeb8e"
        },
        "item": {
          "id": "58331733-6973-4c6e-b351-fb3d17a1a714",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "d8914c2b-4aef-4090-8c5f-b191eb32f366",
          "status": "Created",
          "code": 201,
          "responseTime": 2433,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a6ff9e4-72b2-416a-9172-7cc152574afa",
        "cursor": {
          "ref": "c79a00ae-04ea-4554-a01d-0cedade8daf3",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "855f9177-8de5-40da-8991-424b44bb7103"
        },
        "item": {
          "id": "4a6ff9e4-72b2-416a-9172-7cc152574afa",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "49905c1c-d269-4fe4-82c4-390a2e072dc7",
          "status": "Created",
          "code": 201,
          "responseTime": 2552,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a60ae703-4a28-4ffd-8eba-7b2b6958186d",
        "cursor": {
          "ref": "418b1644-aab0-481f-9bda-db6a7d924e18",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "33c7a1f2-6bfc-4726-9257-9a338e1fa0e6"
        },
        "item": {
          "id": "a60ae703-4a28-4ffd-8eba-7b2b6958186d",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "74c8e61a-b0bf-4475-a9c6-ca5190fb8a3b",
          "status": "Created",
          "code": 201,
          "responseTime": 2542,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "40618740-eceb-4721-947c-277f20084e20",
        "cursor": {
          "ref": "7c87ed9d-5bbf-4efa-bda3-41407acbcad3",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "92ece954-d6ba-4100-9eb7-e56b3136885d"
        },
        "item": {
          "id": "40618740-eceb-4721-947c-277f20084e20",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "efacf082-92d6-4737-8bdf-13bcb9e16222",
          "status": "Created",
          "code": 201,
          "responseTime": 2559,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-07-10T00:49:14Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-07-10T00:49:14Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "e9d6525a-8b89-479f-9cdc-3a57a39c128e",
        "cursor": {
          "ref": "39188b5e-71ce-476e-b020-23a678f5c6e1",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "ea37ca3d-b703-4000-b6be-a396ed1df9cb"
        },
        "item": {
          "id": "e9d6525a-8b89-479f-9cdc-3a57a39c128e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e6ccec58-d65a-4299-b165-f4284ccc2003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "4d542c3a-11d6-42f6-b230-27e7af168559",
        "cursor": {
          "ref": "97342796-3377-4569-b197-4bc47ee78fa0",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "aa57a7c6-d3de-4237-a231-6740f38aebaa"
        },
        "item": {
          "id": "4d542c3a-11d6-42f6-b230-27e7af168559",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8ec3903c-78e2-4062-b269-63bdaeb29037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 155,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31f6a889-026e-4dfb-bde4-88e404edbf5c",
        "cursor": {
          "ref": "48a8b311-aef9-4877-b1ab-52b0b840658c",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "2fb9bdb1-517c-43cb-83dc-b47bc4e8d5e2"
        },
        "item": {
          "id": "31f6a889-026e-4dfb-bde4-88e404edbf5c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "2ff38151-d5db-4897-af6d-3e2695154e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "125a646b-650b-4713-b433-e865da5b84e9",
        "cursor": {
          "ref": "313cb287-5621-457f-ac0c-d8399c9aa8c3",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4b7b7327-434c-474f-8652-5454a03fbf38"
        },
        "item": {
          "id": "125a646b-650b-4713-b433-e865da5b84e9",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "cb49e3ea-d824-45e8-bbcf-73e229e3e8e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "133713a3-296d-421c-b86c-0ad687fb61e8",
        "cursor": {
          "ref": "aa0df033-dff5-48de-8b12-526ed8f2f726",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "35028f87-1e65-478e-8adf-76510bf3c11b"
        },
        "item": {
          "id": "133713a3-296d-421c-b86c-0ad687fb61e8",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5c15636d-e1f1-4621-a2e8-92c03f46c62c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd68083-62ee-4bcc-a9cb-c70d810e0326",
        "cursor": {
          "ref": "bbe642d7-8cd0-4719-98d6-829b32fb25d0",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "aa30cdb7-db91-4a73-95ba-34cd0ace0912"
        },
        "item": {
          "id": "cdd68083-62ee-4bcc-a9cb-c70d810e0326",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6fa622f2-7168-470a-9c14-197f088eaef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb269b3d-fb59-4ce1-b902-9f1c16b648b2",
        "cursor": {
          "ref": "96545940-1502-4254-90ff-a5be3983d177",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "74fa9ee5-b9c3-49f7-b232-9debfadd2915"
        },
        "item": {
          "id": "bb269b3d-fb59-4ce1-b902-9f1c16b648b2",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "3480e9d8-63bf-405e-af95-5a3f0c14ab8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5373640-004d-419b-85b5-4de43a577842",
        "cursor": {
          "ref": "f6f2edba-ca27-4ae3-8a1a-b078561e747e",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c35e8c5d-8b44-4a2a-8a7c-50abd7232bf5"
        },
        "item": {
          "id": "e5373640-004d-419b-85b5-4de43a577842",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5181e83b-0bef-413a-b6ca-2161a3b694a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f37c0336-1370-43d0-9c57-136fa2ef0674",
        "cursor": {
          "ref": "f2c1b09f-abda-48cf-ae04-0e868d3be0a3",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "08b9ddac-6c51-47bc-9435-571be5f4941d"
        },
        "item": {
          "id": "f37c0336-1370-43d0-9c57-136fa2ef0674",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a9029e04-2fcc-48b1-8344-884b1f5b3b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fda0bd66-543d-41fa-b314-3f448c36b970",
        "cursor": {
          "ref": "9f5dea15-ae19-4be6-9903-d221c7314964",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "878f25f1-5396-48b7-a80b-69ab0e9c7905"
        },
        "item": {
          "id": "fda0bd66-543d-41fa-b314-3f448c36b970",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "54767cd5-e126-4204-96bd-22fcc35a475e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d03c7b-635d-4993-8ec9-5f91972a4732",
        "cursor": {
          "ref": "e1904d06-d448-4ca6-98f3-5fbcd57bcc0e",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f61ed4c0-ccb4-4c6b-a486-a12aeed46ac7"
        },
        "item": {
          "id": "b8d03c7b-635d-4993-8ec9-5f91972a4732",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "cd37b90d-21c9-47eb-bbaa-84eec15a2a36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "071ec3d7-b614-4d4c-b2b0-ce0d6cd7090e",
        "cursor": {
          "ref": "703d6b8d-6655-4152-8f53-8f670575cf27",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "bf42cf00-e970-4240-85d5-cfe37a0e2c83"
        },
        "item": {
          "id": "071ec3d7-b614-4d4c-b2b0-ce0d6cd7090e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a607f450-f504-4301-b047-5ebe58998a91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ee4ae5-b733-4179-97c0-93fe8815ebd5",
        "cursor": {
          "ref": "f00127ab-6b38-49b3-869d-043403b334ea",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "5227ea01-8b4a-46bc-9e19-b5872ac8f7d0"
        },
        "item": {
          "id": "c6ee4ae5-b733-4179-97c0-93fe8815ebd5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "554b7d57-16fc-4921-acbd-6cf1802e1824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f11751ff-39ff-41bd-9947-68c73c8b22ff",
        "cursor": {
          "ref": "e1583d62-c453-4c74-af23-4bfe136a2aa5",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "2b7a3f7d-c8df-402c-a549-58500f43b4a5"
        },
        "item": {
          "id": "f11751ff-39ff-41bd-9947-68c73c8b22ff",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "25dc12ec-c56a-4226-9bb1-c4a33bbcd64d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a2307da-6d99-40a7-a26f-5a0c5f2191a7",
        "cursor": {
          "ref": "02208288-a026-4606-a99c-3044b581762c",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b64c9d28-cb34-4a57-9be4-9b9c4a44366b"
        },
        "item": {
          "id": "0a2307da-6d99-40a7-a26f-5a0c5f2191a7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a649e914-cc37-4922-8383-a374fb5f4769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8080d93-83f0-4fcc-a3b9-20beccc02a4d",
        "cursor": {
          "ref": "04a16b67-5a22-4f57-8eb8-1db428aa499f",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "1b5066f4-9174-4986-b0cb-c7406580b3da"
        },
        "item": {
          "id": "d8080d93-83f0-4fcc-a3b9-20beccc02a4d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f75cdb80-160e-4c53-97a1-88491c892491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "275d3b9f-b2b0-4d58-bf61-5016b89a18cd",
        "cursor": {
          "ref": "5d25760c-5991-4692-85cb-5a0d30da06c6",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b668ac1f-46ed-453e-99eb-3342bda2449a"
        },
        "item": {
          "id": "275d3b9f-b2b0-4d58-bf61-5016b89a18cd",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "de6fe05a-133b-4f77-877b-fba10357c13e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d37657b-8558-4d22-af4f-6517ca7cac81",
        "cursor": {
          "ref": "77f9c725-1da0-4ca1-a5f0-f4a2a3bfc215",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2397d24e-7edc-49d8-8053-49dd9047ecac"
        },
        "item": {
          "id": "1d37657b-8558-4d22-af4f-6517ca7cac81",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "59b9f089-3805-46ae-8e85-c4818fb1daf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2897b13c-0a62-4f33-a189-c6dab9446bfc",
        "cursor": {
          "ref": "c162d85f-bb91-4eb6-82e9-b24a1a14da91",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "3632db74-a543-4aa0-9d20-80f5a414a035"
        },
        "item": {
          "id": "2897b13c-0a62-4f33-a189-c6dab9446bfc",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "55c5caa1-9b65-4e8e-8056-23fc90d070c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb991ed3-991e-4232-a2f4-904a4ab89c4b",
        "cursor": {
          "ref": "eb9d6abb-4336-42a1-936f-0a48c7054b06",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "73fc3a5b-32f1-48ee-b3ca-73c3d23fa0ce"
        },
        "item": {
          "id": "eb991ed3-991e-4232-a2f4-904a4ab89c4b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "046c39ab-c492-466f-b9bd-89270612a55f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "139d53ed-932d-427d-940b-c165c4419b37",
        "cursor": {
          "ref": "31b1d736-0f34-4d14-bc70-27e05b1633fe",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "0a07c935-9152-45e1-a830-d86eb9eec3ba"
        },
        "item": {
          "id": "139d53ed-932d-427d-940b-c165c4419b37",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "68bf3cb9-8b0c-4352-a131-c3e5ac717ecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5242b823-df7e-4bfd-941e-bd054bdc415d",
        "cursor": {
          "ref": "aa40412d-706a-4df1-b0d0-593b6beecb87",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a05c71e2-7c28-4609-88a3-8e2995548edb"
        },
        "item": {
          "id": "5242b823-df7e-4bfd-941e-bd054bdc415d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d4300a12-79f3-42b2-81f7-a090e6b75ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27b9c741-c307-4349-9328-167d1b20d99d",
        "cursor": {
          "ref": "c0632b94-6d19-44ce-8a43-cfd302ab46c2",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "fc90732f-7839-4aad-bc8e-352cb16e73e2"
        },
        "item": {
          "id": "27b9c741-c307-4349-9328-167d1b20d99d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a00d7f61-f9f5-4d0a-a2ad-63c2dee2035c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a060d4b4-2dd7-4181-a082-e5977f3fe136",
        "cursor": {
          "ref": "41a40499-04aa-4bfd-9e06-d7427f6eede0",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "fd5eee0f-ab20-4ebb-869b-0b1e9b4bb723"
        },
        "item": {
          "id": "a060d4b4-2dd7-4181-a082-e5977f3fe136",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "53763657-2d6c-496b-b417-23bac66c9c7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03abb6bd-1e3b-4d6c-bed0-4dff65de96ac",
        "cursor": {
          "ref": "760f9395-2c54-4510-91d6-0eada877365d",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "7f55d265-2c90-4001-8a60-16f6a7d856bd"
        },
        "item": {
          "id": "03abb6bd-1e3b-4d6c-bed0-4dff65de96ac",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "0bd68971-008e-4419-9b33-1eaae6c80cc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "779346b7-bd58-4c37-ab16-3076ddbbe41f",
        "cursor": {
          "ref": "bcd1f2e1-ea4e-4b20-a7a5-c4aabfc8a8cb",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "75b75c21-031c-4153-aa65-18bd33161ea5"
        },
        "item": {
          "id": "779346b7-bd58-4c37-ab16-3076ddbbe41f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "fd7f8f51-e8b5-4049-a1b2-4ecd496dbe3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6316421d-2a42-4a0b-8cfd-206ab42f7d47",
        "cursor": {
          "ref": "f19b6838-ba30-47d0-aa82-9152e4ed2736",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "7da4bb53-f6a3-4301-a03b-ad3355d4e67f"
        },
        "item": {
          "id": "6316421d-2a42-4a0b-8cfd-206ab42f7d47",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2f9a04bd-8844-4d66-921b-4ef568007fa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7ce109a-72c8-41b1-8d8b-5825432ef55f",
        "cursor": {
          "ref": "8e4aebd3-5404-4507-b01a-7817bbead8a8",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f95cc30a-7162-48c9-995e-a56a66874f41"
        },
        "item": {
          "id": "f7ce109a-72c8-41b1-8d8b-5825432ef55f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ad1d5ad3-ef56-4409-b039-64f68b631307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0bad639-1e19-4a26-a0c5-322ca62078cc",
        "cursor": {
          "ref": "5a7ccfec-1ef2-48d0-bcce-3bd3f0ae9eee",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ae10a3c6-8650-4fcb-be02-a00056076070"
        },
        "item": {
          "id": "a0bad639-1e19-4a26-a0c5-322ca62078cc",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0606e2c3-be8c-4a5f-be3e-e1ae5f4d7516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf378bf2-5b67-49c7-8439-ac748b156135",
        "cursor": {
          "ref": "7f42a071-69b9-4797-b803-84e143579b3c",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b1a9acf5-bab2-446e-a811-d75adedcbecf"
        },
        "item": {
          "id": "cf378bf2-5b67-49c7-8439-ac748b156135",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a8d0bb08-0599-4039-bedd-e40ef6914cf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "041d7b3c-ec49-4d1c-ba80-d94ec52474e1",
        "cursor": {
          "ref": "ec69e9e6-6d03-4a31-a6bc-9d94cde96f7f",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "8caf28fd-3578-429d-a60a-72809cb34803"
        },
        "item": {
          "id": "041d7b3c-ec49-4d1c-ba80-d94ec52474e1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "068ab116-11de-479a-900c-3695524f6b91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "784f8d29-a745-498c-bf7e-a36d4dff6771",
        "cursor": {
          "ref": "9a8e9779-33f7-4935-a5b4-03bcc14b4843",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "84a47ea0-c4fe-4a6a-874c-bdb84f99d8c3"
        },
        "item": {
          "id": "784f8d29-a745-498c-bf7e-a36d4dff6771",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1e05e3e4-17d4-4b0b-9bd9-28ec774e72a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "420bd2fa-5758-409c-84f0-f123bf467314",
        "cursor": {
          "ref": "307ef7f6-013a-4e89-8862-158811b62310",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "26d1bec1-15f2-47f7-b742-8ee1a0ede7ca"
        },
        "item": {
          "id": "420bd2fa-5758-409c-84f0-f123bf467314",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4b4cbd15-e061-439f-9868-5dd18ef8fcc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2723238e-5928-4fc6-b763-250497146371",
        "cursor": {
          "ref": "732d724f-7150-4a1e-8596-12dfc571e326",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "4a6dff14-bf63-432c-a848-51c98ac5eb64"
        },
        "item": {
          "id": "2723238e-5928-4fc6-b763-250497146371",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "712e3bd3-8f49-499c-aa01-1f37fca9aa71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "4633ad35-d103-4339-92c9-da0d99fe5e43",
        "cursor": {
          "ref": "da18d19b-d64f-44c8-ad4d-2019bde2962f",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "93af56d7-9bc5-4507-b77c-2583d3b13ebc"
        },
        "item": {
          "id": "4633ad35-d103-4339-92c9-da0d99fe5e43",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "cef0bda4-b87b-4db3-9db9-2578bbabdb88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "054b1c4b-add8-4cf1-a463-aaf2d9610097",
        "cursor": {
          "ref": "a9f11ee3-1097-4079-a1ed-f246248142e1",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "9c0e97bc-af36-48bb-aac8-09fcb3bf95a3"
        },
        "item": {
          "id": "054b1c4b-add8-4cf1-a463-aaf2d9610097",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f7d89d2d-80d6-4fc3-8abc-ec4864332e93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c23d421a-82c5-4a1a-be55-69c380c840ab",
        "cursor": {
          "ref": "7c2347e8-4e2a-4de8-9f1a-37c8b0eb78fe",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "79424548-a47d-4861-8427-c0eebd19bec4"
        },
        "item": {
          "id": "c23d421a-82c5-4a1a-be55-69c380c840ab",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "980a3053-e1b8-4c31-9d4c-fdbcc4ef50fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a7d7a3e-4818-4103-b02b-6f1b40183256",
        "cursor": {
          "ref": "a6763dad-74f8-46ea-9a38-4653b88afe7e",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "99768c76-e00a-46e0-8e6b-3f480b04e815"
        },
        "item": {
          "id": "8a7d7a3e-4818-4103-b02b-6f1b40183256",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a35288c4-3873-4a9c-8062-95b518c83ac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a258834-5e99-43b9-9a42-e06e2b2f727b",
        "cursor": {
          "ref": "f4be1794-fb63-4668-9f41-638ee772f455",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "93564480-91e1-4b1e-9819-cd1ad517fe4b"
        },
        "item": {
          "id": "9a258834-5e99-43b9-9a42-e06e2b2f727b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8555967e-b74f-4b2f-9564-de30c436500a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8de960d7-019d-4c0f-baec-b4dd4db3b95c",
        "cursor": {
          "ref": "63010ca9-8a44-41c0-b8ac-4feb0f96bb2c",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "54e16017-da5d-41e0-9292-e6054dcd92d7"
        },
        "item": {
          "id": "8de960d7-019d-4c0f-baec-b4dd4db3b95c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "eeb33617-7740-486d-bd61-961ef1a71207",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b089785-ec1e-4e57-9469-8e0e8e368d77",
        "cursor": {
          "ref": "80d16a50-b671-4024-b9a1-88821bccb2ff",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "10cf8d5c-5a81-4f23-8ae8-f5f0d013433c"
        },
        "item": {
          "id": "9b089785-ec1e-4e57-9469-8e0e8e368d77",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d7877aee-71a4-4929-8717-f83be6f1f499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23414e07-d856-435b-9341-185b36e333a7",
        "cursor": {
          "ref": "49fb749a-7c03-40f1-8bb6-0df52d17cde8",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f53fc61f-13fc-45b0-b6c1-6bd552d27e9e"
        },
        "item": {
          "id": "23414e07-d856-435b-9341-185b36e333a7",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "cfe6d16e-d2f9-4fe4-80f9-38d29539d435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c15a6892-7348-4e8c-8896-7b3bbc1f5a58",
        "cursor": {
          "ref": "630638a8-e093-49a8-b8f7-ec639be15bff",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d58c3b12-9d96-4014-93b4-4bdeb4d00af9"
        },
        "item": {
          "id": "c15a6892-7348-4e8c-8896-7b3bbc1f5a58",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3505fa8d-f617-4943-b5b4-bb572c10a883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e6a84de-f5da-435a-a13f-cc7b1658d194",
        "cursor": {
          "ref": "4479cf9d-355c-4090-9a36-823d3e4f8819",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7e0b06b7-92cb-4b58-ad5d-9a4dde6d9ba7"
        },
        "item": {
          "id": "7e6a84de-f5da-435a-a13f-cc7b1658d194",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d6862f74-2a83-42fc-8265-f0ee571c43a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6f9edd8-8278-4a90-8658-173274e3eb36",
        "cursor": {
          "ref": "35e67426-6a39-4b27-a5e9-546d160e2677",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "ebb35444-ce1a-4f40-8e90-21aa4404dd9c"
        },
        "item": {
          "id": "f6f9edd8-8278-4a90-8658-173274e3eb36",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "232b333d-c053-4c17-b783-37ac6522d6e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e492c2-250b-4d45-9d95-815b608b6637",
        "cursor": {
          "ref": "c6351540-e930-4fa9-9f50-12d094525d14",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e1e233ca-a8c4-44d8-b97e-9a20812b9e60"
        },
        "item": {
          "id": "23e492c2-250b-4d45-9d95-815b608b6637",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c97ae22d-1eec-4ce6-8994-64c9fad39415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c73850d-de74-4e53-83f3-f04cee356b5c",
        "cursor": {
          "ref": "cb170d4f-acb6-4014-9c58-2e926b2c2800",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "14734e2e-d5b8-44f2-b818-2b374642e79a"
        },
        "item": {
          "id": "0c73850d-de74-4e53-83f3-f04cee356b5c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d5760a91-9544-4180-b89f-4498bbbde87d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc05b3b-04c1-4ef3-bede-e56840bb895c",
        "cursor": {
          "ref": "a54e0265-b80f-4468-8eb7-b77b291c3bef",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f1576b88-db54-4b17-84fb-f0c3c61e9064"
        },
        "item": {
          "id": "7fc05b3b-04c1-4ef3-bede-e56840bb895c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "2a1afe78-5671-4aba-9a39-569fd215cfd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9be6cf2a-5060-49c6-9735-92da78f1e95c",
        "cursor": {
          "ref": "33f6ed93-a7c4-4bcb-a24e-69f9be7d63b3",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "0895f440-c85f-4016-a6f5-0273292a8efa"
        },
        "item": {
          "id": "9be6cf2a-5060-49c6-9735-92da78f1e95c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f983998a-5b01-4873-9f89-9835e924d918",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "168a8724-34a9-47b8-8dc0-592576576af3",
        "cursor": {
          "ref": "61639b2f-8204-4ab9-87aa-9288bbfcf381",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "30a27bed-e380-4f2d-97d6-a91c5b4b6952"
        },
        "item": {
          "id": "168a8724-34a9-47b8-8dc0-592576576af3",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a96faeda-2711-4105-a105-9dca8caba84a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "167a7118-9141-4a79-905b-4b042d60aa61",
        "cursor": {
          "ref": "967f87d4-c494-46e7-b936-d976532c1570",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "cf9371e0-ef96-4e1c-bd5c-739400394449"
        },
        "item": {
          "id": "167a7118-9141-4a79-905b-4b042d60aa61",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "fe0d5f5c-2dce-466a-8426-94497dfe4555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be773a5f-5fa3-499b-b5e9-1923fe156f90",
        "cursor": {
          "ref": "45e260eb-fc86-4a64-97bf-92809b9c023c",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b73d1160-3d9f-441e-8149-9ec75c1efe45"
        },
        "item": {
          "id": "be773a5f-5fa3-499b-b5e9-1923fe156f90",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c8d8b0e6-3617-41a1-9c5d-da492021543c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf066fa-6cef-46ee-a127-d81041a2fcab",
        "cursor": {
          "ref": "e0576187-5fae-4baa-9e10-e14a31c69dfd",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "757b6b69-a34a-4ad7-a6e7-197f4b6e8ee1"
        },
        "item": {
          "id": "8bf066fa-6cef-46ee-a127-d81041a2fcab",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c47579a3-b0a8-4373-b986-04644e9aeb20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea3e6082-cc0f-4d3c-8ea6-f8e1836b6477",
        "cursor": {
          "ref": "a2870dec-2725-4acc-8bf2-87c86964fefc",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "9d1b9f10-ff41-4f58-8e81-cda5eb07a4d2"
        },
        "item": {
          "id": "ea3e6082-cc0f-4d3c-8ea6-f8e1836b6477",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e23a8950-f1bb-422d-8e70-2d0ee3724e44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75c97a97-5ea4-42dc-9f54-bce81ec520a3",
        "cursor": {
          "ref": "4b25c5b0-3ccc-4ba2-b8aa-86a1415f74bb",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a95cbfb6-719a-4851-82c8-e4af1ab1f120"
        },
        "item": {
          "id": "75c97a97-5ea4-42dc-9f54-bce81ec520a3",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "3d112a1b-14ad-4237-a6e8-ee71358b90cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef3d97a2-95b9-4104-b5b3-95b62508fd47",
        "cursor": {
          "ref": "d82cd531-37f7-43a3-9f02-9752e73dc9cd",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "61856dec-3a15-4800-9d05-bf301041fc7c"
        },
        "item": {
          "id": "ef3d97a2-95b9-4104-b5b3-95b62508fd47",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "64b18690-60cb-470b-b9a8-b63f2f16f5ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0607d78-1c30-492e-a666-4ffb0efba658",
        "cursor": {
          "ref": "5870b7d1-e696-4128-a094-9f519dbc1036",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "6115b0b1-dcac-46fa-9bde-98155dbffaf5"
        },
        "item": {
          "id": "c0607d78-1c30-492e-a666-4ffb0efba658",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "446fa8fc-8fe1-45ec-8396-279dcb3b2d2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e38f567b-8ed7-45e3-8ac2-1b7f9743d680",
        "cursor": {
          "ref": "f1e18330-fbb7-42e6-a747-60632365b4b3",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "90bb10d8-0d6f-49c7-ba69-5602c0cc3ae1"
        },
        "item": {
          "id": "e38f567b-8ed7-45e3-8ac2-1b7f9743d680",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c314c9ae-f0b0-4d1e-93b9-90cfdf3c0f70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34a8d210-d99a-4ce9-8b1d-44c993c50b70",
        "cursor": {
          "ref": "c02602fb-b9eb-403e-834e-b1e1d6b38623",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "3f22f597-7592-494b-94b6-52fa821b10ee"
        },
        "item": {
          "id": "34a8d210-d99a-4ce9-8b1d-44c993c50b70",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "83621e56-7c62-4786-9570-4c502fc87c2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7db87b4d-301e-44e2-a12c-a74eac275f20",
        "cursor": {
          "ref": "68824952-130c-463e-9a4e-750d39fcdc7a",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "80176b7e-4d97-4867-80cd-e40f92dc0e79"
        },
        "item": {
          "id": "7db87b4d-301e-44e2-a12c-a74eac275f20",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "12310e72-2eac-41e8-b5db-3df53a527846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03a96b83-5d35-4f64-916c-958fba3e37f2",
        "cursor": {
          "ref": "27298b6a-8266-4f7d-b8b4-6f12c010f79f",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "4b5db872-681c-4666-8041-92546022e18e"
        },
        "item": {
          "id": "03a96b83-5d35-4f64-916c-958fba3e37f2",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c900ff41-f29c-4c34-811a-0793e0294e6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab01d55f-a68c-4436-919f-e450c1f1e3f0",
        "cursor": {
          "ref": "72626928-0959-4c02-bc60-5e492a660bd7",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "31eb6015-1e77-4dbf-a4fc-1564b90967e3"
        },
        "item": {
          "id": "ab01d55f-a68c-4436-919f-e450c1f1e3f0",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "bbd83e45-4bed-43e7-b0a7-17cda1be94f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a83a42e-0986-4ed3-96ce-cab3ca2ede1e",
        "cursor": {
          "ref": "5c3a8c8e-3f45-424e-a09e-c541547e2a59",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b3b680df-6bff-4237-b634-e9207307a32c"
        },
        "item": {
          "id": "8a83a42e-0986-4ed3-96ce-cab3ca2ede1e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e60e74a6-4515-4f19-a3c5-ea136a14cce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "456bac8b-a129-49db-8db8-eed1959fce55",
        "cursor": {
          "ref": "0d03e063-3d50-4e10-9eb9-62e78c46df1a",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "7e72ee69-fc53-4738-9182-61799d182233"
        },
        "item": {
          "id": "456bac8b-a129-49db-8db8-eed1959fce55",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e149ac59-79e6-4547-8376-176a890a6a5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e882a8a-e281-43e5-9f54-f63cdfc8c239",
        "cursor": {
          "ref": "63a25d1b-a36a-443a-b4fb-1c489cbc102c",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "64ac9773-a0a0-4eba-be33-59ac8063ff04"
        },
        "item": {
          "id": "1e882a8a-e281-43e5-9f54-f63cdfc8c239",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "52563be8-30ed-42e0-84ac-6b8c2bbed203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e253ad9-2961-4948-8912-382e6055e0cf",
        "cursor": {
          "ref": "1bab5c0f-6111-46ae-ab37-93e748d6a7a1",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "83f804a8-2a21-4f8f-a834-7d06792bbcdf"
        },
        "item": {
          "id": "2e253ad9-2961-4948-8912-382e6055e0cf",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "4040fff5-1fe8-4463-bec0-8c60e4d4dca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fab7e8b1-77af-4b50-a5e7-2ece1bbb9066",
        "cursor": {
          "ref": "c31becb1-4099-4f3d-a1b5-65f950960c90",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d4168283-1ca0-4789-98c3-61d4c717e69d"
        },
        "item": {
          "id": "fab7e8b1-77af-4b50-a5e7-2ece1bbb9066",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "a4315f7a-0567-442e-a1df-44deeff601d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c467fdc-4eb1-43df-aa10-2d0646bf7630",
        "cursor": {
          "ref": "28dbc223-65c9-48e3-bb0c-d31d8e59e9c3",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "45b432c3-1903-4795-8713-1b2cfc73667a"
        },
        "item": {
          "id": "5c467fdc-4eb1-43df-aa10-2d0646bf7630",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "7ce36f66-409f-495c-8315-3ec919d936f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebc3a3de-8de2-4ffd-86b5-753ee5e29c0c",
        "cursor": {
          "ref": "f60adf61-246f-4dff-ab27-c1398b9ac706",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "6cf85b23-191a-49c1-a1de-0ec1411b8337"
        },
        "item": {
          "id": "ebc3a3de-8de2-4ffd-86b5-753ee5e29c0c",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "b8642428-ae1c-4707-b3a6-ca3677d25fbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a76ce3-be3e-4202-ac9c-02132184bb38",
        "cursor": {
          "ref": "6418d122-9769-478e-a97c-7f21e74dd4b6",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4b1c5b12-f8d8-4dec-8478-bd6f7e9a1348"
        },
        "item": {
          "id": "b6a76ce3-be3e-4202-ac9c-02132184bb38",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "3f860fb9-7f0f-46b7-84a2-c4883c1546a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2098e1fc-72f8-4f34-b499-3da0fac9e07b",
        "cursor": {
          "ref": "6db86cfb-2595-4a22-97b9-ff407b3418ba",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "dd2f53b7-55fc-4d74-9326-087074a88deb"
        },
        "item": {
          "id": "2098e1fc-72f8-4f34-b499-3da0fac9e07b",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "317b94e7-b81b-4d6b-9605-d98ff6cc3cba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dc69def-0a40-4b8e-b416-7819197670d3",
        "cursor": {
          "ref": "0e249664-3265-410b-a553-f87a26bce629",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f3bc099b-d972-4408-a040-76d24b6e30a8"
        },
        "item": {
          "id": "2dc69def-0a40-4b8e-b416-7819197670d3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "63af7131-b4ac-42f2-a48f-966bc449c87d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "dd8baead-b552-497c-aefb-8c5aba61de11",
        "cursor": {
          "ref": "84bf9d6c-0690-4b6f-a422-17174d954c5b",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "b09d3e2c-a87b-4926-bedb-99d884915b68"
        },
        "item": {
          "id": "dd8baead-b552-497c-aefb-8c5aba61de11",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9aaac484-3197-4705-afd8-77bde668e7a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f23596b2-ace7-40dd-b6f0-3b7f7660dfbb",
        "cursor": {
          "ref": "4c7c25cf-9d85-4710-8405-5c7e861b290e",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "5c99d4df-0788-459d-91d4-81ff733dd32e"
        },
        "item": {
          "id": "f23596b2-ace7-40dd-b6f0-3b7f7660dfbb",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d4f72118-236d-4db6-80d7-707dd096633b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63fe7d7f-46d3-4d10-94dc-4f4879c6455e",
        "cursor": {
          "ref": "01b9fa21-3ffb-4bea-8089-cc38831a5cb4",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "8be60d42-1a1c-4ff9-a6b3-55a5f4b5679c"
        },
        "item": {
          "id": "63fe7d7f-46d3-4d10-94dc-4f4879c6455e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e9942b4d-cce6-4b78-a978-57a26c9d80f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dacf56c4-655e-4f7a-bf91-20e253927818",
        "cursor": {
          "ref": "2d82e053-1021-453b-99f2-2446ac924209",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "7b9b9268-251e-4427-9795-4b060d87fb7d"
        },
        "item": {
          "id": "dacf56c4-655e-4f7a-bf91-20e253927818",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "9f90e6cd-6c85-4914-b271-dfc811677974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "520c81e3-883f-4474-9c8e-73b4a4805473",
        "cursor": {
          "ref": "863421ec-c4e1-4dfc-9706-f8e30a8dc050",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "54f049ce-c781-43d0-a88c-fc94cd8a7007"
        },
        "item": {
          "id": "520c81e3-883f-4474-9c8e-73b4a4805473",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "9f98b155-e86f-4320-a317-5c64524c3fb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecc53dd0-b231-4918-9f83-d4c0d9ad498a",
        "cursor": {
          "ref": "78660aa0-ea50-4291-85ff-53f0e4b2eed5",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "f78f850a-f798-4238-927e-f707f5388ee6"
        },
        "item": {
          "id": "ecc53dd0-b231-4918-9f83-d4c0d9ad498a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "cff5d639-cd21-4a2a-8f5c-af432d693d3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42d32ce2-f57a-4ecf-b899-715926006891",
        "cursor": {
          "ref": "24d591de-e0ef-4b15-86d6-b07795b67aa4",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "68e96265-8190-4a40-86d0-957602961f24"
        },
        "item": {
          "id": "42d32ce2-f57a-4ecf-b899-715926006891",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "023f6101-889a-4cd0-855b-c11413aece39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caea5f8b-63a1-4648-8b7e-e328b3c5705c",
        "cursor": {
          "ref": "a2489ef0-f251-40f0-877c-8c41a4929223",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d04b3b59-c16d-4aee-afac-15489bd4681e"
        },
        "item": {
          "id": "caea5f8b-63a1-4648-8b7e-e328b3c5705c",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f2442c23-6fb9-4b06-9ba7-088fabacc868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7300f9c-57c4-448b-9ea0-f596a3c24307",
        "cursor": {
          "ref": "667748e8-a8cc-44de-bd33-87fadac30e51",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "74509f20-5cd2-432b-94c8-996a6feac6da"
        },
        "item": {
          "id": "a7300f9c-57c4-448b-9ea0-f596a3c24307",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "adb6c2e0-1f14-4f32-bee5-d9649c2f3eba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6687715a-4b55-48bf-8c4a-0ba02287027e",
        "cursor": {
          "ref": "79da110f-d09f-4081-97a3-415fb4725e72",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3200a1e6-883b-41e3-b1e0-63dce03470ff"
        },
        "item": {
          "id": "6687715a-4b55-48bf-8c4a-0ba02287027e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "3b697c96-64c2-4d5a-aac0-cbf8e6345603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9f1005e-42e7-4e2f-9214-902efbbb3133",
        "cursor": {
          "ref": "6d40116c-9314-413a-a6b4-936f38cf146c",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "e8b4e2cb-6ba7-4788-ae17-1bb88c00c6ca"
        },
        "item": {
          "id": "c9f1005e-42e7-4e2f-9214-902efbbb3133",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "48488c59-fcd2-4182-9ac1-77c15b248d4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aedb7685-c5d9-42b0-8ce9-1afc8dd2ddef",
        "cursor": {
          "ref": "67702dc9-57b8-4ccd-922e-4b1c6096d10c",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "651b067f-4e59-4506-83c9-da24128eda03"
        },
        "item": {
          "id": "aedb7685-c5d9-42b0-8ce9-1afc8dd2ddef",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "5dbfa511-28f2-4d02-a250-57cc60bd8824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddd096d2-d747-4698-bb80-522044f79e0c",
        "cursor": {
          "ref": "c4f48aeb-e309-4e14-9cc3-05bbc2b8692a",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9ccb31e8-72a8-47de-bc2a-5075a3d11873"
        },
        "item": {
          "id": "ddd096d2-d747-4698-bb80-522044f79e0c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "363007b9-2e14-404c-9e7d-47f6cd3e42ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8e6855a-ffd5-4765-857c-541610e195fa",
        "cursor": {
          "ref": "c53eae8b-7134-4fb6-be27-e5443ddfd29e",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "c4575158-82a9-40fe-8a21-06b2bda2264b"
        },
        "item": {
          "id": "d8e6855a-ffd5-4765-857c-541610e195fa",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "97ecf3b3-8f3d-4b81-9747-08bd49817ad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24ed8586-6bd8-4c7c-96c5-606838086ff2",
        "cursor": {
          "ref": "edbb35a3-8d07-434a-a3b5-855cee52908d",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "18c12bc2-cc68-4ff4-a950-152da8a90a10"
        },
        "item": {
          "id": "24ed8586-6bd8-4c7c-96c5-606838086ff2",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "814ca12a-5bf3-4c0e-89b6-adbc675fbfdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8487ca58-ee07-4934-ba08-0591154259ba",
        "cursor": {
          "ref": "f0ce5b06-ed4b-4d12-9558-a344cd2f5df4",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9db1b556-b280-458b-9a78-c066bedff5f3"
        },
        "item": {
          "id": "8487ca58-ee07-4934-ba08-0591154259ba",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "c5003b7e-584f-40cb-a4bc-062bf302a52c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46f2783f-b698-41d8-a328-cfccb18e6639",
        "cursor": {
          "ref": "9537356f-8795-4a54-ac5a-2e9aeb0fb6bf",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "d10d994e-003d-4de8-ae66-c8216da517ce"
        },
        "item": {
          "id": "46f2783f-b698-41d8-a328-cfccb18e6639",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "43756a1d-7f0c-43cb-af7b-b61590768cab",
          "status": "OK",
          "code": 200,
          "responseTime": 279,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "cf76ff5c-50af-47b2-86c4-480ec903295d",
        "cursor": {
          "ref": "9ed668fe-45aa-4843-a623-eb06a9c43ae8",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "7fe6c0f1-89ab-4497-be5f-c56b67b172e4"
        },
        "item": {
          "id": "cf76ff5c-50af-47b2-86c4-480ec903295d",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c3cfda93-5556-43af-9e66-b7b5bd2192ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7150d5db-ca02-429e-8aa1-83b5451e539c",
        "cursor": {
          "ref": "6efd020c-b86c-4073-b9e7-78f8ca9ec55d",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "15b041e9-679c-48cc-a533-5393c4a301f7"
        },
        "item": {
          "id": "7150d5db-ca02-429e-8aa1-83b5451e539c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "a83c4ff5-5fc0-4d0f-8054-0b54379383f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a3242d4-1c0a-4dce-aecb-2b29d3e9e2a1",
        "cursor": {
          "ref": "a10e23f7-f7cd-4eab-9d83-1394cb71e203",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4c594afb-6b18-4190-88ec-24d936a2ad72"
        },
        "item": {
          "id": "3a3242d4-1c0a-4dce-aecb-2b29d3e9e2a1",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "97f62ea5-42e3-4d1d-aa93-54792ee6b527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d2e5a84-8d17-4e1d-8cec-441e7bf87ecb",
        "cursor": {
          "ref": "20b11b34-1676-4a37-8a96-ffdb24807620",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "80efb146-9782-425a-bc07-5f64447bdb22"
        },
        "item": {
          "id": "5d2e5a84-8d17-4e1d-8cec-441e7bf87ecb",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "04a55bfc-6d7c-46ff-91ad-50df24827d31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b03a1ad-f012-4be0-bc39-141ee3a689f0",
        "cursor": {
          "ref": "70088641-b30a-4a1d-9a98-4a3639ed2dd7",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d6febf3c-6823-42de-bece-ff1b45d323ec"
        },
        "item": {
          "id": "8b03a1ad-f012-4be0-bc39-141ee3a689f0",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "8db7692e-559b-4733-8a35-bbb94e56d14b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c27cc51d-aab6-4fee-9ebe-0b4a999f073c",
        "cursor": {
          "ref": "bdd02d42-4954-4089-99fd-d76e176717b8",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ca95fd8b-8f41-487b-86ed-f07d2c4d4d1b"
        },
        "item": {
          "id": "c27cc51d-aab6-4fee-9ebe-0b4a999f073c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "2b4a6cc7-10c0-4823-9243-8236f0f51b93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3301658c-37cd-4151-ae5b-66d6d44153d7",
        "cursor": {
          "ref": "003a10c3-4060-4887-a308-4b1c513c2dbc",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b94731a5-966f-4364-b32d-7c24569c251a"
        },
        "item": {
          "id": "3301658c-37cd-4151-ae5b-66d6d44153d7",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "2c6b5df2-a290-484d-9fab-b4b5a471b565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25c0740e-b563-4ac8-b56f-dc7272bf3fa4",
        "cursor": {
          "ref": "b0118bd5-7b84-42d5-9b15-ea59c91ba999",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "ab752b59-2141-4f3c-ab6e-d460e6b3a591"
        },
        "item": {
          "id": "25c0740e-b563-4ac8-b56f-dc7272bf3fa4",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d25d4dea-d0d1-4162-ab42-39b3c6c130b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be19539-860c-4e79-8faf-f085daf3a8ba",
        "cursor": {
          "ref": "216631b0-55d1-4851-9acc-7f8f7f0c6334",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "020bf19c-eb80-4f4a-8253-698dd823f596"
        },
        "item": {
          "id": "2be19539-860c-4e79-8faf-f085daf3a8ba",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "eb035436-92f5-4912-9cdb-29f9885344f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c079ee25-def7-4038-bef5-984e150e99e2",
        "cursor": {
          "ref": "f9554e6d-9bee-4d9d-a488-33ee39763d7f",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2c98e1dc-76a2-405b-9bae-1d5be524ed55"
        },
        "item": {
          "id": "c079ee25-def7-4038-bef5-984e150e99e2",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "4d6e2f4d-0683-4d2b-bd63-a124dc933e4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39a4322d-74fa-4bd2-b780-e54661ed918f",
        "cursor": {
          "ref": "47046203-b786-425d-8fa0-5f550cbef0c0",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d68b7d44-4236-4ab0-af25-4db3b2ab53ca"
        },
        "item": {
          "id": "39a4322d-74fa-4bd2-b780-e54661ed918f",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "c9e236f1-9b54-430d-b378-406535b67010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73fc019e-055c-4990-b129-f470f991a257",
        "cursor": {
          "ref": "cae3d7c8-dd35-4d2b-9209-d0bf71d5ef12",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "64019b3b-fd9c-4b17-a450-5e85556d7eb7"
        },
        "item": {
          "id": "73fc019e-055c-4990-b129-f470f991a257",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "964763fe-f61d-44ae-af95-32adcced799c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5168b0c2-b51f-4660-8c6f-18273c24bd9d",
        "cursor": {
          "ref": "3d13778a-032f-49c3-a611-e32589ea8033",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "7022190e-dc3b-4751-9441-0c455adb648d"
        },
        "item": {
          "id": "5168b0c2-b51f-4660-8c6f-18273c24bd9d",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "3fdfefe6-d052-4e26-ae23-bd6480b64686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "035555e5-db33-4e05-86f7-e4e6008a9881",
        "cursor": {
          "ref": "b25dda04-1863-435e-878b-685c3b0e1713",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "42baa550-7eab-4ae2-adfc-26fffd49db1b"
        },
        "item": {
          "id": "035555e5-db33-4e05-86f7-e4e6008a9881",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "7455cfc0-7277-4446-a8d2-22ed144d463a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a02d54ee-5b19-4e46-a559-153d652c1fc4",
        "cursor": {
          "ref": "d0e349bd-c04a-4945-88bc-eb795c075b13",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "5bcc11bf-e494-4b90-a52f-0a5fdecb01b0"
        },
        "item": {
          "id": "a02d54ee-5b19-4e46-a559-153d652c1fc4",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b527c646-b987-4204-bbe2-5823b9c83571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01c7f647-52c6-474a-acd8-2b2677fe7275",
        "cursor": {
          "ref": "89c6f0b6-3493-45ab-8e67-22af1c44bc2c",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "98f8e55c-076e-411a-a294-8044e488ad6c"
        },
        "item": {
          "id": "01c7f647-52c6-474a-acd8-2b2677fe7275",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "9ed87a27-d8f6-42ce-89d6-a6ded6e11c28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c447e99e-a70d-49b7-a24e-5b3077f2aa3b",
        "cursor": {
          "ref": "ffd79382-81ac-4bd0-a3cf-9c6fc6e549f9",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "dd57107e-a904-41e0-bf9c-33ddae0e2fc3"
        },
        "item": {
          "id": "c447e99e-a70d-49b7-a24e-5b3077f2aa3b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "64c1c0b2-cc37-4eef-b931-e2bc439d6794",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac1fc38-6c9f-4093-b747-b74391d1d8fa",
        "cursor": {
          "ref": "3fd06c24-e654-41e5-bf8f-e862e0c94ec4",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "5ed62810-343f-4621-972d-cc5eaf146931"
        },
        "item": {
          "id": "cac1fc38-6c9f-4093-b747-b74391d1d8fa",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a7bf1830-7b04-4a31-81a0-764245d277f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88d0e611-9d0c-4d88-bf8e-c0bf68eb6bb4",
        "cursor": {
          "ref": "00059443-488b-4afe-a6a9-990e51adfbf3",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "45aec28e-defb-4317-9fb6-0af8b431e4bc"
        },
        "item": {
          "id": "88d0e611-9d0c-4d88-bf8e-c0bf68eb6bb4",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "053fafbf-d2ba-436b-b4fb-1b42dc14fa46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a064661b-2e5b-464f-93c6-0c3ff2f39129",
        "cursor": {
          "ref": "db2d3aff-0354-4d61-9275-9222602a802c",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "dd04a6dc-09dd-47f2-82bd-96e45f450611"
        },
        "item": {
          "id": "a064661b-2e5b-464f-93c6-0c3ff2f39129",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "965161e2-ee6a-4a3b-a642-61390f705155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7fe35a8-be81-4363-888f-9fbf52019438",
        "cursor": {
          "ref": "a00e09da-0908-4c23-8db0-a345cea3d14b",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "bb5377d4-23db-4b19-bb71-5f1dc0c226a9"
        },
        "item": {
          "id": "c7fe35a8-be81-4363-888f-9fbf52019438",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5a06aa0d-d938-471f-a922-00a450d6c146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eebc56a7-c827-4e87-b4e0-3553e95c6814",
        "cursor": {
          "ref": "36ee82d4-5303-4a1f-8388-c376663f3581",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b6762bb3-8bc6-4339-b4cb-38a54343614c"
        },
        "item": {
          "id": "eebc56a7-c827-4e87-b4e0-3553e95c6814",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "e1f193b9-e1bd-47e6-9afb-88f666f06fc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ad84729-af00-4e94-a459-0a4d47f7ae59",
        "cursor": {
          "ref": "bed88e9b-d014-422f-82f5-baf07f1c9382",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "58654c75-0a32-4f47-b8ef-14551c18eb3b"
        },
        "item": {
          "id": "7ad84729-af00-4e94-a459-0a4d47f7ae59",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a2df2e20-f6e5-4557-8e8f-b644003e94bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dd553ed-3950-4f60-ae70-4d338bb2e83a",
        "cursor": {
          "ref": "66b2b54e-2570-4948-9864-8f1b46c31a7d",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "c065199a-3940-483c-8446-a962cfc53ac5"
        },
        "item": {
          "id": "5dd553ed-3950-4f60-ae70-4d338bb2e83a",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "6f60d131-0692-4e88-a10e-c722b9d19f56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a97bfa8-ad99-4417-92fc-c392b4024fd1",
        "cursor": {
          "ref": "d4d73255-ea9a-4257-83aa-52af8dd7a17b",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "a8e99a75-caaf-4985-bdd0-d3947665cd9f"
        },
        "item": {
          "id": "7a97bfa8-ad99-4417-92fc-c392b4024fd1",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "f1e010f5-f25d-49d0-8573-f6d051c16edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4472866e-4f33-4b30-83b0-0e410a41b0ab",
        "cursor": {
          "ref": "6bccd0a6-bf55-4ab0-8d76-a1d0a3f71125",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "77fbdc08-4597-4dc9-ac94-0b69dc84e7f4"
        },
        "item": {
          "id": "4472866e-4f33-4b30-83b0-0e410a41b0ab",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c0767bcf-326f-4678-8ccd-3a26803c6d45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "208d5fa2-5dcf-4204-9f18-cb1dbe4d1b3c",
        "cursor": {
          "ref": "9cd82d76-58c8-4b72-8809-b42ac0f13a50",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "bfbc2f61-9f15-4ae7-8982-0533220e13b4"
        },
        "item": {
          "id": "208d5fa2-5dcf-4204-9f18-cb1dbe4d1b3c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ec3ce438-7931-4dec-ba31-b3995f85c711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 299,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a37ddf55-4b63-4e69-8300-df54f1448632",
        "cursor": {
          "ref": "3f9e6f40-6cca-4fdd-8561-0abf41054db6",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "7f7c5b1b-fe12-402e-93cc-f634535dae50"
        },
        "item": {
          "id": "a37ddf55-4b63-4e69-8300-df54f1448632",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "6eb63142-13b5-4d8e-8c25-fa3a7e45d808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2788a7dd-14aa-4089-ae73-a1c5ef0233ae",
        "cursor": {
          "ref": "9140b348-7c42-481a-a433-9307cbe6cca9",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "81f8ab89-534c-4e70-b903-8875ec822bb8"
        },
        "item": {
          "id": "2788a7dd-14aa-4089-ae73-a1c5ef0233ae",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "a29a2754-683a-48d7-b028-1c021ace91c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "861a2205-daa5-4e51-b4e9-170b4b75f8f9",
        "cursor": {
          "ref": "f24c1faa-893a-47e7-8ae9-8d9f8baa1192",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "c15e78cf-057e-4e3b-843f-c738c7633367"
        },
        "item": {
          "id": "861a2205-daa5-4e51-b4e9-170b4b75f8f9",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "ae3f46fa-bdf0-4a8a-8ef9-c06f11a804eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b9e77d0-5872-44f0-9bad-0d76b3050cfa",
        "cursor": {
          "ref": "908e8b7a-5ee5-46a5-bdf7-faf5f75e6775",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "390d7c74-9add-4fae-8335-032c20254b30"
        },
        "item": {
          "id": "6b9e77d0-5872-44f0-9bad-0d76b3050cfa",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d1fb4419-8dc7-4743-a003-c51a82f01827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f1c5a4b-b3a8-40fc-ad1d-09dc1ec482b3",
        "cursor": {
          "ref": "22b20e83-eec0-40e1-913e-10732600328e",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "96d7b85c-5d15-4684-a09e-7eadd390ff91"
        },
        "item": {
          "id": "7f1c5a4b-b3a8-40fc-ad1d-09dc1ec482b3",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "42504c3d-b664-48f1-81cd-9275c1a9f58c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "438b32c6-ab10-416e-967f-c29c9e545436",
        "cursor": {
          "ref": "4a3307bd-396d-4d1c-8725-aa69aed0f580",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "58c90d3d-11ab-426f-a943-f4204c49c249"
        },
        "item": {
          "id": "438b32c6-ab10-416e-967f-c29c9e545436",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "1d943337-6cd1-423d-a91f-61e3a7ce06be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ea186a1-4f63-4561-bf4c-ebaaa259d2f1",
        "cursor": {
          "ref": "e0dfc715-f8aa-4c15-aee5-9b774e56f4dc",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "307199e1-0563-4b1e-ad90-1dd63237d50c"
        },
        "item": {
          "id": "7ea186a1-4f63-4561-bf4c-ebaaa259d2f1",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4facec85-e9f5-49c3-96a5-8eeef6721d3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59d9893f-2613-4d94-af19-dc04c70653a1",
        "cursor": {
          "ref": "5128f2ba-0699-4abb-8567-6f950bfe7cf4",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c1b94a0b-85f5-4536-8437-a0baa615636c"
        },
        "item": {
          "id": "59d9893f-2613-4d94-af19-dc04c70653a1",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "f4cabd49-e183-485a-b262-0b9dbdd27d6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eac9b318-9f00-403c-972a-797ed4e19b2b",
        "cursor": {
          "ref": "628bc01f-d802-4326-af1c-cdc17d9e8e88",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "5b03ea6e-3cf6-4abb-9e54-9c2dfc77ec0c"
        },
        "item": {
          "id": "eac9b318-9f00-403c-972a-797ed4e19b2b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c6bab1e9-322b-4e4e-a660-cc7edbe213a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdfdd5c9-52bf-493b-b7ef-1ceb259c1a59",
        "cursor": {
          "ref": "600e6e32-7f66-4d2d-8460-175569d44b33",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "2fe6483c-2e88-4ff7-8553-a76c2f11706b"
        },
        "item": {
          "id": "bdfdd5c9-52bf-493b-b7ef-1ceb259c1a59",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "721ea0aa-a262-4c6f-b703-dd5abf222fdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ab5fb5-2884-4e2b-8553-bf8bdd17b486",
        "cursor": {
          "ref": "80cd82e3-6960-4812-a370-b7973aeec4ed",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a94c3c1b-defb-4b2b-a2ab-79c77a18a3e0"
        },
        "item": {
          "id": "65ab5fb5-2884-4e2b-8553-bf8bdd17b486",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "34f3557f-3485-499d-ba3c-c45836365671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0963d649-dbcb-46d6-963a-4c9a29b732d7",
        "cursor": {
          "ref": "84f02ec8-9faa-46c2-926e-5d1e8da2ee8d",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "3c89fcda-2395-4cd7-b8da-3e72ee9498bf"
        },
        "item": {
          "id": "0963d649-dbcb-46d6-963a-4c9a29b732d7",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e1a5f06c-b60f-497b-9971-f44559a3f56d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fefbaa9a-8bc9-4404-a128-6357f40a48f9",
        "cursor": {
          "ref": "6a950854-b5f9-46a1-80ea-4e42bed16e2e",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "05fd0d68-0fc8-4be2-a619-12f74d28557c"
        },
        "item": {
          "id": "fefbaa9a-8bc9-4404-a128-6357f40a48f9",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "433c00dd-53e8-4e18-b6ce-4bbe7a5ce0cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d8e0483-7a59-477b-a796-6000bf4c8a3f",
        "cursor": {
          "ref": "2cd1d1b2-6993-4fb1-bd90-a19e4c9b4f3c",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "5af58790-1413-4d1f-b957-a385964b76c4"
        },
        "item": {
          "id": "3d8e0483-7a59-477b-a796-6000bf4c8a3f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "d5da0da4-bd56-4f2f-ac62-d37bb7fc7122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a831fe52-db19-43c2-a978-75dd91d21ec2",
        "cursor": {
          "ref": "81422964-f7dc-4b52-a0f1-53735c540303",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "06726129-74d2-4e69-ae03-b186b2c037c6"
        },
        "item": {
          "id": "a831fe52-db19-43c2-a978-75dd91d21ec2",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d9cb097d-ceab-4afb-9d37-184dcf5be3c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "768516b9-2af0-4271-92a3-f7c88adad37f",
        "cursor": {
          "ref": "235552cd-da54-496d-838b-e70f2c481bca",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a2de1af9-3c2b-40ad-b9c3-42ca9badd976"
        },
        "item": {
          "id": "768516b9-2af0-4271-92a3-f7c88adad37f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f51bc4c8-e60c-4459-8871-aed5055eb364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09de0173-e59f-4aea-92b7-efebd4d14c76",
        "cursor": {
          "ref": "cee2ab3b-94f1-4a2e-8336-2f31b8bc5430",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "6489f374-c888-47a4-ad3d-a39e92516dd4"
        },
        "item": {
          "id": "09de0173-e59f-4aea-92b7-efebd4d14c76",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b3de0d19-45ae-4dd2-a749-37642fcacfea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "666c2a58-9ebc-4967-98d0-91f792017ae5",
        "cursor": {
          "ref": "742cc321-ebf2-40f3-a50b-f93fdfa1f0dd",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b7e91364-5d9f-4741-ace8-2a3315173523"
        },
        "item": {
          "id": "666c2a58-9ebc-4967-98d0-91f792017ae5",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "ea0f4076-dfac-4fb7-ba72-a012d950777b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93bd7c76-e00e-4eec-beeb-bde6dc552768",
        "cursor": {
          "ref": "1dfb8e3e-21bc-437f-9a89-c0230863ae40",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e3ed6bbc-f193-4c5c-996d-57de49fd7def"
        },
        "item": {
          "id": "93bd7c76-e00e-4eec-beeb-bde6dc552768",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f123cfcd-f0a0-4d2b-92b5-9912cfbedcb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95ed24d2-75ef-4c5f-a6e6-445153373b67",
        "cursor": {
          "ref": "e8fa0771-6ae4-4424-a030-481810d8ec0d",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "1a70a38c-79dd-4c74-8546-fd0c9825d78c"
        },
        "item": {
          "id": "95ed24d2-75ef-4c5f-a6e6-445153373b67",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "13d9527d-118d-45c6-843d-062e695c5df7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86c23257-6c57-4dea-b7c9-b50f1abdcc5c",
        "cursor": {
          "ref": "740415ec-9c05-4d08-8ed9-0e88fe0049f2",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c75f7355-9cdc-4762-a37e-c1a42eb46f2d"
        },
        "item": {
          "id": "86c23257-6c57-4dea-b7c9-b50f1abdcc5c",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ebfe590a-9cca-40ab-8ee1-a1c444549791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa4af34-bc77-435e-9fcb-164349761ffe",
        "cursor": {
          "ref": "fd31fe50-2e8f-4405-8be4-b72744560155",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "cc1e7a08-d160-4c37-8721-3ca5dc806f28"
        },
        "item": {
          "id": "2fa4af34-bc77-435e-9fcb-164349761ffe",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5a0a9d70-a2a1-4186-b02a-71eb0fd31078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "902d7d68-a80e-4dbc-a42c-291af6220e9b",
        "cursor": {
          "ref": "e6c4c3e2-6be4-454e-afa5-3f0f2a92f4f7",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "7e354157-2dba-41ea-9dc7-ad4d7284d216"
        },
        "item": {
          "id": "902d7d68-a80e-4dbc-a42c-291af6220e9b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0cbbcbcf-2e4f-4c5c-b71c-feaad173bffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "683298fa-cbee-473a-8faf-3d83af1464dc",
        "cursor": {
          "ref": "10b07477-d683-49c2-a7e3-66f253c66c7b",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "44cf957a-1762-4480-9a35-0d595c7713a4"
        },
        "item": {
          "id": "683298fa-cbee-473a-8faf-3d83af1464dc",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "80af95c0-0ff3-47e2-8ff6-f3db9f605a43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9573013a-7d1e-4aba-a06d-326f50d1e31a",
        "cursor": {
          "ref": "f9d2ea8b-d45f-4f0d-819e-fdaedd0786d1",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2dda9708-e9ef-4260-8cd1-affa97e5b4ca"
        },
        "item": {
          "id": "9573013a-7d1e-4aba-a06d-326f50d1e31a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "97671af5-57be-4950-81fd-33abedd8c5e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b70d6b33-eb51-4d7d-9328-a31fb73207bc",
        "cursor": {
          "ref": "03ee8bc6-9381-4cae-973d-a80eb1373027",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "008e22be-a2fd-4c27-b238-1d268bf4f584"
        },
        "item": {
          "id": "b70d6b33-eb51-4d7d-9328-a31fb73207bc",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "859898a5-97a7-47b5-bc22-15e12d23f5a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fb17356-d695-4b9e-b42d-dbadf8bb396e",
        "cursor": {
          "ref": "f02d53ab-af4e-4ee4-a743-e18db9ae6575",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "724ffbb2-ccf0-4c9f-8433-43d84886a1b0"
        },
        "item": {
          "id": "6fb17356-d695-4b9e-b42d-dbadf8bb396e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "08981707-cdf5-4d67-a3f6-90c4df13418c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89aa6e28-fe95-43ef-861e-5c5eece6fde8",
        "cursor": {
          "ref": "479baa0b-916a-4055-ac6f-85e030257c42",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c2b3c5ff-fd99-4589-957d-cffc7899ec18"
        },
        "item": {
          "id": "89aa6e28-fe95-43ef-861e-5c5eece6fde8",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "46fb5b5f-0769-4f83-a939-3310bed69f1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d1c45e-4d51-4a45-a0c1-6eefe7251d50",
        "cursor": {
          "ref": "f0553c44-bf6b-4150-a034-fc868db6c4ec",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "c22e0ad5-89fe-4ef2-9ad2-2dd9a9e1f340"
        },
        "item": {
          "id": "52d1c45e-4d51-4a45-a0c1-6eefe7251d50",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "da8b5e8e-34f6-438b-9ed0-3ca348b0ff1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8704114a-0694-4b54-8137-15630d5315de",
        "cursor": {
          "ref": "7e14cb48-ac63-4ac8-8611-5e28d2137368",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "8adda3e0-2b10-4e16-aa72-3fe06d91f605"
        },
        "item": {
          "id": "8704114a-0694-4b54-8137-15630d5315de",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "4afc6a40-e183-45a1-979d-1e1dcb9544ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b95b2ba7-ba7d-4b70-838f-90cd2fea9ee6",
        "cursor": {
          "ref": "41c9ac2e-9ea1-47d6-aedf-6912b97a477c",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "50e9cdeb-abdc-4c15-9411-9756595f9155"
        },
        "item": {
          "id": "b95b2ba7-ba7d-4b70-838f-90cd2fea9ee6",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a328047a-c226-48bc-a94b-79350023550f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad23f077-585d-4c37-b56c-08c762b53eb7",
        "cursor": {
          "ref": "d61daf03-ad07-4aa2-b7f1-fc37cc0c6008",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "8f1e71e9-4772-4fa7-a601-c00563e4680a"
        },
        "item": {
          "id": "ad23f077-585d-4c37-b56c-08c762b53eb7",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "170a7368-947c-4674-9dfb-f655b04f9e8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e08a56-32cf-4c29-b44a-b730de05fc2b",
        "cursor": {
          "ref": "8645358d-7aa3-4ef0-b2e1-591f840fd9e9",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "823b90ce-5d17-4272-b972-417770415b71"
        },
        "item": {
          "id": "c2e08a56-32cf-4c29-b44a-b730de05fc2b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "9369eb20-fbab-4d9b-939c-e7e09deb3232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b503f8-b385-4b7d-b743-d92b01a40a62",
        "cursor": {
          "ref": "e9599ca0-8ade-43ea-b1bc-e9e758170690",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "4ab6ccb7-c821-4013-abf2-0685c1025fb3"
        },
        "item": {
          "id": "25b503f8-b385-4b7d-b743-d92b01a40a62",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f2774d51-592c-4b7f-b85c-31706fde2b85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64a7bca9-1cb5-4449-88c5-8df4269f44da",
        "cursor": {
          "ref": "32797faa-ffa0-428d-8c75-58312225813a",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "10fd69da-6387-4462-bf91-cd00c93e88a7"
        },
        "item": {
          "id": "64a7bca9-1cb5-4449-88c5-8df4269f44da",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "622e1629-fdac-4bcf-86f9-56ce655e4c75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3499dca-3fcc-4a95-80bc-27c6a432b805",
        "cursor": {
          "ref": "38b1c201-f346-41f8-9e40-2352f28445bf",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "c6b30e93-d334-4daa-bddf-e4150a88567c"
        },
        "item": {
          "id": "e3499dca-3fcc-4a95-80bc-27c6a432b805",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "d6d08a33-eb61-49f5-acc1-7b9f73c412e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ede8e29-40cd-4ed5-88b6-9588e239381c",
        "cursor": {
          "ref": "1c4d5383-19d7-4543-8e8a-5f6e39bcfbc4",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "07052462-27bd-4cb3-a711-65089baea647"
        },
        "item": {
          "id": "6ede8e29-40cd-4ed5-88b6-9588e239381c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c2af408c-bb2b-4718-9861-2e18a9a1a826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "accc2988-d3ed-4417-b93c-5595a0eb7c11",
        "cursor": {
          "ref": "0c7593c6-8dae-4a1b-acb4-0b3066d0bb35",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "500662c9-3b0c-4b3d-8ee5-70849ec5ae77"
        },
        "item": {
          "id": "accc2988-d3ed-4417-b93c-5595a0eb7c11",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "2f809864-f07d-4e70-908a-a7d45d39dd01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "806312da-258e-4d3c-97b3-b9776ccc58bf",
        "cursor": {
          "ref": "96f0447b-fe00-4abe-b842-bfdd4fc4fb83",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "cc6373a5-2cfa-4382-acbe-54c00d1064da"
        },
        "item": {
          "id": "806312da-258e-4d3c-97b3-b9776ccc58bf",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9b43e760-b2fa-4886-a024-f9354d3f850b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2786b6c0-915c-40fa-a44a-8b5f35786046",
        "cursor": {
          "ref": "80d199d3-00b8-457f-b97e-9186f1f26cb4",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "3778fae7-1270-4f14-b7d8-d8ac3ff7856e"
        },
        "item": {
          "id": "2786b6c0-915c-40fa-a44a-8b5f35786046",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "13efe7f2-eaf8-4487-abef-5c9e6b306c56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff66a015-6cc5-4468-8d55-3d5293607044",
        "cursor": {
          "ref": "f84a189e-5328-43a5-baf6-d35e105920c0",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "8a95b434-7c51-4009-a679-04f7581ddd9f"
        },
        "item": {
          "id": "ff66a015-6cc5-4468-8d55-3d5293607044",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "2217817d-e26f-458f-ac3d-99edebea3437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04ca829c-695e-4496-92f9-84093896f802",
        "cursor": {
          "ref": "b00fab69-d4df-4507-ac72-ce5ad8f9e9ed",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "9802c5c0-8a99-43e7-988f-18b10bc01119"
        },
        "item": {
          "id": "04ca829c-695e-4496-92f9-84093896f802",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "7decacbe-1cc9-439e-8c4e-a536d418162c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd298df6-ef66-42ca-92ec-da56d76cc444",
        "cursor": {
          "ref": "572533a4-9741-42ec-a910-7e3c36aef0c4",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "76bbd43a-be10-42ab-a1b6-0f19dfb2f72b"
        },
        "item": {
          "id": "fd298df6-ef66-42ca-92ec-da56d76cc444",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "b8898809-9680-4c07-96d1-aa9cc46e649d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "872821ec-5786-4bb7-b3d1-ff8bd24a1f4e",
        "cursor": {
          "ref": "dd7e8af8-0f2d-4d3b-b89f-5ded8580a9a7",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "ecc7c4cf-62d6-4763-b0b2-d0c50944571f"
        },
        "item": {
          "id": "872821ec-5786-4bb7-b3d1-ff8bd24a1f4e",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "5bb1566b-5cf0-4574-8a77-57bcf2ead256",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "702ce826-2ecc-4096-962a-d72d59ebed8e",
        "cursor": {
          "ref": "6c7f0538-3989-4247-848e-c9f2ceb4339a",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "89606f4c-80d9-48a9-b701-ac2b2f2a4984"
        },
        "item": {
          "id": "702ce826-2ecc-4096-962a-d72d59ebed8e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "b5959a2a-14cd-4b40-9692-9059952d25c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e78b4bf6-9210-485a-9040-9d7a4abd9475",
        "cursor": {
          "ref": "186be548-6eb4-494d-ad69-5b9f2a9b0257",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "439e6072-71aa-419c-a7cb-59d895862299"
        },
        "item": {
          "id": "e78b4bf6-9210-485a-9040-9d7a4abd9475",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0dfc190d-bd21-4ebc-8592-2086c26606c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ca5067f-84d6-41d8-ab44-b1296a773587",
        "cursor": {
          "ref": "bcb3649a-7d48-4b51-85cf-49d0cffa5e4b",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "9ef6b76c-04e3-4dd8-aa1e-c6c28d8555c3"
        },
        "item": {
          "id": "4ca5067f-84d6-41d8-ab44-b1296a773587",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7c7f775a-eee8-4871-a70e-1f639ad9abe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e78dff23-267e-49fe-98a2-fa7b06baf5bc",
        "cursor": {
          "ref": "60d82f21-8dc7-44f6-bc0a-6e5a0e2afbd3",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "ea5072e3-a0e0-4c99-8160-9fe6bf7a7363"
        },
        "item": {
          "id": "e78dff23-267e-49fe-98a2-fa7b06baf5bc",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "0928ba10-0e89-4aba-aac5-30d03798f16b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9a2409a-5101-447c-bab8-92af22fae06c",
        "cursor": {
          "ref": "7dcd1231-b044-4adb-96cf-b57f028e43b9",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "bb803716-69d9-411c-ba2b-bbb469348360"
        },
        "item": {
          "id": "b9a2409a-5101-447c-bab8-92af22fae06c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "05007f2e-58c1-4fd1-b700-1808dc476941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf39e65-2c41-4506-b4b1-85b11e50e964",
        "cursor": {
          "ref": "106182e2-5f5f-4cfe-8d3e-82b8503da95b",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "0b0a3295-d911-48f0-a656-c165edffc21a"
        },
        "item": {
          "id": "cdf39e65-2c41-4506-b4b1-85b11e50e964",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "baff264e-800b-483c-85ac-990ee45027a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "957d8a75-e083-4ce8-879f-f3741343ca06",
        "cursor": {
          "ref": "83c2d579-7fed-4a77-8aab-dc205bbd97e4",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "9228b327-93cc-40b6-8056-ecf2054840dc"
        },
        "item": {
          "id": "957d8a75-e083-4ce8-879f-f3741343ca06",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "038caa16-bb62-4254-bee1-b66374da3e37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d8337b1-b2b4-446d-859a-7f12b15600cc",
        "cursor": {
          "ref": "4d289f84-2610-4b93-a3cf-f6ee1bd07ce9",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "7f309293-b2f8-403a-85c7-16832364b36e"
        },
        "item": {
          "id": "3d8337b1-b2b4-446d-859a-7f12b15600cc",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "124882d7-449a-47ed-a595-4275db3bc39d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3ab32f8-a1f1-4088-aae7-3dc394cfeac4",
        "cursor": {
          "ref": "a2acbe9f-8c35-4104-9aad-39b5dff7bb6b",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "f64fb86d-b473-49ad-9b83-b948c53d3dc9"
        },
        "item": {
          "id": "a3ab32f8-a1f1-4088-aae7-3dc394cfeac4",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "5caf9ab2-a182-4667-884f-352a72d2a427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7ddf841-787f-4599-8bc7-8d314663cfaf",
        "cursor": {
          "ref": "b860441a-bc0c-46cd-b7c4-b5fbf353f485",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "607e46c0-93e1-484d-8634-bad512741eed"
        },
        "item": {
          "id": "a7ddf841-787f-4599-8bc7-8d314663cfaf",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "110c1c5e-d85a-4648-8167-b4fe93c5ff0a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:276)"
            }
          }
        ]
      },
      {
        "id": "eee75f6c-5cd2-45cb-b1a4-c873c3ea200b",
        "cursor": {
          "ref": "ae7f5e92-afc6-40e0-b807-4ca348538e7a",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "2b29d61e-7e3d-4afe-b831-16732c02c89c"
        },
        "item": {
          "id": "eee75f6c-5cd2-45cb-b1a4-c873c3ea200b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "968acd53-0eaf-4e0c-bb2b-7d0b658ce451",
          "status": "OK",
          "code": 200,
          "responseTime": 183,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb71510-2091-49db-9888-a232cdfab072",
        "cursor": {
          "ref": "8f5da7b7-6e6a-45fb-8f95-3ab9a730c895",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "bd17ad63-704c-4a3c-98ef-1f8f71eea31d"
        },
        "item": {
          "id": "3fb71510-2091-49db-9888-a232cdfab072",
          "name": "credentials_verify"
        },
        "response": {
          "id": "44f0a206-1f73-4e15-afbc-43e827df2850",
          "status": "OK",
          "code": 200,
          "responseTime": 1758,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "26789741-0819-43bf-a6fd-d4dd24b36663",
        "cursor": {
          "ref": "2e8022f5-e51a-4a4a-a27c-2cc2d1bc09a4",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "be5b98bd-7d7c-4847-bb16-168f1c8ef15b"
        },
        "item": {
          "id": "26789741-0819-43bf-a6fd-d4dd24b36663",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "f57743c2-2669-4b3f-8f01-ce2ac3994c97",
          "status": "OK",
          "code": 200,
          "responseTime": 2679,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4a74ab-ba3e-4f9d-a7a6-2fad9acb5d18",
        "cursor": {
          "ref": "dbe6ab78-3c99-495b-9b87-36a0ffd18355",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "b0396719-0797-41eb-a3b7-c6be3a0c3745"
        },
        "item": {
          "id": "bc4a74ab-ba3e-4f9d-a7a6-2fad9acb5d18",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2fc45033-9f88-4dc8-8ac2-08b8ec47e946",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "bc4a74ab-ba3e-4f9d-a7a6-2fad9acb5d18",
        "cursor": {
          "ref": "dbe6ab78-3c99-495b-9b87-36a0ffd18355",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "b0396719-0797-41eb-a3b7-c6be3a0c3745"
        },
        "item": {
          "id": "bc4a74ab-ba3e-4f9d-a7a6-2fad9acb5d18",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2fc45033-9f88-4dc8-8ac2-08b8ec47e946",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "621177df-a740-4944-ac83-92b3b3cbdbb7",
        "cursor": {
          "ref": "70e75586-97df-4003-a153-5ac4b27b22ba",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "13a4210e-f569-461f-9dcd-8d0d9361fcd1"
        },
        "item": {
          "id": "621177df-a740-4944-ac83-92b3b3cbdbb7",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f9df65f3-d332-4b06-8b7d-24a104ad6247",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "0e22e127-c556-47c4-8432-5fdc44cb9f92",
        "cursor": {
          "ref": "2d183c46-d6cc-4366-9c28-73de0481ee68",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "f379b3ab-eae8-4411-b6ca-17d95907314f"
        },
        "item": {
          "id": "0e22e127-c556-47c4-8432-5fdc44cb9f92",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7053c450-ab52-4d63-9866-e6b7a9ff9158",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}