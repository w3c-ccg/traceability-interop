{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "156d8061-0ee9-4849-93d1-5cdcec4f1d05",
        "name": "Clear Cache",
        "item": [
          {
            "id": "7e06d019-975c-47a7-912a-105c70a2c2b0",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f50378b0-59ef-481b-a512-407dda7d4c3c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "dfedcce2-321a-4936-954c-1659fafda12c"
                }
              }
            ]
          },
          {
            "id": "fe5e8021-a065-490c-a3f3-305a414623dc",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e6dda6ec-d6fe-4c8b-891f-5ec18a9b63f0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d065531d-0aae-4b5e-8c0d-027d7d0c3496"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "22041259-8a9e-4c03-b0bf-e63e169dd8d1",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "71d3f3dc-6eae-426b-b047-87134b563bb0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5db9057c-e1f2-46b6-bafe-1b8dc3018697",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2701880a-bcf8-4d24-a88c-c0e7d4f69ee8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e0d2be59-43d0-4cad-9a57-8d4031b90aea"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ead4f386-1f55-40d4-aa83-e83af3b21887",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bb3a3d3c-be4c-481f-abdc-c6e1e01e39a4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bb707468-bd34-4151-b29d-7b5c2e38051e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d7a3b4e8-8c63-438f-8568-d679d58b49d1"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cd86ae11-3519-475a-a89b-ad8e9ade56f3",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "3d37382e-9c6b-4c82-866d-e33a6cd4f19e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "65e5fd85-3188-4fa7-9e76-5e02b1a420e1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "93423ddc-2a3e-42d9-b274-639a96d764c0"
            }
          }
        ]
      },
      {
        "id": "e3ddcb04-6965-4343-b8a4-c830db08ad38",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4f7fd83f-f15a-47a4-9089-44f18bd87cb6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c9fce29a-f843-4bad-b1f8-1a5d599eb4a2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9503c51f-ac2d-46f8-b9fd-c1e58189e823",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e08d3776-f979-4056-a8b8-4bebdcd2fc57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "84a9fe2c-98d1-4215-a084-fa893a79d82f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b7d111-2507-48e8-8dbf-b766fa9c5a2a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd4066da-1ec5-4b17-a3bc-f47af770f551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b594f59f-c7b1-4ab9-9535-4359d166b7be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f9dbd9a-f1b3-4c0e-9296-543d32f42879",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c7c95d-669d-4e57-b251-ee6a31268665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b96c0ee5-1910-4225-9dd1-7b44236ffdc9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "00c790eb-50f0-42bd-9a7b-758e330a9213",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3c20c842-3330-4795-814f-8944182002c9",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e1b2c08-e55e-4285-a7c7-b5f2d723c4f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f3e4f1fe-c2c4-46e2-aaea-28a8afaf2796"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d10cb1f-5765-4bba-8155-a51eff31b3d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c1e2dc1-ccdf-4652-86da-a0e261b0c913"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "da133ed6-9c53-4140-9bb6-455d69ed3796",
            "name": "Positive Testing",
            "item": [
              {
                "id": "86a8fe0b-47fe-49b8-b4b9-eba0316f058c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "30e9bf84-9ff2-4163-953e-fc664bbbfde8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5833a672-0cda-4495-9c43-cab570c58c8f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "680c851c-1edd-43c3-a083-7768b5c2dec6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "51af24dc-5638-4819-beeb-88b63c451ad0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dbfaa94a-a776-4015-9d26-c3afeff977e6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b040be2f-e7a0-40f1-9717-1ccb4279457c"
            }
          }
        ]
      },
      {
        "id": "270c6a95-c9d0-40df-89b6-068b40266147",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "147236ab-ddc3-4886-9730-e3e285c06c9c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f60a6ff3-d463-4eb5-b33f-2cb967e4d262",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "355fef21-1560-4dd1-912c-bb7dcbdacb66",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68bf77dc-4cde-4b0b-b374-b3e623d2dfa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddff6657-547f-4289-b3fb-7378f535d8a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff60a67-05f8-4c83-aa22-4da56ff1fd68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5660e440-5db8-4831-ae7c-a4f679b273a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5de93b47-1b75-4f78-aee3-b6c4bd667a89",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47876209-2a7e-419c-8a0b-3cf2fd776c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ffbb0c8-6d5a-4caa-af04-e8ed2af50fc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e36a41c3-84be-40cb-a8ff-27585f490ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd4f9da0-057d-4526-8ef8-29b963dc13b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef3fdb69-4889-423d-b043-c4cf973d0a4c",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b38ca070-72aa-427f-b574-fad524fb33c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e301c1d6-8b82-46d3-9edf-3775f5ab374c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9881f56f-16f3-4a44-b0ef-402b79b5ff27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af2ab5ad-3df7-4285-9c71-b2aaf0dc0827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35490af0-6ad6-4e1d-be7c-9cf4bf3b2ac7",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d7db00a-1e43-4082-bda4-ff6e7dd9837d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c8e56a3-04d4-4596-bc3e-698899bf373d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39bb30db-3be7-44cf-ae8f-ee15d2e7bdf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8622b6d7-41fa-482e-ac2f-7d721bb77f4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e46883-256b-4991-adef-cd09e6925e25",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "696b7add-4b29-4625-ab7e-9a294f6d0a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f271b027-2582-4791-b75e-7a337f61b242"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c94400-6634-4a1d-8055-d0b6237431c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dbfa4ed5-f823-409a-aa57-5db4f3859f6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74df681-a35c-4269-9d30-e14d1c1aa4c9",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba4bafd-16d7-46ea-8c90-c5e1801e5ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8733d1d-7daa-4dc1-8195-7faecf9b333f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91041c5b-4b69-42cd-95e7-8aa4217a020e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4521cf6-3bfd-427d-b2b2-3eb5b0541bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "935a8a24-5b74-4e52-95c9-23777dc73cc6",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a40fc30-6505-42dd-a65d-a23383e8ec64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93551889-a22d-4b5b-9e69-f7e26a7e34a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9f11664-7469-4c31-b9c0-846084fba179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a07886ed-86b8-41d2-a9a4-88499e6fd1f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828b6ce0-0fe6-4d9a-88ce-4bdf3a4c706d",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97218644-24e8-449b-9877-b910dbd12787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0b3ece7-b59a-4ccb-92c2-ce03dfcdaee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd571f0-1376-41f2-b48e-a6b099a5881f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1af42bd0-6bb2-444d-b5a2-9035aa90c02b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87503bd3-c281-4f44-bc55-80388f05f68f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d644e83-d553-46fd-b9a6-17d5d3647e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da7f4327-31c8-4ee1-8773-f6aeefc10c9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "805edf06-ddaa-47ed-b41f-daff7aa9f5d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6bca9c57-7062-4df7-a6bf-cc280d27ee10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aea91b7-5d81-4ff0-b59f-3b4f40842b66",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac9b29bc-732c-48ce-b18c-c2c95ac7ecd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31b642e2-d66e-4937-9745-5db41b4dec51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d89d5bab-6b70-4044-a8d8-28732f53aedd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ae2d25a-5078-4a47-9653-886c431622b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2361178-3284-463f-9eda-25263258f558",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94674d3-d11a-4137-8a17-9d70bff88523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73f1b811-267b-4ad8-8b05-c90cc6b7c7c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "425cb0dc-53e8-42d0-b2c6-8336d3f21370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b03d8f7-99d8-41e6-94dd-ad6c64372524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf6a635d-2ede-4de2-b2f8-57684fec79a9",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "230e3417-ec0d-4db6-93f3-649de484262b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a85f91b-a5c0-40d9-9769-341589549389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "921f6b67-9eb9-4486-9fdb-988a9bd88526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "58039e74-ecd9-4646-9d57-27d95994df71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "725fd066-53d2-44fb-b820-dff29718f786",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b5467a-6175-4d42-a486-3eac3c07ef96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb5229a8-f35d-463f-8385-cf846e83595a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5df433b-e5dd-48a6-b416-9ea03a46092e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f312953-384d-4ae2-84ac-3fb8747c0d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fdb3e7a-f66f-4f88-a9d7-8f108181eaba",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf3f1c42-6391-4ff2-86d4-36a60bc415c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4b1a491-f6d9-4d3f-9fae-42195a4ef0e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc85f63-09b5-4eee-ab29-8af155d05bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de822104-c19b-491f-a241-87ad0d753441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36eab6f4-e099-46a9-9e5c-96e3f4ddf54f",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76c2a1f2-0900-4b7c-999b-45a092b4e07f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dc4c66c-f728-4bf4-ac34-e41b804bfa08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bafb038-4a4e-42f0-9032-f03c12f4d35f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a324849-727e-4633-b9da-0c46dc202c6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a63b184f-c675-4c15-9fee-6a910996b1a0",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d49997a1-4918-4d22-b192-255a2d9af583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fbc19f9-a6c9-4b8d-bdaf-90e8a3ed02f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3428703-b734-432b-a305-74aa59a49f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "53bb87be-bd43-43d3-a35b-aa23a058ec61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "441ca553-967b-4b3d-b4e5-5fd2c45cd54c",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "401ee805-a3c3-4485-82cd-5a90833bbd81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "196a5f22-d772-4119-93ed-d71f66d4c251"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b90eda0-79bb-489c-b41b-0a1b75f63620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "869fda7a-67f4-4b5f-92d6-2420a5f0d275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "776dc416-d084-45f0-a4a6-9a4d69caeaef",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f93856d-516d-4400-b6b9-b8872e0dbc44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69fa4e0a-b684-468d-83cc-4e354d5c34b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7294bbb-1355-44a2-b942-ca00e77b7f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7b2e5fa-089e-4a20-8c1a-6714d351515b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a55e3ff-bef7-4f04-b354-dc801dd880bf",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d28d4d8-97c3-4a4a-be02-274f83d0eaaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "184c7655-46a8-4f58-8f35-070122a39b4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7348cd5-9e73-40d0-af36-915d5421a36f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "84c5c931-580d-468e-9425-31500757d1c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "536f5677-f446-48c3-8a9a-1d9024981328",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f993fd0d-2aa4-434c-a268-00971fc54713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41f74e75-f12c-4df5-ac4a-c097f0e2c64e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e383ab3c-f70f-4970-9876-ec96ab98c3e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a75a6f01-ce9e-45b9-b4b0-3ee65c88730f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "908422fd-6526-4c6e-84cb-5bb204370889",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6560b6e-266b-4025-b641-ad51c9a5728b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "583eabd5-247a-4d59-821a-d4208ce4ca0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03681763-70df-4908-8401-af2606fbf303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cdbaeef-df90-48b7-9fd7-88940050da41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1089ecdd-597a-4495-9d50-6107e4127ad1",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1284677a-ee26-4975-a35a-340e31664d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e31f29a-03ea-4fa7-a6a3-a3c3f84ac5eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ffbee92-ca2f-43ec-99f5-e2d5e8ec26cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "902116d5-5fe6-4db0-972e-8f3792984cd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "469b5f90-f3bf-4162-a5a2-9f500f8cd323",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a1ba7d2-02c8-4d24-9e51-2119d6e24f39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51ae19c3-ade0-4612-a005-79e3d0a026a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8d427f1-85ce-4123-a26a-e10eddb645df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7aee407e-8a9e-46b9-a976-c37163fdb119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1e64188-c545-4e6f-8891-e79f879b0dcd",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "668dabc8-a0fd-4821-953e-2890522ea5ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff2533bc-2965-4756-a24a-d14aa44b68cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef722a3e-5b6c-4b06-891c-bd5c4c4562ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f9cd01a-2181-40c0-b498-7b264ed3ac88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53cf3f2a-54c3-4725-838b-44218c893f4a",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a6e2cd0-49ec-4752-a944-52699e5a1bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd53884c-e931-405a-8718-5ac6da20a5c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f23c8a6-0a6e-4d55-8d2f-3b2add247c13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1802db21-66f2-49da-a4eb-7f14388a1171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff4c7226-0735-47db-afa1-78284770a7dd",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a0f40c-a451-4a73-9f3e-c7856f1e8152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b69d5c6-81e9-450b-8a07-bf8ab59f509e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3accc27b-58eb-431f-b232-5c1bf923b94f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "558df071-b64d-4c53-bd7d-6ef03e7f3b0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e60f633-2edd-4c63-8b92-c3065e6424f8",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b01aa8-0fe0-4111-80c3-1da9254612d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f642715e-8cf2-4d91-a383-6d7c7037d65c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97b070b7-70b0-4b3d-bc30-1dd947530383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "99157406-dba2-4b9e-8527-800350fb998a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c516258c-3fa6-41f1-a238-381078b8042c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "329143ca-dd61-449c-8530-1af23c210b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e309152a-0db5-46b7-89f5-0bfbb0c7e793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed8a689e-f92b-4a1a-90fc-6ae35a2a93dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "673c2030-65b1-47a7-a2bf-dff019d5739b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de022fda-365d-45dc-a0b0-761780f558e4",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2dc6154-9108-415e-98ce-fdb5d3568993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8be83bd4-2ac9-4be5-85d6-d3a42aeb3a89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb298e06-d549-4138-b911-a6e8498416d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1513a49b-b9b2-4329-8982-49f0e9656800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "884f5aa1-2303-4114-ba79-3acfd85877af",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c403c49c-cb23-43af-ba49-62eaeb73fa5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6fde7ed-8a07-4305-adc8-f9f5b143fd87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e054480a-0c33-47ba-8faf-d3983489ddf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "6afabfb3-dd5b-42ea-ad63-319cd43151fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "080ef888-bd65-415e-b998-d3a2af08338f",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a1ce452-4407-4307-8e5c-8a971f51d336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb75b5ba-a455-4dd4-abfe-c1896beaacb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "769936f4-32f5-46a8-b0e2-eb5d00429677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ea522cc-229e-4c13-9cf9-ec82744cf952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9f8244d-691b-4f52-8fa9-4dbc4bf6403c",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d23cd42-3b4b-4d5a-95c3-c23fbf26e6f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d003c6dd-82ff-41f4-acdf-ad0e1c309fd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bb755ee-87b8-47fc-b91c-429cbab4de61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e28685a-4881-4136-87c2-b832a9deaf0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3689a041-286b-4d89-b2a7-5a47d1cb17a6",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8b6e65b-3d24-4386-a79d-5c59e42edc6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8511a754-b564-488c-b355-e570dddd06f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d3521c2-fc39-4675-afff-c93e6a2967f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "52a28193-9332-4b3f-9d39-da04b9ac4ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f62697a-ac6a-4696-9630-1e5659ae19f4",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f495a17b-c015-4b9c-8ee0-aa0b9a3343d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad97a2bf-cf64-42e7-b315-da8664b32755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a62730-6973-48c4-bc90-e4c2f8df38c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "db7fabe9-8590-4064-9e74-a0ee2df57ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "babb6776-ec25-43f8-a641-bbaa6c096b00",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "026faa71-e057-41a6-a6be-06b31ae59b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe6a9a4f-8cbb-45e0-8bcf-c689961f9b04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dcb5cb5-5cee-454b-835a-61b1c9d1e558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "6b0b4747-fb99-46cf-8371-470b717ec23a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f565ed74-59c2-4045-a760-943097d94a2e",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd6e2ea-ada3-4fd6-b53c-b19310dd0617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "26b57771-3850-481d-8927-4aaae02dafea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ef8a1ef-5010-40f0-b5a3-89c7a26c0a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9423b242-63e7-4106-9b3d-a31621d8e7b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "974c2ee0-321c-4514-8dd6-f9c5c2c89fa3",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9398bf31-20fd-435c-bee7-fe29426d0d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "065ef8d4-8855-42ae-92a0-01c86ae6c06b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2606b5ae-08a6-43ac-854c-338fbb2298e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "81379c02-23fd-44bd-902f-da3e41c95334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "804d8303-69d8-4621-bc49-9ef5375982f1",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ee64b34-76e4-4eff-9a5e-743a1eb9e72d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d9cb4ab-4919-4d35-ac3d-095085adb864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34e58a10-a24f-4bbc-aa38-48ceb546bf2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ce8330a-5613-474c-ae87-700da1d0cd1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ee0f0f1-3974-4186-952d-4f90b5e81e6c",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4497ee9-5a5b-4def-a0b0-69bf08fc612a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ab79ab0-8123-488c-989d-f8f0fb355068"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4247d6ef-8098-4b64-909c-c04977f52fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d545694c-d706-4674-9c5f-b65d735618c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "230bd5b9-b957-4373-ad1a-257f228eb28a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "402ac920-2d0e-407c-83f0-6bc9676748a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d2fa5b0-93ce-44d9-8245-7a9ebece4d9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8411d938-6de6-401a-8aef-d8ed736a7815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "650dacab-c2b2-4a3b-8b48-7758effd4b59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43393791-3047-495c-9a19-7c193cddd3c4",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "348e4710-01f8-48f5-b641-5a2c849e8b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1745090b-4559-4102-91be-8bdd1d26432f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f770e1f9-db2f-45df-b4f3-f51b03e98fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8f20334-3a26-4ab2-a4c7-06af3de6be82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46950f25-6ec7-4b4a-8ae4-5c7af446bd59",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5d472df-43a7-42be-9935-58ea9f03f0e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a77a3fa-d10d-4e42-8568-d3dd077fad0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ce677a-3136-4a09-8eb4-574176045324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c93adf9a-e34c-429e-8013-a79934f26355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9225219-0487-48aa-b7b6-0e8e5d7157d3",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98d97a72-0c27-4c49-9dca-578baf573965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f31ec73-e209-42f7-89be-741e256a57a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4de83fa6-3ffe-4bdd-b028-cd3128839e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "343076b7-964a-448c-9366-686782741a86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bf3799b-5a3e-488b-9f94-72e6a75ab47a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "254eb252-70ab-4ff9-bfcc-f52f39329c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfc86e40-4ff9-4836-be95-8e6c4598d244"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ef56962-2d54-45b7-9e34-5aef58790319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a67cafbb-ba1d-413a-97db-4ab170ab123b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82efdcb2-0100-446e-b1bc-284e08f199bd",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f54e8cdf-b001-4a44-84d2-fb3ff154f316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfbc8b17-95e4-4516-9b83-d018fc7571c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c69df2-d69a-4a02-be03-8d34631a4577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6db42fb5-81d3-4e73-80e7-9910ffb8b795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7381f9f-dc6b-48c0-95f5-a510e4ef5a1a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f0e874a-c7aa-4738-aeb4-3f83456de529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0f2bb7e-79b8-4554-b593-764b71c4ba4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11e3cd94-793d-4cf7-87cf-20dfb58d89a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "73b20bba-d760-4ce9-8a5a-b03ab9154f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4741cfa5-43a2-47a6-bd58-8153afe0f6da",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b39287dd-a301-4814-bc3c-ca93c2749c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "902ca74f-c077-4bd0-9b4b-756de18eb1f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1fb97fe-0eca-4de1-9cd6-c469ec2bb971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "04b54b93-1870-417b-a629-5fa9ca7d60d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a43a0d-33f1-483b-8747-27384d975c16",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e53c07-2d52-463e-bea5-da54ec5b71db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2caac1cf-65ae-4fe1-829f-22407e719d5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58314e35-45e2-407f-8aea-246a87593b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "57e340b9-9e00-471f-923a-4ec2d6dd0c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b71b438-fa40-4733-ae6a-eb3d53f6e4d7",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3fb83a2-106e-4e07-84e8-b1c6df3d25ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85242f57-e0a3-4c4b-b194-692134b055cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2722dcc8-2eeb-482f-b84f-97cc4eda046a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "26fe05d8-a493-4d75-a248-5d3c13d9414d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe018b0-4621-44da-9fc8-eebeeddd1ba8",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5cce5e6-7736-46a8-9c0f-2c4ba578b238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33629766-2d27-425e-bf87-5378c1a2029c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cd5a928-fbdd-4624-bd11-ee8c8d6c85ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c24e04d4-70b1-43b0-add6-5a34990632a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b471368-988e-480e-a076-3f04dc10c409",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "537657fd-07bf-4404-9771-15e625994314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "677332b8-eec4-46ea-9832-61f850b17c7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "943e01de-0a88-48d9-b311-e7ed933deabc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "63cd3fa1-fdc1-436c-8a8b-836fa7bd4ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dcffce4-e17a-4f83-865c-04e202522e53",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7d42d8d-e786-4ccd-a350-e29268078ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba49041e-c0e8-4c8b-8ea7-15fa284ce0b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a1204dd-1d55-4757-9564-ad3818fb7539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "13bc459b-fef0-42ed-ae80-a90cdac7a782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc9e966-6688-4a00-98a1-1bea47cfda44",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf542d7-d855-4135-afa8-651b5949a493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a606d36e-8d20-444a-aa59-f28360f2304f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aebfb841-f4e8-4abf-b3c1-39c61ec307b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b38fe1af-8a4f-4ca5-aae1-bec76646a914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "251d042e-ffee-4388-aefc-bfc3f394e21a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4687aa14-ae5c-4fd2-b4a4-cf9ead2a5b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "480b63c8-3e39-4d8a-893e-24ac266b3270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2869b73-822b-4b9f-ac8b-ce29eb1cc05b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ddc5996-0f1a-45f8-ba87-1fa08b5f0b8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c2aabf2-dfce-414e-b62a-2ad6bf975b26",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97695317-d994-4d67-b3f6-45e5ba6cfcc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7713b4a1-85e5-43bb-ad90-3f451d98e2b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aec6626-aedb-44b0-880f-e98cf17941be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "801aeeae-37be-48bb-a797-24402a115ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ed5710-615e-4c84-a303-87c4ef83053f",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a7264b-f1d1-41a4-975c-8dadc6c9de41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f85c6c8-c0e9-4512-8e8f-59756ae3ddbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "728aad24-755d-4c42-8a62-b5ebb714e1b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "6ac4e2bf-54e5-4964-8c27-5acd6328bb9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8778ce86-5cd5-47cd-be56-5df485458b06",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe3f84fa-4967-4b71-a1cc-8e09233fadda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b60587a5-400e-4d6f-affe-1837c2323c5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27fb4884-5596-4672-af0f-2f11bd8b68f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b30c583-42ac-4f55-a66f-85a3e17e77d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "404fbe73-20c9-4ad6-90f1-3068081c0331",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1baf2611-db3e-490b-8ba3-ef23b85604c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3539b023-b66e-43bc-9a0c-fd8f124cc92b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23e6b442-eed6-4cf8-973e-31d6add1590f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "254756f6-4b80-4167-8ee5-bd9d1f7115ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caafd518-1cf2-4753-99d7-bc2c2f993002",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "404943e5-5fe3-4e93-a4b5-50eeeaf8b966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbcc88ac-226a-4be5-ad2c-23d2fd0cfa30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f910e480-d07a-4468-a92d-00b8cdc8db71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9ce3c167-8a5e-48ee-a0a2-6d623336cb9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65dafbab-158d-46fb-a26e-6c39e2326fc3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a50810b5-e67b-4e61-a320-cb43b12db279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aacb007-cf44-4e30-b1d7-1baadc3b4d30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "006ec63c-7254-4b5c-ba39-f41a87a5279a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8b8e1af-dc2a-489f-9006-ca5437d2f4ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e41ec1-d9fc-4ed4-90dc-0523684d1e13",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a06095d-35e8-4111-8776-e9daa69eac31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7463c4fc-8ab2-4aa4-ae08-3be588fa83f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c478dd-0575-4937-887a-dca3fb4a7b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6004d1b6-8206-4d68-ac34-6dc31cb36c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "311a506b-5d62-4bb3-b3ef-e300a7d82882",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "047cb304-5764-47e3-b89e-3a2bf60129ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ee0363c-abc4-44c7-a7ad-17495e27a8e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ee1b5ec-7f91-407d-8025-e5d649e71864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "d217730d-d873-4cdd-983e-9f4803468b45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1008a21-82bf-4b13-820e-d3c9959c5c29",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1320bb4f-5b7a-497b-be56-b81b7beab11f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52dc4426-ab40-4c5a-aec0-cdf317bee535"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb0b3e96-d998-430b-8270-78dffc239539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "add08548-3f38-4b35-8241-76eee4fcc577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d8d4312-f3e5-4c81-b806-8455f44cc984",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "070f1210-dc50-4a73-ab43-769862ab43a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e959c5c-623e-4e67-8e85-f8f319139d73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ac9e4b9-a7f4-4a13-b67e-dc1d301947a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "357b22d6-0a89-47e5-8e75-78f953dfcff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e8c79df-ef87-409d-acb9-f2028a745765",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51cc6a40-f453-4d98-bb2c-518e07ca7d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ef98ac8-4b76-4c4c-890d-637b0d4b8816"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d43db35d-98ad-4d28-bb79-78f13043494a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2dba8548-fb90-46ce-a320-0211748000b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bca7518-ceba-4ba2-b7bc-369725111283",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95e94ba8-43ff-4e24-bcbf-bddee1ed85c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c6db24e-67fd-4cf0-8d90-2640e19bd006"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d879fc5-b5ea-488a-83f1-abc184dcc213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "80e415ae-2255-412b-bcbe-bcc49433426d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f2d246a-a4a0-47fb-ab3b-2f96e30e175e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b328d903-736a-43f4-981e-db701296d85d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c74f28e-d061-4454-b02c-8f696c169b5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d347393-eaf4-47e3-8efc-565583fad27d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4dae12f2-c395-4c69-899d-92b20f8c7cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9981d061-8f34-4388-871d-554ccb3d3dbe",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f25bf52-cf19-4091-8c13-f0cf06930e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f68ef0b-5adb-4ace-b8db-96b956c64039"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14af6d00-5650-4561-98c8-3127a38f97ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d2f91fb-a1ab-4916-a580-e655bdae1686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3214ba7-c8a3-4aa1-b8c6-e16029b3d9ca",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5366785-4486-4474-aa4d-f66ef104ee75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87fc830f-f3ce-415e-b4a0-6f7e60338a88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2189b8a-88b3-45cd-946c-0cf272f9a994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "47dbe9f4-0abe-48dd-8a7d-7c5db1efc82a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae73199e-e976-4416-84bc-aac1c2a7626e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14e0b1f9-8647-40ad-a908-dcd91026bd5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28a37f70-70d1-493f-b841-06a43cdf91a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b3d397e-0f82-4455-a233-1a6d2fc1694f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f98161e9-cf65-48e8-bddb-8eb5e1d11498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c19e79c-50be-4884-9a0e-77278625fae3",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6932e30f-86bf-4623-b490-a33fc313331a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dc9fbdb-421e-4f22-804d-557fa9b3f977"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e59887c-71e8-4ccb-a352-3f7d2509b434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "86158622-efb7-4d89-88ac-f392989c9743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99c35f3f-e303-4489-96a7-236b5872c253",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "849968df-5cd1-4d55-9493-c5cbfe6a4074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d43da196-d7e6-492a-844f-034bbad96091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "645cc4b1-bacd-4d0f-87fc-55d96e67c56d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "706a9ef1-4670-45f4-919e-cdc4fb6b18ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "642fbb55-7e78-497a-a45d-de09ac3b2077",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc359f97-692e-4541-9f95-ae2427c85ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0bb3997-b421-4277-9bd1-f5c787bddd5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "902ffb2a-ff86-4cfc-83aa-1b02859dac27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "69ca1bad-80ff-4653-96ca-94f1114ceeb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c30bd93a-d864-4fc9-8a10-77f264a725d4",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a1c23a9-22ea-434a-a0de-772ea11f4039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b8e35af-466f-4a9e-871f-4fe8b1b23232"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7dbbc90-a7da-49f1-a56e-609b08503904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f33c4b47-f95d-43df-9ba3-4872f9c8ba21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f08c2af1-e43d-4e3e-b66b-9ebe73dc7d33",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa973109-ea3e-4bde-b8cb-4f0adb45f2d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52f47f3d-3bf8-4dd4-9546-13252a2d3aba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7d7484f-353c-4eeb-9b23-4e2b794aed79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc0d22c7-c375-4833-970c-040eee639b46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6467f9f0-3ff5-491b-b679-437ae32d93ae",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f811936e-9866-4bd2-b393-e8a7f0d695ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "605fa854-3553-4e73-898d-cac7c83a2415"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbc3bcaf-398a-4072-a8fe-49599d711343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "34ef75ee-adc9-4512-b5bd-a526e018a324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af5e1ace-12a0-4d5b-8441-01d5c66534c9",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9bd900e-2c28-4614-847c-b5426741c84d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37880532-c99c-42de-a827-b5d8f9c48de9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34eed4eb-6e4d-4100-9952-73ac2c978354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "19bbb3f1-83cc-41cd-a6cc-61b1e586b48c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a3eebb-77f1-418b-b69d-0570f445ec25",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7935adbc-8d34-4c98-8e1a-dd0b15063aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61924a56-fffe-4309-999b-1ce029ea2828"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6455f36c-b9ae-4842-8d6a-f32476dd8e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce70a531-739c-4ed1-9dba-ce3ffd8e50d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4233210b-b847-45fd-a29f-92ddc76fdaa6",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e83765c1-5bdd-4caa-925e-3b9f29099d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43f10db4-b598-44d1-963c-ed9616a90c41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "301ddaec-d59c-4e26-8a30-a3f443acd507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc874268-0b31-4a3a-8d1c-827064934ac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dc02e52-a6f7-437f-9b3b-64e838a8cdfe",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4806711-6868-4fed-b07d-2aefe9441e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb421d74-6fce-4634-b126-d04a49f6a319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f7ee8aa-8155-4ac1-ae02-6f4c4e7ee385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "91806975-57b2-4de3-87ec-af838503043e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d8892f6-1954-4ff9-9321-ba710c86684e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "297bab44-c61d-41ab-85d8-8fbe06c2e708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32b01f6b-3084-48bf-88b2-881ddc76fea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9620a4-79d1-436f-963e-dd1238242195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "03fd367c-4882-4dfa-9ec7-812b643f51a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f536bd43-657d-416d-ae9c-a34655049c65",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08be16ab-0ec1-4a87-9223-208b3267bf54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af2e3025-8104-4eef-a0f1-9bbecd19993d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "324def17-3c08-4332-9dc9-191de13742aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9daaac0-bfbd-40f8-9bc7-cd6efbf2fec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9969fb8-bafa-4cb7-978f-9d222bdcc311",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "335253bb-ef8b-4ce3-a17d-ca6b6ee7371b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c72dbf5-7495-442f-bce0-235caad1b8d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "742efb8b-5953-4927-86a5-b7187feb70e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d82c9e8b-ba8f-474c-ba50-5fac344320f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e65584c3-0f84-4158-9e80-15a6e56d282d",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf2494d9-8943-4aae-beeb-bc14efe9f007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "930f467e-7d3e-44df-bf4f-47913db18185"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fa93621-ed16-4595-8201-dde07278c521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9344e03f-06b5-478a-97e6-3f766932bf65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b24636b-813b-4631-8122-5939e1cd4f31",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8228a651-7b3f-4075-a840-b954800709ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcb546a3-75f4-4cc2-b546-9571c2225e4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd5d4092-2a89-45e4-b69b-e2fa59d09403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c59e73b7-0f9f-4ede-85d3-70d40daa3d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fced5e1c-0267-4316-8aa2-a2dc55f78343",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93519cc1-27fe-4fc9-8a49-317d6b1d3c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c65c650e-e4d9-4003-b7b5-a40e6b0ece27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40907f6a-3299-4fb7-91cf-23b53adfc910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a4eea78-9b8f-4403-aa4b-4eb30e44c9cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee46e0f7-3558-416b-b201-c18ef287670b",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c0242d-5ec9-4d4c-86c1-f57b200ead23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aeeafc9-e4af-49cf-89b7-3f1ac1994059"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19022485-ee27-48b4-9135-edbe3dc558dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "87e8e536-b5d6-43e0-8844-70efd955c5db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7f89dad-d654-4e58-b887-3decefa30ac3",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae3ad1b1-1881-46d7-afe5-72eade866745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36eb3ed8-cfa1-420a-8869-2ab257bf80d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c35efa1e-877b-4823-ac7e-ae4ab04e02a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d2546ee-0607-49a6-b957-1749de567db5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73dd8ea3-02a0-40e4-b1f6-501bffc0d739",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c929a11-f9f0-41c3-b788-c3b0032669cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0919a03b-5392-4e02-b973-75bcf6c3c74d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd38aa2-d8e8-416e-bfbf-92a34c823598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "98f3eb62-16b3-47d4-929b-e967958ab7c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed8eccf-9798-409f-9934-df4c66f63816",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19015dfc-cc68-49c1-842f-5e92b1fae590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc75d877-8978-4e98-a25d-4667f1be9091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f35164-c042-4672-948c-b4b281ca7437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "78405a71-a44e-46a3-a74d-313bbf1f0263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbdb4622-4f49-4376-9a6e-34e0d94da187",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a11c5d79-9b5d-47c5-b3d2-7a943da77afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "365dc211-83c6-4aa5-83e7-6eaa58ed8d83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c42488f-db96-42f4-bee8-7f3312b68404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5ad3331-a746-4b60-b206-726a631af869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "958a03dd-3398-49a7-9d62-54253dfb55ba",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3665e8a5-ae10-49a5-bc6e-912d158ce0b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "537d58af-d708-4667-acc7-8caafead60a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e784c5d-78f9-4631-8cf3-a95d8d5fb964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d5d8020-f5c7-4ac3-8355-006abb848921"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c41b855c-dd70-4b28-ade1-619d2f6847f6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c9343ed1-12db-420a-8e03-bdb5d1cce67d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "696173e1-f671-4392-8db8-b22813276db4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e222d5ea-1aaa-4a3a-b217-0a16aa8b2950"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f0ac7a0-e8ea-42e2-b92d-100faf40c14a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d9beb63-fc86-407d-875a-f1e45ffb0c6a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13c048ac-688e-477c-a4c5-bb0a3af9afa3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a97088c2-af22-49a2-ac81-01ab3533d530"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f2b33437-d946-45bf-89e4-0e7f5c5c069b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2cef6afb-b14a-4007-b3a4-765f883a4b28"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ca6c6f15-a657-4d83-9638-58f271c46446",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4ac36c9b-bb19-45b4-99e9-7d03482b0237"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6367b453-822b-4fed-9bd9-f9cbf96b26e2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "657b2559-65e2-40db-91c1-36cabe8cf836"
                }
              }
            ]
          },
          {
            "id": "7855226c-7984-467b-a285-4a72e1815ca7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "03ccb403-9b26-4cee-aec7-bf3fce5b93bc",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "54e160b0-0e77-4d00-9d6d-24e930fdb626",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebddd1c1-69cb-4493-acc6-278e3f2119b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9d21f8e5-356f-40e6-b950-55e73b0783e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ad5f8e-e09d-4aae-a08d-b1ada9e3fe1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "040f1611-7595-4fcf-a943-32affd2a2577"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "aeb9844a-5811-4810-ba18-c3f615251b9d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e1d81c48-fe9e-4954-8d46-80013c807ab1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c93fcff1-6e2f-4de0-ad00-65cecac738e6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef4b1dd1-d554-4c7c-9393-32232f8ec9e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e29c6292-bc4c-453c-bd44-f0958d66f295"
                    }
                  }
                ]
              },
              {
                "id": "a25ab49e-11dd-41e1-9a68-2ff12aec0b34",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fbdca39f-9c6d-448a-a8c8-333fb210c648",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "820b0d6b-146d-4627-8b77-73a4e368d14c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "22872782-2894-480a-aca0-72b6bd514c89",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7fa0b03e-0de9-43e4-915a-f05602dc6f27"
                    }
                  }
                ]
              },
              {
                "id": "43ea160e-fd06-4edf-999a-2e589925f8a1",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef4a6a62-ca4f-4f85-9810-455c9f014971",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4703ac85-5243-4822-8c8a-c79735c811de"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ad4f860-666a-49cf-b6c6-ca203d180601",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f98a92a6-20d9-4907-b679-014a1550f8d0"
                    }
                  }
                ]
              },
              {
                "id": "14f115aa-c0a8-40bd-98ee-3ff8459c9716",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "031041dd-435e-410f-910f-471a44ab82b6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5ce97a5f-c307-4f68-8376-5fe6aa674353"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0de1108c-7086-49b4-9753-6283a366ec68",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "920ae683-3eec-42b7-a670-086c4af4bda4"
                    }
                  }
                ]
              },
              {
                "id": "73bbe503-2914-4b1d-b475-2e9725ca9cb5",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9eca0ae1-2d50-4c5a-a7b4-4b6b061042ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "34cec3e9-9a60-41cb-ae36-537f4346d791"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c31ca991-24f1-4a40-9a5d-1319de93c49a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "4290280d-b413-4ee3-b23a-d794181c8d32"
                    }
                  }
                ]
              },
              {
                "id": "8cccf3a4-cc20-4bdc-91b0-ae9583b76d0b",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f1bb6afe-5ffd-41aa-ad15-d6ded16840a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9b8de246-cedb-4714-82bc-aa57ec4a99d8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "967d148c-9271-496b-8770-5e730a1ef505",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7b96e9fa-733c-4596-80b3-5e720348199d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4f4c36a8-1f8d-4fd1-a0b6-d261bf5ddff9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "128053ba-0dc6-43cf-b70e-67f1cb18f8c6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d3c7ad0e-12bc-4c4f-8b5f-f02e69770607",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "28de6a23-062f-4688-9116-7c0f6d593137"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5632c684-7e21-49c4-938e-b83912cfba0e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "22ee07e7-d2e3-4f39-9b0f-938e62460284"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "358e10ee-98c5-4849-b872-1882f48da21a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "26491b65-86c0-4551-a479-97159b20882c"
            }
          }
        ]
      },
      {
        "id": "a99447ed-a6d5-47ba-ae6a-6dfc0f32fa07",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "aa5614b5-d45c-485a-a5b2-4b7c9379117c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "be67f8ae-9abe-41eb-9912-3860e668f2e7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "246c64c6-e144-455b-a2da-cbb9163c9d56",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af2c91e-abd5-4f20-8ded-e6cceab382ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bba67ea-cc7c-452c-8aef-9a4f483aaeae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d56b2ce-900d-4c89-9bce-be7abe3a1d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2815050-f410-425f-bddc-0554898121ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fed9ac34-70ec-4fef-9990-37b5e32622ce",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de64cfe6-01c4-4b46-96e1-ce5304c89ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33630623-a0b9-471f-bf82-ee6d45076d09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc4583d4-8b50-4f5e-a04c-d4f43e18f53b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "99af2bb3-bcda-454f-a28c-6584532c28c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ebea501-786d-4671-86c5-c3605f217557",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d96baa37-13ce-495e-9f8b-4a8821f0f5d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c33792b-dbbb-49b6-bf15-fad466ccc84a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f3969fc-a456-4640-9897-46e86e02873d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "08c92a65-25e9-474c-9eca-67dabbc139cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8c73c7c-bd44-49c1-a9ea-02f3aff871d1",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9bc0d83-1b45-4184-9950-df54af806066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f4dd953-7fe3-480e-82c2-e1f7ed3f0257"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9969009-930d-4e73-b942-7a8be5b01df0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2be06743-d8fd-499d-bb74-d875bdaf36a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6892db01-bfa4-445e-8da1-386ca63520be",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea5b4138-f0c8-4a4b-a312-b28558600a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "709c1c69-9a2b-48ec-bc53-0a26a830c73e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a514b330-de69-4476-985d-173d1dd19f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "54b24c01-475b-46bf-8d2c-dae7b34b5bec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af9e4b5d-295c-4964-b0f7-85609bb38a31",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "065bb079-c724-47b0-aab5-9784b0d98e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a46c4bc-8e08-4882-9880-157bf5a4fd7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b9de7cb-00b7-41d9-8eef-e8426df7a40f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce994440-bfd8-43a9-be92-35ad3e0df39b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "147906e2-414a-42e9-b8d4-15c12d9972c0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ee1c36a-42eb-498d-a42d-312292205ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01000c14-8272-420b-9243-f3108cec024a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c4680e2-4f32-47c5-95f2-213a5d4ad207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "72168d69-7d7d-40ad-a36e-a52fc1f348e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78452dc4-4e2b-491c-a1b2-0eaa04523e18",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c4609f3-a2bf-48c7-88b0-14b492e6fb77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a56f2f4e-2a79-4384-8ce7-7775ab54c96d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08006dfe-5487-441b-a9bc-0f8a97dd2ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdd65fdf-82c8-49a4-939f-ff63b31e7022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb4699a-a567-4d88-bc11-0c3d3e307d77",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97797903-24c6-4ad4-838e-eb24e9e0b7de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c027ec3e-8afd-41d6-a735-ad0682c7ac2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c033e723-9f6b-495e-a42d-c44be6c109ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d44d81c3-cb71-4232-be0e-6dd4ed5c12b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b26d5962-c0d4-46ed-af08-9ab783effdfd",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f9528b7-103c-41c8-b840-364fa9ff2f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "396e7a9b-1c06-4b93-9595-fb5e01fbef7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eebeaff-2f28-4143-9f80-4f16d6710e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "05056b0b-81b8-4ac8-8371-fd49a6673dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d8deb0e-3ef0-4641-b4d7-5cdb388a4fff",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a13f44da-41af-49bf-926b-fcc8cf727435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35bb37ff-f43e-4d47-9681-027d1b189989"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a9c15a-b1a4-4726-96f5-bacd8c58a521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8c08aa26-afc9-4f3e-9db1-a2af8d60bdda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f12d12a-bf56-4a2e-afe2-314627ce3075",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a46a5ae-7e2f-48c5-8bd8-de627a314bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3a54b92-b05e-41cd-bdc1-ce33ccefe9b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34487ee9-136a-4e9c-8d46-b83224e940b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d66c4ea2-bc7f-4e13-8f9c-17732b7c10c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ee0501-2607-4ab1-bc0e-c0ee6e9498bc",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8dca694-eadb-44a2-aa6a-55bf160f989c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "889e1955-c2c4-47e7-b09a-3877766fbd93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81a2e2f3-08e6-4922-8972-b045aabbf987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f88d1e59-1dca-4dcf-8842-0030422c46b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ce8160-e74a-476c-bdcb-99913adf087d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba888e9-6970-4263-9305-848b19c21485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6752977-5029-47c9-beaa-8b1b64c06a74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f51d1fca-3199-4581-a888-d6eef104e390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "3dbcbe3b-c762-484c-acea-0e798fd0c69b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "076701bc-b232-4314-989f-d1d61617bdef",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e5d190-8692-40c4-9e71-4df85f3f903c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58b9bc34-7874-4167-9b88-34bc784adac1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc898d6f-dfda-48dd-a0ec-d04b4c15c3f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e323caae-a458-4a90-b689-a6f37b54ff92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e2bd08-47df-411c-8467-4c8835df2cd1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd34311f-747b-4d63-ae83-fb3a1d6d89da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ebe3578-5611-47d2-a4c1-75faa028b0f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30c3a0a2-c770-4ab2-8b71-4e07eb3f779d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdba8b8c-f4d4-4b83-b66f-6c77bfd04d55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ebfb3cb-4d2a-49ee-b7d2-8dddb368e9fb",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d45c2ca1-00c9-488f-be36-81432adc300e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "908458ef-4cf3-4608-8dcb-119054954d8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77a425e9-b1c5-4ea5-bec9-03cfa2fd3d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "57f2d728-84c5-4057-bed2-de5397450ee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a86dc10-a0aa-4e42-b660-8ac61a364c2c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "265ff314-ece9-4f22-9eb9-ae84d0817d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12a96235-d18a-44f6-9f5a-3115aec9a78a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "247be9c4-efcc-44d8-9f75-ada9f5e0a3d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b584e2f-1c03-4f57-86fe-ed0487ecf46d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7116d94-3d56-497e-b09d-a3c93dbed0d6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efaa6755-12de-43cc-8362-f0f06c6c3d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1d0f4e9-f3a5-4b95-9da2-a63c8a4e2bd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcaa8797-1818-4f57-b59e-5d7d007f9e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97115398-40bd-45ed-9e8b-8636b4bcdcf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bfd0c93-3e35-4a62-b362-59bbdf58ba48",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d8193d-fbbc-42d8-aa08-c6464f92c24c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c25598c-8e0e-44ab-b1e2-1e409a05d15b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dccf4a4-8242-471d-a4d5-3151b431a0c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "806c2960-3397-444d-9aaa-a36e7598ff12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7321adf1-a41b-469f-9485-060a42fc5a52",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afbc724d-999b-4c12-8d28-2fb729dada35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c151a5da-023a-45e1-bf2c-de124f53b582"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d29c47f-8a11-454d-bc4d-543b31ce9469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0ba536a-131b-4716-be99-cfa8007181d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f8b69b9-a179-4407-938a-8cf01ca4603e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "596bce52-7d8e-4b5c-963e-010cbd82e7a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ff571ec-bccb-4048-8915-e68b34885418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c129987-2786-4d3d-acc3-bbbfd527820a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3fbbd74-07e0-4db6-952c-1d66a3d51d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d100715-847d-4f0b-8bad-efde85dd1f24",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "369e58de-5dda-4b54-b2af-9f4236d8cea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c231d25-0775-4ee2-b221-fc8074964327"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95a5b17f-3e9a-4683-b20f-7a5a32d2bae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21ed0925-e0f4-453a-9d3d-0f6ca653a302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "886abb89-12d8-4cac-bfe2-f725477ba6e6",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb2abea6-fd78-4fe6-b9f0-57a83310edb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e94b3de-01f4-4ee0-9488-7a6ff4f7f48b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b19e083-1c38-4164-92ac-ed7cb532bbe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58788194-6bdf-408f-ac45-5ef9407b045e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a334b613-7519-4666-9328-d92f5825c8ef",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "968145e7-85b2-417d-a7a8-6b4e506281aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59bd8343-3f13-4bed-b157-cbd407a765bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cc19824-a9d0-4df8-b502-a194c6b53024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e55411a-53f6-4564-ba52-563a80a7dd23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef8d02f5-6354-4dbc-9fef-955f4a13bf4e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa58b983-e663-4f25-8eb0-06205c67c217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc663683-ba1e-48f1-a4e5-f26b087631ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac44be95-0cb1-4a88-9bc2-6e446d2c3ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cafe1552-40ab-468d-a228-6a9e96871619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e39c062-7d42-443d-b606-6cfbf3a95f68",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2da9ba9-dd47-4986-a794-03946b5e6327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e077eab-98b9-4f60-9c6f-6635c2c9e7dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e56b5c9c-a0f0-457f-a8fe-1cea9be0157f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3a33faf-4383-4f0e-beac-fa7a75d80def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e5ed259-4a73-47ca-8833-52285f7f4b4f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b8da059-f816-4b71-914f-bce402c9c5bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d450ff0-c7a7-43c0-bd97-3c46e8c8cb34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e3f87e5-9a08-40ac-8e26-6ed1574b99f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36f9cf40-747c-4195-ab49-37a41e899711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "501ea887-b95d-40a4-92ee-4fc15b456b4a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "997510db-1362-45d3-994b-93ad06d1a31a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0462bf89-12ec-404f-8c31-e92db4abe278"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6093fa82-9830-44ea-965f-81d28f84ebe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a5e42c4-c971-402b-bd14-62d29d420e52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83669cee-4bec-4645-b9e9-e3f38eeffbf8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea590e53-961b-4cd1-81a0-3e1c2e31f6a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed791123-9693-415b-a4a6-a90073204af2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc09f0b9-7242-4f0b-a81c-d2f6d84a332d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9878c51-40b4-4115-a0af-0658cdfc2a17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26b82c62-e3b2-4429-9d4b-fa5639100679",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "275fba23-2015-4350-9148-4ae137606d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ce8309a-64da-4a55-b201-cfadf4dd5aa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6383a48b-328b-44be-a096-692016dd99c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e46528e-2863-44f8-9a6f-8237c254462d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43c65848-5807-48ff-9f41-6663af95eaea",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed53816f-d161-4da8-a991-2577c19785f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85fe72aa-0b3e-47f0-a9c7-2720782d107c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4218a19-d0f5-4733-8c98-4f3ebf64a124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d84349e-2613-4be3-bfa6-c43cf0280917"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "eb2b2954-1604-4e7b-8f6b-ca3e7d7ec9c1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e1bd8c93-5ef5-4a8a-a49a-7d0ac8bcafba",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9591a6af-5663-45d5-97ca-5196eb03aff8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ff2bfa30-3ced-4b3b-8c46-32966e1e8294"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbf7575d-072a-48d7-ae74-6c52368e42d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d4af491f-7a90-4e3f-80cf-a681ee474c28"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc4a537e-d3de-4cfb-b574-3cc918922784",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3aaf4364-ae09-4526-bc52-ff0e3567b3fe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fdac9ece-2d99-4ba8-9690-804a17cec2bb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "70013e44-9fe2-4080-b234-b707e9d19741"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ef83c067-c2c9-444e-8071-d31d429bb5d4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b7ac4b63-da49-44c1-90e9-711245ac88a2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5cff1e56-da12-4f81-b19f-150bb4f51da3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e79e7789-5831-4ff1-91e6-9d12812f22b8"
            }
          }
        ]
      },
      {
        "id": "4b72166b-ef07-4f8c-9935-8d6ceed997cb",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "18df8de6-ed85-4772-843c-123eaec95e67",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5a47faeb-f6e6-4629-9e9b-544174fc0f5d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "67a36046-36dd-4ede-9a7f-22760fa5097a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da723034-0e24-448f-af42-d3382b6fee0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f95d8d8-c240-401d-82ae-61e5ee9e1a45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e7741c-44f3-4256-a2ce-3c1411cfa181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b779a25-3030-43df-9a4f-c3a86840ca5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df706ab6-d0c6-4576-9760-ed46ba060437",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b95402-f16d-49ef-ad2e-50f0f3fcfe78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b99d9e6a-4b6c-4bd2-9f32-c1b630eada41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2997e92f-bdfe-4bb3-a6cf-13f73493f683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd39b1fa-91e7-4b12-8999-60bdaf620493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "facafa46-6e0c-4462-a52a-3fa3a7a1b217",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b68665a-cd80-4254-a875-2c50bca6d99f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ab58875-f5fd-4a9a-a8e1-f349f96ceae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc3126d-89d1-4ce5-a643-ab0e7253fcb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "847d783a-a802-446c-ae5b-93d30eda5a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e10ac6fa-c63d-4475-9b21-2f27de96fa5f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79dbcbb3-5953-4f53-bb50-21511544131b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd98d3f5-fd53-46c3-aea6-92ee4023fea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95406c13-ed95-409b-b9f8-977522073616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4aa1cf80-152e-4979-9afe-e1df86eaaf0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "006d94a9-a9af-427e-a897-d888ea7fff55",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e67aaf87-f325-42db-84dd-7afedc3010ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "352c3bc9-c33a-43af-afbd-f9f78e8ca51f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03fe8e9a-eeaf-478e-9d5c-e7188f488a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5106e7d5-7a01-4519-94e5-348ff48e426f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a898e285-3d82-4571-8fcd-822ddaccbe37",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7e65851-257a-487c-b912-aaa29526bc6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89629a28-0507-4ee6-96ff-b056051eafcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9ee8073-782c-4233-93cd-3c3a53518dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4caddad4-1d2d-48e5-bc35-c22c8212668c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dbde40e-ac10-4a69-b291-5acf259076f1",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a1c4503-8949-47f7-aef6-a32429d964f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7de92665-04e4-4475-9fa1-80a6ac77f879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eb0c93c-2745-48d2-abdd-ff6c90f47dd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "55234d24-5f2e-49a8-aa47-c052275c94c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39c3a599-e025-4d90-af88-1edc81f793da",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f236f97d-8951-4961-ab28-2dc4356ae2db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fe8548c-0d93-4a93-a26e-c5347beba050"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c645ac06-4fc4-4f1c-8ece-1cd5c1a201b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a78686ce-690a-4ef0-8acf-3d356be99e90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b6837ad-d625-48bb-800a-eef872e0725e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58351f82-b1a1-4d08-96ac-1440e37da448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f105adb8-21b4-4170-ae6d-fd02520d0ade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42d77396-4c0b-4748-b6cc-de5d1888f696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "645a4ebe-a765-4934-8813-2ef15d9d5389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a53ac1e-fbb2-4d41-88e1-13d5ca485675",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ec7f6e-4e37-4900-8a3b-b93429a568f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c531f908-9f88-45ec-b116-03753f5745b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f403b4a-e297-4542-b134-a6dd1629ee97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab4bdbe5-4cfb-470b-8e34-c08529ed0109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f66e6965-9fa3-424f-b645-a01fd6bb55d8",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18f2cd0e-1ee7-42bd-938e-9624ed612039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8d3537f-a43b-47b6-8153-6e2f51a17864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe063bb-fd67-4d1c-a19c-61554d5250fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "fa66967c-7130-4607-b466-ce433de12d15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b51bac8-c4f8-4580-b931-6b07c35c73ca",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf9a8f7b-e60a-49b7-94e0-9ce2d62fbc03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd87db1e-65a3-4e19-b3e1-a5d6a424a837"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd6f7cb-be73-460b-82c5-b4184b3d9dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "97893d65-5a57-488e-89bd-75063c3df025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf93f7a-8ee8-4a87-9cba-06d14796eb60",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2579bbba-8d9d-4241-845c-11f75d98a1e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25550833-e921-4537-ae86-3d98755ebba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb1aa1d-4f4d-457d-9da5-64c3d28236ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1ae66bb-f870-41fe-9126-7810240bc545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2d4aa4e-016b-452c-bc07-af877b1dcc50",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b37d3e62-8d6b-4d46-ba72-fa56d9d3aa3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f47784a4-fbe1-488c-9735-1d2e96e48e18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d674b38c-e211-474d-b4de-ac3a64c0c489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6dc2bdb2-4de7-412a-a249-6684bb69acda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5aef4b4-c4d5-4520-b085-a954eab69c66",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a0d48b-2797-4a69-9a5a-d27620e6c449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1850d0c0-cb3c-4e6d-96eb-d3b8adf19dcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e9d4efe-4a6e-49f1-90a2-2a75bb5ad09b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "15f10b31-a098-459c-a0d9-b5594e0469a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1e6829f-507d-46f1-aa66-f0fd5976d29b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7496c952-fa58-4b8a-b24e-101709b5efc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e60e50b0-cb19-409a-887e-859074e4b7a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dec85d0a-c754-4c51-9bbd-081c939feb07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b458cbf-308e-42ae-927b-76b5c7f2cac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecfba692-9f5d-4418-9ad5-c7b9e6f515a9",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45141188-c6c0-4508-965b-b70e41c24f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "569e1373-879c-4a79-a2c2-ad3c6ac1f540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e502e91-24b6-4f71-8712-51209c544aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3d23b32-11d5-4be5-ad98-0973206451f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9bab201-2aed-4697-9a71-1ca7c6180ddd",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "799e230d-7ac8-43cf-9bd7-c24327bedadf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8a311a3-e6ef-4d7b-b84d-5790c0b47fdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8718feec-7fcb-4907-ab36-7b86c36e20c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "306544fe-ad4d-46cf-a35a-43447d8654c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa542ee-9090-4645-9a5b-1d5ad95a37bf",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c49f798c-ccd2-4584-a30b-956cb9d6584d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04fd9d9d-3c26-402e-bb25-c41ba6a48117"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aabd271-2b3a-4f5a-9822-9177dec8950d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a2cde0b-6a93-41a4-9765-1c01ba59175a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6cd6bcd-69d1-4894-9db6-f66d51761390",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed6b9d2-eda6-43e2-b18f-a8c60390e724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a405fc0-b1a5-4e3c-b0b6-0d65a1cdb70d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd026489-efdf-4b39-94de-5299fbb82281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c024e9bf-1d3f-40b8-92cd-cad1ef3f7635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15b9b541-8088-4a4a-a674-b20ec82ac875",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "180db25d-96e0-4ca9-955e-ca003dad5b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddc3e4c1-0135-421d-ae09-27a697c2dce4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efed6b91-dcbc-49ed-a408-440dc7eb41a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f1b2c17-237b-4419-9ec7-a4b0b589ce95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fdf6386-c492-4f83-9bfd-d2ae5dc4bf62",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d555ce4-62ee-45a7-a803-a4d54bf7cb02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e4bf8a0-0412-4e2f-82e7-10d2315d39d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38fa5d15-558c-4c52-9675-9da3612f0a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15f52c15-99a3-4670-b2c2-3382145f3b09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "620dc9d2-5708-4917-b09e-428bdf1fb952",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b57617f8-1556-43c6-8c27-c1a494ed4c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ba59a5c-ee92-455d-8499-f6b8f60de6ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a492f3-0def-44c5-ba83-bff42b8c42bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c51336b-66a4-4a15-a01e-c0f3732bb0ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7217588c-6532-425b-ab50-68038b94054f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcbbb232-b85b-44a1-a7ef-3d21076e3aa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a823cf4d-000b-42db-bc6a-28a81593c887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb978218-16c5-4228-82db-a9bc54c03d9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71b75bdf-4694-4603-ab15-430e12cce896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81f802f1-0696-42b5-9cf1-cff64dc017ec",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aad59e2e-605c-435d-a39b-14d17228aa63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e90e3b71-2f0e-4417-aaea-cd3a26016500"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "522c1a8c-3754-4503-aabe-37362377b742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8f44908-bc7b-4187-9eba-e9c03c449281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbce668f-b3c9-40af-95ad-7867575147ad",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e49bd7-c724-4e30-862d-4ec1c5c27cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0cefcdb-c54f-4205-8249-97e4a77e7c4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb2d9d23-dacc-40c2-a67c-cd3b2cb870e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "23f00302-c69a-4e47-83a7-83790c5ed00c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1858cdb-e8d3-46ac-bce4-3454d12402f8",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7fcdc6-3bba-4ae5-bfed-d4ba0d709411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54168cc3-e0e2-40d2-9e4e-827d121baddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80ef2b39-364f-4e94-acca-0be0f8990ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f86afcb4-9ed4-4ac6-bf1c-8027b4c4499b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aead0f9-3b4c-4ada-9655-d354abb8f7d4",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae1890d-ee4b-4b7a-98ed-b32be8cb3e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f67990b3-8bb0-4796-93e1-42bcd8a39121"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9375c385-8303-48c5-b86d-ca945df8d4c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36539423-ab40-4cff-9855-e39b95e49da6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c27805fc-72d0-4557-8da2-432154fc2b52",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e620060-6da6-466c-b433-1152f88e9d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "297b60fd-32be-49de-8d61-a5057e7cb019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "468dc8f1-398d-4a16-92f7-fc816a0076af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cef52abc-02fb-4f4e-afc2-27448a129da4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a608ad6e-9fbe-4e23-8a13-a945ac3432e1",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8edacd85-44fc-4655-a1a6-6cfef958082d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a14688fc-a3a8-4047-bb0d-853fd726008a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fc93cc5-1207-4e81-bdcd-786f6c1644d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92996793-e5a9-40d7-b601-75da6ee7efe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de701f95-2bbc-48eb-ad51-5a1ab2709991",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e870de-f2cc-4544-aaf3-3ea787b364ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "074a901f-a0a9-4aac-968a-74b5b9b26268"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fbd0545-57bf-480c-87b6-e262eea902f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70d30286-fad9-4de5-a3c8-42d5fcdd4611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27299bdf-8971-4039-abe1-38467f8ea32e",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f76486e-1867-4c33-a6d2-d1d6b867786b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "025676f5-b96e-4d50-b8b7-a1f1c74b4996"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3105516a-64ae-4071-a43b-2dfdf77c9f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3456f226-f97e-4564-b11c-4a69d695f811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f34af1b2-d39b-4d32-80ae-d29c53311e94",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a42398af-d191-4419-ab96-055c0eff36ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dee4163-f5f6-4455-8031-9c586fd552eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68a9c81f-a642-45d6-a615-346a804c2fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46a181b5-66ff-4005-81e0-01ff808e508f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e182775-2847-4a25-9f81-22a87f8939bb",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a31daff-ab70-4a7b-ac24-ca81704c92a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e8afe3f-7705-4232-bba5-f0950285f74a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7157ef53-4b40-4f5b-a2f8-7e10d00eca73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f25a2ca-11d3-427a-be2f-624a5d2165b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91480123-bfb9-4630-b65c-ab0f55667245",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4642a675-cf5e-431e-a45f-cc5885ae0743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "625702c5-3e30-4a4b-bbae-e77cfb2971c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad0e69d-0554-4dbe-8243-42a2d0b7cb66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32523220-5628-4433-aece-f4d1b537de06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f59085d-483f-45f5-b925-b86afd0fdbee",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e537992c-78e6-4c2f-8f1a-2b519e5ad5f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7e68258-406a-4711-9104-f0619fc505a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c548ac9-11ee-4b7d-a3a9-517309b3049b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72e661a8-92e2-43ef-8782-1da1c27c2a87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6e721d-38f0-4c60-8a0b-f396c138f807",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d05441c-fe9f-413d-8b52-f2f4557f5b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04f5ceb5-d8ab-48c8-94d0-b347dad83564"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efcf1403-9358-45ac-a9af-d970263a12ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e160b7e9-2f85-4e25-b694-9af121ec118b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c0fcb702-4aa7-4eb8-9031-0be46391feb2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6a718049-acef-49a0-b974-e1a878e2ce6a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9c27bf7-ffd4-456c-a47b-c08d026a7c6f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "86633dd8-865b-462c-bd39-dfac38df296b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c4796ad-309d-4c1d-95ee-52c70dd09573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb9fee40-fec3-493d-b47f-ca4a507c0d27"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d8c1ca70-4876-4bfb-a2be-98f2cc655937",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cee94fdd-9a8f-4eea-ae6d-6b4af48b8bd2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "38728843-872f-4288-892e-162b24330942",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a92b7075-b249-4604-b795-03ba8eef43be"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "343f0740-441e-4a45-909d-1fefcbb7c764",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e890ba34-6aff-4a56-adaf-17b01c280396"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "82f56996-ade6-401f-a092-c42e85f439b1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0409042e-cff8-4f28-a0ee-bda58b2e3181"
            }
          }
        ]
      },
      {
        "id": "2e561af6-4a0b-40a1-8fc2-d432a3dea1d4",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "a759a804-3dfc-4c86-b31a-58b811e83411",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6d7c5fdd-6231-4899-b1cf-83d880856fce",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f24d5df2-11e5-4ae6-8d90-ac64e5f3a0b3",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b468da-0400-4ddb-a40e-1c3513c7820c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "301e526c-3a74-42ae-b58e-44b63af75512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8034ec2-cbb5-4ef0-ade8-3e03c224c717",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5658ae4-8f5f-4875-b4cf-61b77a157978",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1f8176a-b3cf-4a4c-aeed-0b03feac4b23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f99ef5da-36bf-45f7-9639-6894838e5dcb",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2c1eedd-2123-443d-92bf-ca297aaa9305",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a378be7-ea02-442d-af7e-cd7a5cdafc6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04223992-7f26-49a2-acbb-a5dada9655fe",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b93c99c9-376a-405d-93e4-bf5de7ba8128",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63eebd03-439e-4c14-bc85-e22bf4a7d2ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab5ac61a-6d62-4f26-adac-ae232df4e66a",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e930e888-dda5-4702-a6d8-ddb251d0788b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3b2f36b-1e5a-4cbc-9ad0-145fe50ce617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffe8bfd8-8a2f-4168-bcda-345629925cb0",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe170863-8c8c-4238-b198-1ccc808b8d94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72aaf670-f8d7-4f07-ad3f-fc120e95f5cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c0f6e8-8882-4ecf-ba19-3dbc2172ea50",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69391a39-3bba-4ea8-a46d-fde71613d076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a19fce6-c037-4a03-a56f-4290c5beca47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ba71fd-33f2-4e06-9538-b390fe089f52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0ce58ef-2152-4617-a63d-765fc4ca5a57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf93dca4-a0dd-4b7b-b1de-63fcffd06f53",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12a1d5c2-2d82-49ee-9379-087690d921b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d028613f-5797-447e-9155-45cbaf86de0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "888ba30f-484c-473a-bbea-402101843579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efe6ac93-d40f-4aed-a964-ab086cf20f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f40f68e-3466-4edf-aa69-bb91b7c40472",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a68dd35-5c63-42a4-b8d6-93765af0b58c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff487db1-34e8-4695-858e-9f49ce36aa5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c88cc1bc-14f5-445e-8334-fdfb5b825087",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdc6c8e0-6d6c-49cc-b43a-0785a571f487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e187378-c9f0-429a-ac56-0f51405562cf",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58eae289-27c6-4587-ac3f-84d88ecfd2d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da549278-89f5-465e-95d7-70238a48b330"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eea344a1-057e-4700-aed2-cfaeb63e4e9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c27d4602-1376-4fe8-9091-239067dfd68f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf210989-319a-469c-9a23-61a1a9075c5e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b8b5924-0577-4748-9204-41cd657b4d11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "383ac1be-dcef-4c48-9c94-60294fc59ef5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf1606e0-1fb2-42ee-884b-013bd4f7f17d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c208464b-bcb9-4911-9bb4-812cd09fefc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "577fb745-0dc9-4061-aa04-e84d3521e4d3",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d52808b3-92b3-490d-810c-3261c4cfb506",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1b39a10-dcfb-4262-84ac-15e13bcc1659"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c1464b7-f1f5-4862-a937-457d5f613346",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ec13854-41c8-4a5b-8dce-7fd5928902c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a05746-7427-4416-894f-fc0ff9a2b20b",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "538f7fa1-50b5-4d3a-9748-aec7a9d9107d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae387d27-35be-4851-8a67-2b5480af94ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a1d4d52-3281-4892-a7f1-84fd3742ab95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6bbad11-c03d-41d1-a071-8111bcd76f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "581cc740-a338-46c5-a5ca-030d6f1734a4",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ac9fd14-58da-4ab3-9abe-08ea284fd58e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "baa15c4c-f007-48d0-a2b9-48c8fcc49212"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da8c264-23de-439c-b087-27cf31b46f70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ca2c3d7-0178-4703-a00d-27f20e3e4d7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b36b8a7a-539c-49d4-b8b1-84b517be377d",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d5f8669-0e72-4cfc-972e-5fbf41af9d8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6120cd0-e237-4ce5-a8e8-d94c25cc7822"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e52f9af-818f-4439-9194-3cccf815ee42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b17f12bc-0b22-4b78-add0-3f46e65df189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eae3d57-7da7-4b3e-b637-decd3edeacbe",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a55957d-8989-45ff-ade0-f2aaa1410220",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab1a94af-37d3-4d45-a7c4-f65c6f741778"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1606b6b8-5b04-4324-a836-be41029eff92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2be21bac-6d2a-475d-adb1-9cdd62e36d73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4521c82-2e19-4135-afd6-0878fdf12c39",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "626097fd-67f1-4783-b767-2441b311149e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b2bb0c7-cdfb-4121-afd5-4edc8f5c2153"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d532d74d-09bc-49c4-af60-f7a1e97d6622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e251996-2608-4efb-970a-acc416a2ba4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d30301d4-0de4-4561-bf4d-ac3740b0e510",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d977d2-5233-48ae-a3b1-e5b213d78ec7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ef3f24e-7a03-4a65-8f8c-e35ecb7efe2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70115f5a-2158-47a3-b547-d2c0c318c4d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0542b5a-c61b-45fe-a728-347c24f6c9e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcf33124-88bb-47ba-9bc6-2cbd7b7f5ee3",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53d3cd0f-db94-4b9b-9aa5-f441e545ed62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02ce24af-3dc5-4ce7-8bf1-fbf08f0e7cbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b1fc112-ca78-4f20-9db5-9ace12a7f246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eadb19bd-8f42-437f-84d6-a21acd40b957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b66e56e7-3161-4e27-912f-ce21c8c47c73",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e800bba7-84f1-424b-82e0-2bbc664bf406",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "460a93d9-4c65-4ddb-8460-ad68c9907690"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4259053c-e833-45b8-a6c5-a6776b8cd0a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68c4e355-df18-414b-aee9-1339449a4e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "419452be-be22-4277-acef-b7f8a6df1e0d",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de00d1ca-9ee3-450b-8744-9fe9cc49b4af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4d1a578-355f-4fe2-a2b2-00af62971520"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e918f15-721c-440a-95f7-dc3dfb1e6a3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1a08441-241c-4306-af80-dbbe56ca95d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "032241bd-9de2-4f29-bf29-efec56c657a7",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac5feaa0-096a-45ac-8f4e-1daa861e2a82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fe3ed81-788f-4d1a-8c5b-f0e6b7a24f93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b7c10fd-2c88-4667-99f4-78473eb23760",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc376f2b-43ba-46cd-8df2-161c8cb2cfff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a96b8f4e-c46d-4544-a56e-fa6d9e3fa892",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5732f118-5a16-42ec-acf9-6b976611ff46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8026fff2-2688-4142-ac0d-9d56a625bf10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1db6169a-dc78-4521-a817-b448c00603ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2c89711-e65c-4776-ac37-53d817770ccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e491e310-0f40-42ee-a682-46c95ea7a192",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adbfad56-55a4-46b3-874c-1e61a505736f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c7d98ce-7298-44c7-89a6-b3562793dacb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f07a5ee-c0c6-46f3-8b68-1f2d3906b1a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9e631e1-eb63-49b5-aa82-941d0bf21cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8496c495-4cdc-44d2-9eb4-c175b6e1b813",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c7af91f-deb9-48d3-baa3-93388ccfd6eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c5b2f17-ad95-4c79-bca6-ba6026e69722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53dd7d7f-7eef-412d-8653-7c61b4fb86fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "212041d2-8cb2-4b61-8faf-ca9dd6a2f4b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12388fc1-4df5-4be0-b227-55cfd6c28abe",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6546306f-12e8-400d-860c-e25d4e68f722",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e89b0364-3bb0-4c42-b2df-16a187b41b0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "979b6182-e31e-44af-b2a1-48ae0003d6cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a644b496-9ebc-4b3d-ac8e-dba858f315c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b51d6443-b9d1-4828-8760-b805e9a59682",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f45c6d67-6cb1-4a2b-82a0-e7c0cec96576",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eee09296-078f-47fe-a799-30ec4d48c9de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35d6bc98-989d-476d-8bb7-3b128db569cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89a71283-6cbf-4e86-aa6a-e0a390e1c42f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e4dd08-8643-453d-8f69-81e1b0450f7c",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a60df5f-7e49-4c4c-8a7d-2e4f2be20986",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02a2230b-b54a-4037-bb1e-03e6cb29c94c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "639a9805-ffcb-4cc9-928f-52f34d243663",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "552be23d-4418-4101-bfbe-a165d7e5ccf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5104853e-878c-4c89-8814-bb5099858f2f",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f621a6-0f3b-4712-83d2-7ab60aeedf24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52ade094-7d9a-4444-804a-ec4932380a41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "558bc3fa-b572-490a-85e3-0d47777a67c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "671da972-bff6-4553-8539-2982aaf2bdc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ced72aa0-ea5d-4353-94d4-a41c82096596",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e1ebd5-b1ee-4e94-81f3-881848587f92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fce7a606-1409-4d0f-82d8-37b06507396b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aeacfed-e846-4109-a5c5-63a9eca40187",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2e5f7eb-12f2-41b4-86d4-0d3d4fba43b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6107313d-2b9f-4727-9aeb-ca37e9dfd41d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "842622d9-7295-4040-85dc-00a67623386c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49322d9a-e071-45ae-b08f-f26dc3ffa5c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e09c6a6-18e6-474d-b9b7-371c8a777af7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13796ed3-e94f-4916-891e-4524955ba4d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b0fb7e-e23c-48f7-b4e9-5c0bd4238bc4",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6039935c-ebcd-49ee-8815-a89afa82a623",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c159df5-b246-4c16-93ae-1112063e881a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "824bddb2-6db8-46f8-8ebe-761ea200f458",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f0f2731-eceb-4805-be9a-49d5769d9385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9cdf4e2-90ad-4671-807a-6ca80c1e620e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e1d69f9-ff1c-48fd-bb95-e72f4f5f749c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "277c1829-1055-40bd-a10b-709392ba6f6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "852362d8-4aab-4fda-a1e9-840bf8c0c103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a847d350-3133-43a3-a7d0-cfbdcbede0f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ba21c40-4e71-4c93-a532-3df0e9645401",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7182917b-54bf-4a29-8d53-c8a8077d4bc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da1bb2be-d17f-482f-87f0-2a9937edd1ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "550e406f-7a2c-433f-a13a-195ec53a1aaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb296cfa-c52c-4263-9fca-b15363dcd34a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ad808e-51bb-4b89-9ef0-390bafd7f9f1",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d338b91d-094f-4c77-a339-eb1af753d746",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3311e68-aeb4-453f-af98-435780da133f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e17b57d1-dbb7-4dc9-b299-0dc464d0837a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47c3d2bb-165c-4752-8a03-0657e6f22f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8618305-6373-439a-be19-9824e7e40e85",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "715ecc9e-fa07-4677-8396-f39d83472ce6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cafd9d08-0b91-40ae-9205-5bc58cd15f54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a33ba400-5424-4b48-8c93-8d44611a8bd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28eb512e-1dd6-4339-b912-d469fe5f5aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a9b4ae-64f3-4101-a926-847a037f15e5",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26b3aa86-544a-43b5-9c63-d76810e4dd99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a9ade68-cfb9-440a-9c07-05585a786796"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61392930-b4a5-42cb-950a-08bad5224143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d62b99d3-43f1-4e55-9f5f-7d5f0727c268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa8ce1d-d759-40b8-844e-666675de45c9",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a4c7ff6-a4c8-4fa1-acbc-311f503cb11f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34a9c5f4-5050-4b31-be6b-88953d87e5bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f1bac4-865e-4a5d-bada-f44619099998",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52b9ab86-1bd6-4ce7-b1c8-97fd3bd893f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf2cee4-c6a8-472a-aa48-1c61d4186ea3",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4364754d-79b5-49a4-9a9f-01a14e227a5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd38340f-4ad0-4224-a6ad-fbfc4f334a64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d70eec2-1491-4a3d-88f1-67aacc5d7135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f751b8ce-5275-49d4-84cc-627d3f4689f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f61e7359-c12e-4da2-8dd3-c6311ebffe6d",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79fd5e0d-c1d6-4400-896c-4486ec8f91fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce99206e-d84a-49bb-ab6a-0623522aa508"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0400e54f-5528-4979-970e-18ee5852e021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bb5b05a-dbf8-40b2-b7ee-d5c4862ff4bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95ad740d-e2e0-45a9-af5d-bddf9b2670fd",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "012a6065-6ec0-4e0b-a3dc-c385d070b053",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a5e484a-8ef6-4f3f-aace-5e24ec424c62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "700be031-1b51-4a64-94fd-99ee6a22ffe6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab77234c-fa11-479a-98ce-6e862bd24ee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27bc1b85-5c82-4ffa-bae1-2bfac377f969",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a30c0cd9-79d6-43d3-9793-93d5fb668521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3cae346-93a4-41ea-99e8-075cf8501acf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "519445e1-d4fd-4dee-99ad-9d17d011b0c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dfdecbf-c569-4e08-b394-0e698d74f762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b175b5b2-8069-4af4-816f-e204609c4d79",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d1fdea-efe2-4c47-89c8-71799ae9e867",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49d8ea6f-c95b-4409-bcc1-b21d221c72be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68cabfc2-4568-47af-a7b2-984470667bee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32f4e083-722b-4f7c-ac3a-29788628a553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "367ead14-1a48-46fc-a19c-98cff18495e3",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d02002ba-56e1-4467-9046-cc60ef9c3c73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2ce5dcb-a1fb-4200-8891-8756f56999ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be15396b-0111-40a7-aff7-714490c17dda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b72b7894-f5d9-4d96-b1d5-b8929aac8fdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8600b9b-5898-422c-84b7-ccd9fd661541",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a620670b-dcab-4ad5-8482-df03f5ad6f31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78a2e8e0-7208-43f0-bb0b-515eab449d84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e836df1a-9225-4415-b672-0e5890e05a25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de51c790-c70b-4a3b-b86b-a7e43f6e0aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c6e0f16-addf-43b3-9b47-1e91a7317746",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed7c23d2-fce8-4663-be0e-63cc8971da22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90690266-dd53-4b77-9db0-6056bc356b21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c0932f3-0baf-4ad2-abf3-0d54bf34ae2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dd5a871-d9a5-4cc5-ad9a-c84c1e6d2ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bd0debd-8035-4e36-8096-a9e0c6d6d411",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44cc77d8-72be-491a-813f-1e6fd019910e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66232f6a-9a5d-43cb-8ced-121511af01bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "522a1fdc-2ad9-493c-ad03-00c1da159d3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3be00367-152f-4c97-810b-4cf7642fd80e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39635eaa-6da6-4390-bc48-86c99305925e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43c86615-845a-492f-aec1-2de2f247740b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a6917a0-50bf-4758-9fdd-d25ae39e0167"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd849ac-f7e8-49f9-92ca-96e2159cc5aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f76d64f-41d2-4333-b363-c80bd1787fe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d59eda1a-cc93-4f6c-ba97-7fb5a81c2703",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "799db7e0-08d8-4cdc-9a98-20e472346f22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a46f1755-ea0e-49ae-ace6-9e5ba7496c9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d85ff8e3-99de-4caf-a16d-04487521283b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "181add02-a81a-455a-a3b7-99c0a335deef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8587e38-1492-413f-8aca-5a61aff20ee2",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afcf8e78-71a3-4e87-a32e-d47cefb87fff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21250541-aade-4396-af86-2a8e6584275c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "718243ca-4df3-4a4c-9f51-e89471dc5062",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82cb8b82-c93a-42d2-81c7-418901dcd0ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80964b3d-b0ce-4b1e-bec6-6d4ba7114f76",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b1d85d-f07b-4461-b12b-71e9a96eee4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db0c8a7b-a9fe-4dd8-a571-72346668977b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a4561ac-71bb-4e14-9043-69a86c27dbe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68dba1fe-fa1b-4385-9169-fad5f2232f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2645b408-018a-4d8f-9b3a-a77156809c5f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c819703-16d3-4f0c-8c1b-5dc451faea30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "871fd10f-9fd5-46d1-984a-a2ec74d39e6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c019b7-1a10-4633-8648-c343ba2e9c8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18b0a703-5b72-4a96-9c82-3f62f7d4a42f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "697ea03a-8b5f-4f28-9d27-db38d3bb3d1a",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd50acc-06d0-4747-ba0c-582005283dfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a9a9508-5d11-4585-ada4-146ecf850ecd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c0b7907-b3f1-4321-bfd1-54d4382eebd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baeae74c-494a-4247-bc8e-f66ce1acdebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a69b8f1-93c6-412b-b135-534fac0deff1",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf9630fb-cb1a-486e-9036-299fdca18154",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af391958-061c-43d8-9274-d0ad82066674"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "990ae4a1-e41e-45ff-8d82-b06a97962122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d0b1dd1-e084-495f-9f14-a5e6c1481d3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04315cc4-98d7-4b16-a6e9-e77de63c2f51",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf4cd79-fece-487b-939d-a4e5a43467f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa7fc5a6-38f6-4c20-942a-9e51d3d96ffb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57d13c44-150d-4092-96cb-63c731dff32f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7409e11b-bd1d-43f9-86f6-b7663b42eb07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "860c92a5-1eef-488c-aea4-ae086d28b3d1",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e617c58-9591-4c5a-bc5c-df8de4c6b975",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fcc3102-53b5-45af-90a9-2f6974cdb12f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a7eb5d4-3ace-426c-a182-9a275cfef7b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b34d50f-8195-4529-8b56-c7484d551022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b97a53bd-01fc-463e-84ed-ca19906f33b1",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f031fa4-d272-4f99-b9c8-c642c7c59fc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1798914-202c-405f-8475-9ffaaeb5a355"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3338b5b1-42dc-467b-a742-2a74f49701e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87a6d915-0786-4dfd-b86e-bd56f11e7cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d38102-73b1-4721-8035-ded6b0af3081",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e62796-85fa-4782-ba04-e6e5b5c19bbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97b111e2-ae50-469f-aeba-b45a0c16e545"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48246090-a51a-42d4-b197-e9469466e6ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3457cab5-7810-44c3-82a6-70e0e68c949a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc6a412-379e-4f97-be42-931677ea9f00",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52595864-16d6-40c7-ad89-59777c03aa5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f2b51ad-2f8a-4faa-b230-278492e57c34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8650b1a7-91c3-4c1d-90b7-bb67076db40d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f000a98c-3386-498c-940b-6294580dc72f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc1ee93-355d-43ed-9ac4-3f6def8e3c65",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbccc648-1794-4f0e-9808-64227b800dc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6ddab0e-c36f-46b6-bbc6-c8cafba2f3a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2633d505-96f2-4326-9a18-01999e8a22eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c693ecf-b043-4762-8279-547c53c0fa35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "459e6cd8-0dec-4e0b-bfb6-7bb5abdc8de5",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6833b84-6f1e-42d1-9a3f-8ab764f25adf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48e7fe06-1d7e-45bc-b479-a7a1b7c03841"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e10257b2-1638-43dc-b745-633bb194acbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b089bd5-2bff-4a15-959f-898bd7626be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6002adfd-7adc-466f-b66d-2e0e57273695",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a5fc5ca-e50f-4850-ac1c-b5d9c347fd2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f26e948-de78-4765-a0bf-3c3efdc1d507"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc0c675b-a7ef-40a6-9e7e-98577c988090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78d0388e-7f2a-4db1-b3ca-34228210575a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11086327-b25c-45fb-8e72-321a4aab8e28",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82cd1a25-d023-4a57-9488-2e7a9f66fc3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "486b27f2-2de1-4ef2-9b32-7f985acda6c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f920f7-89ac-4ae0-9b4f-baa516abb99b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e7aca2a-2a54-46c0-96fe-9633dd4d41ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "325f19ea-9adf-49b5-8233-860b19fb6ea8",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47d55fff-d51e-41b9-aa46-5fe1b98dd05f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23b07ac4-49d5-4605-a191-90e636fec05e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b9f515-daa3-4d49-a3b2-1f5fd1382214",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d3e3042-6033-4968-b6c4-19cfabcdc77e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ef43c0c-3118-40ce-8775-dab912f0cec7",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31ddacfe-a56f-42e5-8f81-cf69bd080561",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57deda69-e469-4de4-b7be-b3088bbd3631"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a81300d-a0a0-4fdc-99ed-733b7314dad0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7739c75c-70a9-47eb-83c1-8a6652c639eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b555881-ca7f-4db4-8f2f-f9d2f3f615e8",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d01ee2a3-465e-4b9f-9a28-8e35fa740a21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "581c6473-01b5-42fc-acf1-deb9be7324b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eacdb65-fd8d-43ab-aa90-602d3f124469",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc4d0291-f091-427b-9dbd-0295f96f27c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bbd8b80-6ce5-473a-b6ed-cf4b0917576b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5477dfaa-113e-41c3-96eb-fd12aa935691",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30a6731d-a8e5-4703-8079-a882a0ffab3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa85bed7-2c83-44f2-aee7-dc34a5431f0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7992d6c2-bba0-4b30-ba22-33401e5f88e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5746779-19d1-4be7-8162-ba322fc37958",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44848e88-1a9c-4fd9-84a0-a56eb0b58400",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40f1bcd4-96e4-489e-8399-60bb004687ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c072aa1e-d3c2-491e-8251-f2756eb123c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95633714-98f3-4190-b47e-0c386ac902cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9104a690-3206-454f-bcae-7485f03403f4",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "417dafd9-8e24-4257-a03d-fa38f2077464",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2a3143c-caa1-4097-acfc-0e800c9ba9c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83c34797-1a4b-43ae-bd69-bf1c7f9c2427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea1302ae-36dd-4a47-9687-e8384cf7d14b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd474472-83e6-4411-a721-73e26f106040",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d98dc31-657e-408b-8e8c-4e8ba07c5ea7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3aa2c098-0e57-49fd-96f4-65ab20e809af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a625a9-11c3-4e78-91e6-22ad0ea17b4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ab049b6-c022-4a95-b3d5-79acbd65ce96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9395e337-f5d0-468d-87aa-0f2a3fa3bc12",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27809d20-c4cd-443d-918f-10a6b08de310",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bf46ec2-27f1-4b46-b9a5-4561844aea3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd1fd55-c4c0-448e-b4ed-9afe457c0cfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf1d7b5d-ea6b-4ec5-954f-d94ab1f32a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adc57601-770b-4767-8bb0-799e8bcd42cb",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4101666b-dcae-47eb-9e1c-9ef4a5f50551",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d17c141-21aa-4fdb-a507-e14b9c6a7e6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14f98726-cff6-4b31-822e-119374ba3a0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "698e79ec-1806-4218-85b1-28085b8cd241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "411b5ed1-f313-46d4-b071-a9c0144e30d6",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e56e78b1-6e59-4227-8b71-f7aa6604e422",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e57a0ac-bb1f-4757-9de2-c06381d39903"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6493cea1-4b9b-463d-abcc-089cd5f5216f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92f44108-09d9-48d5-8cb4-ace1d045bb95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8fc98a5-aa51-4038-a915-1d6bb1932d32",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7378a713-5bb2-4af2-8e8e-73ca3f59e367",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "034e9cfe-03d3-43ce-8ee2-fe7433d37976"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e90021a-013a-4d90-8e52-ea7e7a19ca4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ced6f5d-b454-49f6-9a8c-14a01a673a34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76fcb84a-a108-442a-a0bf-650bed7c35cd",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79556345-296f-4cee-a4e8-1f378116617b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4884b10-d129-43bc-8fc6-5dc162ea62c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aa8c78a-56d7-4c82-bf2b-a4298bb49823",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84b7ecd2-53b4-484b-87ab-fa0f49693339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72bf21ca-b35c-4d4e-a85f-47e137ed923a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "024d9cdb-3277-4d4f-9286-5148d21106ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dcd38c6-bee9-435a-be8a-9aa73f526d80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c18f9d2-e7ec-4b01-8508-3b2de2181579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61208c54-2790-4908-9e8d-bbe7a8125d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bc8f9bd-4d53-4fb5-b28c-767f161fd8b8",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde3c8e2-c89f-4497-9d07-52aaaaf6e724",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5aebc734-c7c6-4c3c-94fd-bc90b33ad0f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d8623b3-91e9-4941-a95c-e8cf5e1eade7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0de82747-77ae-40fd-b0be-c04354e04024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "500a660f-2eaf-487c-9907-54e08acdfd47",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ebc4a70-f98e-4fc3-98ce-069bc7f0c8b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cfd0407-2778-46ac-95e5-ab78c2eb0b02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e74d232d-7a57-41f1-a1c8-62f127c8c997",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "410995e0-93cb-431c-9192-fe876acbf985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69f24882-f9ea-4157-892a-83bf0ba24aab",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb859759-03f8-40c4-9b5d-ba8f70515c36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74b3564c-1969-4b29-95f3-5013dabbcba7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce237fc6-9ab1-4933-acc4-7e9f064b69fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e82ce753-fd76-44dd-965a-9293aa46a321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec2ce424-0419-48c5-badd-0af5f9d9a2b9",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e9dc1f3-1308-487f-ab6d-ccc2e6ea64fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b90b542-0c2e-4889-9edf-13a51faa58fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e6f0c88-118e-4280-9d70-1e10b4c7214b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74d622d7-7c99-4d1b-a8ae-d0251af27121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "258aff57-1e90-415d-a6bc-acb204f21946",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5df69c7c-9e01-4893-b34b-42b9203c0d6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf7beeb6-dc65-4496-9841-612b77efd2bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4add61fc-edc1-4c78-b3ae-b908d96849fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5cf682e-4e58-471c-b39b-41356150ea9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae0b3a4f-c98f-44fc-9841-801aff7c9410",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "957b6071-ae08-463c-b8e1-3b31cd05a633",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5152827-0f00-43b6-8b96-a5430201d8df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08de9b9e-e5fa-42db-b06f-034b35dd3dde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81248fc6-f4a3-4ba1-ab9b-610c0c50330f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3ca5f80-49cd-4bb0-8287-ab0ad49b4307",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "952546bd-29b6-40d8-9a35-0785e3fab4bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6dda624a-c604-4a5e-be21-e1164239bb4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55405916-3554-46c0-bc95-28c69541a1a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92a02ce5-61e3-4a67-b626-37863004ba0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bad099d-72eb-4fd4-b875-41d2cef9d6de",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa76b680-db85-4d6d-8d82-07488d5725df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49251145-bec8-40e6-9781-d1ddf4d8100e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f654f3-bc62-439d-ba06-502624a3c1a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "490c92e4-961d-402a-9682-a415cd1d17ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d8a2ba-28eb-4c5c-ba2d-670eae6075e0",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b23c61b-3fbc-42ed-a1d2-b7b5e0e233f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81ae2134-e4a2-4067-95a8-dfacc4fdcd29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b32b63-7706-4f99-b25b-2227a4064867",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f84dd08-b71d-45e6-9ec9-2ee8c715eba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be415f1b-3631-4287-9f61-0ce3b9870659",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d1cb8d4-54b0-4a98-800b-0625d0fe6cf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72f4c798-cf0d-4dbc-aea2-f3f3d66b0bdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec1f3fd-a736-491e-bbfc-8ac277e8e034",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee7e731b-031d-4dec-bd98-34059e31a153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eb03cbb-436d-45f7-ab86-5d9bd4d53fe7",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8924daf7-c61e-4714-8215-eaf126b43245",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "827be034-5d05-4a5c-8748-3686540e4516"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b96fec-d6a3-4b35-9746-8c3a236f0775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6b9fc02-6c5d-4407-9f22-62b7248b6f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e553210-251b-4956-a45d-aa7fe5f143c0",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59a6cb67-682a-4cbe-a85c-7acd0b759c83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26353659-61d3-471a-b703-60d3ca4d0c5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89ce5eea-c6d0-4878-95cd-4e9a1aeb9cfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb78597e-3f40-41f3-b8d8-6a4b056cb122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd0b10a5-8b03-4f10-9e9e-0f0192ca82d9",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b1bd37d-8b86-43a9-b14a-f3cf98cc810f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d5d4039-ce7a-4684-87aa-7f5bf9b0f45c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92fc823c-cbcd-4536-b870-59ef4ee6acb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b56b4da-240e-4834-9c6c-66860306c58b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab125d77-2f8d-40cb-9dd5-4d0727b3a205",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5fcf7c3-ca41-4d57-b4a5-97799732c51c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f74e67e1-fd01-44b0-b55f-df0c4f01411a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b789c20f-33b0-45af-92ed-b49d13e2f7f3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ef1a437-41ae-44b8-86b7-1e510004232d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c049f39-929f-4962-8c61-521975531077",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14a212cd-f3a2-4245-b9ed-27bc47c50372",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2c91dda-6eb0-44d5-8e9c-73ffc9294a6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3460dbaa-0c8e-43c9-a335-f0ea7ef4f224",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4357cc47-b4a6-420d-b2b9-3a4f27872a21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82164021-1781-4191-b3e3-853adfa4db7e",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e068e451-c359-48ca-a342-9bc5c73f3608",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f88c26d6-7dd9-4e14-811f-aded616c9f42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a535f6-921a-4a65-b9cc-e761e2abed63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04a22070-6e95-49a5-98eb-873133e8d338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ec0da8-6cca-4e1d-af2b-bda3b81118c9",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f41b94a4-f097-416e-bb1d-6f6c209f7d6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60f1fc11-813b-4d33-b224-c2e482baa03c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec7762a-c7a6-4e2a-98bb-f299dc80d5a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c1907fe-c0b0-41fa-8a01-b65d5e3f2c87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4040d03-c8de-4aeb-8670-c9c6f9aad777",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b84ae49-0eac-4355-9a9b-6c15fad2bd4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39e19bd8-ac28-4742-be67-d44904bd0ffd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "673bf6c1-8f15-4f0b-8950-a08a4b1e4b6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94247da4-9b18-47cb-b46e-e043a9258fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6980d76-40bb-40bb-8419-23926fa82e13",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd21071f-48ed-402a-b10d-04ab4b171ea5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c73cdac5-a998-419a-b12d-6c38295de50e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e79dbe-eaa4-4148-a1a2-e67c62edde24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a77a333e-a991-4d64-be92-b6b27d8c01c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71dd4389-2ac3-4316-89d8-d5fe811c32c6",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b4955f2-4ee8-4c0b-9925-7ca2b40d0f1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbe33686-fa4a-45c3-98d5-6823e47a5f62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c083346-9d25-432b-b954-60843308a786",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "966e5daf-fbb9-449a-a8e4-9e21f2ac0535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c203c8-d902-4fff-accd-b1eb95493eeb",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d3a59fa-b0e9-4ca8-be6d-cb9c10cf628c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8223d05b-4411-4f08-b585-af391edcf993"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a782f43d-3611-4b79-820d-28ccf5684012",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7037d9d9-c7b1-4328-9f2e-b0f9b5c5f0eb"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9710bdd4-88ae-47b2-90b7-06cbf871af76",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c04110a-8e3d-4c45-8c25-4f074e21c651"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c347542b-1971-4b96-9e97-dcca5e587c91",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "164eebb7-1ea2-428e-9b02-3ed8e04b730e"
                    }
                  }
                ]
              },
              {
                "id": "2397fdf3-2314-404e-a15a-7b1ddcd39ae3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "efd8300d-bad3-40ac-b252-e297358f533a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30682521-9fcc-41fc-a6ae-6c0065a824b7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0dbff95f-8694-4d6c-b889-bef4bc9c57bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5345a180-f867-4dae-beb9-4bd55f363626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "42c50ae0-b7a4-4199-b903-0a4a97fd35b1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "80047d7c-934c-4393-89da-9745716a1727",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e3889b8c-902d-4998-aa26-b59845bf0565"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eadf8cd5-bd6a-44f5-94b2-f9d5a118e0c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "edc08093-0e06-4605-ba41-f5e2304c318f"
                    }
                  }
                ]
              },
              {
                "id": "0509525b-2884-459d-81c2-f7a0ceed2924",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "157e22f8-3a5c-4743-bb97-2837c1f31f59",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7263f2e-6116-4d72-a71e-4c286769133a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "c5e99b28-0616-4600-899f-19aed677b601"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8678a459-f297-44a7-8b34-d012bf4692c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0541cfdd-e08e-4f63-8873-28adfd915ce5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1ae1fa99-a494-4d55-a576-eb3e3bed65d2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b6852757-ff03-4638-891f-89032051251d",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "98e9bffe-379e-4a7f-b5cb-dd0a8195906e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4c6171fd-6e87-43c8-9914-07ff9ccfde58"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0fde18e6-4218-456f-9b92-b538016882b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e45999f4-9d1a-4a3b-9dd9-48f284849f05"
                    }
                  }
                ]
              },
              {
                "id": "2e1b3ce4-8b61-4273-8b43-ba3d806617b8",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7f9da98-e7bf-443b-b747-0b30d28f923d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "983e9569-71c6-4ca2-942c-6b89f2a2c3af"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf240b89-5835-4582-919b-f46cae650bcb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6d4e80e1-1b9f-4db0-b148-e8e3dbbac6d2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "60002039-9c77-494f-a592-4fdc93c07774",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "837a9a70-afbc-43b4-a59f-e68702937d7b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c851aebf-d938-4bea-b3d6-9561fea3446e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6179de16-120a-4e5f-b1d5-7a0042d105f8"
            }
          }
        ]
      },
      {
        "id": "aecf14cb-caea-4daa-9041-62ead0146866",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "aff71651-cb30-4dea-bd5f-3f90157be94a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "edacfa64-c539-4143-995f-e777a3b1a4b2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f8146bab-2f74-4e6d-8e4d-fb92659d395e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c8fe5ee-fb22-47de-9753-fe08dc84c8f3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "53c0fcf9-9789-4b78-8464-f9525982dd25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de9f0a9b-cb72-4a85-95ba-4dac3a138ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e57e7c4c-35ea-4731-b6c5-18c668d96039"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fcd3788b-e2d2-4fab-9da8-b7555ff1d0db",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "db0336d9-9af8-4821-8392-7bb1e153a0fb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2fc2de78-ac0a-44aa-b59f-a64d8f4484f8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9ad45fc-0bea-4734-b3dd-9db62466dbb7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0c494790-33a4-4c59-9f9a-cc8c5c39e7cf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "1583fed1-259e-4ae5-93ff-c7b366257bac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "59c1bb18-00b9-46b1-91fc-998ca9d9a98d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "076a45e5-cdea-4046-9127-48b90c6fe15f"
            }
          }
        ]
      },
      {
        "id": "2dd4ebfd-4d51-4721-9b20-a3437c1d0f5f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e03bc9c5-0178-425f-8e46-f3c888877feb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7307e34b-09d8-4099-ae49-2b2eadb6ca5f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3862730c-4b79-448f-99e1-5aae4b03bc3a",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec335df4-0c64-4b5b-af3c-2b3a63622efa",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ff390d0-2c94-4314-95b6-d4c33274242f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0da8055-8090-415e-8220-33d093f6c80b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca680d75-92b5-4da2-917a-12bf03ad5707"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cd43fb9e-31ea-4435-beb8-10fc3ffb7863",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "24534405-d8a3-4c4b-baf3-b200d4a6d4c1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d83d266a-a26c-4105-b414-186af3d96500",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb7cb0d6-5c41-4f3b-a15a-bbd2dbf6abb3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f7247f59-030e-4dd4-b25e-3126b8b8ffcc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "03606b3c-f9c2-4b6c-864d-14d3810b3e30"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9a32f147-a7e8-48d3-90fe-a42b1123434a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6c7f6d20-3fa3-47b5-936e-3dc9dee32e2f"
            }
          }
        ]
      },
      {
        "id": "b71a650f-a80b-4e3a-afc4-19e8cb15e591",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "fa2419e5-2468-44b6-8864-b99a904dc48f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ae3a46ea-2a44-4815-bff3-0aa632eff1ca",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ee0dfdcf-8652-42a8-96d5-9146b2bd1549",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8fe5a8-3f83-4656-ae29-407b0a54a694",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f1178b3-cf25-475b-8a6a-bc2adedfe337"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f889e037-fb50-48ec-9c0d-339b515ec1a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1a5e387-b3e8-4c23-9719-02a30d720d28"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9af82db8-80ef-4768-8d22-c224c9992aa7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "06b3685c-9ccf-4fe9-a5fe-06339526b66e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e1de05c-d459-4f9d-b003-4fe0be5f9cd6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56d93946-0225-4158-bd23-9d02164fadb6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dd2587c0-98fe-44a4-b33d-81f2a3a70d9c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5836025b-6835-42bb-abff-b0c58014ec34"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3d10cfbd-bf0e-4f51-b01a-6f932034d258",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f8c1385e-0b99-409e-b899-6d09a81f7022"
            }
          }
        ]
      },
      {
        "id": "79305910-3ab8-4f8d-b024-0f71a0fd381e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "efb44b42-27f9-44d0-ab7c-02b62ede7fff",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6509d094-dd58-4af1-9c72-6a437a48b86c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e416d169-a79d-48d2-8a9a-ad8b2cab8fe1",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3ca1adcc-76f2-45ba-b5ed-4eed4db7b21c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "181c2e42-3ada-4fe0-b0b4-35393df66af2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 564,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 294
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 62.23936170212769,
      "responseMin": 6,
      "responseMax": 973,
      "responseSd": 42.84316372079406,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1707352425181,
      "completed": 1707352470337
    },
    "executions": [
      {
        "id": "7e06d019-975c-47a7-912a-105c70a2c2b0",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3043db35-b7b4-4c27-9866-694f9d8a74c4",
          "httpRequestId": "ef7c1689-16c4-4f5b-89bf-4969dfbbbbbc"
        },
        "item": {
          "id": "7e06d019-975c-47a7-912a-105c70a2c2b0",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "7226818a-5ab9-4033-8ae1-5413627f6356",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 0
        }
      },
      {
        "id": "fe5e8021-a065-490c-a3f3-305a414623dc",
        "cursor": {
          "ref": "2d8ba6b3-973b-41bc-b7a8-7ee2bb8686c8",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4cdaf7b8-97de-4919-8f32-411d705a78e4"
        },
        "item": {
          "id": "fe5e8021-a065-490c-a3f3-305a414623dc",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d2fff5ce-f659-474a-a528-e35856f584d4",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "5db9057c-e1f2-46b6-bafe-1b8dc3018697",
        "cursor": {
          "ref": "6a56fdd7-4f03-4083-9048-3e601d3fbb5a",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5407a847-c79c-48f2-a7e3-056586d3ef08"
        },
        "item": {
          "id": "5db9057c-e1f2-46b6-bafe-1b8dc3018697",
          "name": "did_json"
        },
        "response": {
          "id": "0bf92227-8d59-4334-913d-12a5a8c5a499",
          "status": "OK",
          "code": 200,
          "responseTime": 973,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9503c51f-ac2d-46f8-b9fd-c1e58189e823",
        "cursor": {
          "ref": "64903e91-4f0a-409e-8cfc-a1ca003984f8",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "15f2b633-95d3-4460-ade6-aaefb7b2fe51"
        },
        "item": {
          "id": "9503c51f-ac2d-46f8-b9fd-c1e58189e823",
          "name": "did:invalid"
        },
        "response": {
          "id": "811c2a7f-ef0c-4cd4-a4a7-54c87e4e0dcf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9503c51f-ac2d-46f8-b9fd-c1e58189e823",
        "cursor": {
          "ref": "64903e91-4f0a-409e-8cfc-a1ca003984f8",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "15f2b633-95d3-4460-ade6-aaefb7b2fe51"
        },
        "item": {
          "id": "9503c51f-ac2d-46f8-b9fd-c1e58189e823",
          "name": "did:invalid"
        },
        "response": {
          "id": "811c2a7f-ef0c-4cd4-a4a7-54c87e4e0dcf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b7d111-2507-48e8-8dbf-b766fa9c5a2a",
        "cursor": {
          "ref": "e7debc9b-0ce1-4159-96f0-1592ecd22302",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "7f143e85-01c2-40ed-a453-37c7960b3b85"
        },
        "item": {
          "id": "c6b7d111-2507-48e8-8dbf-b766fa9c5a2a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "eebae81e-83d1-4b54-bc70-db882b54e225",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b7d111-2507-48e8-8dbf-b766fa9c5a2a",
        "cursor": {
          "ref": "e7debc9b-0ce1-4159-96f0-1592ecd22302",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "7f143e85-01c2-40ed-a453-37c7960b3b85"
        },
        "item": {
          "id": "c6b7d111-2507-48e8-8dbf-b766fa9c5a2a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "eebae81e-83d1-4b54-bc70-db882b54e225",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f9dbd9a-f1b3-4c0e-9296-543d32f42879",
        "cursor": {
          "ref": "3ac006bb-17ce-47ab-a897-61b4773585f6",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "39960d49-abd7-4c63-a9c4-c9ef1e0af4e0"
        },
        "item": {
          "id": "3f9dbd9a-f1b3-4c0e-9296-543d32f42879",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "407fa977-d8e4-424a-b3db-defbcf75cd38",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f9dbd9a-f1b3-4c0e-9296-543d32f42879",
        "cursor": {
          "ref": "3ac006bb-17ce-47ab-a897-61b4773585f6",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "39960d49-abd7-4c63-a9c4-c9ef1e0af4e0"
        },
        "item": {
          "id": "3f9dbd9a-f1b3-4c0e-9296-543d32f42879",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "407fa977-d8e4-424a-b3db-defbcf75cd38",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c20c842-3330-4795-814f-8944182002c9",
        "cursor": {
          "ref": "fb78d203-efb3-4695-bad8-f66bf8d6cb02",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c4bc3310-a4ba-4c61-8cbd-41d3ce13a02d"
        },
        "item": {
          "id": "3c20c842-3330-4795-814f-8944182002c9",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "efb26fea-f433-41d8-9c83-6fc8bb7da775",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c20c842-3330-4795-814f-8944182002c9",
        "cursor": {
          "ref": "fb78d203-efb3-4695-bad8-f66bf8d6cb02",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c4bc3310-a4ba-4c61-8cbd-41d3ce13a02d"
        },
        "item": {
          "id": "3c20c842-3330-4795-814f-8944182002c9",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "efb26fea-f433-41d8-9c83-6fc8bb7da775",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86a8fe0b-47fe-49b8-b4b9-eba0316f058c",
        "cursor": {
          "ref": "2d4087b6-9451-4d1f-91f4-fedf20fc9597",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f1bdc659-7468-4741-95a1-ea22b3041b22"
        },
        "item": {
          "id": "86a8fe0b-47fe-49b8-b4b9-eba0316f058c",
          "name": "identifiers"
        },
        "response": {
          "id": "9f1b9436-4e18-4d94-a78a-0b050202c431",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "86a8fe0b-47fe-49b8-b4b9-eba0316f058c",
        "cursor": {
          "ref": "2d4087b6-9451-4d1f-91f4-fedf20fc9597",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f1bdc659-7468-4741-95a1-ea22b3041b22"
        },
        "item": {
          "id": "86a8fe0b-47fe-49b8-b4b9-eba0316f058c",
          "name": "identifiers"
        },
        "response": {
          "id": "9f1b9436-4e18-4d94-a78a-0b050202c431",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "355fef21-1560-4dd1-912c-bb7dcbdacb66",
        "cursor": {
          "ref": "07f42d0d-c537-4474-b743-d1e722a97d06",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5b464bbb-8170-4ca3-bdd8-2f3d101ec227"
        },
        "item": {
          "id": "355fef21-1560-4dd1-912c-bb7dcbdacb66",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1bedc521-f93a-49a9-8bc8-dc9f6ac764e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "355fef21-1560-4dd1-912c-bb7dcbdacb66",
        "cursor": {
          "ref": "07f42d0d-c537-4474-b743-d1e722a97d06",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5b464bbb-8170-4ca3-bdd8-2f3d101ec227"
        },
        "item": {
          "id": "355fef21-1560-4dd1-912c-bb7dcbdacb66",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1bedc521-f93a-49a9-8bc8-dc9f6ac764e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5de93b47-1b75-4f78-aee3-b6c4bd667a89",
        "cursor": {
          "ref": "170f4f2d-c552-4b64-b06d-6b05e56cc4f3",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "47033a89-7548-441d-b68c-539f89fb381c"
        },
        "item": {
          "id": "5de93b47-1b75-4f78-aee3-b6c4bd667a89",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "cb782623-5c54-495e-8aa4-990c07776934",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5de93b47-1b75-4f78-aee3-b6c4bd667a89",
        "cursor": {
          "ref": "170f4f2d-c552-4b64-b06d-6b05e56cc4f3",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "47033a89-7548-441d-b68c-539f89fb381c"
        },
        "item": {
          "id": "5de93b47-1b75-4f78-aee3-b6c4bd667a89",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "cb782623-5c54-495e-8aa4-990c07776934",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef3fdb69-4889-423d-b043-c4cf973d0a4c",
        "cursor": {
          "ref": "d65c020f-458f-47dd-b7c8-b739efb4a46b",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "802cf96b-99ae-461e-970d-bac36e228588"
        },
        "item": {
          "id": "ef3fdb69-4889-423d-b043-c4cf973d0a4c",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "11a16d01-5508-408e-8114-c3b458f0ca9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef3fdb69-4889-423d-b043-c4cf973d0a4c",
        "cursor": {
          "ref": "d65c020f-458f-47dd-b7c8-b739efb4a46b",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "802cf96b-99ae-461e-970d-bac36e228588"
        },
        "item": {
          "id": "ef3fdb69-4889-423d-b043-c4cf973d0a4c",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "11a16d01-5508-408e-8114-c3b458f0ca9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35490af0-6ad6-4e1d-be7c-9cf4bf3b2ac7",
        "cursor": {
          "ref": "d01ffe4f-d37a-4d97-a10d-f9b6c977cf4b",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5f77d72a-a936-4996-b3fd-82c89c88bc1c"
        },
        "item": {
          "id": "35490af0-6ad6-4e1d-be7c-9cf4bf3b2ac7",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a0f0b0f6-c975-48d9-8175-e49c9cf67974",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35490af0-6ad6-4e1d-be7c-9cf4bf3b2ac7",
        "cursor": {
          "ref": "d01ffe4f-d37a-4d97-a10d-f9b6c977cf4b",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5f77d72a-a936-4996-b3fd-82c89c88bc1c"
        },
        "item": {
          "id": "35490af0-6ad6-4e1d-be7c-9cf4bf3b2ac7",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a0f0b0f6-c975-48d9-8175-e49c9cf67974",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e46883-256b-4991-adef-cd09e6925e25",
        "cursor": {
          "ref": "c410c96d-80a5-44ba-9078-f27d886d046b",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "592a98cd-38dc-4ea6-a366-b4fb197189e9"
        },
        "item": {
          "id": "47e46883-256b-4991-adef-cd09e6925e25",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f46d6021-133d-459d-a8aa-3a3326bac69b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e46883-256b-4991-adef-cd09e6925e25",
        "cursor": {
          "ref": "c410c96d-80a5-44ba-9078-f27d886d046b",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "592a98cd-38dc-4ea6-a366-b4fb197189e9"
        },
        "item": {
          "id": "47e46883-256b-4991-adef-cd09e6925e25",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f46d6021-133d-459d-a8aa-3a3326bac69b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74df681-a35c-4269-9d30-e14d1c1aa4c9",
        "cursor": {
          "ref": "d4171fab-cc09-4da8-909f-db1de450a745",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "bfcc87e8-7323-4e95-a0f3-d0fabb7f91a3"
        },
        "item": {
          "id": "d74df681-a35c-4269-9d30-e14d1c1aa4c9",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1c1c5c50-4eb8-4cd8-978b-ad5270a14b80",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74df681-a35c-4269-9d30-e14d1c1aa4c9",
        "cursor": {
          "ref": "d4171fab-cc09-4da8-909f-db1de450a745",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "bfcc87e8-7323-4e95-a0f3-d0fabb7f91a3"
        },
        "item": {
          "id": "d74df681-a35c-4269-9d30-e14d1c1aa4c9",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1c1c5c50-4eb8-4cd8-978b-ad5270a14b80",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "935a8a24-5b74-4e52-95c9-23777dc73cc6",
        "cursor": {
          "ref": "0c96268c-d556-42fe-9e1d-4ab9a8aba6c9",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e97484ea-52d1-47f8-bfb3-378797c58433"
        },
        "item": {
          "id": "935a8a24-5b74-4e52-95c9-23777dc73cc6",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "3d3c4f66-f9e9-4265-8e0f-c8311fa005e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "935a8a24-5b74-4e52-95c9-23777dc73cc6",
        "cursor": {
          "ref": "0c96268c-d556-42fe-9e1d-4ab9a8aba6c9",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e97484ea-52d1-47f8-bfb3-378797c58433"
        },
        "item": {
          "id": "935a8a24-5b74-4e52-95c9-23777dc73cc6",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "3d3c4f66-f9e9-4265-8e0f-c8311fa005e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "828b6ce0-0fe6-4d9a-88ce-4bdf3a4c706d",
        "cursor": {
          "ref": "31651881-554d-4bf4-b7e5-201aeaa26a6f",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6c69a88e-9cc1-49ba-b07a-24a933aaa7c4"
        },
        "item": {
          "id": "828b6ce0-0fe6-4d9a-88ce-4bdf3a4c706d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e78ee556-cb41-4129-9c74-765df5a77a52",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "828b6ce0-0fe6-4d9a-88ce-4bdf3a4c706d",
        "cursor": {
          "ref": "31651881-554d-4bf4-b7e5-201aeaa26a6f",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6c69a88e-9cc1-49ba-b07a-24a933aaa7c4"
        },
        "item": {
          "id": "828b6ce0-0fe6-4d9a-88ce-4bdf3a4c706d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e78ee556-cb41-4129-9c74-765df5a77a52",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87503bd3-c281-4f44-bc55-80388f05f68f",
        "cursor": {
          "ref": "7b9583fe-5c49-45cb-b7b3-248d01bfd8a3",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "04be8db1-dd0c-47e4-a477-8ca81ce60575"
        },
        "item": {
          "id": "87503bd3-c281-4f44-bc55-80388f05f68f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ef4279f0-6e5c-4bba-bc3d-d6e3bf11bd2a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87503bd3-c281-4f44-bc55-80388f05f68f",
        "cursor": {
          "ref": "7b9583fe-5c49-45cb-b7b3-248d01bfd8a3",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "04be8db1-dd0c-47e4-a477-8ca81ce60575"
        },
        "item": {
          "id": "87503bd3-c281-4f44-bc55-80388f05f68f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ef4279f0-6e5c-4bba-bc3d-d6e3bf11bd2a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aea91b7-5d81-4ff0-b59f-3b4f40842b66",
        "cursor": {
          "ref": "228bd60a-3d7c-442b-a105-75c5f1e6f8b0",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ff2c32db-2318-4e8d-9af2-2859f373731e"
        },
        "item": {
          "id": "8aea91b7-5d81-4ff0-b59f-3b4f40842b66",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "654191f9-1e0d-4412-934d-359fd4596560",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aea91b7-5d81-4ff0-b59f-3b4f40842b66",
        "cursor": {
          "ref": "228bd60a-3d7c-442b-a105-75c5f1e6f8b0",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ff2c32db-2318-4e8d-9af2-2859f373731e"
        },
        "item": {
          "id": "8aea91b7-5d81-4ff0-b59f-3b4f40842b66",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "654191f9-1e0d-4412-934d-359fd4596560",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2361178-3284-463f-9eda-25263258f558",
        "cursor": {
          "ref": "4a9fdb44-f269-4885-a73d-bbab52f463bc",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f1240ec4-ba1a-4b31-a43d-380f486e8ebf"
        },
        "item": {
          "id": "b2361178-3284-463f-9eda-25263258f558",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e387b85d-b045-4b6e-9a25-515670f6d786",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2361178-3284-463f-9eda-25263258f558",
        "cursor": {
          "ref": "4a9fdb44-f269-4885-a73d-bbab52f463bc",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f1240ec4-ba1a-4b31-a43d-380f486e8ebf"
        },
        "item": {
          "id": "b2361178-3284-463f-9eda-25263258f558",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e387b85d-b045-4b6e-9a25-515670f6d786",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf6a635d-2ede-4de2-b2f8-57684fec79a9",
        "cursor": {
          "ref": "43e5e17d-bf21-4812-a266-25df876adb37",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "42dad317-4dea-4cc7-987d-3564d16e9fd5"
        },
        "item": {
          "id": "cf6a635d-2ede-4de2-b2f8-57684fec79a9",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "21a7a69a-7912-45a2-9b1d-43617a2b9ded",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf6a635d-2ede-4de2-b2f8-57684fec79a9",
        "cursor": {
          "ref": "43e5e17d-bf21-4812-a266-25df876adb37",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "42dad317-4dea-4cc7-987d-3564d16e9fd5"
        },
        "item": {
          "id": "cf6a635d-2ede-4de2-b2f8-57684fec79a9",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "21a7a69a-7912-45a2-9b1d-43617a2b9ded",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "725fd066-53d2-44fb-b820-dff29718f786",
        "cursor": {
          "ref": "af39cd70-4d2e-4976-807e-1552c8166e4d",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "967fb2c5-f9ea-4c6c-afd7-c79dc77a478c"
        },
        "item": {
          "id": "725fd066-53d2-44fb-b820-dff29718f786",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b476390e-6646-434c-bc90-9526f44bea1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "725fd066-53d2-44fb-b820-dff29718f786",
        "cursor": {
          "ref": "af39cd70-4d2e-4976-807e-1552c8166e4d",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "967fb2c5-f9ea-4c6c-afd7-c79dc77a478c"
        },
        "item": {
          "id": "725fd066-53d2-44fb-b820-dff29718f786",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b476390e-6646-434c-bc90-9526f44bea1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fdb3e7a-f66f-4f88-a9d7-8f108181eaba",
        "cursor": {
          "ref": "f25f7e43-07f2-4166-93d5-675ed055af04",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "aa59778b-edc4-4027-b9f5-4718c06af80b"
        },
        "item": {
          "id": "8fdb3e7a-f66f-4f88-a9d7-8f108181eaba",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "104e1e43-fc41-44cb-913b-c5301feffcdd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fdb3e7a-f66f-4f88-a9d7-8f108181eaba",
        "cursor": {
          "ref": "f25f7e43-07f2-4166-93d5-675ed055af04",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "aa59778b-edc4-4027-b9f5-4718c06af80b"
        },
        "item": {
          "id": "8fdb3e7a-f66f-4f88-a9d7-8f108181eaba",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "104e1e43-fc41-44cb-913b-c5301feffcdd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36eab6f4-e099-46a9-9e5c-96e3f4ddf54f",
        "cursor": {
          "ref": "496895e6-da2a-436a-afbe-26651804bd85",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "283e4034-5731-461d-aae1-cd461ef28b6d"
        },
        "item": {
          "id": "36eab6f4-e099-46a9-9e5c-96e3f4ddf54f",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "a40c5703-78a3-4dd3-ab47-0c27b4dc6836",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36eab6f4-e099-46a9-9e5c-96e3f4ddf54f",
        "cursor": {
          "ref": "496895e6-da2a-436a-afbe-26651804bd85",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "283e4034-5731-461d-aae1-cd461ef28b6d"
        },
        "item": {
          "id": "36eab6f4-e099-46a9-9e5c-96e3f4ddf54f",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "a40c5703-78a3-4dd3-ab47-0c27b4dc6836",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a63b184f-c675-4c15-9fee-6a910996b1a0",
        "cursor": {
          "ref": "efe8b1b1-4dfb-4fae-8e47-f0f89d61733b",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f223edf9-8b70-4c41-b1f1-8f86e24d58ec"
        },
        "item": {
          "id": "a63b184f-c675-4c15-9fee-6a910996b1a0",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "45cc4dfe-0068-4716-91a3-23043365bed7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a63b184f-c675-4c15-9fee-6a910996b1a0",
        "cursor": {
          "ref": "efe8b1b1-4dfb-4fae-8e47-f0f89d61733b",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f223edf9-8b70-4c41-b1f1-8f86e24d58ec"
        },
        "item": {
          "id": "a63b184f-c675-4c15-9fee-6a910996b1a0",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "45cc4dfe-0068-4716-91a3-23043365bed7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "441ca553-967b-4b3d-b4e5-5fd2c45cd54c",
        "cursor": {
          "ref": "80a1c53b-9746-4421-ac16-0b18df4d83e1",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "5278c24c-0ae1-4b11-ac1b-babb028a4d0d"
        },
        "item": {
          "id": "441ca553-967b-4b3d-b4e5-5fd2c45cd54c",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "b4296887-f957-4bb5-8266-27fba48f4535",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "441ca553-967b-4b3d-b4e5-5fd2c45cd54c",
        "cursor": {
          "ref": "80a1c53b-9746-4421-ac16-0b18df4d83e1",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "5278c24c-0ae1-4b11-ac1b-babb028a4d0d"
        },
        "item": {
          "id": "441ca553-967b-4b3d-b4e5-5fd2c45cd54c",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "b4296887-f957-4bb5-8266-27fba48f4535",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "776dc416-d084-45f0-a4a6-9a4d69caeaef",
        "cursor": {
          "ref": "46468330-c163-459b-8a4a-ac77e4f964d0",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6ec6e90e-1c81-4c96-ab00-b68e7894dc26"
        },
        "item": {
          "id": "776dc416-d084-45f0-a4a6-9a4d69caeaef",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "88f799f8-eb0b-4695-a240-23741b6238d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "776dc416-d084-45f0-a4a6-9a4d69caeaef",
        "cursor": {
          "ref": "46468330-c163-459b-8a4a-ac77e4f964d0",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6ec6e90e-1c81-4c96-ab00-b68e7894dc26"
        },
        "item": {
          "id": "776dc416-d084-45f0-a4a6-9a4d69caeaef",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "88f799f8-eb0b-4695-a240-23741b6238d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a55e3ff-bef7-4f04-b354-dc801dd880bf",
        "cursor": {
          "ref": "dfea1b1e-1aba-4ea7-82ea-ca67a956fb83",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "fc4c2c56-d2ac-49cf-85fc-2f2ab6827d93"
        },
        "item": {
          "id": "2a55e3ff-bef7-4f04-b354-dc801dd880bf",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c8ec422e-d205-4b8a-80cf-d926ea798ec0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a55e3ff-bef7-4f04-b354-dc801dd880bf",
        "cursor": {
          "ref": "dfea1b1e-1aba-4ea7-82ea-ca67a956fb83",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "fc4c2c56-d2ac-49cf-85fc-2f2ab6827d93"
        },
        "item": {
          "id": "2a55e3ff-bef7-4f04-b354-dc801dd880bf",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c8ec422e-d205-4b8a-80cf-d926ea798ec0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "536f5677-f446-48c3-8a9a-1d9024981328",
        "cursor": {
          "ref": "bea8c46a-6363-43d4-b68e-f73f18799f44",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "6e7f3eea-2058-4332-a4af-2038835b3eb6"
        },
        "item": {
          "id": "536f5677-f446-48c3-8a9a-1d9024981328",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "57580d32-90cd-460b-8336-78e45cb6f442",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "536f5677-f446-48c3-8a9a-1d9024981328",
        "cursor": {
          "ref": "bea8c46a-6363-43d4-b68e-f73f18799f44",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "6e7f3eea-2058-4332-a4af-2038835b3eb6"
        },
        "item": {
          "id": "536f5677-f446-48c3-8a9a-1d9024981328",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "57580d32-90cd-460b-8336-78e45cb6f442",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "908422fd-6526-4c6e-84cb-5bb204370889",
        "cursor": {
          "ref": "ebd123bf-4a40-4df6-9207-af21e8bc92b1",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "1d07dd41-551d-424c-bbcc-10b2d1a9c1a6"
        },
        "item": {
          "id": "908422fd-6526-4c6e-84cb-5bb204370889",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "fd4eebb3-0405-432f-939e-d855c969b6d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "908422fd-6526-4c6e-84cb-5bb204370889",
        "cursor": {
          "ref": "ebd123bf-4a40-4df6-9207-af21e8bc92b1",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "1d07dd41-551d-424c-bbcc-10b2d1a9c1a6"
        },
        "item": {
          "id": "908422fd-6526-4c6e-84cb-5bb204370889",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "fd4eebb3-0405-432f-939e-d855c969b6d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1089ecdd-597a-4495-9d50-6107e4127ad1",
        "cursor": {
          "ref": "2bcea733-083f-493d-8ebf-459c79676931",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e30052b1-4b9b-4db2-9b9c-42676f84cb13"
        },
        "item": {
          "id": "1089ecdd-597a-4495-9d50-6107e4127ad1",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "37fd09db-1491-4b5f-9ab0-cb78a4181a9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1089ecdd-597a-4495-9d50-6107e4127ad1",
        "cursor": {
          "ref": "2bcea733-083f-493d-8ebf-459c79676931",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e30052b1-4b9b-4db2-9b9c-42676f84cb13"
        },
        "item": {
          "id": "1089ecdd-597a-4495-9d50-6107e4127ad1",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "37fd09db-1491-4b5f-9ab0-cb78a4181a9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "469b5f90-f3bf-4162-a5a2-9f500f8cd323",
        "cursor": {
          "ref": "c01e6c9f-8c91-4312-9c1c-00892ed8f3f9",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "64065873-e981-4cdf-b46a-ea5ed75594e5"
        },
        "item": {
          "id": "469b5f90-f3bf-4162-a5a2-9f500f8cd323",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e95e77b4-3161-48c6-b29a-16a3a29e09ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "469b5f90-f3bf-4162-a5a2-9f500f8cd323",
        "cursor": {
          "ref": "c01e6c9f-8c91-4312-9c1c-00892ed8f3f9",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "64065873-e981-4cdf-b46a-ea5ed75594e5"
        },
        "item": {
          "id": "469b5f90-f3bf-4162-a5a2-9f500f8cd323",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e95e77b4-3161-48c6-b29a-16a3a29e09ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1e64188-c545-4e6f-8891-e79f879b0dcd",
        "cursor": {
          "ref": "cfb621f2-4bf4-41c5-8287-5950f6680a77",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "0a934250-1efd-4772-9fa4-d030ca81e22b"
        },
        "item": {
          "id": "f1e64188-c545-4e6f-8891-e79f879b0dcd",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "ff2b2cf2-6701-41b0-8bdf-432e0402ff43",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1e64188-c545-4e6f-8891-e79f879b0dcd",
        "cursor": {
          "ref": "cfb621f2-4bf4-41c5-8287-5950f6680a77",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "0a934250-1efd-4772-9fa4-d030ca81e22b"
        },
        "item": {
          "id": "f1e64188-c545-4e6f-8891-e79f879b0dcd",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "ff2b2cf2-6701-41b0-8bdf-432e0402ff43",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53cf3f2a-54c3-4725-838b-44218c893f4a",
        "cursor": {
          "ref": "eb8ff80f-faa6-441a-b4fb-007a43fec5b2",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6352a211-98cc-4023-bd7c-25aefed1478e"
        },
        "item": {
          "id": "53cf3f2a-54c3-4725-838b-44218c893f4a",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "b55fbd1f-e781-468c-8aad-b7388bb2e167",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53cf3f2a-54c3-4725-838b-44218c893f4a",
        "cursor": {
          "ref": "eb8ff80f-faa6-441a-b4fb-007a43fec5b2",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6352a211-98cc-4023-bd7c-25aefed1478e"
        },
        "item": {
          "id": "53cf3f2a-54c3-4725-838b-44218c893f4a",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "b55fbd1f-e781-468c-8aad-b7388bb2e167",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff4c7226-0735-47db-afa1-78284770a7dd",
        "cursor": {
          "ref": "211ae52a-a912-4e6b-8390-6688b7e71855",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "09177dac-b307-47df-879d-9029eba3603f"
        },
        "item": {
          "id": "ff4c7226-0735-47db-afa1-78284770a7dd",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "ff9280c8-03e1-4afe-a582-40423903a47c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff4c7226-0735-47db-afa1-78284770a7dd",
        "cursor": {
          "ref": "211ae52a-a912-4e6b-8390-6688b7e71855",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "09177dac-b307-47df-879d-9029eba3603f"
        },
        "item": {
          "id": "ff4c7226-0735-47db-afa1-78284770a7dd",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "ff9280c8-03e1-4afe-a582-40423903a47c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e60f633-2edd-4c63-8b92-c3065e6424f8",
        "cursor": {
          "ref": "e65bda96-2c4e-4124-b1ff-85e269dda291",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "867eb692-9686-4ccc-9ca6-0b53918cbfe4"
        },
        "item": {
          "id": "0e60f633-2edd-4c63-8b92-c3065e6424f8",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "debe0ec0-c370-4cde-a8fe-95bceb021790",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e60f633-2edd-4c63-8b92-c3065e6424f8",
        "cursor": {
          "ref": "e65bda96-2c4e-4124-b1ff-85e269dda291",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "867eb692-9686-4ccc-9ca6-0b53918cbfe4"
        },
        "item": {
          "id": "0e60f633-2edd-4c63-8b92-c3065e6424f8",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "debe0ec0-c370-4cde-a8fe-95bceb021790",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c516258c-3fa6-41f1-a238-381078b8042c",
        "cursor": {
          "ref": "1b5a6d50-e6f0-46bd-bd25-8deecaba68f3",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ea03a53b-6446-4773-ac00-a1e726315ee1"
        },
        "item": {
          "id": "c516258c-3fa6-41f1-a238-381078b8042c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "42453680-c19a-4bb6-85a5-1811b9c1ce83",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c516258c-3fa6-41f1-a238-381078b8042c",
        "cursor": {
          "ref": "1b5a6d50-e6f0-46bd-bd25-8deecaba68f3",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ea03a53b-6446-4773-ac00-a1e726315ee1"
        },
        "item": {
          "id": "c516258c-3fa6-41f1-a238-381078b8042c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "42453680-c19a-4bb6-85a5-1811b9c1ce83",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de022fda-365d-45dc-a0b0-761780f558e4",
        "cursor": {
          "ref": "6efaedeb-3bca-493f-8abf-cb0580afeff6",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "d6877241-8a63-4f08-acbb-550fa8d80462"
        },
        "item": {
          "id": "de022fda-365d-45dc-a0b0-761780f558e4",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "c84186ee-7ec1-4b11-bef6-bf0bed28c83b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de022fda-365d-45dc-a0b0-761780f558e4",
        "cursor": {
          "ref": "6efaedeb-3bca-493f-8abf-cb0580afeff6",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "d6877241-8a63-4f08-acbb-550fa8d80462"
        },
        "item": {
          "id": "de022fda-365d-45dc-a0b0-761780f558e4",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "c84186ee-7ec1-4b11-bef6-bf0bed28c83b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "884f5aa1-2303-4114-ba79-3acfd85877af",
        "cursor": {
          "ref": "e4bc291d-e385-4683-ac3c-3b0d6da6aada",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "11122e3e-8958-42ad-add4-2aa54a232c30"
        },
        "item": {
          "id": "884f5aa1-2303-4114-ba79-3acfd85877af",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "bb88927b-7d97-4502-bf0f-7bd827a139fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "884f5aa1-2303-4114-ba79-3acfd85877af",
        "cursor": {
          "ref": "e4bc291d-e385-4683-ac3c-3b0d6da6aada",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "11122e3e-8958-42ad-add4-2aa54a232c30"
        },
        "item": {
          "id": "884f5aa1-2303-4114-ba79-3acfd85877af",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "bb88927b-7d97-4502-bf0f-7bd827a139fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "080ef888-bd65-415e-b998-d3a2af08338f",
        "cursor": {
          "ref": "c5490f2f-ea93-44bd-939b-2f720bae1e56",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "eeb17747-add6-4802-9dc4-fecb305e825b"
        },
        "item": {
          "id": "080ef888-bd65-415e-b998-d3a2af08338f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "32718b58-33d8-4562-8206-bae58c739ac8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "080ef888-bd65-415e-b998-d3a2af08338f",
        "cursor": {
          "ref": "c5490f2f-ea93-44bd-939b-2f720bae1e56",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "eeb17747-add6-4802-9dc4-fecb305e825b"
        },
        "item": {
          "id": "080ef888-bd65-415e-b998-d3a2af08338f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "32718b58-33d8-4562-8206-bae58c739ac8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9f8244d-691b-4f52-8fa9-4dbc4bf6403c",
        "cursor": {
          "ref": "646ca1aa-6059-489d-b533-ed30a9b8f537",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "92a9d0be-a7f6-487b-862a-5bd61ac70f54"
        },
        "item": {
          "id": "e9f8244d-691b-4f52-8fa9-4dbc4bf6403c",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "c5cc294e-9040-4826-9ec1-4b696d627745",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9f8244d-691b-4f52-8fa9-4dbc4bf6403c",
        "cursor": {
          "ref": "646ca1aa-6059-489d-b533-ed30a9b8f537",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "92a9d0be-a7f6-487b-862a-5bd61ac70f54"
        },
        "item": {
          "id": "e9f8244d-691b-4f52-8fa9-4dbc4bf6403c",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "c5cc294e-9040-4826-9ec1-4b696d627745",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3689a041-286b-4d89-b2a7-5a47d1cb17a6",
        "cursor": {
          "ref": "e0c30bff-4d80-401e-afe7-ae687b0312b0",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b826078e-5287-4878-9898-bb6225d744b3"
        },
        "item": {
          "id": "3689a041-286b-4d89-b2a7-5a47d1cb17a6",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "b53784c1-6cb2-4886-84b4-68edb772fd29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3689a041-286b-4d89-b2a7-5a47d1cb17a6",
        "cursor": {
          "ref": "e0c30bff-4d80-401e-afe7-ae687b0312b0",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b826078e-5287-4878-9898-bb6225d744b3"
        },
        "item": {
          "id": "3689a041-286b-4d89-b2a7-5a47d1cb17a6",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "b53784c1-6cb2-4886-84b4-68edb772fd29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f62697a-ac6a-4696-9630-1e5659ae19f4",
        "cursor": {
          "ref": "a19077fc-f470-4106-8114-f8916cb6a5a0",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ea0064bf-abd4-422e-ba46-276fcc62f3ce"
        },
        "item": {
          "id": "1f62697a-ac6a-4696-9630-1e5659ae19f4",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "671e5a7c-0778-4eeb-9588-82be4da34985",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f62697a-ac6a-4696-9630-1e5659ae19f4",
        "cursor": {
          "ref": "a19077fc-f470-4106-8114-f8916cb6a5a0",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ea0064bf-abd4-422e-ba46-276fcc62f3ce"
        },
        "item": {
          "id": "1f62697a-ac6a-4696-9630-1e5659ae19f4",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "671e5a7c-0778-4eeb-9588-82be4da34985",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "babb6776-ec25-43f8-a641-bbaa6c096b00",
        "cursor": {
          "ref": "4f1fcfb5-7316-4f5c-8988-08f5562db554",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b2c036a1-1b7d-4500-a7d0-81ac1056af44"
        },
        "item": {
          "id": "babb6776-ec25-43f8-a641-bbaa6c096b00",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "55d1e406-36ce-477a-a664-f8310821e269",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "babb6776-ec25-43f8-a641-bbaa6c096b00",
        "cursor": {
          "ref": "4f1fcfb5-7316-4f5c-8988-08f5562db554",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b2c036a1-1b7d-4500-a7d0-81ac1056af44"
        },
        "item": {
          "id": "babb6776-ec25-43f8-a641-bbaa6c096b00",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "55d1e406-36ce-477a-a664-f8310821e269",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f565ed74-59c2-4045-a760-943097d94a2e",
        "cursor": {
          "ref": "5ee5c9e9-1a97-4289-b1d5-4838b56e49da",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "19bc0f53-56a4-4d58-9c97-42bc32cb1fe6"
        },
        "item": {
          "id": "f565ed74-59c2-4045-a760-943097d94a2e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5d7a662f-cd1b-46df-9c4a-6dc9564ea913",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f565ed74-59c2-4045-a760-943097d94a2e",
        "cursor": {
          "ref": "5ee5c9e9-1a97-4289-b1d5-4838b56e49da",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "19bc0f53-56a4-4d58-9c97-42bc32cb1fe6"
        },
        "item": {
          "id": "f565ed74-59c2-4045-a760-943097d94a2e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5d7a662f-cd1b-46df-9c4a-6dc9564ea913",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "974c2ee0-321c-4514-8dd6-f9c5c2c89fa3",
        "cursor": {
          "ref": "ae713cdb-a6ff-48f0-8534-1b07d20d1644",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b9adca2c-0e6d-4ae6-acec-db1552c652fe"
        },
        "item": {
          "id": "974c2ee0-321c-4514-8dd6-f9c5c2c89fa3",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "322080d5-5eae-492c-b8d2-a433bad8c3c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "974c2ee0-321c-4514-8dd6-f9c5c2c89fa3",
        "cursor": {
          "ref": "ae713cdb-a6ff-48f0-8534-1b07d20d1644",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b9adca2c-0e6d-4ae6-acec-db1552c652fe"
        },
        "item": {
          "id": "974c2ee0-321c-4514-8dd6-f9c5c2c89fa3",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "322080d5-5eae-492c-b8d2-a433bad8c3c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "804d8303-69d8-4621-bc49-9ef5375982f1",
        "cursor": {
          "ref": "ef764063-bf59-47ba-9751-c9fe9bad87bc",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "fcaa57e6-72c0-4c67-94ae-d41eefc61956"
        },
        "item": {
          "id": "804d8303-69d8-4621-bc49-9ef5375982f1",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "2f52e639-89b6-431a-8235-153e97632d8f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "804d8303-69d8-4621-bc49-9ef5375982f1",
        "cursor": {
          "ref": "ef764063-bf59-47ba-9751-c9fe9bad87bc",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "fcaa57e6-72c0-4c67-94ae-d41eefc61956"
        },
        "item": {
          "id": "804d8303-69d8-4621-bc49-9ef5375982f1",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "2f52e639-89b6-431a-8235-153e97632d8f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ee0f0f1-3974-4186-952d-4f90b5e81e6c",
        "cursor": {
          "ref": "f92178cb-89b6-4d3b-affc-b2d2d16519fe",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d0ef6534-6782-4852-bfe2-1f32249a8149"
        },
        "item": {
          "id": "0ee0f0f1-3974-4186-952d-4f90b5e81e6c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1442f0cf-5192-4328-b106-721da7087e53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ee0f0f1-3974-4186-952d-4f90b5e81e6c",
        "cursor": {
          "ref": "f92178cb-89b6-4d3b-affc-b2d2d16519fe",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d0ef6534-6782-4852-bfe2-1f32249a8149"
        },
        "item": {
          "id": "0ee0f0f1-3974-4186-952d-4f90b5e81e6c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1442f0cf-5192-4328-b106-721da7087e53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "230bd5b9-b957-4373-ad1a-257f228eb28a",
        "cursor": {
          "ref": "c72e8e69-3355-451f-a6d0-2c50ae8ff8de",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b099d49a-3522-4bb7-b79c-eb6c4f429b88"
        },
        "item": {
          "id": "230bd5b9-b957-4373-ad1a-257f228eb28a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "63b4324b-e483-4074-8b83-c6a1861d64a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "230bd5b9-b957-4373-ad1a-257f228eb28a",
        "cursor": {
          "ref": "c72e8e69-3355-451f-a6d0-2c50ae8ff8de",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b099d49a-3522-4bb7-b79c-eb6c4f429b88"
        },
        "item": {
          "id": "230bd5b9-b957-4373-ad1a-257f228eb28a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "63b4324b-e483-4074-8b83-c6a1861d64a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43393791-3047-495c-9a19-7c193cddd3c4",
        "cursor": {
          "ref": "09e2a3ee-ab27-4c86-99db-1c9058a7f653",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2c5f24a6-448f-4023-a544-c8bd326c1b70"
        },
        "item": {
          "id": "43393791-3047-495c-9a19-7c193cddd3c4",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d431a5e4-c2a4-4ccc-bfc6-2916d44e53c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43393791-3047-495c-9a19-7c193cddd3c4",
        "cursor": {
          "ref": "09e2a3ee-ab27-4c86-99db-1c9058a7f653",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2c5f24a6-448f-4023-a544-c8bd326c1b70"
        },
        "item": {
          "id": "43393791-3047-495c-9a19-7c193cddd3c4",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d431a5e4-c2a4-4ccc-bfc6-2916d44e53c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46950f25-6ec7-4b4a-8ae4-5c7af446bd59",
        "cursor": {
          "ref": "3847efc0-8fea-4248-ad7c-d1a4666889d3",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "44919935-bf15-4642-bc44-5b65ce694304"
        },
        "item": {
          "id": "46950f25-6ec7-4b4a-8ae4-5c7af446bd59",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "39830d89-3db2-4306-b5c7-fac6a5ce910c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46950f25-6ec7-4b4a-8ae4-5c7af446bd59",
        "cursor": {
          "ref": "3847efc0-8fea-4248-ad7c-d1a4666889d3",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "44919935-bf15-4642-bc44-5b65ce694304"
        },
        "item": {
          "id": "46950f25-6ec7-4b4a-8ae4-5c7af446bd59",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "39830d89-3db2-4306-b5c7-fac6a5ce910c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9225219-0487-48aa-b7b6-0e8e5d7157d3",
        "cursor": {
          "ref": "d5d322d2-dad4-4ff0-b6e2-8e778584187d",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "307ac4a8-28ef-4edb-90a6-15c08261878a"
        },
        "item": {
          "id": "a9225219-0487-48aa-b7b6-0e8e5d7157d3",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "6a03aa43-110d-428d-95e4-866e244c05db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9225219-0487-48aa-b7b6-0e8e5d7157d3",
        "cursor": {
          "ref": "d5d322d2-dad4-4ff0-b6e2-8e778584187d",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "307ac4a8-28ef-4edb-90a6-15c08261878a"
        },
        "item": {
          "id": "a9225219-0487-48aa-b7b6-0e8e5d7157d3",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "6a03aa43-110d-428d-95e4-866e244c05db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bf3799b-5a3e-488b-9f94-72e6a75ab47a",
        "cursor": {
          "ref": "e223e302-1979-4fc6-a20b-d7e25783e0ad",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "022ac966-bb07-4622-9441-6194db66f9b7"
        },
        "item": {
          "id": "7bf3799b-5a3e-488b-9f94-72e6a75ab47a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "daef8630-446d-414d-b05b-ba2218b60ad0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bf3799b-5a3e-488b-9f94-72e6a75ab47a",
        "cursor": {
          "ref": "e223e302-1979-4fc6-a20b-d7e25783e0ad",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "022ac966-bb07-4622-9441-6194db66f9b7"
        },
        "item": {
          "id": "7bf3799b-5a3e-488b-9f94-72e6a75ab47a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "daef8630-446d-414d-b05b-ba2218b60ad0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82efdcb2-0100-446e-b1bc-284e08f199bd",
        "cursor": {
          "ref": "6dee4119-fc93-4a96-aa5b-306b9e75e07f",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d881d308-544e-43cb-977d-0d67cdd5ac2f"
        },
        "item": {
          "id": "82efdcb2-0100-446e-b1bc-284e08f199bd",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "629d8d99-86b5-4d4b-8f74-aa3308f36a6e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82efdcb2-0100-446e-b1bc-284e08f199bd",
        "cursor": {
          "ref": "6dee4119-fc93-4a96-aa5b-306b9e75e07f",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d881d308-544e-43cb-977d-0d67cdd5ac2f"
        },
        "item": {
          "id": "82efdcb2-0100-446e-b1bc-284e08f199bd",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "629d8d99-86b5-4d4b-8f74-aa3308f36a6e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7381f9f-dc6b-48c0-95f5-a510e4ef5a1a",
        "cursor": {
          "ref": "b33bf5f6-bfc8-48db-8527-38871dc98b58",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "75d06f5b-3898-459f-b517-d0df5aaedb37"
        },
        "item": {
          "id": "e7381f9f-dc6b-48c0-95f5-a510e4ef5a1a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "4bfb820b-7055-4150-9a22-2bcf18c34581",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7381f9f-dc6b-48c0-95f5-a510e4ef5a1a",
        "cursor": {
          "ref": "b33bf5f6-bfc8-48db-8527-38871dc98b58",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "75d06f5b-3898-459f-b517-d0df5aaedb37"
        },
        "item": {
          "id": "e7381f9f-dc6b-48c0-95f5-a510e4ef5a1a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "4bfb820b-7055-4150-9a22-2bcf18c34581",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4741cfa5-43a2-47a6-bd58-8153afe0f6da",
        "cursor": {
          "ref": "ae291632-8bb2-4312-8cbd-5188c4c6ee6a",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ca542457-a600-47f3-ae1d-27ee23875b5e"
        },
        "item": {
          "id": "4741cfa5-43a2-47a6-bd58-8153afe0f6da",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "943c5c61-43cc-40ce-95d5-f4f873291d87",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4741cfa5-43a2-47a6-bd58-8153afe0f6da",
        "cursor": {
          "ref": "ae291632-8bb2-4312-8cbd-5188c4c6ee6a",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ca542457-a600-47f3-ae1d-27ee23875b5e"
        },
        "item": {
          "id": "4741cfa5-43a2-47a6-bd58-8153afe0f6da",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "943c5c61-43cc-40ce-95d5-f4f873291d87",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a43a0d-33f1-483b-8747-27384d975c16",
        "cursor": {
          "ref": "473ec65d-c880-4ede-83f7-88ccb382112d",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2b8a2a10-dfa0-4176-9f67-f4fabc2c54c2"
        },
        "item": {
          "id": "e4a43a0d-33f1-483b-8747-27384d975c16",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a1b2b098-f22b-49d1-92ce-c1b485c7d633",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a43a0d-33f1-483b-8747-27384d975c16",
        "cursor": {
          "ref": "473ec65d-c880-4ede-83f7-88ccb382112d",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2b8a2a10-dfa0-4176-9f67-f4fabc2c54c2"
        },
        "item": {
          "id": "e4a43a0d-33f1-483b-8747-27384d975c16",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a1b2b098-f22b-49d1-92ce-c1b485c7d633",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b71b438-fa40-4733-ae6a-eb3d53f6e4d7",
        "cursor": {
          "ref": "26551a59-7122-4d30-849b-c48c1cb9a469",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "bb25a4a0-cae2-4c9d-bed3-95a7108e6515"
        },
        "item": {
          "id": "9b71b438-fa40-4733-ae6a-eb3d53f6e4d7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "6128be7c-3520-4a26-a9d5-de978f4767fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b71b438-fa40-4733-ae6a-eb3d53f6e4d7",
        "cursor": {
          "ref": "26551a59-7122-4d30-849b-c48c1cb9a469",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "bb25a4a0-cae2-4c9d-bed3-95a7108e6515"
        },
        "item": {
          "id": "9b71b438-fa40-4733-ae6a-eb3d53f6e4d7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "6128be7c-3520-4a26-a9d5-de978f4767fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe018b0-4621-44da-9fc8-eebeeddd1ba8",
        "cursor": {
          "ref": "63722ca5-632b-4fad-9509-8eab583f12d0",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "34f7a3d6-4858-41a3-8488-32a7e3b8fb5b"
        },
        "item": {
          "id": "1fe018b0-4621-44da-9fc8-eebeeddd1ba8",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7a85e4bc-5120-406b-a5b6-8b1af19f8224",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe018b0-4621-44da-9fc8-eebeeddd1ba8",
        "cursor": {
          "ref": "63722ca5-632b-4fad-9509-8eab583f12d0",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "34f7a3d6-4858-41a3-8488-32a7e3b8fb5b"
        },
        "item": {
          "id": "1fe018b0-4621-44da-9fc8-eebeeddd1ba8",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7a85e4bc-5120-406b-a5b6-8b1af19f8224",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b471368-988e-480e-a076-3f04dc10c409",
        "cursor": {
          "ref": "c28a58e9-e3de-4906-9fcc-b107d0227849",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "10eec106-701b-44ac-88b8-3117afa2ccc6"
        },
        "item": {
          "id": "0b471368-988e-480e-a076-3f04dc10c409",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c873b47e-aad6-4c8b-b628-cf284bf0f9b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b471368-988e-480e-a076-3f04dc10c409",
        "cursor": {
          "ref": "c28a58e9-e3de-4906-9fcc-b107d0227849",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "10eec106-701b-44ac-88b8-3117afa2ccc6"
        },
        "item": {
          "id": "0b471368-988e-480e-a076-3f04dc10c409",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c873b47e-aad6-4c8b-b628-cf284bf0f9b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dcffce4-e17a-4f83-865c-04e202522e53",
        "cursor": {
          "ref": "befcc548-74c5-4836-843c-72b5cec3d396",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "83110158-b22e-44dd-bfc6-961306c2d5b4"
        },
        "item": {
          "id": "5dcffce4-e17a-4f83-865c-04e202522e53",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "0d25dcdb-7a83-4c6e-9784-3a9ea9cd7427",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dcffce4-e17a-4f83-865c-04e202522e53",
        "cursor": {
          "ref": "befcc548-74c5-4836-843c-72b5cec3d396",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "83110158-b22e-44dd-bfc6-961306c2d5b4"
        },
        "item": {
          "id": "5dcffce4-e17a-4f83-865c-04e202522e53",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "0d25dcdb-7a83-4c6e-9784-3a9ea9cd7427",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc9e966-6688-4a00-98a1-1bea47cfda44",
        "cursor": {
          "ref": "57936e9e-aa1b-4731-8b68-06796603fffe",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "884159fb-57d1-4773-a2d9-ef49952dd4b0"
        },
        "item": {
          "id": "ccc9e966-6688-4a00-98a1-1bea47cfda44",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "56737a57-f68b-4d00-b591-3ec0bb1a73e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc9e966-6688-4a00-98a1-1bea47cfda44",
        "cursor": {
          "ref": "57936e9e-aa1b-4731-8b68-06796603fffe",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "884159fb-57d1-4773-a2d9-ef49952dd4b0"
        },
        "item": {
          "id": "ccc9e966-6688-4a00-98a1-1bea47cfda44",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "56737a57-f68b-4d00-b591-3ec0bb1a73e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "251d042e-ffee-4388-aefc-bfc3f394e21a",
        "cursor": {
          "ref": "6e987e56-d7ad-4b88-8a91-6a944a724eee",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b28b5e18-1431-4b49-b14c-5d5f46cacc3a"
        },
        "item": {
          "id": "251d042e-ffee-4388-aefc-bfc3f394e21a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d789e1fd-7d48-40b1-948e-1e0992279882",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "251d042e-ffee-4388-aefc-bfc3f394e21a",
        "cursor": {
          "ref": "6e987e56-d7ad-4b88-8a91-6a944a724eee",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b28b5e18-1431-4b49-b14c-5d5f46cacc3a"
        },
        "item": {
          "id": "251d042e-ffee-4388-aefc-bfc3f394e21a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d789e1fd-7d48-40b1-948e-1e0992279882",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c2aabf2-dfce-414e-b62a-2ad6bf975b26",
        "cursor": {
          "ref": "ace22cbe-0e18-4e35-8d88-c8f442342bc3",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "04306748-1f1d-4f24-acdf-07d048138683"
        },
        "item": {
          "id": "9c2aabf2-dfce-414e-b62a-2ad6bf975b26",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "3dcc2d20-dceb-4c17-9e6e-9d9f35e7302d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c2aabf2-dfce-414e-b62a-2ad6bf975b26",
        "cursor": {
          "ref": "ace22cbe-0e18-4e35-8d88-c8f442342bc3",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "04306748-1f1d-4f24-acdf-07d048138683"
        },
        "item": {
          "id": "9c2aabf2-dfce-414e-b62a-2ad6bf975b26",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "3dcc2d20-dceb-4c17-9e6e-9d9f35e7302d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34ed5710-615e-4c84-a303-87c4ef83053f",
        "cursor": {
          "ref": "ef6b071e-5aea-4d93-ae7f-4382549cb7a6",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "d10a7a90-4298-41b4-8323-6ca99b8520ea"
        },
        "item": {
          "id": "34ed5710-615e-4c84-a303-87c4ef83053f",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2b8719b0-bdff-43cc-a221-02432b736002",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34ed5710-615e-4c84-a303-87c4ef83053f",
        "cursor": {
          "ref": "ef6b071e-5aea-4d93-ae7f-4382549cb7a6",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "d10a7a90-4298-41b4-8323-6ca99b8520ea"
        },
        "item": {
          "id": "34ed5710-615e-4c84-a303-87c4ef83053f",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2b8719b0-bdff-43cc-a221-02432b736002",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8778ce86-5cd5-47cd-be56-5df485458b06",
        "cursor": {
          "ref": "fac8d400-2534-4149-97cf-581167500ae1",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "130fbbea-a267-4584-ab16-ee4795939d99"
        },
        "item": {
          "id": "8778ce86-5cd5-47cd-be56-5df485458b06",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e8467315-b67c-42c0-94f5-647585ae3421",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8778ce86-5cd5-47cd-be56-5df485458b06",
        "cursor": {
          "ref": "fac8d400-2534-4149-97cf-581167500ae1",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "130fbbea-a267-4584-ab16-ee4795939d99"
        },
        "item": {
          "id": "8778ce86-5cd5-47cd-be56-5df485458b06",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e8467315-b67c-42c0-94f5-647585ae3421",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "404fbe73-20c9-4ad6-90f1-3068081c0331",
        "cursor": {
          "ref": "e83f9920-5459-4645-b229-1909143d9a4c",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "17f88d87-d1d9-4949-924e-4bfb347bc7c4"
        },
        "item": {
          "id": "404fbe73-20c9-4ad6-90f1-3068081c0331",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "496c2b3c-e627-41be-bef5-1305e7abce17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "404fbe73-20c9-4ad6-90f1-3068081c0331",
        "cursor": {
          "ref": "e83f9920-5459-4645-b229-1909143d9a4c",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "17f88d87-d1d9-4949-924e-4bfb347bc7c4"
        },
        "item": {
          "id": "404fbe73-20c9-4ad6-90f1-3068081c0331",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "496c2b3c-e627-41be-bef5-1305e7abce17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caafd518-1cf2-4753-99d7-bc2c2f993002",
        "cursor": {
          "ref": "98fb009e-7ad3-4ce7-a4cf-7e0c3a8ba111",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "7eec6e22-44a9-449f-99af-edeb04e4196f"
        },
        "item": {
          "id": "caafd518-1cf2-4753-99d7-bc2c2f993002",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "31c0b2d2-0484-4ff3-b1c7-77a763b2dd8f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caafd518-1cf2-4753-99d7-bc2c2f993002",
        "cursor": {
          "ref": "98fb009e-7ad3-4ce7-a4cf-7e0c3a8ba111",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "7eec6e22-44a9-449f-99af-edeb04e4196f"
        },
        "item": {
          "id": "caafd518-1cf2-4753-99d7-bc2c2f993002",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "31c0b2d2-0484-4ff3-b1c7-77a763b2dd8f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65dafbab-158d-46fb-a26e-6c39e2326fc3",
        "cursor": {
          "ref": "8039c3fe-09d4-40ca-88f9-18ad599e6ae2",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "faf1c4ae-b367-42c5-a8f7-62b862cd62ca"
        },
        "item": {
          "id": "65dafbab-158d-46fb-a26e-6c39e2326fc3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "53ba2c80-fc5f-4a77-b5db-dc5bdad4f56e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65dafbab-158d-46fb-a26e-6c39e2326fc3",
        "cursor": {
          "ref": "8039c3fe-09d4-40ca-88f9-18ad599e6ae2",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "faf1c4ae-b367-42c5-a8f7-62b862cd62ca"
        },
        "item": {
          "id": "65dafbab-158d-46fb-a26e-6c39e2326fc3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "53ba2c80-fc5f-4a77-b5db-dc5bdad4f56e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7e41ec1-d9fc-4ed4-90dc-0523684d1e13",
        "cursor": {
          "ref": "3603aa1b-5d77-4f2c-a699-eecff0db3192",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b4387ce8-fe70-4ecb-88e1-bd0221fb5a09"
        },
        "item": {
          "id": "c7e41ec1-d9fc-4ed4-90dc-0523684d1e13",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d7bfb067-9a3b-45de-aeb2-bed92aaa23e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7e41ec1-d9fc-4ed4-90dc-0523684d1e13",
        "cursor": {
          "ref": "3603aa1b-5d77-4f2c-a699-eecff0db3192",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b4387ce8-fe70-4ecb-88e1-bd0221fb5a09"
        },
        "item": {
          "id": "c7e41ec1-d9fc-4ed4-90dc-0523684d1e13",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d7bfb067-9a3b-45de-aeb2-bed92aaa23e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "311a506b-5d62-4bb3-b3ef-e300a7d82882",
        "cursor": {
          "ref": "936b73b3-6a63-4eda-912d-bf21ad3a894a",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "58ab48dc-a6b5-4d47-82ba-485637224584"
        },
        "item": {
          "id": "311a506b-5d62-4bb3-b3ef-e300a7d82882",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "041fbf51-d11f-450c-83ae-b107058e40bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "311a506b-5d62-4bb3-b3ef-e300a7d82882",
        "cursor": {
          "ref": "936b73b3-6a63-4eda-912d-bf21ad3a894a",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "58ab48dc-a6b5-4d47-82ba-485637224584"
        },
        "item": {
          "id": "311a506b-5d62-4bb3-b3ef-e300a7d82882",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "041fbf51-d11f-450c-83ae-b107058e40bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1008a21-82bf-4b13-820e-d3c9959c5c29",
        "cursor": {
          "ref": "b7beabb2-01f8-4584-93ce-f8c2a51354fe",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "4bb8a42d-5ef0-457c-ad2d-c57def07b0c5"
        },
        "item": {
          "id": "c1008a21-82bf-4b13-820e-d3c9959c5c29",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ed02c3c2-ef5b-45ba-a3cb-784c66a2ef8d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1008a21-82bf-4b13-820e-d3c9959c5c29",
        "cursor": {
          "ref": "b7beabb2-01f8-4584-93ce-f8c2a51354fe",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "4bb8a42d-5ef0-457c-ad2d-c57def07b0c5"
        },
        "item": {
          "id": "c1008a21-82bf-4b13-820e-d3c9959c5c29",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ed02c3c2-ef5b-45ba-a3cb-784c66a2ef8d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d8d4312-f3e5-4c81-b806-8455f44cc984",
        "cursor": {
          "ref": "66b4a928-382b-49d4-b806-c74da64c0790",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e7582ee6-74c6-49e7-84de-8decbec8ff18"
        },
        "item": {
          "id": "1d8d4312-f3e5-4c81-b806-8455f44cc984",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "389397e6-5a52-4b00-994d-3bf25518333f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d8d4312-f3e5-4c81-b806-8455f44cc984",
        "cursor": {
          "ref": "66b4a928-382b-49d4-b806-c74da64c0790",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e7582ee6-74c6-49e7-84de-8decbec8ff18"
        },
        "item": {
          "id": "1d8d4312-f3e5-4c81-b806-8455f44cc984",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "389397e6-5a52-4b00-994d-3bf25518333f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e8c79df-ef87-409d-acb9-f2028a745765",
        "cursor": {
          "ref": "f7e884d2-b0bd-48a4-af6c-72b0e9b3c8d5",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "24e8c167-3543-4f64-b27e-6a2e6d4969fa"
        },
        "item": {
          "id": "2e8c79df-ef87-409d-acb9-f2028a745765",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "dfa3f059-3b5d-4c2d-af01-2e720c8b6f01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e8c79df-ef87-409d-acb9-f2028a745765",
        "cursor": {
          "ref": "f7e884d2-b0bd-48a4-af6c-72b0e9b3c8d5",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "24e8c167-3543-4f64-b27e-6a2e6d4969fa"
        },
        "item": {
          "id": "2e8c79df-ef87-409d-acb9-f2028a745765",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "dfa3f059-3b5d-4c2d-af01-2e720c8b6f01",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bca7518-ceba-4ba2-b7bc-369725111283",
        "cursor": {
          "ref": "b1efa745-a747-47f9-a8b0-7d2e0d8489e6",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c67a6830-bdf6-4cbf-a90f-e64d16bdc4b1"
        },
        "item": {
          "id": "8bca7518-ceba-4ba2-b7bc-369725111283",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "51632dd7-5e1f-4549-96af-f5831b1af01e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bca7518-ceba-4ba2-b7bc-369725111283",
        "cursor": {
          "ref": "b1efa745-a747-47f9-a8b0-7d2e0d8489e6",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c67a6830-bdf6-4cbf-a90f-e64d16bdc4b1"
        },
        "item": {
          "id": "8bca7518-ceba-4ba2-b7bc-369725111283",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "51632dd7-5e1f-4549-96af-f5831b1af01e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f2d246a-a4a0-47fb-ab3b-2f96e30e175e",
        "cursor": {
          "ref": "eb09db6b-caad-47dc-b4fe-8da3c4d39270",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b059f1e0-9a9d-47f1-a20e-82a4769a94f2"
        },
        "item": {
          "id": "7f2d246a-a4a0-47fb-ab3b-2f96e30e175e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "eff739fd-f592-41a7-bffe-1964c54e7c86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f2d246a-a4a0-47fb-ab3b-2f96e30e175e",
        "cursor": {
          "ref": "eb09db6b-caad-47dc-b4fe-8da3c4d39270",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b059f1e0-9a9d-47f1-a20e-82a4769a94f2"
        },
        "item": {
          "id": "7f2d246a-a4a0-47fb-ab3b-2f96e30e175e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "eff739fd-f592-41a7-bffe-1964c54e7c86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9981d061-8f34-4388-871d-554ccb3d3dbe",
        "cursor": {
          "ref": "69dc273a-4db1-48da-a2ac-24b0b7d94d9a",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "d30bb8a5-2bf5-4806-9f70-5d5c80edc044"
        },
        "item": {
          "id": "9981d061-8f34-4388-871d-554ccb3d3dbe",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "248947db-fa29-4223-b00d-f22998611d2a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9981d061-8f34-4388-871d-554ccb3d3dbe",
        "cursor": {
          "ref": "69dc273a-4db1-48da-a2ac-24b0b7d94d9a",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "d30bb8a5-2bf5-4806-9f70-5d5c80edc044"
        },
        "item": {
          "id": "9981d061-8f34-4388-871d-554ccb3d3dbe",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "248947db-fa29-4223-b00d-f22998611d2a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3214ba7-c8a3-4aa1-b8c6-e16029b3d9ca",
        "cursor": {
          "ref": "f788e733-7482-49c3-8097-e65895772e2d",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "2815aa43-43dd-4bd8-ad9b-83c34e877d49"
        },
        "item": {
          "id": "e3214ba7-c8a3-4aa1-b8c6-e16029b3d9ca",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "6e186e34-acd5-4052-a3aa-d51bbeb6641a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3214ba7-c8a3-4aa1-b8c6-e16029b3d9ca",
        "cursor": {
          "ref": "f788e733-7482-49c3-8097-e65895772e2d",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "2815aa43-43dd-4bd8-ad9b-83c34e877d49"
        },
        "item": {
          "id": "e3214ba7-c8a3-4aa1-b8c6-e16029b3d9ca",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "6e186e34-acd5-4052-a3aa-d51bbeb6641a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae73199e-e976-4416-84bc-aac1c2a7626e",
        "cursor": {
          "ref": "4d808c6e-6133-4d94-9b05-aacd59777d96",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3d986b44-f46e-4a7d-9ede-c87e28e07fee"
        },
        "item": {
          "id": "ae73199e-e976-4416-84bc-aac1c2a7626e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "9f17fa3a-bfad-446a-b74c-6387e20b2f8a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae73199e-e976-4416-84bc-aac1c2a7626e",
        "cursor": {
          "ref": "4d808c6e-6133-4d94-9b05-aacd59777d96",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3d986b44-f46e-4a7d-9ede-c87e28e07fee"
        },
        "item": {
          "id": "ae73199e-e976-4416-84bc-aac1c2a7626e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "9f17fa3a-bfad-446a-b74c-6387e20b2f8a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c19e79c-50be-4884-9a0e-77278625fae3",
        "cursor": {
          "ref": "34369d30-0842-46e4-9098-943d83c31637",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c5023c14-833c-45b3-b401-eb38402c6704"
        },
        "item": {
          "id": "6c19e79c-50be-4884-9a0e-77278625fae3",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "2921dc37-58b4-475f-9a86-8f3a8ab0b1f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c19e79c-50be-4884-9a0e-77278625fae3",
        "cursor": {
          "ref": "34369d30-0842-46e4-9098-943d83c31637",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c5023c14-833c-45b3-b401-eb38402c6704"
        },
        "item": {
          "id": "6c19e79c-50be-4884-9a0e-77278625fae3",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "2921dc37-58b4-475f-9a86-8f3a8ab0b1f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99c35f3f-e303-4489-96a7-236b5872c253",
        "cursor": {
          "ref": "ee7b5651-9947-44a0-87b4-cdbdc62ab92c",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ec879775-a96f-472b-89bc-668e0808efa4"
        },
        "item": {
          "id": "99c35f3f-e303-4489-96a7-236b5872c253",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "760d70ac-93cb-4262-9551-e1c3d6cfaa72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99c35f3f-e303-4489-96a7-236b5872c253",
        "cursor": {
          "ref": "ee7b5651-9947-44a0-87b4-cdbdc62ab92c",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ec879775-a96f-472b-89bc-668e0808efa4"
        },
        "item": {
          "id": "99c35f3f-e303-4489-96a7-236b5872c253",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "760d70ac-93cb-4262-9551-e1c3d6cfaa72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "642fbb55-7e78-497a-a45d-de09ac3b2077",
        "cursor": {
          "ref": "d09116d7-a77f-4a7d-81c4-3412f5b98b70",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "814445cc-430a-4957-a4a2-0be10d4349c9"
        },
        "item": {
          "id": "642fbb55-7e78-497a-a45d-de09ac3b2077",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "536cb594-02bc-4c75-8590-c308427afefd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "642fbb55-7e78-497a-a45d-de09ac3b2077",
        "cursor": {
          "ref": "d09116d7-a77f-4a7d-81c4-3412f5b98b70",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "814445cc-430a-4957-a4a2-0be10d4349c9"
        },
        "item": {
          "id": "642fbb55-7e78-497a-a45d-de09ac3b2077",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "536cb594-02bc-4c75-8590-c308427afefd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c30bd93a-d864-4fc9-8a10-77f264a725d4",
        "cursor": {
          "ref": "efae3473-342e-4ba6-8e4e-4cb5da853752",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f3114927-7670-4608-8441-4dbaad853c50"
        },
        "item": {
          "id": "c30bd93a-d864-4fc9-8a10-77f264a725d4",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e53fe0c7-371f-4b9e-b967-b1925836cfa3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c30bd93a-d864-4fc9-8a10-77f264a725d4",
        "cursor": {
          "ref": "efae3473-342e-4ba6-8e4e-4cb5da853752",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f3114927-7670-4608-8441-4dbaad853c50"
        },
        "item": {
          "id": "c30bd93a-d864-4fc9-8a10-77f264a725d4",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e53fe0c7-371f-4b9e-b967-b1925836cfa3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f08c2af1-e43d-4e3e-b66b-9ebe73dc7d33",
        "cursor": {
          "ref": "81ab78dc-7fe9-4222-86a2-eb4db3797868",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "cbca7f24-9e69-42d9-b77a-70631c6617d5"
        },
        "item": {
          "id": "f08c2af1-e43d-4e3e-b66b-9ebe73dc7d33",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "e4b890ac-adcd-47a6-8e99-6359f7680011",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f08c2af1-e43d-4e3e-b66b-9ebe73dc7d33",
        "cursor": {
          "ref": "81ab78dc-7fe9-4222-86a2-eb4db3797868",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "cbca7f24-9e69-42d9-b77a-70631c6617d5"
        },
        "item": {
          "id": "f08c2af1-e43d-4e3e-b66b-9ebe73dc7d33",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "e4b890ac-adcd-47a6-8e99-6359f7680011",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6467f9f0-3ff5-491b-b679-437ae32d93ae",
        "cursor": {
          "ref": "d57e8d1f-cbfa-4533-be0d-0e3f6186a080",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c31cfd46-96b2-44ff-8dde-f2630cb70bc8"
        },
        "item": {
          "id": "6467f9f0-3ff5-491b-b679-437ae32d93ae",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "5e2abb62-c737-46a0-965f-f781cd8b8efb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6467f9f0-3ff5-491b-b679-437ae32d93ae",
        "cursor": {
          "ref": "d57e8d1f-cbfa-4533-be0d-0e3f6186a080",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c31cfd46-96b2-44ff-8dde-f2630cb70bc8"
        },
        "item": {
          "id": "6467f9f0-3ff5-491b-b679-437ae32d93ae",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "5e2abb62-c737-46a0-965f-f781cd8b8efb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af5e1ace-12a0-4d5b-8441-01d5c66534c9",
        "cursor": {
          "ref": "e8e2c652-29f2-4fc9-854f-741b879eaf46",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "adc6056e-ecce-401e-a959-9b81bfee3928"
        },
        "item": {
          "id": "af5e1ace-12a0-4d5b-8441-01d5c66534c9",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "3ef7d4c3-5289-4633-8b49-11d137757a95",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af5e1ace-12a0-4d5b-8441-01d5c66534c9",
        "cursor": {
          "ref": "e8e2c652-29f2-4fc9-854f-741b879eaf46",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "adc6056e-ecce-401e-a959-9b81bfee3928"
        },
        "item": {
          "id": "af5e1ace-12a0-4d5b-8441-01d5c66534c9",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "3ef7d4c3-5289-4633-8b49-11d137757a95",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07a3eebb-77f1-418b-b69d-0570f445ec25",
        "cursor": {
          "ref": "2c4598d8-d914-4f38-b163-2514fc6e5797",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2af5c6f1-a51a-4e61-b85e-882d5f7102d9"
        },
        "item": {
          "id": "07a3eebb-77f1-418b-b69d-0570f445ec25",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "b511a161-f1ff-4ea4-b986-093a69655b3f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07a3eebb-77f1-418b-b69d-0570f445ec25",
        "cursor": {
          "ref": "2c4598d8-d914-4f38-b163-2514fc6e5797",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2af5c6f1-a51a-4e61-b85e-882d5f7102d9"
        },
        "item": {
          "id": "07a3eebb-77f1-418b-b69d-0570f445ec25",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "b511a161-f1ff-4ea4-b986-093a69655b3f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4233210b-b847-45fd-a29f-92ddc76fdaa6",
        "cursor": {
          "ref": "fa92357d-5010-4450-84f4-f8e0841515e9",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "9e1c1c3b-1f0e-45fc-b380-aeda52bdf696"
        },
        "item": {
          "id": "4233210b-b847-45fd-a29f-92ddc76fdaa6",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ee9bfaca-484a-4fd7-ac70-f3b177429ef4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4233210b-b847-45fd-a29f-92ddc76fdaa6",
        "cursor": {
          "ref": "fa92357d-5010-4450-84f4-f8e0841515e9",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "9e1c1c3b-1f0e-45fc-b380-aeda52bdf696"
        },
        "item": {
          "id": "4233210b-b847-45fd-a29f-92ddc76fdaa6",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ee9bfaca-484a-4fd7-ac70-f3b177429ef4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dc02e52-a6f7-437f-9b3b-64e838a8cdfe",
        "cursor": {
          "ref": "dd72d725-0bd2-4d9d-baad-018653f30fde",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d678d0d0-dadb-4c7c-9f75-623007975302"
        },
        "item": {
          "id": "6dc02e52-a6f7-437f-9b3b-64e838a8cdfe",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "2182706a-92a6-46c1-b503-a84e5d906d6f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dc02e52-a6f7-437f-9b3b-64e838a8cdfe",
        "cursor": {
          "ref": "dd72d725-0bd2-4d9d-baad-018653f30fde",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d678d0d0-dadb-4c7c-9f75-623007975302"
        },
        "item": {
          "id": "6dc02e52-a6f7-437f-9b3b-64e838a8cdfe",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "2182706a-92a6-46c1-b503-a84e5d906d6f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d8892f6-1954-4ff9-9321-ba710c86684e",
        "cursor": {
          "ref": "d9a4ddf9-677d-4df9-8fa3-8a2d3ff9ee8d",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "629cc219-1769-41d8-a71f-3e3b09f2fb8c"
        },
        "item": {
          "id": "8d8892f6-1954-4ff9-9321-ba710c86684e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b4a3d474-4bd3-4316-b302-c1f4d890e353",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d8892f6-1954-4ff9-9321-ba710c86684e",
        "cursor": {
          "ref": "d9a4ddf9-677d-4df9-8fa3-8a2d3ff9ee8d",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "629cc219-1769-41d8-a71f-3e3b09f2fb8c"
        },
        "item": {
          "id": "8d8892f6-1954-4ff9-9321-ba710c86684e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b4a3d474-4bd3-4316-b302-c1f4d890e353",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f536bd43-657d-416d-ae9c-a34655049c65",
        "cursor": {
          "ref": "daac409a-9018-4526-b1b4-4fe8f6a5517b",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "50322476-c92b-431b-8b2d-2257653848b5"
        },
        "item": {
          "id": "f536bd43-657d-416d-ae9c-a34655049c65",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1e3e2216-0d7c-4dc4-bd7f-36985fb1e254",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f536bd43-657d-416d-ae9c-a34655049c65",
        "cursor": {
          "ref": "daac409a-9018-4526-b1b4-4fe8f6a5517b",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "50322476-c92b-431b-8b2d-2257653848b5"
        },
        "item": {
          "id": "f536bd43-657d-416d-ae9c-a34655049c65",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1e3e2216-0d7c-4dc4-bd7f-36985fb1e254",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9969fb8-bafa-4cb7-978f-9d222bdcc311",
        "cursor": {
          "ref": "dc72a5ca-e326-4d2e-af36-c9b335fa689e",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "c6a6569e-7d11-435d-bb12-d349b081decb"
        },
        "item": {
          "id": "b9969fb8-bafa-4cb7-978f-9d222bdcc311",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "9971cc3b-5d2b-4f0f-80cb-5698c5b621ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9969fb8-bafa-4cb7-978f-9d222bdcc311",
        "cursor": {
          "ref": "dc72a5ca-e326-4d2e-af36-c9b335fa689e",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "c6a6569e-7d11-435d-bb12-d349b081decb"
        },
        "item": {
          "id": "b9969fb8-bafa-4cb7-978f-9d222bdcc311",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "9971cc3b-5d2b-4f0f-80cb-5698c5b621ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e65584c3-0f84-4158-9e80-15a6e56d282d",
        "cursor": {
          "ref": "fbad62a2-3be7-4429-af9c-929146af3c2b",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "501f8a9d-9190-4d55-9342-425a2fee2d5d"
        },
        "item": {
          "id": "e65584c3-0f84-4158-9e80-15a6e56d282d",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a8738078-58ef-4d79-84c0-667c231faa04",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e65584c3-0f84-4158-9e80-15a6e56d282d",
        "cursor": {
          "ref": "fbad62a2-3be7-4429-af9c-929146af3c2b",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "501f8a9d-9190-4d55-9342-425a2fee2d5d"
        },
        "item": {
          "id": "e65584c3-0f84-4158-9e80-15a6e56d282d",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a8738078-58ef-4d79-84c0-667c231faa04",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b24636b-813b-4631-8122-5939e1cd4f31",
        "cursor": {
          "ref": "e2c40a80-e779-4ec3-9b5e-45f21f9dc904",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "4f0890a6-fde0-4d7f-b8f7-d66019f85979"
        },
        "item": {
          "id": "0b24636b-813b-4631-8122-5939e1cd4f31",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f2b81254-4776-42fa-b50c-0095828a3530",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b24636b-813b-4631-8122-5939e1cd4f31",
        "cursor": {
          "ref": "e2c40a80-e779-4ec3-9b5e-45f21f9dc904",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "4f0890a6-fde0-4d7f-b8f7-d66019f85979"
        },
        "item": {
          "id": "0b24636b-813b-4631-8122-5939e1cd4f31",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f2b81254-4776-42fa-b50c-0095828a3530",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fced5e1c-0267-4316-8aa2-a2dc55f78343",
        "cursor": {
          "ref": "da66740c-57aa-48dc-84be-83ecc53a375c",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e9f20fda-5e91-43c1-9775-a31e10054478"
        },
        "item": {
          "id": "fced5e1c-0267-4316-8aa2-a2dc55f78343",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "32abc069-1072-4a0d-ac8b-712638d08b55",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fced5e1c-0267-4316-8aa2-a2dc55f78343",
        "cursor": {
          "ref": "da66740c-57aa-48dc-84be-83ecc53a375c",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e9f20fda-5e91-43c1-9775-a31e10054478"
        },
        "item": {
          "id": "fced5e1c-0267-4316-8aa2-a2dc55f78343",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "32abc069-1072-4a0d-ac8b-712638d08b55",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee46e0f7-3558-416b-b201-c18ef287670b",
        "cursor": {
          "ref": "5f8c82fb-a9d2-49fc-a469-6b109dcb4cf7",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f8ea78bc-d3df-424d-84c5-33809df6267d"
        },
        "item": {
          "id": "ee46e0f7-3558-416b-b201-c18ef287670b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3b33bb6d-24ca-40c0-8cc0-3324f0108861",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee46e0f7-3558-416b-b201-c18ef287670b",
        "cursor": {
          "ref": "5f8c82fb-a9d2-49fc-a469-6b109dcb4cf7",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f8ea78bc-d3df-424d-84c5-33809df6267d"
        },
        "item": {
          "id": "ee46e0f7-3558-416b-b201-c18ef287670b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3b33bb6d-24ca-40c0-8cc0-3324f0108861",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7f89dad-d654-4e58-b887-3decefa30ac3",
        "cursor": {
          "ref": "836d063c-f7bf-49ee-b600-f25de1f07345",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0d4480dd-70a7-420d-b3cd-9843299f475f"
        },
        "item": {
          "id": "c7f89dad-d654-4e58-b887-3decefa30ac3",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "227bb732-7c20-4cc9-ad06-2d343b332591",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7f89dad-d654-4e58-b887-3decefa30ac3",
        "cursor": {
          "ref": "836d063c-f7bf-49ee-b600-f25de1f07345",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0d4480dd-70a7-420d-b3cd-9843299f475f"
        },
        "item": {
          "id": "c7f89dad-d654-4e58-b887-3decefa30ac3",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "227bb732-7c20-4cc9-ad06-2d343b332591",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73dd8ea3-02a0-40e4-b1f6-501bffc0d739",
        "cursor": {
          "ref": "898f0458-f5ea-43f6-b84e-c357262938ce",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "885231b9-a4bc-4031-a808-bd1b5383c8e3"
        },
        "item": {
          "id": "73dd8ea3-02a0-40e4-b1f6-501bffc0d739",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "f263eb77-95a4-4dd8-8e15-eb416ef04838",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73dd8ea3-02a0-40e4-b1f6-501bffc0d739",
        "cursor": {
          "ref": "898f0458-f5ea-43f6-b84e-c357262938ce",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "885231b9-a4bc-4031-a808-bd1b5383c8e3"
        },
        "item": {
          "id": "73dd8ea3-02a0-40e4-b1f6-501bffc0d739",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "f263eb77-95a4-4dd8-8e15-eb416ef04838",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ed8eccf-9798-409f-9934-df4c66f63816",
        "cursor": {
          "ref": "6c8d19dc-fef7-4193-ae33-9f5b2d4d7488",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "0a149803-0fe1-4e53-81f0-cbaf74470b32"
        },
        "item": {
          "id": "1ed8eccf-9798-409f-9934-df4c66f63816",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ac8f37fb-b5db-4f98-8f50-68e24c68b919",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ed8eccf-9798-409f-9934-df4c66f63816",
        "cursor": {
          "ref": "6c8d19dc-fef7-4193-ae33-9f5b2d4d7488",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "0a149803-0fe1-4e53-81f0-cbaf74470b32"
        },
        "item": {
          "id": "1ed8eccf-9798-409f-9934-df4c66f63816",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ac8f37fb-b5db-4f98-8f50-68e24c68b919",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbdb4622-4f49-4376-9a6e-34e0d94da187",
        "cursor": {
          "ref": "37273358-8601-43ce-9391-9af39fecbad7",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "f0baadd4-f414-44ee-b3b1-fdc544071e2f"
        },
        "item": {
          "id": "dbdb4622-4f49-4376-9a6e-34e0d94da187",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c144622c-593e-419e-bb8b-2385ec427f11",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbdb4622-4f49-4376-9a6e-34e0d94da187",
        "cursor": {
          "ref": "37273358-8601-43ce-9391-9af39fecbad7",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "f0baadd4-f414-44ee-b3b1-fdc544071e2f"
        },
        "item": {
          "id": "dbdb4622-4f49-4376-9a6e-34e0d94da187",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c144622c-593e-419e-bb8b-2385ec427f11",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "958a03dd-3398-49a7-9d62-54253dfb55ba",
        "cursor": {
          "ref": "f4e2e692-5f4d-4e0b-9aa7-6facc8070a85",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "6e24e42d-9e9f-4621-bd89-3df57415b239"
        },
        "item": {
          "id": "958a03dd-3398-49a7-9d62-54253dfb55ba",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c7e43f87-077e-493a-963a-d84647c371d5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "958a03dd-3398-49a7-9d62-54253dfb55ba",
        "cursor": {
          "ref": "f4e2e692-5f4d-4e0b-9aa7-6facc8070a85",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "6e24e42d-9e9f-4621-bd89-3df57415b239"
        },
        "item": {
          "id": "958a03dd-3398-49a7-9d62-54253dfb55ba",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c7e43f87-077e-493a-963a-d84647c371d5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9343ed1-12db-420a-8e03-bdb5d1cce67d",
        "cursor": {
          "ref": "557b975d-f540-4995-b68c-45ff829dbce0",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "02f7e787-738f-49da-8f7a-190b6964a19f"
        },
        "item": {
          "id": "c9343ed1-12db-420a-8e03-bdb5d1cce67d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d83dfc6d-2403-4834-a404-00fe764be545",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9343ed1-12db-420a-8e03-bdb5d1cce67d",
        "cursor": {
          "ref": "557b975d-f540-4995-b68c-45ff829dbce0",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "02f7e787-738f-49da-8f7a-190b6964a19f"
        },
        "item": {
          "id": "c9343ed1-12db-420a-8e03-bdb5d1cce67d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d83dfc6d-2403-4834-a404-00fe764be545",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54e160b0-0e77-4d00-9d6d-24e930fdb626",
        "cursor": {
          "ref": "ff28fe52-adda-4012-a9a8-72bd93a7ff0c",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "575f090a-1964-4dce-916a-a53a587c1a1d"
        },
        "item": {
          "id": "54e160b0-0e77-4d00-9d6d-24e930fdb626",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "c07ea6e8-4586-4e25-82c3-314bd72e7c62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "54e160b0-0e77-4d00-9d6d-24e930fdb626",
        "cursor": {
          "ref": "ff28fe52-adda-4012-a9a8-72bd93a7ff0c",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "575f090a-1964-4dce-916a-a53a587c1a1d"
        },
        "item": {
          "id": "54e160b0-0e77-4d00-9d6d-24e930fdb626",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "c07ea6e8-4586-4e25-82c3-314bd72e7c62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "aeb9844a-5811-4810-ba18-c3f615251b9d",
        "cursor": {
          "ref": "7e923b26-bc4f-44e8-8824-3da0299e4174",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d345d023-fe5d-4c0e-b774-3af4dc82ae17"
        },
        "item": {
          "id": "aeb9844a-5811-4810-ba18-c3f615251b9d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "ff2548c9-339c-4458-9968-5944b9542c46",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "aeb9844a-5811-4810-ba18-c3f615251b9d",
        "cursor": {
          "ref": "7e923b26-bc4f-44e8-8824-3da0299e4174",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d345d023-fe5d-4c0e-b774-3af4dc82ae17"
        },
        "item": {
          "id": "aeb9844a-5811-4810-ba18-c3f615251b9d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "ff2548c9-339c-4458-9968-5944b9542c46",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "a25ab49e-11dd-41e1-9a68-2ff12aec0b34",
        "cursor": {
          "ref": "0aee5535-c359-4a06-b598-86ea9b7f1b8a",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "47e52466-ea38-4334-bb6c-7597314048b4"
        },
        "item": {
          "id": "a25ab49e-11dd-41e1-9a68-2ff12aec0b34",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "3e0a1886-d126-4a09-9641-8955ce2a004f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "a25ab49e-11dd-41e1-9a68-2ff12aec0b34",
        "cursor": {
          "ref": "0aee5535-c359-4a06-b598-86ea9b7f1b8a",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "47e52466-ea38-4334-bb6c-7597314048b4"
        },
        "item": {
          "id": "a25ab49e-11dd-41e1-9a68-2ff12aec0b34",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "3e0a1886-d126-4a09-9641-8955ce2a004f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "43ea160e-fd06-4edf-999a-2e589925f8a1",
        "cursor": {
          "ref": "1a7cbf1f-3863-4e52-b5d9-f202279e5abb",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a5b6279f-2c85-4967-b7a5-4f7b675b5676"
        },
        "item": {
          "id": "43ea160e-fd06-4edf-999a-2e589925f8a1",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "138472be-b75b-4ee9-b304-ea5f9d86c6a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "43ea160e-fd06-4edf-999a-2e589925f8a1",
        "cursor": {
          "ref": "1a7cbf1f-3863-4e52-b5d9-f202279e5abb",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a5b6279f-2c85-4967-b7a5-4f7b675b5676"
        },
        "item": {
          "id": "43ea160e-fd06-4edf-999a-2e589925f8a1",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "138472be-b75b-4ee9-b304-ea5f9d86c6a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "14f115aa-c0a8-40bd-98ee-3ff8459c9716",
        "cursor": {
          "ref": "dd61f7ff-f02c-406b-b04f-edaedca1fad2",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "5fd9ad15-48e3-4eef-ab8f-f7d63c212cd4"
        },
        "item": {
          "id": "14f115aa-c0a8-40bd-98ee-3ff8459c9716",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7a97279b-545f-48dd-9945-910b822a4ee5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "14f115aa-c0a8-40bd-98ee-3ff8459c9716",
        "cursor": {
          "ref": "dd61f7ff-f02c-406b-b04f-edaedca1fad2",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "5fd9ad15-48e3-4eef-ab8f-f7d63c212cd4"
        },
        "item": {
          "id": "14f115aa-c0a8-40bd-98ee-3ff8459c9716",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7a97279b-545f-48dd-9945-910b822a4ee5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "73bbe503-2914-4b1d-b475-2e9725ca9cb5",
        "cursor": {
          "ref": "8e6c79f7-6233-4ab4-86ad-fb68263ae622",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "2cc86642-b606-42c0-8c3c-c58612d5fbdd"
        },
        "item": {
          "id": "73bbe503-2914-4b1d-b475-2e9725ca9cb5",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c9b48ce6-5b9f-4287-8af9-6de45713649a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "73bbe503-2914-4b1d-b475-2e9725ca9cb5",
        "cursor": {
          "ref": "8e6c79f7-6233-4ab4-86ad-fb68263ae622",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "2cc86642-b606-42c0-8c3c-c58612d5fbdd"
        },
        "item": {
          "id": "73bbe503-2914-4b1d-b475-2e9725ca9cb5",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c9b48ce6-5b9f-4287-8af9-6de45713649a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "8cccf3a4-cc20-4bdc-91b0-ae9583b76d0b",
        "cursor": {
          "ref": "8de0e2a3-1d29-4774-8754-f2c901036ceb",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "17d83dc6-b81b-4648-ad6c-f1c8c9902d56"
        },
        "item": {
          "id": "8cccf3a4-cc20-4bdc-91b0-ae9583b76d0b",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1380a7d3-457f-4802-91d7-b56cf8e23abe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "8cccf3a4-cc20-4bdc-91b0-ae9583b76d0b",
        "cursor": {
          "ref": "8de0e2a3-1d29-4774-8754-f2c901036ceb",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "17d83dc6-b81b-4648-ad6c-f1c8c9902d56"
        },
        "item": {
          "id": "8cccf3a4-cc20-4bdc-91b0-ae9583b76d0b",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1380a7d3-457f-4802-91d7-b56cf8e23abe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "246c64c6-e144-455b-a2da-cbb9163c9d56",
        "cursor": {
          "ref": "837da64e-6430-48cb-ac05-2f60d434be5f",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4743f8e9-b1ed-4660-b534-a04ee1aae549"
        },
        "item": {
          "id": "246c64c6-e144-455b-a2da-cbb9163c9d56",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a7edb476-2a4d-463f-b78d-876160b6619f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "246c64c6-e144-455b-a2da-cbb9163c9d56",
        "cursor": {
          "ref": "837da64e-6430-48cb-ac05-2f60d434be5f",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4743f8e9-b1ed-4660-b534-a04ee1aae549"
        },
        "item": {
          "id": "246c64c6-e144-455b-a2da-cbb9163c9d56",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a7edb476-2a4d-463f-b78d-876160b6619f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fed9ac34-70ec-4fef-9990-37b5e32622ce",
        "cursor": {
          "ref": "957b3825-c5eb-4494-8e3b-e27db6d17141",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5c72e359-80dd-4978-9aec-6131a23d1883"
        },
        "item": {
          "id": "fed9ac34-70ec-4fef-9990-37b5e32622ce",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8f7f79b8-b463-4b45-aeee-70b0595bb5af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fed9ac34-70ec-4fef-9990-37b5e32622ce",
        "cursor": {
          "ref": "957b3825-c5eb-4494-8e3b-e27db6d17141",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5c72e359-80dd-4978-9aec-6131a23d1883"
        },
        "item": {
          "id": "fed9ac34-70ec-4fef-9990-37b5e32622ce",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8f7f79b8-b463-4b45-aeee-70b0595bb5af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ebea501-786d-4671-86c5-c3605f217557",
        "cursor": {
          "ref": "8e0031a4-6ad5-4d56-a73b-5a442e931fc6",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e2d28b7b-9ca3-468c-b8ba-fc0a163b979d"
        },
        "item": {
          "id": "6ebea501-786d-4671-86c5-c3605f217557",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5fb0c4d4-bca4-4024-8346-2de4113d41d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ebea501-786d-4671-86c5-c3605f217557",
        "cursor": {
          "ref": "8e0031a4-6ad5-4d56-a73b-5a442e931fc6",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e2d28b7b-9ca3-468c-b8ba-fc0a163b979d"
        },
        "item": {
          "id": "6ebea501-786d-4671-86c5-c3605f217557",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5fb0c4d4-bca4-4024-8346-2de4113d41d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8c73c7c-bd44-49c1-a9ea-02f3aff871d1",
        "cursor": {
          "ref": "52c925f1-75d6-4508-b7c7-b73bcfe9cd91",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "0de8e870-199d-4ede-8866-52e433595c15"
        },
        "item": {
          "id": "c8c73c7c-bd44-49c1-a9ea-02f3aff871d1",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4960a6ed-fb66-4d32-99b3-eff564364728",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8c73c7c-bd44-49c1-a9ea-02f3aff871d1",
        "cursor": {
          "ref": "52c925f1-75d6-4508-b7c7-b73bcfe9cd91",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "0de8e870-199d-4ede-8866-52e433595c15"
        },
        "item": {
          "id": "c8c73c7c-bd44-49c1-a9ea-02f3aff871d1",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4960a6ed-fb66-4d32-99b3-eff564364728",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6892db01-bfa4-445e-8da1-386ca63520be",
        "cursor": {
          "ref": "7350313e-cbaa-467d-8bf2-a0bdaaf36d7d",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "855ab17a-0049-43ca-8c15-8536bf971378"
        },
        "item": {
          "id": "6892db01-bfa4-445e-8da1-386ca63520be",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "30d8acb2-f8c6-4af4-94a3-15df1af70265",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6892db01-bfa4-445e-8da1-386ca63520be",
        "cursor": {
          "ref": "7350313e-cbaa-467d-8bf2-a0bdaaf36d7d",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "855ab17a-0049-43ca-8c15-8536bf971378"
        },
        "item": {
          "id": "6892db01-bfa4-445e-8da1-386ca63520be",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "30d8acb2-f8c6-4af4-94a3-15df1af70265",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af9e4b5d-295c-4964-b0f7-85609bb38a31",
        "cursor": {
          "ref": "4998137b-f5dc-47bb-8901-ade5c1af70ef",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "987435aa-5bde-496d-9d73-67ed0a9692e1"
        },
        "item": {
          "id": "af9e4b5d-295c-4964-b0f7-85609bb38a31",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "98a9c115-8eea-46ac-a361-5b69c148c63b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af9e4b5d-295c-4964-b0f7-85609bb38a31",
        "cursor": {
          "ref": "4998137b-f5dc-47bb-8901-ade5c1af70ef",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "987435aa-5bde-496d-9d73-67ed0a9692e1"
        },
        "item": {
          "id": "af9e4b5d-295c-4964-b0f7-85609bb38a31",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "98a9c115-8eea-46ac-a361-5b69c148c63b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "147906e2-414a-42e9-b8d4-15c12d9972c0",
        "cursor": {
          "ref": "16e54811-6533-42ea-a6bd-e73665d904f0",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a54668eb-a1a5-47fb-a7e7-2afc1beb9cbc"
        },
        "item": {
          "id": "147906e2-414a-42e9-b8d4-15c12d9972c0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3cbfc153-ae18-4915-be93-ac8c95260b7f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "147906e2-414a-42e9-b8d4-15c12d9972c0",
        "cursor": {
          "ref": "16e54811-6533-42ea-a6bd-e73665d904f0",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a54668eb-a1a5-47fb-a7e7-2afc1beb9cbc"
        },
        "item": {
          "id": "147906e2-414a-42e9-b8d4-15c12d9972c0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3cbfc153-ae18-4915-be93-ac8c95260b7f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78452dc4-4e2b-491c-a1b2-0eaa04523e18",
        "cursor": {
          "ref": "30f27cc4-fd91-4d3e-bef0-0e30bc4480f3",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "1cdaa445-e95c-4224-9e3e-437186f65b71"
        },
        "item": {
          "id": "78452dc4-4e2b-491c-a1b2-0eaa04523e18",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6fa89dee-2754-4104-9ecb-6fc48f82e101",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78452dc4-4e2b-491c-a1b2-0eaa04523e18",
        "cursor": {
          "ref": "30f27cc4-fd91-4d3e-bef0-0e30bc4480f3",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "1cdaa445-e95c-4224-9e3e-437186f65b71"
        },
        "item": {
          "id": "78452dc4-4e2b-491c-a1b2-0eaa04523e18",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6fa89dee-2754-4104-9ecb-6fc48f82e101",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eb4699a-a567-4d88-bc11-0c3d3e307d77",
        "cursor": {
          "ref": "cf0a3ead-4740-45fc-848b-2cba3c5404a5",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "2da9aabb-378b-470e-9e14-c31a75c9c116"
        },
        "item": {
          "id": "5eb4699a-a567-4d88-bc11-0c3d3e307d77",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ae4c4332-122d-44e9-ae4c-d72828613165",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eb4699a-a567-4d88-bc11-0c3d3e307d77",
        "cursor": {
          "ref": "cf0a3ead-4740-45fc-848b-2cba3c5404a5",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "2da9aabb-378b-470e-9e14-c31a75c9c116"
        },
        "item": {
          "id": "5eb4699a-a567-4d88-bc11-0c3d3e307d77",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ae4c4332-122d-44e9-ae4c-d72828613165",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b26d5962-c0d4-46ed-af08-9ab783effdfd",
        "cursor": {
          "ref": "f64cdaff-22ac-46f7-a894-47f56a59aa2a",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "e8a6b060-22f2-40f4-9260-3281e4a16d50"
        },
        "item": {
          "id": "b26d5962-c0d4-46ed-af08-9ab783effdfd",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0b78c560-a333-40ab-b55d-b0acc22758fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b26d5962-c0d4-46ed-af08-9ab783effdfd",
        "cursor": {
          "ref": "f64cdaff-22ac-46f7-a894-47f56a59aa2a",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "e8a6b060-22f2-40f4-9260-3281e4a16d50"
        },
        "item": {
          "id": "b26d5962-c0d4-46ed-af08-9ab783effdfd",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0b78c560-a333-40ab-b55d-b0acc22758fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d8deb0e-3ef0-4641-b4d7-5cdb388a4fff",
        "cursor": {
          "ref": "f68b6a93-b566-4f86-b3e5-56cbaf8882bc",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8e994da1-f547-4046-824c-4e99eb727b28"
        },
        "item": {
          "id": "0d8deb0e-3ef0-4641-b4d7-5cdb388a4fff",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "fd692945-3764-4aac-8525-3ea393292780",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d8deb0e-3ef0-4641-b4d7-5cdb388a4fff",
        "cursor": {
          "ref": "f68b6a93-b566-4f86-b3e5-56cbaf8882bc",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8e994da1-f547-4046-824c-4e99eb727b28"
        },
        "item": {
          "id": "0d8deb0e-3ef0-4641-b4d7-5cdb388a4fff",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "fd692945-3764-4aac-8525-3ea393292780",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f12d12a-bf56-4a2e-afe2-314627ce3075",
        "cursor": {
          "ref": "632e73af-04a9-49d0-a587-aa90d40bbaee",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6fb1e077-a833-4640-9f6e-51610490e95b"
        },
        "item": {
          "id": "9f12d12a-bf56-4a2e-afe2-314627ce3075",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f4c61702-cd7d-4186-b0a5-7a0c8546fc7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f12d12a-bf56-4a2e-afe2-314627ce3075",
        "cursor": {
          "ref": "632e73af-04a9-49d0-a587-aa90d40bbaee",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6fb1e077-a833-4640-9f6e-51610490e95b"
        },
        "item": {
          "id": "9f12d12a-bf56-4a2e-afe2-314627ce3075",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f4c61702-cd7d-4186-b0a5-7a0c8546fc7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94ee0501-2607-4ab1-bc0e-c0ee6e9498bc",
        "cursor": {
          "ref": "d9f422cc-1171-41e6-a19e-ec8a83992843",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "36367c8c-7939-4e50-9f02-d0e0f2603ff5"
        },
        "item": {
          "id": "94ee0501-2607-4ab1-bc0e-c0ee6e9498bc",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "be5bab40-8eee-4d73-9900-66b38c7a41a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94ee0501-2607-4ab1-bc0e-c0ee6e9498bc",
        "cursor": {
          "ref": "d9f422cc-1171-41e6-a19e-ec8a83992843",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "36367c8c-7939-4e50-9f02-d0e0f2603ff5"
        },
        "item": {
          "id": "94ee0501-2607-4ab1-bc0e-c0ee6e9498bc",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "be5bab40-8eee-4d73-9900-66b38c7a41a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ce8160-e74a-476c-bdcb-99913adf087d",
        "cursor": {
          "ref": "919fd683-8272-4248-beb0-6766731d1950",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "52ee8072-4e04-4624-a4e5-5cddf6311aff"
        },
        "item": {
          "id": "e3ce8160-e74a-476c-bdcb-99913adf087d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "2591daca-0490-4b52-aa0f-df91a4cf6128",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ce8160-e74a-476c-bdcb-99913adf087d",
        "cursor": {
          "ref": "919fd683-8272-4248-beb0-6766731d1950",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "52ee8072-4e04-4624-a4e5-5cddf6311aff"
        },
        "item": {
          "id": "e3ce8160-e74a-476c-bdcb-99913adf087d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "2591daca-0490-4b52-aa0f-df91a4cf6128",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "076701bc-b232-4314-989f-d1d61617bdef",
        "cursor": {
          "ref": "20a01731-f8f1-4a61-9918-6b8496dcfcc4",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "741b3b6d-ce10-4eb5-9d45-345ee0a5cff8"
        },
        "item": {
          "id": "076701bc-b232-4314-989f-d1d61617bdef",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "cc5f2da0-27da-49c1-8a3b-d94330bd05e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "076701bc-b232-4314-989f-d1d61617bdef",
        "cursor": {
          "ref": "20a01731-f8f1-4a61-9918-6b8496dcfcc4",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "741b3b6d-ce10-4eb5-9d45-345ee0a5cff8"
        },
        "item": {
          "id": "076701bc-b232-4314-989f-d1d61617bdef",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "cc5f2da0-27da-49c1-8a3b-d94330bd05e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e2bd08-47df-411c-8467-4c8835df2cd1",
        "cursor": {
          "ref": "bf03a821-0423-4179-8563-24887b39b883",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "3ea2e6e9-b164-48d6-bf5d-690c53c4c5ab"
        },
        "item": {
          "id": "16e2bd08-47df-411c-8467-4c8835df2cd1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "cbfd8822-3492-4882-8e08-3b4d805f3228",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e2bd08-47df-411c-8467-4c8835df2cd1",
        "cursor": {
          "ref": "bf03a821-0423-4179-8563-24887b39b883",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "3ea2e6e9-b164-48d6-bf5d-690c53c4c5ab"
        },
        "item": {
          "id": "16e2bd08-47df-411c-8467-4c8835df2cd1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "cbfd8822-3492-4882-8e08-3b4d805f3228",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ebfb3cb-4d2a-49ee-b7d2-8dddb368e9fb",
        "cursor": {
          "ref": "081d418f-c131-44cf-bc6a-ea84e9f40905",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "9a95bef2-1748-414a-abcb-b6bde61e7e94"
        },
        "item": {
          "id": "4ebfb3cb-4d2a-49ee-b7d2-8dddb368e9fb",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c9008c8c-4ce7-4b28-a272-a020947a222f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ebfb3cb-4d2a-49ee-b7d2-8dddb368e9fb",
        "cursor": {
          "ref": "081d418f-c131-44cf-bc6a-ea84e9f40905",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "9a95bef2-1748-414a-abcb-b6bde61e7e94"
        },
        "item": {
          "id": "4ebfb3cb-4d2a-49ee-b7d2-8dddb368e9fb",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c9008c8c-4ce7-4b28-a272-a020947a222f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a86dc10-a0aa-4e42-b660-8ac61a364c2c",
        "cursor": {
          "ref": "b5f72240-83da-40b3-90b9-2fb9f5426800",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "0b20dbf1-4e6b-42d2-8032-566ac7ab2501"
        },
        "item": {
          "id": "8a86dc10-a0aa-4e42-b660-8ac61a364c2c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7bbff8db-9614-4914-8a31-7a767a1a21ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a86dc10-a0aa-4e42-b660-8ac61a364c2c",
        "cursor": {
          "ref": "b5f72240-83da-40b3-90b9-2fb9f5426800",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "0b20dbf1-4e6b-42d2-8032-566ac7ab2501"
        },
        "item": {
          "id": "8a86dc10-a0aa-4e42-b660-8ac61a364c2c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7bbff8db-9614-4914-8a31-7a767a1a21ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7116d94-3d56-497e-b09d-a3c93dbed0d6",
        "cursor": {
          "ref": "7ea0f130-6beb-43e1-9d9e-15a9256eee15",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "b8ad22a4-1a74-4bc9-b283-9e7cab5374a1"
        },
        "item": {
          "id": "d7116d94-3d56-497e-b09d-a3c93dbed0d6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "17b8e77f-7ecf-47a0-a056-9ce8a37ed4c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7116d94-3d56-497e-b09d-a3c93dbed0d6",
        "cursor": {
          "ref": "7ea0f130-6beb-43e1-9d9e-15a9256eee15",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "b8ad22a4-1a74-4bc9-b283-9e7cab5374a1"
        },
        "item": {
          "id": "d7116d94-3d56-497e-b09d-a3c93dbed0d6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "17b8e77f-7ecf-47a0-a056-9ce8a37ed4c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bfd0c93-3e35-4a62-b362-59bbdf58ba48",
        "cursor": {
          "ref": "3276d081-03cb-435b-8b00-2f49e86f9370",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4897171f-f084-4bff-8288-e023b9cdb026"
        },
        "item": {
          "id": "8bfd0c93-3e35-4a62-b362-59bbdf58ba48",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f4645f5c-3395-4328-a9dd-518fee12185d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bfd0c93-3e35-4a62-b362-59bbdf58ba48",
        "cursor": {
          "ref": "3276d081-03cb-435b-8b00-2f49e86f9370",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4897171f-f084-4bff-8288-e023b9cdb026"
        },
        "item": {
          "id": "8bfd0c93-3e35-4a62-b362-59bbdf58ba48",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f4645f5c-3395-4328-a9dd-518fee12185d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7321adf1-a41b-469f-9485-060a42fc5a52",
        "cursor": {
          "ref": "dc2341f0-86f4-4c56-bfed-0ca0044402f3",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "32c451ef-dc53-49f9-a344-1ba21a325062"
        },
        "item": {
          "id": "7321adf1-a41b-469f-9485-060a42fc5a52",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "bf32c067-1793-4f11-8dac-246a05a361d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7321adf1-a41b-469f-9485-060a42fc5a52",
        "cursor": {
          "ref": "dc2341f0-86f4-4c56-bfed-0ca0044402f3",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "32c451ef-dc53-49f9-a344-1ba21a325062"
        },
        "item": {
          "id": "7321adf1-a41b-469f-9485-060a42fc5a52",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "bf32c067-1793-4f11-8dac-246a05a361d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f8b69b9-a179-4407-938a-8cf01ca4603e",
        "cursor": {
          "ref": "5eb52592-3724-4131-adc1-db7d339e088e",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "251f57c6-fa1e-4883-a29c-c2fa6fadd4a7"
        },
        "item": {
          "id": "1f8b69b9-a179-4407-938a-8cf01ca4603e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "32c38a1c-b969-4b23-bbc0-5cf1352c62a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f8b69b9-a179-4407-938a-8cf01ca4603e",
        "cursor": {
          "ref": "5eb52592-3724-4131-adc1-db7d339e088e",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "251f57c6-fa1e-4883-a29c-c2fa6fadd4a7"
        },
        "item": {
          "id": "1f8b69b9-a179-4407-938a-8cf01ca4603e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "32c38a1c-b969-4b23-bbc0-5cf1352c62a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d100715-847d-4f0b-8bad-efde85dd1f24",
        "cursor": {
          "ref": "a866fa61-f6fa-4280-adca-4ee5bea3ac08",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "24fa4e7b-9dbb-4624-b052-429479a6f45d"
        },
        "item": {
          "id": "3d100715-847d-4f0b-8bad-efde85dd1f24",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6802fd0e-9875-41c2-a62a-11da88a852c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d100715-847d-4f0b-8bad-efde85dd1f24",
        "cursor": {
          "ref": "a866fa61-f6fa-4280-adca-4ee5bea3ac08",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "24fa4e7b-9dbb-4624-b052-429479a6f45d"
        },
        "item": {
          "id": "3d100715-847d-4f0b-8bad-efde85dd1f24",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6802fd0e-9875-41c2-a62a-11da88a852c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "886abb89-12d8-4cac-bfe2-f725477ba6e6",
        "cursor": {
          "ref": "36981ede-d549-4330-99a6-1fac713d96d2",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "8d7996ce-ec3a-4ad9-b5b1-c745ae9a0bdc"
        },
        "item": {
          "id": "886abb89-12d8-4cac-bfe2-f725477ba6e6",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4f3612d4-7a0b-49f0-a62c-12ac36ba8a66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "886abb89-12d8-4cac-bfe2-f725477ba6e6",
        "cursor": {
          "ref": "36981ede-d549-4330-99a6-1fac713d96d2",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "8d7996ce-ec3a-4ad9-b5b1-c745ae9a0bdc"
        },
        "item": {
          "id": "886abb89-12d8-4cac-bfe2-f725477ba6e6",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4f3612d4-7a0b-49f0-a62c-12ac36ba8a66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a334b613-7519-4666-9328-d92f5825c8ef",
        "cursor": {
          "ref": "c57157cc-98c6-4893-88c0-99d816377b8e",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "5aa8854e-b09c-4af4-8117-c3a5d81b0184"
        },
        "item": {
          "id": "a334b613-7519-4666-9328-d92f5825c8ef",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8895db24-5ec7-414a-a49d-88c9434c3d74",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a334b613-7519-4666-9328-d92f5825c8ef",
        "cursor": {
          "ref": "c57157cc-98c6-4893-88c0-99d816377b8e",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "5aa8854e-b09c-4af4-8117-c3a5d81b0184"
        },
        "item": {
          "id": "a334b613-7519-4666-9328-d92f5825c8ef",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8895db24-5ec7-414a-a49d-88c9434c3d74",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef8d02f5-6354-4dbc-9fef-955f4a13bf4e",
        "cursor": {
          "ref": "96422da1-0daa-411b-b590-1514d32655ac",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "98be9be1-28d9-4aa4-b81f-09f502e5d156"
        },
        "item": {
          "id": "ef8d02f5-6354-4dbc-9fef-955f4a13bf4e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "fc4455ba-ab7a-4e4e-a5b9-ec43fbd0a5f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef8d02f5-6354-4dbc-9fef-955f4a13bf4e",
        "cursor": {
          "ref": "96422da1-0daa-411b-b590-1514d32655ac",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "98be9be1-28d9-4aa4-b81f-09f502e5d156"
        },
        "item": {
          "id": "ef8d02f5-6354-4dbc-9fef-955f4a13bf4e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "fc4455ba-ab7a-4e4e-a5b9-ec43fbd0a5f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e39c062-7d42-443d-b606-6cfbf3a95f68",
        "cursor": {
          "ref": "8b9b5454-7441-433f-a68d-05ef1cee4e34",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "7bf83d25-d45e-44a0-9491-f3f39ced6332"
        },
        "item": {
          "id": "7e39c062-7d42-443d-b606-6cfbf3a95f68",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "654db9b4-4c2b-4001-9770-dc49a06cb27b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e39c062-7d42-443d-b606-6cfbf3a95f68",
        "cursor": {
          "ref": "8b9b5454-7441-433f-a68d-05ef1cee4e34",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "7bf83d25-d45e-44a0-9491-f3f39ced6332"
        },
        "item": {
          "id": "7e39c062-7d42-443d-b606-6cfbf3a95f68",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "654db9b4-4c2b-4001-9770-dc49a06cb27b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e5ed259-4a73-47ca-8833-52285f7f4b4f",
        "cursor": {
          "ref": "e79658f3-ba53-4c29-9c86-7c9f8e720af9",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "49ad7a5c-3914-482f-aeda-60ffa670e470"
        },
        "item": {
          "id": "7e5ed259-4a73-47ca-8833-52285f7f4b4f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5d675519-d568-465a-9f65-6d95d7ceef88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e5ed259-4a73-47ca-8833-52285f7f4b4f",
        "cursor": {
          "ref": "e79658f3-ba53-4c29-9c86-7c9f8e720af9",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "49ad7a5c-3914-482f-aeda-60ffa670e470"
        },
        "item": {
          "id": "7e5ed259-4a73-47ca-8833-52285f7f4b4f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5d675519-d568-465a-9f65-6d95d7ceef88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "501ea887-b95d-40a4-92ee-4fc15b456b4a",
        "cursor": {
          "ref": "3d3b1eb9-0c9b-43b0-94e6-3f90d3d8280c",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2d20551a-3a00-45bb-8c94-cdc7557459e3"
        },
        "item": {
          "id": "501ea887-b95d-40a4-92ee-4fc15b456b4a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b6265e0d-c694-41f7-8d14-54a40cdc5102",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "501ea887-b95d-40a4-92ee-4fc15b456b4a",
        "cursor": {
          "ref": "3d3b1eb9-0c9b-43b0-94e6-3f90d3d8280c",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2d20551a-3a00-45bb-8c94-cdc7557459e3"
        },
        "item": {
          "id": "501ea887-b95d-40a4-92ee-4fc15b456b4a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b6265e0d-c694-41f7-8d14-54a40cdc5102",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83669cee-4bec-4645-b9e9-e3f38eeffbf8",
        "cursor": {
          "ref": "cec2c84e-46a6-4ef9-bc3d-e4e716ec3e4f",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4ee8caa1-3fdf-4ddc-ae4d-7af000eb6645"
        },
        "item": {
          "id": "83669cee-4bec-4645-b9e9-e3f38eeffbf8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d44b1505-d2ae-4e3f-bc73-736a92ce428d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83669cee-4bec-4645-b9e9-e3f38eeffbf8",
        "cursor": {
          "ref": "cec2c84e-46a6-4ef9-bc3d-e4e716ec3e4f",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4ee8caa1-3fdf-4ddc-ae4d-7af000eb6645"
        },
        "item": {
          "id": "83669cee-4bec-4645-b9e9-e3f38eeffbf8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d44b1505-d2ae-4e3f-bc73-736a92ce428d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26b82c62-e3b2-4429-9d4b-fa5639100679",
        "cursor": {
          "ref": "5c67e5a2-fd82-4a4e-9ed2-9e34f9c52800",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "99470517-ce56-47c3-8330-72b0a21759fd"
        },
        "item": {
          "id": "26b82c62-e3b2-4429-9d4b-fa5639100679",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "498806a4-566c-411e-a9f7-2cce1b8fd23e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26b82c62-e3b2-4429-9d4b-fa5639100679",
        "cursor": {
          "ref": "5c67e5a2-fd82-4a4e-9ed2-9e34f9c52800",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "99470517-ce56-47c3-8330-72b0a21759fd"
        },
        "item": {
          "id": "26b82c62-e3b2-4429-9d4b-fa5639100679",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "498806a4-566c-411e-a9f7-2cce1b8fd23e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43c65848-5807-48ff-9f41-6663af95eaea",
        "cursor": {
          "ref": "b8c179b2-45a1-4bb9-a45d-d5d8948f9895",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f0057087-78dc-4e2e-850f-46398290080f"
        },
        "item": {
          "id": "43c65848-5807-48ff-9f41-6663af95eaea",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "9045f7ba-ecde-4499-aaac-71f5155179fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43c65848-5807-48ff-9f41-6663af95eaea",
        "cursor": {
          "ref": "b8c179b2-45a1-4bb9-a45d-d5d8948f9895",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f0057087-78dc-4e2e-850f-46398290080f"
        },
        "item": {
          "id": "43c65848-5807-48ff-9f41-6663af95eaea",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "9045f7ba-ecde-4499-aaac-71f5155179fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1bd8c93-5ef5-4a8a-a49a-7d0ac8bcafba",
        "cursor": {
          "ref": "b28e726e-26d1-4c53-a280-fbb05b52132d",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b7717504-b07d-43e3-a71a-4681e330f87e"
        },
        "item": {
          "id": "e1bd8c93-5ef5-4a8a-a49a-7d0ac8bcafba",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4ad3f6a6-50e8-4cf0-8863-53355cb4eb1a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1bd8c93-5ef5-4a8a-a49a-7d0ac8bcafba",
        "cursor": {
          "ref": "b28e726e-26d1-4c53-a280-fbb05b52132d",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b7717504-b07d-43e3-a71a-4681e330f87e"
        },
        "item": {
          "id": "e1bd8c93-5ef5-4a8a-a49a-7d0ac8bcafba",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4ad3f6a6-50e8-4cf0-8863-53355cb4eb1a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67a36046-36dd-4ede-9a7f-22760fa5097a",
        "cursor": {
          "ref": "a5320195-186d-46b1-8a32-615794253e99",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "948e3838-4d6c-403f-866c-a6b5530be562"
        },
        "item": {
          "id": "67a36046-36dd-4ede-9a7f-22760fa5097a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "80c1db0b-df8a-4e72-bfde-9da5aedd31a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67a36046-36dd-4ede-9a7f-22760fa5097a",
        "cursor": {
          "ref": "a5320195-186d-46b1-8a32-615794253e99",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "948e3838-4d6c-403f-866c-a6b5530be562"
        },
        "item": {
          "id": "67a36046-36dd-4ede-9a7f-22760fa5097a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "80c1db0b-df8a-4e72-bfde-9da5aedd31a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df706ab6-d0c6-4576-9760-ed46ba060437",
        "cursor": {
          "ref": "e1f5e9de-4329-4724-a22e-97bb5c629603",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "30fbe9d5-062c-4420-abf6-ece7dda45b2b"
        },
        "item": {
          "id": "df706ab6-d0c6-4576-9760-ed46ba060437",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "47f401a0-139c-4215-b9bd-29d84548131b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df706ab6-d0c6-4576-9760-ed46ba060437",
        "cursor": {
          "ref": "e1f5e9de-4329-4724-a22e-97bb5c629603",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "30fbe9d5-062c-4420-abf6-ece7dda45b2b"
        },
        "item": {
          "id": "df706ab6-d0c6-4576-9760-ed46ba060437",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "47f401a0-139c-4215-b9bd-29d84548131b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "facafa46-6e0c-4462-a52a-3fa3a7a1b217",
        "cursor": {
          "ref": "cba91520-7e02-4489-b4d6-3e9004bc7009",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7aa096e8-8469-4890-987f-7e97537f5377"
        },
        "item": {
          "id": "facafa46-6e0c-4462-a52a-3fa3a7a1b217",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "dca4b90f-fd0e-4038-ae5c-f18a7492644d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "facafa46-6e0c-4462-a52a-3fa3a7a1b217",
        "cursor": {
          "ref": "cba91520-7e02-4489-b4d6-3e9004bc7009",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7aa096e8-8469-4890-987f-7e97537f5377"
        },
        "item": {
          "id": "facafa46-6e0c-4462-a52a-3fa3a7a1b217",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "dca4b90f-fd0e-4038-ae5c-f18a7492644d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e10ac6fa-c63d-4475-9b21-2f27de96fa5f",
        "cursor": {
          "ref": "7b65ddfc-ad46-4b8a-a660-02bdeb4df129",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "85dd5515-62c1-4edc-903a-3b599c2cdbb2"
        },
        "item": {
          "id": "e10ac6fa-c63d-4475-9b21-2f27de96fa5f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "530e2fc4-51aa-47af-9696-4777e9a2d5bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e10ac6fa-c63d-4475-9b21-2f27de96fa5f",
        "cursor": {
          "ref": "7b65ddfc-ad46-4b8a-a660-02bdeb4df129",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "85dd5515-62c1-4edc-903a-3b599c2cdbb2"
        },
        "item": {
          "id": "e10ac6fa-c63d-4475-9b21-2f27de96fa5f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "530e2fc4-51aa-47af-9696-4777e9a2d5bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "006d94a9-a9af-427e-a897-d888ea7fff55",
        "cursor": {
          "ref": "85b1c4c0-145c-4258-8aeb-207f43662a23",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "33c786d7-c915-4606-8e42-d3033239e254"
        },
        "item": {
          "id": "006d94a9-a9af-427e-a897-d888ea7fff55",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ed71e386-f68b-43e2-8313-861793d3d267",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "006d94a9-a9af-427e-a897-d888ea7fff55",
        "cursor": {
          "ref": "85b1c4c0-145c-4258-8aeb-207f43662a23",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "33c786d7-c915-4606-8e42-d3033239e254"
        },
        "item": {
          "id": "006d94a9-a9af-427e-a897-d888ea7fff55",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ed71e386-f68b-43e2-8313-861793d3d267",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a898e285-3d82-4571-8fcd-822ddaccbe37",
        "cursor": {
          "ref": "caf04f79-0a4e-450c-8a1d-ff239f3f31c0",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "5f7066ef-6d8d-4329-8fdb-ab5de3704ad8"
        },
        "item": {
          "id": "a898e285-3d82-4571-8fcd-822ddaccbe37",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "bdeb7ffe-7b61-4538-9260-25fc1df52b84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a898e285-3d82-4571-8fcd-822ddaccbe37",
        "cursor": {
          "ref": "caf04f79-0a4e-450c-8a1d-ff239f3f31c0",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "5f7066ef-6d8d-4329-8fdb-ab5de3704ad8"
        },
        "item": {
          "id": "a898e285-3d82-4571-8fcd-822ddaccbe37",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "bdeb7ffe-7b61-4538-9260-25fc1df52b84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dbde40e-ac10-4a69-b291-5acf259076f1",
        "cursor": {
          "ref": "9cd3bdaa-b10e-4c0b-ae51-66f76664ecae",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "fa16013f-a640-434e-a4aa-f2bf0b81d99e"
        },
        "item": {
          "id": "8dbde40e-ac10-4a69-b291-5acf259076f1",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "af7bb35e-6479-461f-a75d-f2856d1b1049",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dbde40e-ac10-4a69-b291-5acf259076f1",
        "cursor": {
          "ref": "9cd3bdaa-b10e-4c0b-ae51-66f76664ecae",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "fa16013f-a640-434e-a4aa-f2bf0b81d99e"
        },
        "item": {
          "id": "8dbde40e-ac10-4a69-b291-5acf259076f1",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "af7bb35e-6479-461f-a75d-f2856d1b1049",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39c3a599-e025-4d90-af88-1edc81f793da",
        "cursor": {
          "ref": "104ea923-86c7-4040-b0cc-d15aa8c2ab73",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8d9f3d53-42c0-4ad7-ba79-80026c312b4c"
        },
        "item": {
          "id": "39c3a599-e025-4d90-af88-1edc81f793da",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "28b86ddb-5224-41f2-828e-347a0558aa07",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39c3a599-e025-4d90-af88-1edc81f793da",
        "cursor": {
          "ref": "104ea923-86c7-4040-b0cc-d15aa8c2ab73",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8d9f3d53-42c0-4ad7-ba79-80026c312b4c"
        },
        "item": {
          "id": "39c3a599-e025-4d90-af88-1edc81f793da",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "28b86ddb-5224-41f2-828e-347a0558aa07",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b6837ad-d625-48bb-800a-eef872e0725e",
        "cursor": {
          "ref": "158caf9e-12ae-4361-aedf-93dbf296d160",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ffe1ed43-b5dd-442f-a2ec-31d7a0d070a0"
        },
        "item": {
          "id": "8b6837ad-d625-48bb-800a-eef872e0725e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d1d307e5-4ccb-4884-b77d-5df4e972bf86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b6837ad-d625-48bb-800a-eef872e0725e",
        "cursor": {
          "ref": "158caf9e-12ae-4361-aedf-93dbf296d160",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ffe1ed43-b5dd-442f-a2ec-31d7a0d070a0"
        },
        "item": {
          "id": "8b6837ad-d625-48bb-800a-eef872e0725e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d1d307e5-4ccb-4884-b77d-5df4e972bf86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a53ac1e-fbb2-4d41-88e1-13d5ca485675",
        "cursor": {
          "ref": "ad87f61c-56c2-488e-9e05-daa184b52700",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "0e480c14-f881-49a3-99a0-7739b2a7af20"
        },
        "item": {
          "id": "8a53ac1e-fbb2-4d41-88e1-13d5ca485675",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d70e22af-5f8f-49d8-92e4-808e2eda8a6e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a53ac1e-fbb2-4d41-88e1-13d5ca485675",
        "cursor": {
          "ref": "ad87f61c-56c2-488e-9e05-daa184b52700",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "0e480c14-f881-49a3-99a0-7739b2a7af20"
        },
        "item": {
          "id": "8a53ac1e-fbb2-4d41-88e1-13d5ca485675",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d70e22af-5f8f-49d8-92e4-808e2eda8a6e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f66e6965-9fa3-424f-b645-a01fd6bb55d8",
        "cursor": {
          "ref": "99925944-44ca-4fef-892d-397526faa15d",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "6bbf2ac7-484d-4c91-a28a-bbf774893e3c"
        },
        "item": {
          "id": "f66e6965-9fa3-424f-b645-a01fd6bb55d8",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f20a3495-c205-4bab-99fa-662eb853d089",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f66e6965-9fa3-424f-b645-a01fd6bb55d8",
        "cursor": {
          "ref": "99925944-44ca-4fef-892d-397526faa15d",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "6bbf2ac7-484d-4c91-a28a-bbf774893e3c"
        },
        "item": {
          "id": "f66e6965-9fa3-424f-b645-a01fd6bb55d8",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f20a3495-c205-4bab-99fa-662eb853d089",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b51bac8-c4f8-4580-b931-6b07c35c73ca",
        "cursor": {
          "ref": "463a0a0a-556b-48fe-9a84-b54220862ca7",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "e54bfe44-d18f-41f3-aaa2-533b48a92847"
        },
        "item": {
          "id": "0b51bac8-c4f8-4580-b931-6b07c35c73ca",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0e70e4b6-b80f-4b73-87e2-bd2bd74b4e4e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b51bac8-c4f8-4580-b931-6b07c35c73ca",
        "cursor": {
          "ref": "463a0a0a-556b-48fe-9a84-b54220862ca7",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "e54bfe44-d18f-41f3-aaa2-533b48a92847"
        },
        "item": {
          "id": "0b51bac8-c4f8-4580-b931-6b07c35c73ca",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0e70e4b6-b80f-4b73-87e2-bd2bd74b4e4e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf93f7a-8ee8-4a87-9cba-06d14796eb60",
        "cursor": {
          "ref": "23a87f9e-6cf8-4393-9bbc-df3b8c0d1423",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a52c3684-cc88-4aeb-8e32-db3cdec1499f"
        },
        "item": {
          "id": "6cf93f7a-8ee8-4a87-9cba-06d14796eb60",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "714ab573-c658-44b9-a6e6-03faba27d5a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf93f7a-8ee8-4a87-9cba-06d14796eb60",
        "cursor": {
          "ref": "23a87f9e-6cf8-4393-9bbc-df3b8c0d1423",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a52c3684-cc88-4aeb-8e32-db3cdec1499f"
        },
        "item": {
          "id": "6cf93f7a-8ee8-4a87-9cba-06d14796eb60",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "714ab573-c658-44b9-a6e6-03faba27d5a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2d4aa4e-016b-452c-bc07-af877b1dcc50",
        "cursor": {
          "ref": "212ce21f-6bd7-4284-a5d7-21e5d8415524",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "d9a571ed-8d09-46e5-bfa0-abfd7b0230c8"
        },
        "item": {
          "id": "b2d4aa4e-016b-452c-bc07-af877b1dcc50",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4519801d-af80-4492-98c5-fefe6d2d1b0c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2d4aa4e-016b-452c-bc07-af877b1dcc50",
        "cursor": {
          "ref": "212ce21f-6bd7-4284-a5d7-21e5d8415524",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "d9a571ed-8d09-46e5-bfa0-abfd7b0230c8"
        },
        "item": {
          "id": "b2d4aa4e-016b-452c-bc07-af877b1dcc50",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4519801d-af80-4492-98c5-fefe6d2d1b0c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5aef4b4-c4d5-4520-b085-a954eab69c66",
        "cursor": {
          "ref": "359ac826-b2eb-43f9-a44f-a6088a78edb7",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "78a9483e-ac4d-44c5-9a94-935ec42d9706"
        },
        "item": {
          "id": "b5aef4b4-c4d5-4520-b085-a954eab69c66",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2ab6f258-011c-4cb6-afc3-3c92caa964f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5aef4b4-c4d5-4520-b085-a954eab69c66",
        "cursor": {
          "ref": "359ac826-b2eb-43f9-a44f-a6088a78edb7",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "78a9483e-ac4d-44c5-9a94-935ec42d9706"
        },
        "item": {
          "id": "b5aef4b4-c4d5-4520-b085-a954eab69c66",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2ab6f258-011c-4cb6-afc3-3c92caa964f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1e6829f-507d-46f1-aa66-f0fd5976d29b",
        "cursor": {
          "ref": "5d0200bf-b3f6-4694-9b3e-30f93f2b60b4",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "69795334-c7db-47df-916c-c34daa53f105"
        },
        "item": {
          "id": "a1e6829f-507d-46f1-aa66-f0fd5976d29b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "417c5490-251c-45c9-a091-d8befac4c605",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1e6829f-507d-46f1-aa66-f0fd5976d29b",
        "cursor": {
          "ref": "5d0200bf-b3f6-4694-9b3e-30f93f2b60b4",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "69795334-c7db-47df-916c-c34daa53f105"
        },
        "item": {
          "id": "a1e6829f-507d-46f1-aa66-f0fd5976d29b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "417c5490-251c-45c9-a091-d8befac4c605",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecfba692-9f5d-4418-9ad5-c7b9e6f515a9",
        "cursor": {
          "ref": "80e062fe-f92e-44f1-91d1-eabd8e973c1a",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b6ce593b-0bef-4062-8a9e-52e550ea1f9f"
        },
        "item": {
          "id": "ecfba692-9f5d-4418-9ad5-c7b9e6f515a9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "fc46e73c-dd45-4ef8-bc4e-c6e564e89deb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecfba692-9f5d-4418-9ad5-c7b9e6f515a9",
        "cursor": {
          "ref": "80e062fe-f92e-44f1-91d1-eabd8e973c1a",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b6ce593b-0bef-4062-8a9e-52e550ea1f9f"
        },
        "item": {
          "id": "ecfba692-9f5d-4418-9ad5-c7b9e6f515a9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "fc46e73c-dd45-4ef8-bc4e-c6e564e89deb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9bab201-2aed-4697-9a71-1ca7c6180ddd",
        "cursor": {
          "ref": "70b61c24-e17b-4249-b7be-2184268ed058",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c6775f81-0b8a-48b3-9a12-89f81ff81c82"
        },
        "item": {
          "id": "f9bab201-2aed-4697-9a71-1ca7c6180ddd",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a61a23ee-4237-417b-8038-4dbc551ebb22",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9bab201-2aed-4697-9a71-1ca7c6180ddd",
        "cursor": {
          "ref": "70b61c24-e17b-4249-b7be-2184268ed058",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c6775f81-0b8a-48b3-9a12-89f81ff81c82"
        },
        "item": {
          "id": "f9bab201-2aed-4697-9a71-1ca7c6180ddd",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a61a23ee-4237-417b-8038-4dbc551ebb22",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaa542ee-9090-4645-9a5b-1d5ad95a37bf",
        "cursor": {
          "ref": "bcfe5a8d-3695-4c0b-965e-02533aea46f6",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "9739e9c8-cd9d-46bf-b307-cf87cbcc1509"
        },
        "item": {
          "id": "eaa542ee-9090-4645-9a5b-1d5ad95a37bf",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b338026d-78f2-4e18-9a3a-8c3f916fb3f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaa542ee-9090-4645-9a5b-1d5ad95a37bf",
        "cursor": {
          "ref": "bcfe5a8d-3695-4c0b-965e-02533aea46f6",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "9739e9c8-cd9d-46bf-b307-cf87cbcc1509"
        },
        "item": {
          "id": "eaa542ee-9090-4645-9a5b-1d5ad95a37bf",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b338026d-78f2-4e18-9a3a-8c3f916fb3f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6cd6bcd-69d1-4894-9db6-f66d51761390",
        "cursor": {
          "ref": "f0befac4-cfd6-4501-9c41-06c4cbec675a",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a700ab7a-ba4a-472a-ab00-ecf162285d77"
        },
        "item": {
          "id": "f6cd6bcd-69d1-4894-9db6-f66d51761390",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6afd831c-be58-4f6e-9138-fa7120c5b82f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6cd6bcd-69d1-4894-9db6-f66d51761390",
        "cursor": {
          "ref": "f0befac4-cfd6-4501-9c41-06c4cbec675a",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a700ab7a-ba4a-472a-ab00-ecf162285d77"
        },
        "item": {
          "id": "f6cd6bcd-69d1-4894-9db6-f66d51761390",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6afd831c-be58-4f6e-9138-fa7120c5b82f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15b9b541-8088-4a4a-a674-b20ec82ac875",
        "cursor": {
          "ref": "c7945795-6095-4d4b-9fab-60e19ff4535a",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b26c3b61-459e-4843-92e6-7904b8c43c8d"
        },
        "item": {
          "id": "15b9b541-8088-4a4a-a674-b20ec82ac875",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d4d5818d-dded-4cd8-ae6f-5a3de3f80116",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15b9b541-8088-4a4a-a674-b20ec82ac875",
        "cursor": {
          "ref": "c7945795-6095-4d4b-9fab-60e19ff4535a",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b26c3b61-459e-4843-92e6-7904b8c43c8d"
        },
        "item": {
          "id": "15b9b541-8088-4a4a-a674-b20ec82ac875",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d4d5818d-dded-4cd8-ae6f-5a3de3f80116",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fdf6386-c492-4f83-9bfd-d2ae5dc4bf62",
        "cursor": {
          "ref": "45b19572-2ef8-4138-a011-e598229f676c",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "520ef103-d923-4c36-a7a6-599c1bc4f8e4"
        },
        "item": {
          "id": "1fdf6386-c492-4f83-9bfd-d2ae5dc4bf62",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5359f434-ee99-4a67-b235-078b318a7925",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fdf6386-c492-4f83-9bfd-d2ae5dc4bf62",
        "cursor": {
          "ref": "45b19572-2ef8-4138-a011-e598229f676c",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "520ef103-d923-4c36-a7a6-599c1bc4f8e4"
        },
        "item": {
          "id": "1fdf6386-c492-4f83-9bfd-d2ae5dc4bf62",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5359f434-ee99-4a67-b235-078b318a7925",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "620dc9d2-5708-4917-b09e-428bdf1fb952",
        "cursor": {
          "ref": "5d52ad58-458b-4bbd-999b-030ccbcbba5b",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "4888de6a-b2ac-4291-9be9-be422f5f9b01"
        },
        "item": {
          "id": "620dc9d2-5708-4917-b09e-428bdf1fb952",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "db7bc4ad-1dc9-4db1-93e7-69a228188c5a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "620dc9d2-5708-4917-b09e-428bdf1fb952",
        "cursor": {
          "ref": "5d52ad58-458b-4bbd-999b-030ccbcbba5b",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "4888de6a-b2ac-4291-9be9-be422f5f9b01"
        },
        "item": {
          "id": "620dc9d2-5708-4917-b09e-428bdf1fb952",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "db7bc4ad-1dc9-4db1-93e7-69a228188c5a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7217588c-6532-425b-ab50-68038b94054f",
        "cursor": {
          "ref": "7b79697c-1930-4f64-b57d-ffa09b64186a",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "e65feed7-55a5-4909-ad34-842dbe928826"
        },
        "item": {
          "id": "7217588c-6532-425b-ab50-68038b94054f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d4317b94-9171-4439-9010-e6e7e8053f04",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7217588c-6532-425b-ab50-68038b94054f",
        "cursor": {
          "ref": "7b79697c-1930-4f64-b57d-ffa09b64186a",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "e65feed7-55a5-4909-ad34-842dbe928826"
        },
        "item": {
          "id": "7217588c-6532-425b-ab50-68038b94054f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d4317b94-9171-4439-9010-e6e7e8053f04",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f802f1-0696-42b5-9cf1-cff64dc017ec",
        "cursor": {
          "ref": "71fb5041-2f4b-4a3c-8832-93114ff497ac",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "cbe210c3-d829-4c23-a69b-da5102541d05"
        },
        "item": {
          "id": "81f802f1-0696-42b5-9cf1-cff64dc017ec",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c162cc0e-c01d-4b2c-9c57-84c57576cb52",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f802f1-0696-42b5-9cf1-cff64dc017ec",
        "cursor": {
          "ref": "71fb5041-2f4b-4a3c-8832-93114ff497ac",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "cbe210c3-d829-4c23-a69b-da5102541d05"
        },
        "item": {
          "id": "81f802f1-0696-42b5-9cf1-cff64dc017ec",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c162cc0e-c01d-4b2c-9c57-84c57576cb52",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbce668f-b3c9-40af-95ad-7867575147ad",
        "cursor": {
          "ref": "78e14af9-f7d1-4853-b41a-31a26913eb34",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "363e64e9-527a-4c8b-8bc7-770dd6fbbc2f"
        },
        "item": {
          "id": "fbce668f-b3c9-40af-95ad-7867575147ad",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b21cd746-5efd-424f-b230-26db9b6e5336",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbce668f-b3c9-40af-95ad-7867575147ad",
        "cursor": {
          "ref": "78e14af9-f7d1-4853-b41a-31a26913eb34",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "363e64e9-527a-4c8b-8bc7-770dd6fbbc2f"
        },
        "item": {
          "id": "fbce668f-b3c9-40af-95ad-7867575147ad",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b21cd746-5efd-424f-b230-26db9b6e5336",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1858cdb-e8d3-46ac-bce4-3454d12402f8",
        "cursor": {
          "ref": "41067d69-a366-4e98-82ae-03f0294a3027",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "db975425-c5c7-408f-97e4-b4267eb78f70"
        },
        "item": {
          "id": "c1858cdb-e8d3-46ac-bce4-3454d12402f8",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "91dc18e9-284d-487c-a2d5-2fa41edaa75c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1858cdb-e8d3-46ac-bce4-3454d12402f8",
        "cursor": {
          "ref": "41067d69-a366-4e98-82ae-03f0294a3027",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "db975425-c5c7-408f-97e4-b4267eb78f70"
        },
        "item": {
          "id": "c1858cdb-e8d3-46ac-bce4-3454d12402f8",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "91dc18e9-284d-487c-a2d5-2fa41edaa75c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aead0f9-3b4c-4ada-9655-d354abb8f7d4",
        "cursor": {
          "ref": "6f6b8964-f1c5-44a9-9609-9ed09532dc9f",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "dc1cb2c3-e4be-494a-9aad-919f087527de"
        },
        "item": {
          "id": "1aead0f9-3b4c-4ada-9655-d354abb8f7d4",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2166cf32-22a7-47cf-af68-f21cf1da330b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aead0f9-3b4c-4ada-9655-d354abb8f7d4",
        "cursor": {
          "ref": "6f6b8964-f1c5-44a9-9609-9ed09532dc9f",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "dc1cb2c3-e4be-494a-9aad-919f087527de"
        },
        "item": {
          "id": "1aead0f9-3b4c-4ada-9655-d354abb8f7d4",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2166cf32-22a7-47cf-af68-f21cf1da330b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c27805fc-72d0-4557-8da2-432154fc2b52",
        "cursor": {
          "ref": "372b00ed-9020-4446-89c2-c17926e85e60",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "9aaee8f8-2b38-4560-93f8-beba21c41095"
        },
        "item": {
          "id": "c27805fc-72d0-4557-8da2-432154fc2b52",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e8d8c683-202b-4ff5-8c34-aecaff434212",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c27805fc-72d0-4557-8da2-432154fc2b52",
        "cursor": {
          "ref": "372b00ed-9020-4446-89c2-c17926e85e60",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "9aaee8f8-2b38-4560-93f8-beba21c41095"
        },
        "item": {
          "id": "c27805fc-72d0-4557-8da2-432154fc2b52",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e8d8c683-202b-4ff5-8c34-aecaff434212",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a608ad6e-9fbe-4e23-8a13-a945ac3432e1",
        "cursor": {
          "ref": "1ba47084-ed03-420e-92b4-614cb3681878",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "22034f96-c694-4bfa-a762-9581f944312e"
        },
        "item": {
          "id": "a608ad6e-9fbe-4e23-8a13-a945ac3432e1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a1c85169-5a83-4d23-aaa0-00cca9d86336",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a608ad6e-9fbe-4e23-8a13-a945ac3432e1",
        "cursor": {
          "ref": "1ba47084-ed03-420e-92b4-614cb3681878",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "22034f96-c694-4bfa-a762-9581f944312e"
        },
        "item": {
          "id": "a608ad6e-9fbe-4e23-8a13-a945ac3432e1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a1c85169-5a83-4d23-aaa0-00cca9d86336",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de701f95-2bbc-48eb-ad51-5a1ab2709991",
        "cursor": {
          "ref": "6a04f20f-ac9a-4dcf-b10f-a79e763edc8e",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "cc49f94c-0e03-451f-9a93-786787615471"
        },
        "item": {
          "id": "de701f95-2bbc-48eb-ad51-5a1ab2709991",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ed33495d-8211-4cc8-b1e7-afaebaac7a23",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de701f95-2bbc-48eb-ad51-5a1ab2709991",
        "cursor": {
          "ref": "6a04f20f-ac9a-4dcf-b10f-a79e763edc8e",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "cc49f94c-0e03-451f-9a93-786787615471"
        },
        "item": {
          "id": "de701f95-2bbc-48eb-ad51-5a1ab2709991",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ed33495d-8211-4cc8-b1e7-afaebaac7a23",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27299bdf-8971-4039-abe1-38467f8ea32e",
        "cursor": {
          "ref": "e7f7240a-da17-4b08-9e67-9a61aa8bdc05",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "0ccb5ff9-d6c6-476c-93e8-5fc29900c648"
        },
        "item": {
          "id": "27299bdf-8971-4039-abe1-38467f8ea32e",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "efcc2728-c65a-46a2-9407-b3cb90a0ecc9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27299bdf-8971-4039-abe1-38467f8ea32e",
        "cursor": {
          "ref": "e7f7240a-da17-4b08-9e67-9a61aa8bdc05",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "0ccb5ff9-d6c6-476c-93e8-5fc29900c648"
        },
        "item": {
          "id": "27299bdf-8971-4039-abe1-38467f8ea32e",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "efcc2728-c65a-46a2-9407-b3cb90a0ecc9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f34af1b2-d39b-4d32-80ae-d29c53311e94",
        "cursor": {
          "ref": "33014e5f-2009-415f-8211-00beab3edbc1",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "517cd7e8-4625-4a48-8989-d4792f2cb2c1"
        },
        "item": {
          "id": "f34af1b2-d39b-4d32-80ae-d29c53311e94",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "b9666a3c-72d2-4b12-a801-125700f5f5da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f34af1b2-d39b-4d32-80ae-d29c53311e94",
        "cursor": {
          "ref": "33014e5f-2009-415f-8211-00beab3edbc1",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "517cd7e8-4625-4a48-8989-d4792f2cb2c1"
        },
        "item": {
          "id": "f34af1b2-d39b-4d32-80ae-d29c53311e94",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "b9666a3c-72d2-4b12-a801-125700f5f5da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e182775-2847-4a25-9f81-22a87f8939bb",
        "cursor": {
          "ref": "ce21bd55-d164-4ad7-813c-bb011550994d",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "14315b39-29bc-4e85-a17a-a43fe58b2efc"
        },
        "item": {
          "id": "4e182775-2847-4a25-9f81-22a87f8939bb",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "62237e81-21fd-465a-8723-bf03075b352c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e182775-2847-4a25-9f81-22a87f8939bb",
        "cursor": {
          "ref": "ce21bd55-d164-4ad7-813c-bb011550994d",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "14315b39-29bc-4e85-a17a-a43fe58b2efc"
        },
        "item": {
          "id": "4e182775-2847-4a25-9f81-22a87f8939bb",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "62237e81-21fd-465a-8723-bf03075b352c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91480123-bfb9-4630-b65c-ab0f55667245",
        "cursor": {
          "ref": "743f7bc6-f0c4-4201-8dfd-9d52f5550e0f",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "73993ab6-af01-4a91-9a35-a3b1be1a70d8"
        },
        "item": {
          "id": "91480123-bfb9-4630-b65c-ab0f55667245",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "50bd8dc7-0723-4949-ae32-a19bbacfdb18",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91480123-bfb9-4630-b65c-ab0f55667245",
        "cursor": {
          "ref": "743f7bc6-f0c4-4201-8dfd-9d52f5550e0f",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "73993ab6-af01-4a91-9a35-a3b1be1a70d8"
        },
        "item": {
          "id": "91480123-bfb9-4630-b65c-ab0f55667245",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "50bd8dc7-0723-4949-ae32-a19bbacfdb18",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f59085d-483f-45f5-b925-b86afd0fdbee",
        "cursor": {
          "ref": "67ddc31c-9b9a-4578-930e-4362edd325ee",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "734ae4f0-25f8-4570-a55c-2bd5c8b3cfe1"
        },
        "item": {
          "id": "9f59085d-483f-45f5-b925-b86afd0fdbee",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "cdefd630-f8a2-4473-bb69-8f928894492b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f59085d-483f-45f5-b925-b86afd0fdbee",
        "cursor": {
          "ref": "67ddc31c-9b9a-4578-930e-4362edd325ee",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "734ae4f0-25f8-4570-a55c-2bd5c8b3cfe1"
        },
        "item": {
          "id": "9f59085d-483f-45f5-b925-b86afd0fdbee",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "cdefd630-f8a2-4473-bb69-8f928894492b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6e721d-38f0-4c60-8a0b-f396c138f807",
        "cursor": {
          "ref": "f5278ac7-cdb4-4896-95a2-6ea97966d7af",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "5e6fca04-9f4a-47a4-96e1-54de7d698289"
        },
        "item": {
          "id": "9e6e721d-38f0-4c60-8a0b-f396c138f807",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "0243ddf0-de92-4dcb-bc24-4801b29d404c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6e721d-38f0-4c60-8a0b-f396c138f807",
        "cursor": {
          "ref": "f5278ac7-cdb4-4896-95a2-6ea97966d7af",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "5e6fca04-9f4a-47a4-96e1-54de7d698289"
        },
        "item": {
          "id": "9e6e721d-38f0-4c60-8a0b-f396c138f807",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "0243ddf0-de92-4dcb-bc24-4801b29d404c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a718049-acef-49a0-b974-e1a878e2ce6a",
        "cursor": {
          "ref": "8da053ea-e9a3-4348-af0f-b0ffc37623d0",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f6727e43-1f37-49b5-b251-413281e893a1"
        },
        "item": {
          "id": "6a718049-acef-49a0-b974-e1a878e2ce6a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "03da41e1-686d-420e-b0ca-bd155d6c5510",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a718049-acef-49a0-b974-e1a878e2ce6a",
        "cursor": {
          "ref": "8da053ea-e9a3-4348-af0f-b0ffc37623d0",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f6727e43-1f37-49b5-b251-413281e893a1"
        },
        "item": {
          "id": "6a718049-acef-49a0-b974-e1a878e2ce6a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "03da41e1-686d-420e-b0ca-bd155d6c5510",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24d5df2-11e5-4ae6-8d90-ac64e5f3a0b3",
        "cursor": {
          "ref": "019d68d5-c990-4fb3-8eee-8a230cd4e6bd",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a8deb8e1-7ee5-4b6a-9dbd-e37bb8e73931"
        },
        "item": {
          "id": "f24d5df2-11e5-4ae6-8d90-ac64e5f3a0b3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a2768049-1e32-4d4a-a172-5c978f81daf6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24d5df2-11e5-4ae6-8d90-ac64e5f3a0b3",
        "cursor": {
          "ref": "019d68d5-c990-4fb3-8eee-8a230cd4e6bd",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a8deb8e1-7ee5-4b6a-9dbd-e37bb8e73931"
        },
        "item": {
          "id": "f24d5df2-11e5-4ae6-8d90-ac64e5f3a0b3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a2768049-1e32-4d4a-a172-5c978f81daf6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8034ec2-cbb5-4ef0-ade8-3e03c224c717",
        "cursor": {
          "ref": "ae777362-bf5f-421c-924c-3e58b8085cb3",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "90029d90-9016-4dd8-8e6d-974b73860870"
        },
        "item": {
          "id": "b8034ec2-cbb5-4ef0-ade8-3e03c224c717",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "05138e2f-2216-4483-99de-3e82b8cfeecc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8034ec2-cbb5-4ef0-ade8-3e03c224c717",
        "cursor": {
          "ref": "ae777362-bf5f-421c-924c-3e58b8085cb3",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "90029d90-9016-4dd8-8e6d-974b73860870"
        },
        "item": {
          "id": "b8034ec2-cbb5-4ef0-ade8-3e03c224c717",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "05138e2f-2216-4483-99de-3e82b8cfeecc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f99ef5da-36bf-45f7-9639-6894838e5dcb",
        "cursor": {
          "ref": "aa5912b7-10ed-4b36-bd33-7d336ef9b6c3",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "b54209ee-ad90-4368-aeb1-136646913014"
        },
        "item": {
          "id": "f99ef5da-36bf-45f7-9639-6894838e5dcb",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "c4160a51-b457-4379-be97-46ee2b3c3467",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f99ef5da-36bf-45f7-9639-6894838e5dcb",
        "cursor": {
          "ref": "aa5912b7-10ed-4b36-bd33-7d336ef9b6c3",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "b54209ee-ad90-4368-aeb1-136646913014"
        },
        "item": {
          "id": "f99ef5da-36bf-45f7-9639-6894838e5dcb",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "c4160a51-b457-4379-be97-46ee2b3c3467",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04223992-7f26-49a2-acbb-a5dada9655fe",
        "cursor": {
          "ref": "51f2f345-af00-4368-923d-683247367ae0",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "83e9e558-3283-4b4e-a9c9-1b85c0fe9956"
        },
        "item": {
          "id": "04223992-7f26-49a2-acbb-a5dada9655fe",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b02db805-e7e9-4ceb-8731-c4cb1bd6b745",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04223992-7f26-49a2-acbb-a5dada9655fe",
        "cursor": {
          "ref": "51f2f345-af00-4368-923d-683247367ae0",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "83e9e558-3283-4b4e-a9c9-1b85c0fe9956"
        },
        "item": {
          "id": "04223992-7f26-49a2-acbb-a5dada9655fe",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b02db805-e7e9-4ceb-8731-c4cb1bd6b745",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab5ac61a-6d62-4f26-adac-ae232df4e66a",
        "cursor": {
          "ref": "d0eff3f0-f4fa-42f9-81fa-6e7656ec34ca",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "22510a1f-46dd-4bba-a416-7ceca7a1bec2"
        },
        "item": {
          "id": "ab5ac61a-6d62-4f26-adac-ae232df4e66a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f46169e1-4ada-4e34-bde6-07e77e3d9130",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab5ac61a-6d62-4f26-adac-ae232df4e66a",
        "cursor": {
          "ref": "d0eff3f0-f4fa-42f9-81fa-6e7656ec34ca",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "22510a1f-46dd-4bba-a416-7ceca7a1bec2"
        },
        "item": {
          "id": "ab5ac61a-6d62-4f26-adac-ae232df4e66a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f46169e1-4ada-4e34-bde6-07e77e3d9130",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffe8bfd8-8a2f-4168-bcda-345629925cb0",
        "cursor": {
          "ref": "1e3756db-ac90-4b6c-b82c-342f28a61dfc",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ad9f5f0f-598a-4fbe-bbf6-7df815a6af9b"
        },
        "item": {
          "id": "ffe8bfd8-8a2f-4168-bcda-345629925cb0",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "fb7f3ae1-fd23-457d-8a29-8c9fe82d2647",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffe8bfd8-8a2f-4168-bcda-345629925cb0",
        "cursor": {
          "ref": "1e3756db-ac90-4b6c-b82c-342f28a61dfc",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ad9f5f0f-598a-4fbe-bbf6-7df815a6af9b"
        },
        "item": {
          "id": "ffe8bfd8-8a2f-4168-bcda-345629925cb0",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "fb7f3ae1-fd23-457d-8a29-8c9fe82d2647",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c0f6e8-8882-4ecf-ba19-3dbc2172ea50",
        "cursor": {
          "ref": "2070ec61-edba-46c1-ac65-df913fba01a3",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "bbd29fb2-ba4d-4dff-a38a-ca68ccc0b11f"
        },
        "item": {
          "id": "e1c0f6e8-8882-4ecf-ba19-3dbc2172ea50",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "c558c411-c359-41d3-a9b5-c07399fdd00a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c0f6e8-8882-4ecf-ba19-3dbc2172ea50",
        "cursor": {
          "ref": "2070ec61-edba-46c1-ac65-df913fba01a3",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "bbd29fb2-ba4d-4dff-a38a-ca68ccc0b11f"
        },
        "item": {
          "id": "e1c0f6e8-8882-4ecf-ba19-3dbc2172ea50",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "c558c411-c359-41d3-a9b5-c07399fdd00a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf93dca4-a0dd-4b7b-b1de-63fcffd06f53",
        "cursor": {
          "ref": "9ad25d7b-db8d-44b8-b684-7f9a1d10d5cc",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "9b8bcc61-db4d-46ba-88f7-ceca55734144"
        },
        "item": {
          "id": "bf93dca4-a0dd-4b7b-b1de-63fcffd06f53",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "09e4679c-ab19-421e-b57b-62dee94508c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf93dca4-a0dd-4b7b-b1de-63fcffd06f53",
        "cursor": {
          "ref": "9ad25d7b-db8d-44b8-b684-7f9a1d10d5cc",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "9b8bcc61-db4d-46ba-88f7-ceca55734144"
        },
        "item": {
          "id": "bf93dca4-a0dd-4b7b-b1de-63fcffd06f53",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "09e4679c-ab19-421e-b57b-62dee94508c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f40f68e-3466-4edf-aa69-bb91b7c40472",
        "cursor": {
          "ref": "c8a9bba3-46c1-4592-b385-14306370d6de",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "520f5412-ae2e-4774-b87c-9d61d80625ee"
        },
        "item": {
          "id": "4f40f68e-3466-4edf-aa69-bb91b7c40472",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "6c3b3075-7ad4-49e2-89bb-c851d2246f14",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f40f68e-3466-4edf-aa69-bb91b7c40472",
        "cursor": {
          "ref": "c8a9bba3-46c1-4592-b385-14306370d6de",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "520f5412-ae2e-4774-b87c-9d61d80625ee"
        },
        "item": {
          "id": "4f40f68e-3466-4edf-aa69-bb91b7c40472",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "6c3b3075-7ad4-49e2-89bb-c851d2246f14",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e187378-c9f0-429a-ac56-0f51405562cf",
        "cursor": {
          "ref": "0a9c7d89-de7a-4bd5-9786-02741a3a92d8",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "e1896656-6d28-4a23-b2e9-852a2c752b9f"
        },
        "item": {
          "id": "0e187378-c9f0-429a-ac56-0f51405562cf",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "067bdbf5-30d0-4752-968a-404c7d14ac14",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e187378-c9f0-429a-ac56-0f51405562cf",
        "cursor": {
          "ref": "0a9c7d89-de7a-4bd5-9786-02741a3a92d8",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "e1896656-6d28-4a23-b2e9-852a2c752b9f"
        },
        "item": {
          "id": "0e187378-c9f0-429a-ac56-0f51405562cf",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "067bdbf5-30d0-4752-968a-404c7d14ac14",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf210989-319a-469c-9a23-61a1a9075c5e",
        "cursor": {
          "ref": "193ffbf3-fd00-4517-a41f-7a206b777156",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "1a1d8163-6d04-479f-aa78-2d9604b2c5d4"
        },
        "item": {
          "id": "bf210989-319a-469c-9a23-61a1a9075c5e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "43d2316f-cd94-4775-a4bf-a17bfb497b7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf210989-319a-469c-9a23-61a1a9075c5e",
        "cursor": {
          "ref": "193ffbf3-fd00-4517-a41f-7a206b777156",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "1a1d8163-6d04-479f-aa78-2d9604b2c5d4"
        },
        "item": {
          "id": "bf210989-319a-469c-9a23-61a1a9075c5e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "43d2316f-cd94-4775-a4bf-a17bfb497b7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "577fb745-0dc9-4061-aa04-e84d3521e4d3",
        "cursor": {
          "ref": "2a45a469-870e-4848-a022-56b91b9c0665",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "f144ff79-fea5-4262-869f-6fffa8e6d8ee"
        },
        "item": {
          "id": "577fb745-0dc9-4061-aa04-e84d3521e4d3",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "3e06bb51-4e90-4b74-aef6-127cacb842e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "577fb745-0dc9-4061-aa04-e84d3521e4d3",
        "cursor": {
          "ref": "2a45a469-870e-4848-a022-56b91b9c0665",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "f144ff79-fea5-4262-869f-6fffa8e6d8ee"
        },
        "item": {
          "id": "577fb745-0dc9-4061-aa04-e84d3521e4d3",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "3e06bb51-4e90-4b74-aef6-127cacb842e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a05746-7427-4416-894f-fc0ff9a2b20b",
        "cursor": {
          "ref": "57de5cf7-413f-4be9-9fd0-fab6c9c79bb6",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "8f6ca8de-b77a-43fb-ab02-fc66e27fd8a9"
        },
        "item": {
          "id": "b2a05746-7427-4416-894f-fc0ff9a2b20b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "85778c6d-f65f-4712-878b-4d19d54de127",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a05746-7427-4416-894f-fc0ff9a2b20b",
        "cursor": {
          "ref": "57de5cf7-413f-4be9-9fd0-fab6c9c79bb6",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "8f6ca8de-b77a-43fb-ab02-fc66e27fd8a9"
        },
        "item": {
          "id": "b2a05746-7427-4416-894f-fc0ff9a2b20b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "85778c6d-f65f-4712-878b-4d19d54de127",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "581cc740-a338-46c5-a5ca-030d6f1734a4",
        "cursor": {
          "ref": "5843a5d1-5f63-47c3-904c-0c25b5c33001",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "03e20ddc-aca0-4c2c-9b17-2c2d7e2c322d"
        },
        "item": {
          "id": "581cc740-a338-46c5-a5ca-030d6f1734a4",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "28eeb376-1918-4080-8144-98a741588da0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "581cc740-a338-46c5-a5ca-030d6f1734a4",
        "cursor": {
          "ref": "5843a5d1-5f63-47c3-904c-0c25b5c33001",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "03e20ddc-aca0-4c2c-9b17-2c2d7e2c322d"
        },
        "item": {
          "id": "581cc740-a338-46c5-a5ca-030d6f1734a4",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "28eeb376-1918-4080-8144-98a741588da0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b36b8a7a-539c-49d4-b8b1-84b517be377d",
        "cursor": {
          "ref": "717a75fb-a118-4133-8af8-74ab3d13c317",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f7c458e9-7978-4584-91db-c0b0d018d25d"
        },
        "item": {
          "id": "b36b8a7a-539c-49d4-b8b1-84b517be377d",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "22baa004-37b5-4f86-8d35-b28539df9ed9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b36b8a7a-539c-49d4-b8b1-84b517be377d",
        "cursor": {
          "ref": "717a75fb-a118-4133-8af8-74ab3d13c317",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f7c458e9-7978-4584-91db-c0b0d018d25d"
        },
        "item": {
          "id": "b36b8a7a-539c-49d4-b8b1-84b517be377d",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "22baa004-37b5-4f86-8d35-b28539df9ed9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eae3d57-7da7-4b3e-b637-decd3edeacbe",
        "cursor": {
          "ref": "d99ab0f5-b35e-465a-b16d-3ee3e000c8c7",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "d8fa5da6-34ce-48f3-ac6b-7661a911ab55"
        },
        "item": {
          "id": "6eae3d57-7da7-4b3e-b637-decd3edeacbe",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "580811a4-a8ae-41f2-98e8-18e061c69e6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eae3d57-7da7-4b3e-b637-decd3edeacbe",
        "cursor": {
          "ref": "d99ab0f5-b35e-465a-b16d-3ee3e000c8c7",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "d8fa5da6-34ce-48f3-ac6b-7661a911ab55"
        },
        "item": {
          "id": "6eae3d57-7da7-4b3e-b637-decd3edeacbe",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "580811a4-a8ae-41f2-98e8-18e061c69e6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4521c82-2e19-4135-afd6-0878fdf12c39",
        "cursor": {
          "ref": "911a00ce-bc80-4306-b6b4-5089944fc27e",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a01f3bb9-c085-4428-a20f-778cc574a3af"
        },
        "item": {
          "id": "f4521c82-2e19-4135-afd6-0878fdf12c39",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e3141daf-851b-4157-a142-4a4ad11cb8a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4521c82-2e19-4135-afd6-0878fdf12c39",
        "cursor": {
          "ref": "911a00ce-bc80-4306-b6b4-5089944fc27e",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a01f3bb9-c085-4428-a20f-778cc574a3af"
        },
        "item": {
          "id": "f4521c82-2e19-4135-afd6-0878fdf12c39",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e3141daf-851b-4157-a142-4a4ad11cb8a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d30301d4-0de4-4561-bf4d-ac3740b0e510",
        "cursor": {
          "ref": "8a1d85f8-d80c-47e1-b389-b3560c7ec4e4",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "1637a584-f45c-470f-9199-40cc6af1adb6"
        },
        "item": {
          "id": "d30301d4-0de4-4561-bf4d-ac3740b0e510",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "ea605013-94a7-485f-bc9e-dc2f6e798e92",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d30301d4-0de4-4561-bf4d-ac3740b0e510",
        "cursor": {
          "ref": "8a1d85f8-d80c-47e1-b389-b3560c7ec4e4",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "1637a584-f45c-470f-9199-40cc6af1adb6"
        },
        "item": {
          "id": "d30301d4-0de4-4561-bf4d-ac3740b0e510",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "ea605013-94a7-485f-bc9e-dc2f6e798e92",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcf33124-88bb-47ba-9bc6-2cbd7b7f5ee3",
        "cursor": {
          "ref": "ac4831ce-df2e-4b29-8968-414eac33e0e5",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "96781990-5625-4a06-8c00-ce2155151721"
        },
        "item": {
          "id": "bcf33124-88bb-47ba-9bc6-2cbd7b7f5ee3",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ae9d6c7c-ebfb-4770-ab14-e3ec1fac772e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcf33124-88bb-47ba-9bc6-2cbd7b7f5ee3",
        "cursor": {
          "ref": "ac4831ce-df2e-4b29-8968-414eac33e0e5",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "96781990-5625-4a06-8c00-ce2155151721"
        },
        "item": {
          "id": "bcf33124-88bb-47ba-9bc6-2cbd7b7f5ee3",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ae9d6c7c-ebfb-4770-ab14-e3ec1fac772e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b66e56e7-3161-4e27-912f-ce21c8c47c73",
        "cursor": {
          "ref": "633e5fe3-9f57-4e35-a04e-8e414237dc4f",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "11f6b56f-735c-4312-83ed-484ea448c2e2"
        },
        "item": {
          "id": "b66e56e7-3161-4e27-912f-ce21c8c47c73",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "9d338e03-1108-4512-a74e-fab7cafecbe6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b66e56e7-3161-4e27-912f-ce21c8c47c73",
        "cursor": {
          "ref": "633e5fe3-9f57-4e35-a04e-8e414237dc4f",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "11f6b56f-735c-4312-83ed-484ea448c2e2"
        },
        "item": {
          "id": "b66e56e7-3161-4e27-912f-ce21c8c47c73",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "9d338e03-1108-4512-a74e-fab7cafecbe6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "419452be-be22-4277-acef-b7f8a6df1e0d",
        "cursor": {
          "ref": "7e17aa76-bd87-4845-ac98-9c339a4d1178",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f5b836d0-fa07-4b35-a1e3-90af7c1aea21"
        },
        "item": {
          "id": "419452be-be22-4277-acef-b7f8a6df1e0d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9c091f9d-163d-422e-b955-fcda44ed3401",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "419452be-be22-4277-acef-b7f8a6df1e0d",
        "cursor": {
          "ref": "7e17aa76-bd87-4845-ac98-9c339a4d1178",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f5b836d0-fa07-4b35-a1e3-90af7c1aea21"
        },
        "item": {
          "id": "419452be-be22-4277-acef-b7f8a6df1e0d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9c091f9d-163d-422e-b955-fcda44ed3401",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "032241bd-9de2-4f29-bf29-efec56c657a7",
        "cursor": {
          "ref": "62e8c820-e0e0-4991-98d0-faa3d26281ef",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ad3ca455-703e-4f12-9740-92425cd1d7e1"
        },
        "item": {
          "id": "032241bd-9de2-4f29-bf29-efec56c657a7",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "8da3d7f1-9af0-4ff6-936d-b1491b2aa326",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "032241bd-9de2-4f29-bf29-efec56c657a7",
        "cursor": {
          "ref": "62e8c820-e0e0-4991-98d0-faa3d26281ef",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ad3ca455-703e-4f12-9740-92425cd1d7e1"
        },
        "item": {
          "id": "032241bd-9de2-4f29-bf29-efec56c657a7",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "8da3d7f1-9af0-4ff6-936d-b1491b2aa326",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a96b8f4e-c46d-4544-a56e-fa6d9e3fa892",
        "cursor": {
          "ref": "55355061-daab-4926-b584-b51a23478d77",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9fdd6826-98c1-4efb-a7bd-c7d427973579"
        },
        "item": {
          "id": "a96b8f4e-c46d-4544-a56e-fa6d9e3fa892",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "82b4415e-0b6b-41b8-88c2-cafad75a205f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a96b8f4e-c46d-4544-a56e-fa6d9e3fa892",
        "cursor": {
          "ref": "55355061-daab-4926-b584-b51a23478d77",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9fdd6826-98c1-4efb-a7bd-c7d427973579"
        },
        "item": {
          "id": "a96b8f4e-c46d-4544-a56e-fa6d9e3fa892",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "82b4415e-0b6b-41b8-88c2-cafad75a205f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e491e310-0f40-42ee-a682-46c95ea7a192",
        "cursor": {
          "ref": "3000ff35-3372-49c6-8f75-f553794fe3e4",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "40e8fa1b-4e0c-48cc-a3cd-0533fc266bdc"
        },
        "item": {
          "id": "e491e310-0f40-42ee-a682-46c95ea7a192",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ea4187c3-35bb-4a6b-9205-a9d5e87f117f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e491e310-0f40-42ee-a682-46c95ea7a192",
        "cursor": {
          "ref": "3000ff35-3372-49c6-8f75-f553794fe3e4",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "40e8fa1b-4e0c-48cc-a3cd-0533fc266bdc"
        },
        "item": {
          "id": "e491e310-0f40-42ee-a682-46c95ea7a192",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ea4187c3-35bb-4a6b-9205-a9d5e87f117f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8496c495-4cdc-44d2-9eb4-c175b6e1b813",
        "cursor": {
          "ref": "f93301b6-dc33-4dbe-b82f-75f91b8a9427",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c656b3f2-b7a7-4778-9ad8-920dfa8c8006"
        },
        "item": {
          "id": "8496c495-4cdc-44d2-9eb4-c175b6e1b813",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ec0faa34-0ceb-4233-99c3-abe8413fd44b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8496c495-4cdc-44d2-9eb4-c175b6e1b813",
        "cursor": {
          "ref": "f93301b6-dc33-4dbe-b82f-75f91b8a9427",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c656b3f2-b7a7-4778-9ad8-920dfa8c8006"
        },
        "item": {
          "id": "8496c495-4cdc-44d2-9eb4-c175b6e1b813",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ec0faa34-0ceb-4233-99c3-abe8413fd44b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12388fc1-4df5-4be0-b227-55cfd6c28abe",
        "cursor": {
          "ref": "87dd84e5-2d75-4413-9171-7025b2b19529",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "dafe050f-4758-41ae-823a-12078fc24f23"
        },
        "item": {
          "id": "12388fc1-4df5-4be0-b227-55cfd6c28abe",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "828afa0d-ad80-4609-9463-daa4ee7dbe98",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12388fc1-4df5-4be0-b227-55cfd6c28abe",
        "cursor": {
          "ref": "87dd84e5-2d75-4413-9171-7025b2b19529",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "dafe050f-4758-41ae-823a-12078fc24f23"
        },
        "item": {
          "id": "12388fc1-4df5-4be0-b227-55cfd6c28abe",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "828afa0d-ad80-4609-9463-daa4ee7dbe98",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b51d6443-b9d1-4828-8760-b805e9a59682",
        "cursor": {
          "ref": "8a638a61-8db7-4f07-8458-6bc94dbaf012",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "b5ecd8d6-d2fd-4ea3-873c-fd5df52c94bf"
        },
        "item": {
          "id": "b51d6443-b9d1-4828-8760-b805e9a59682",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "da1cfdd0-6f6d-454e-8616-4d6d02ef5014",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b51d6443-b9d1-4828-8760-b805e9a59682",
        "cursor": {
          "ref": "8a638a61-8db7-4f07-8458-6bc94dbaf012",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "b5ecd8d6-d2fd-4ea3-873c-fd5df52c94bf"
        },
        "item": {
          "id": "b51d6443-b9d1-4828-8760-b805e9a59682",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "da1cfdd0-6f6d-454e-8616-4d6d02ef5014",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e4dd08-8643-453d-8f69-81e1b0450f7c",
        "cursor": {
          "ref": "8f04ab9a-87ec-43bd-b605-825bb067e700",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "09e45a9d-bd8b-48b9-99dd-efa5405ddc3f"
        },
        "item": {
          "id": "57e4dd08-8643-453d-8f69-81e1b0450f7c",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "027519a9-cd54-456a-9827-57a8be4f5de2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e4dd08-8643-453d-8f69-81e1b0450f7c",
        "cursor": {
          "ref": "8f04ab9a-87ec-43bd-b605-825bb067e700",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "09e45a9d-bd8b-48b9-99dd-efa5405ddc3f"
        },
        "item": {
          "id": "57e4dd08-8643-453d-8f69-81e1b0450f7c",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "027519a9-cd54-456a-9827-57a8be4f5de2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5104853e-878c-4c89-8814-bb5099858f2f",
        "cursor": {
          "ref": "3d95080e-c84f-45da-b2c7-be93fa1dbe68",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "86aa0ff6-b878-4838-8166-78ef7ec9ebd5"
        },
        "item": {
          "id": "5104853e-878c-4c89-8814-bb5099858f2f",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "fe5e8869-4e71-4773-a045-db6aad3169ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5104853e-878c-4c89-8814-bb5099858f2f",
        "cursor": {
          "ref": "3d95080e-c84f-45da-b2c7-be93fa1dbe68",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "86aa0ff6-b878-4838-8166-78ef7ec9ebd5"
        },
        "item": {
          "id": "5104853e-878c-4c89-8814-bb5099858f2f",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "fe5e8869-4e71-4773-a045-db6aad3169ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ced72aa0-ea5d-4353-94d4-a41c82096596",
        "cursor": {
          "ref": "bdbd40d6-09a8-41cc-8439-ddd52a378780",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ae8d51b3-8f69-45e0-be46-ccf996644669"
        },
        "item": {
          "id": "ced72aa0-ea5d-4353-94d4-a41c82096596",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2fc1ece4-bf17-47b7-954e-2ef5ce894566",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ced72aa0-ea5d-4353-94d4-a41c82096596",
        "cursor": {
          "ref": "bdbd40d6-09a8-41cc-8439-ddd52a378780",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ae8d51b3-8f69-45e0-be46-ccf996644669"
        },
        "item": {
          "id": "ced72aa0-ea5d-4353-94d4-a41c82096596",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2fc1ece4-bf17-47b7-954e-2ef5ce894566",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6107313d-2b9f-4727-9aeb-ca37e9dfd41d",
        "cursor": {
          "ref": "60c947b2-4932-42d8-bdb6-03434270f7ae",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "802356e4-5cde-4245-aecb-815325ebd5a0"
        },
        "item": {
          "id": "6107313d-2b9f-4727-9aeb-ca37e9dfd41d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b37521e9-4995-49a5-9fb0-d4e3ee475743",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6107313d-2b9f-4727-9aeb-ca37e9dfd41d",
        "cursor": {
          "ref": "60c947b2-4932-42d8-bdb6-03434270f7ae",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "802356e4-5cde-4245-aecb-815325ebd5a0"
        },
        "item": {
          "id": "6107313d-2b9f-4727-9aeb-ca37e9dfd41d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b37521e9-4995-49a5-9fb0-d4e3ee475743",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57b0fb7e-e23c-48f7-b4e9-5c0bd4238bc4",
        "cursor": {
          "ref": "803f976b-f368-4a6b-9a83-0ccaea8f1610",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "5b38cf72-575a-498f-8b52-2adfc94847e9"
        },
        "item": {
          "id": "57b0fb7e-e23c-48f7-b4e9-5c0bd4238bc4",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "403eabe6-1439-4818-9043-1b668b26fc39",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57b0fb7e-e23c-48f7-b4e9-5c0bd4238bc4",
        "cursor": {
          "ref": "803f976b-f368-4a6b-9a83-0ccaea8f1610",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "5b38cf72-575a-498f-8b52-2adfc94847e9"
        },
        "item": {
          "id": "57b0fb7e-e23c-48f7-b4e9-5c0bd4238bc4",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "403eabe6-1439-4818-9043-1b668b26fc39",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9cdf4e2-90ad-4671-807a-6ca80c1e620e",
        "cursor": {
          "ref": "cf578dc4-ae6e-40d0-9175-182d70fdd325",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "1ea71001-e887-4b77-ad25-f9f1772e6b82"
        },
        "item": {
          "id": "b9cdf4e2-90ad-4671-807a-6ca80c1e620e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "11103f5f-56a5-4792-9d8b-7f62e73a682f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9cdf4e2-90ad-4671-807a-6ca80c1e620e",
        "cursor": {
          "ref": "cf578dc4-ae6e-40d0-9175-182d70fdd325",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "1ea71001-e887-4b77-ad25-f9f1772e6b82"
        },
        "item": {
          "id": "b9cdf4e2-90ad-4671-807a-6ca80c1e620e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "11103f5f-56a5-4792-9d8b-7f62e73a682f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ba21c40-4e71-4c93-a532-3df0e9645401",
        "cursor": {
          "ref": "a73e942e-f2bc-4d8f-81a0-f913961ff2ca",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "c8abe763-b31d-43a6-8d46-d09eaf724d53"
        },
        "item": {
          "id": "5ba21c40-4e71-4c93-a532-3df0e9645401",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "13fdd33f-268a-4ae1-881c-f8af5f722272",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ba21c40-4e71-4c93-a532-3df0e9645401",
        "cursor": {
          "ref": "a73e942e-f2bc-4d8f-81a0-f913961ff2ca",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "c8abe763-b31d-43a6-8d46-d09eaf724d53"
        },
        "item": {
          "id": "5ba21c40-4e71-4c93-a532-3df0e9645401",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "13fdd33f-268a-4ae1-881c-f8af5f722272",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ad808e-51bb-4b89-9ef0-390bafd7f9f1",
        "cursor": {
          "ref": "a71ffc29-f94e-424a-976f-1f48f2bb84bd",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "4252fa73-c42d-4cac-956e-87337f901422"
        },
        "item": {
          "id": "47ad808e-51bb-4b89-9ef0-390bafd7f9f1",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e62e7bc5-6b53-42f9-b31a-366389dd8fc6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ad808e-51bb-4b89-9ef0-390bafd7f9f1",
        "cursor": {
          "ref": "a71ffc29-f94e-424a-976f-1f48f2bb84bd",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "4252fa73-c42d-4cac-956e-87337f901422"
        },
        "item": {
          "id": "47ad808e-51bb-4b89-9ef0-390bafd7f9f1",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e62e7bc5-6b53-42f9-b31a-366389dd8fc6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8618305-6373-439a-be19-9824e7e40e85",
        "cursor": {
          "ref": "544bead7-6224-4bbd-9b91-2c25526c44ab",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e526d7f1-3edd-4178-8bc1-1dce08e6dd9f"
        },
        "item": {
          "id": "a8618305-6373-439a-be19-9824e7e40e85",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "22624c6c-7e18-4f27-b21e-7dfd0609b95d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8618305-6373-439a-be19-9824e7e40e85",
        "cursor": {
          "ref": "544bead7-6224-4bbd-9b91-2c25526c44ab",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e526d7f1-3edd-4178-8bc1-1dce08e6dd9f"
        },
        "item": {
          "id": "a8618305-6373-439a-be19-9824e7e40e85",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "22624c6c-7e18-4f27-b21e-7dfd0609b95d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37a9b4ae-64f3-4101-a926-847a037f15e5",
        "cursor": {
          "ref": "92936a95-e1cb-47a2-afd7-0d41cfb57b37",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b7c141e2-63fc-4151-9343-1a7cc7a62b92"
        },
        "item": {
          "id": "37a9b4ae-64f3-4101-a926-847a037f15e5",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "5066ea1f-5112-40c7-8be5-7a886ef1d364",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37a9b4ae-64f3-4101-a926-847a037f15e5",
        "cursor": {
          "ref": "92936a95-e1cb-47a2-afd7-0d41cfb57b37",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b7c141e2-63fc-4151-9343-1a7cc7a62b92"
        },
        "item": {
          "id": "37a9b4ae-64f3-4101-a926-847a037f15e5",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "5066ea1f-5112-40c7-8be5-7a886ef1d364",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afa8ce1d-d759-40b8-844e-666675de45c9",
        "cursor": {
          "ref": "09fcfd93-28ea-4cd2-a461-5a905cdce73f",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "e6d20870-e986-4e96-9aa2-6ff86de5c2b3"
        },
        "item": {
          "id": "afa8ce1d-d759-40b8-844e-666675de45c9",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "94846a84-bf97-45d9-9855-9e0c2b7f57b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afa8ce1d-d759-40b8-844e-666675de45c9",
        "cursor": {
          "ref": "09fcfd93-28ea-4cd2-a461-5a905cdce73f",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "e6d20870-e986-4e96-9aa2-6ff86de5c2b3"
        },
        "item": {
          "id": "afa8ce1d-d759-40b8-844e-666675de45c9",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "94846a84-bf97-45d9-9855-9e0c2b7f57b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf2cee4-c6a8-472a-aa48-1c61d4186ea3",
        "cursor": {
          "ref": "3f7942f6-c953-4bdf-8e05-bf754200f02c",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "25baf314-9f62-4854-9cd9-fd0c3dcb36cb"
        },
        "item": {
          "id": "3cf2cee4-c6a8-472a-aa48-1c61d4186ea3",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "837154bb-60ae-4b6e-a5ec-5e8a3a757e16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf2cee4-c6a8-472a-aa48-1c61d4186ea3",
        "cursor": {
          "ref": "3f7942f6-c953-4bdf-8e05-bf754200f02c",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "25baf314-9f62-4854-9cd9-fd0c3dcb36cb"
        },
        "item": {
          "id": "3cf2cee4-c6a8-472a-aa48-1c61d4186ea3",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "837154bb-60ae-4b6e-a5ec-5e8a3a757e16",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f61e7359-c12e-4da2-8dd3-c6311ebffe6d",
        "cursor": {
          "ref": "02717f6c-8a68-4d83-a578-be4454592e29",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "0afe4c8d-172a-4871-a555-7aa1c7d16ee4"
        },
        "item": {
          "id": "f61e7359-c12e-4da2-8dd3-c6311ebffe6d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a6e78cc4-5970-4e35-8475-2bf7b8cd384e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f61e7359-c12e-4da2-8dd3-c6311ebffe6d",
        "cursor": {
          "ref": "02717f6c-8a68-4d83-a578-be4454592e29",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "0afe4c8d-172a-4871-a555-7aa1c7d16ee4"
        },
        "item": {
          "id": "f61e7359-c12e-4da2-8dd3-c6311ebffe6d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a6e78cc4-5970-4e35-8475-2bf7b8cd384e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95ad740d-e2e0-45a9-af5d-bddf9b2670fd",
        "cursor": {
          "ref": "877d9a80-3daf-479f-82f1-17c5578a1212",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c5dda9a3-b9eb-471b-986c-62ca91d860ae"
        },
        "item": {
          "id": "95ad740d-e2e0-45a9-af5d-bddf9b2670fd",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "bbe34906-e885-40c4-ad78-220e09d95595",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95ad740d-e2e0-45a9-af5d-bddf9b2670fd",
        "cursor": {
          "ref": "877d9a80-3daf-479f-82f1-17c5578a1212",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c5dda9a3-b9eb-471b-986c-62ca91d860ae"
        },
        "item": {
          "id": "95ad740d-e2e0-45a9-af5d-bddf9b2670fd",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "bbe34906-e885-40c4-ad78-220e09d95595",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27bc1b85-5c82-4ffa-bae1-2bfac377f969",
        "cursor": {
          "ref": "91137f11-6747-432f-8d99-4cc1665711f9",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "86dd93b5-693d-4664-af95-faae730e9e5f"
        },
        "item": {
          "id": "27bc1b85-5c82-4ffa-bae1-2bfac377f969",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "73003df6-a507-416e-983d-fe15d64c274f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27bc1b85-5c82-4ffa-bae1-2bfac377f969",
        "cursor": {
          "ref": "91137f11-6747-432f-8d99-4cc1665711f9",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "86dd93b5-693d-4664-af95-faae730e9e5f"
        },
        "item": {
          "id": "27bc1b85-5c82-4ffa-bae1-2bfac377f969",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "73003df6-a507-416e-983d-fe15d64c274f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b175b5b2-8069-4af4-816f-e204609c4d79",
        "cursor": {
          "ref": "bb739330-8f0b-4609-b822-532602586e22",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "4029842b-7310-44fd-8b30-b15cce7d664b"
        },
        "item": {
          "id": "b175b5b2-8069-4af4-816f-e204609c4d79",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "49ff4dd1-5717-4efc-97ed-2dcd04094980",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b175b5b2-8069-4af4-816f-e204609c4d79",
        "cursor": {
          "ref": "bb739330-8f0b-4609-b822-532602586e22",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "4029842b-7310-44fd-8b30-b15cce7d664b"
        },
        "item": {
          "id": "b175b5b2-8069-4af4-816f-e204609c4d79",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "49ff4dd1-5717-4efc-97ed-2dcd04094980",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "367ead14-1a48-46fc-a19c-98cff18495e3",
        "cursor": {
          "ref": "87ee9b66-df94-411d-a61a-9e6ec38f2e62",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "05578530-9d67-482a-ac4c-df57ecb307d7"
        },
        "item": {
          "id": "367ead14-1a48-46fc-a19c-98cff18495e3",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "f0ca4046-935d-4fe4-9b88-49f20d1fc9fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "367ead14-1a48-46fc-a19c-98cff18495e3",
        "cursor": {
          "ref": "87ee9b66-df94-411d-a61a-9e6ec38f2e62",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "05578530-9d67-482a-ac4c-df57ecb307d7"
        },
        "item": {
          "id": "367ead14-1a48-46fc-a19c-98cff18495e3",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "f0ca4046-935d-4fe4-9b88-49f20d1fc9fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8600b9b-5898-422c-84b7-ccd9fd661541",
        "cursor": {
          "ref": "cbad76d3-536d-4094-bc3c-af62fda371be",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e4c47494-6f29-4994-bc47-9084e1376393"
        },
        "item": {
          "id": "c8600b9b-5898-422c-84b7-ccd9fd661541",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "694e69f8-0f14-4e5f-99b1-09fac8cf77bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8600b9b-5898-422c-84b7-ccd9fd661541",
        "cursor": {
          "ref": "cbad76d3-536d-4094-bc3c-af62fda371be",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e4c47494-6f29-4994-bc47-9084e1376393"
        },
        "item": {
          "id": "c8600b9b-5898-422c-84b7-ccd9fd661541",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "694e69f8-0f14-4e5f-99b1-09fac8cf77bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c6e0f16-addf-43b3-9b47-1e91a7317746",
        "cursor": {
          "ref": "8791546b-1f3a-4f2d-8db8-695a113815ff",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3a14794b-e696-47d2-b660-03d4462802f4"
        },
        "item": {
          "id": "9c6e0f16-addf-43b3-9b47-1e91a7317746",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9775de1f-3e32-4005-952f-1c9f6aa5426a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c6e0f16-addf-43b3-9b47-1e91a7317746",
        "cursor": {
          "ref": "8791546b-1f3a-4f2d-8db8-695a113815ff",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3a14794b-e696-47d2-b660-03d4462802f4"
        },
        "item": {
          "id": "9c6e0f16-addf-43b3-9b47-1e91a7317746",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9775de1f-3e32-4005-952f-1c9f6aa5426a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bd0debd-8035-4e36-8096-a9e0c6d6d411",
        "cursor": {
          "ref": "a6677858-984f-4ffe-bd2d-0f4a3d0f0c21",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f5d3f00b-355f-4947-b351-b4854fb72f5b"
        },
        "item": {
          "id": "7bd0debd-8035-4e36-8096-a9e0c6d6d411",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b42eae53-bf00-4387-bf3a-ee050a44cbfc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bd0debd-8035-4e36-8096-a9e0c6d6d411",
        "cursor": {
          "ref": "a6677858-984f-4ffe-bd2d-0f4a3d0f0c21",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f5d3f00b-355f-4947-b351-b4854fb72f5b"
        },
        "item": {
          "id": "7bd0debd-8035-4e36-8096-a9e0c6d6d411",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b42eae53-bf00-4387-bf3a-ee050a44cbfc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39635eaa-6da6-4390-bc48-86c99305925e",
        "cursor": {
          "ref": "19bd4d8e-07a0-4e67-954e-36b58c6695bf",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6e2df397-d78a-4897-92ab-1f5901c44dc4"
        },
        "item": {
          "id": "39635eaa-6da6-4390-bc48-86c99305925e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "56ecca1c-58d6-447c-8ddc-f462da0ce443",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39635eaa-6da6-4390-bc48-86c99305925e",
        "cursor": {
          "ref": "19bd4d8e-07a0-4e67-954e-36b58c6695bf",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6e2df397-d78a-4897-92ab-1f5901c44dc4"
        },
        "item": {
          "id": "39635eaa-6da6-4390-bc48-86c99305925e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "56ecca1c-58d6-447c-8ddc-f462da0ce443",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d59eda1a-cc93-4f6c-ba97-7fb5a81c2703",
        "cursor": {
          "ref": "d20a96e7-48b4-4ee7-8d12-ae3c7cd718c4",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "68f7c2c0-0bbe-46d3-8382-a276a37f264d"
        },
        "item": {
          "id": "d59eda1a-cc93-4f6c-ba97-7fb5a81c2703",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5293a486-6578-4d63-8561-e83fa8d8eca9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d59eda1a-cc93-4f6c-ba97-7fb5a81c2703",
        "cursor": {
          "ref": "d20a96e7-48b4-4ee7-8d12-ae3c7cd718c4",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "68f7c2c0-0bbe-46d3-8382-a276a37f264d"
        },
        "item": {
          "id": "d59eda1a-cc93-4f6c-ba97-7fb5a81c2703",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "5293a486-6578-4d63-8561-e83fa8d8eca9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8587e38-1492-413f-8aca-5a61aff20ee2",
        "cursor": {
          "ref": "42a1c71b-e13d-417d-8320-c35e42ea5544",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "477b9327-b0d7-4064-9f2b-b56d04a50a2f"
        },
        "item": {
          "id": "e8587e38-1492-413f-8aca-5a61aff20ee2",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "e2561c52-a4a7-44a5-a38b-e93fff193fc5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8587e38-1492-413f-8aca-5a61aff20ee2",
        "cursor": {
          "ref": "42a1c71b-e13d-417d-8320-c35e42ea5544",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "477b9327-b0d7-4064-9f2b-b56d04a50a2f"
        },
        "item": {
          "id": "e8587e38-1492-413f-8aca-5a61aff20ee2",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "e2561c52-a4a7-44a5-a38b-e93fff193fc5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80964b3d-b0ce-4b1e-bec6-6d4ba7114f76",
        "cursor": {
          "ref": "f34f8331-4699-45d3-af75-3ab6dd18616c",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "5b597180-3557-4b64-b5a3-3e57ec584b26"
        },
        "item": {
          "id": "80964b3d-b0ce-4b1e-bec6-6d4ba7114f76",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4df756ce-32e8-4a4a-b193-eafa34844cb6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80964b3d-b0ce-4b1e-bec6-6d4ba7114f76",
        "cursor": {
          "ref": "f34f8331-4699-45d3-af75-3ab6dd18616c",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "5b597180-3557-4b64-b5a3-3e57ec584b26"
        },
        "item": {
          "id": "80964b3d-b0ce-4b1e-bec6-6d4ba7114f76",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4df756ce-32e8-4a4a-b193-eafa34844cb6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2645b408-018a-4d8f-9b3a-a77156809c5f",
        "cursor": {
          "ref": "e6102e6c-5349-443c-aea9-3d293a94b66f",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "49fb4de0-6ce5-405e-b5a8-69c9bf7a37fc"
        },
        "item": {
          "id": "2645b408-018a-4d8f-9b3a-a77156809c5f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "fe7e3f62-712f-40e7-9716-9c3ae3d148ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2645b408-018a-4d8f-9b3a-a77156809c5f",
        "cursor": {
          "ref": "e6102e6c-5349-443c-aea9-3d293a94b66f",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "49fb4de0-6ce5-405e-b5a8-69c9bf7a37fc"
        },
        "item": {
          "id": "2645b408-018a-4d8f-9b3a-a77156809c5f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "fe7e3f62-712f-40e7-9716-9c3ae3d148ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "697ea03a-8b5f-4f28-9d27-db38d3bb3d1a",
        "cursor": {
          "ref": "bca0f4ea-b37d-439c-a991-309853046008",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "6f96eed5-8cf4-45a8-b6b7-6cbcff0a88b8"
        },
        "item": {
          "id": "697ea03a-8b5f-4f28-9d27-db38d3bb3d1a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "19d7bbe9-0ef7-4eec-bb5e-3755c5f38c55",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "697ea03a-8b5f-4f28-9d27-db38d3bb3d1a",
        "cursor": {
          "ref": "bca0f4ea-b37d-439c-a991-309853046008",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "6f96eed5-8cf4-45a8-b6b7-6cbcff0a88b8"
        },
        "item": {
          "id": "697ea03a-8b5f-4f28-9d27-db38d3bb3d1a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "19d7bbe9-0ef7-4eec-bb5e-3755c5f38c55",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a69b8f1-93c6-412b-b135-534fac0deff1",
        "cursor": {
          "ref": "a689be2a-a618-4e91-9cfa-ca4e7058d978",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a7769d15-7ddf-424a-bbb9-c736c037555e"
        },
        "item": {
          "id": "6a69b8f1-93c6-412b-b135-534fac0deff1",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "6253de37-91e7-4612-b181-35f1e5d7025a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a69b8f1-93c6-412b-b135-534fac0deff1",
        "cursor": {
          "ref": "a689be2a-a618-4e91-9cfa-ca4e7058d978",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a7769d15-7ddf-424a-bbb9-c736c037555e"
        },
        "item": {
          "id": "6a69b8f1-93c6-412b-b135-534fac0deff1",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "6253de37-91e7-4612-b181-35f1e5d7025a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04315cc4-98d7-4b16-a6e9-e77de63c2f51",
        "cursor": {
          "ref": "c063d720-faef-47fc-a375-97ff2760fd62",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "34079871-5510-4ee9-8c4e-c1bb34d4baaa"
        },
        "item": {
          "id": "04315cc4-98d7-4b16-a6e9-e77de63c2f51",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a15116e8-958e-449f-8b32-623ed0a5c947",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04315cc4-98d7-4b16-a6e9-e77de63c2f51",
        "cursor": {
          "ref": "c063d720-faef-47fc-a375-97ff2760fd62",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "34079871-5510-4ee9-8c4e-c1bb34d4baaa"
        },
        "item": {
          "id": "04315cc4-98d7-4b16-a6e9-e77de63c2f51",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a15116e8-958e-449f-8b32-623ed0a5c947",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "860c92a5-1eef-488c-aea4-ae086d28b3d1",
        "cursor": {
          "ref": "e3cf7bc0-757b-4f03-92a9-ebe39723eebe",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "fb230aec-528e-49ed-b290-08a84b47325c"
        },
        "item": {
          "id": "860c92a5-1eef-488c-aea4-ae086d28b3d1",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "cf25ce1b-fdc1-46dc-9ecb-631353d02f17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "860c92a5-1eef-488c-aea4-ae086d28b3d1",
        "cursor": {
          "ref": "e3cf7bc0-757b-4f03-92a9-ebe39723eebe",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "fb230aec-528e-49ed-b290-08a84b47325c"
        },
        "item": {
          "id": "860c92a5-1eef-488c-aea4-ae086d28b3d1",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "cf25ce1b-fdc1-46dc-9ecb-631353d02f17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b97a53bd-01fc-463e-84ed-ca19906f33b1",
        "cursor": {
          "ref": "6361048d-7a94-4c96-80ee-1db52ac46bef",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "ce5e19eb-4ff5-48ac-96db-f0434847a16a"
        },
        "item": {
          "id": "b97a53bd-01fc-463e-84ed-ca19906f33b1",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2ddc12e7-2faf-41c4-a285-02251153ac33",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b97a53bd-01fc-463e-84ed-ca19906f33b1",
        "cursor": {
          "ref": "6361048d-7a94-4c96-80ee-1db52ac46bef",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "ce5e19eb-4ff5-48ac-96db-f0434847a16a"
        },
        "item": {
          "id": "b97a53bd-01fc-463e-84ed-ca19906f33b1",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2ddc12e7-2faf-41c4-a285-02251153ac33",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31d38102-73b1-4721-8035-ded6b0af3081",
        "cursor": {
          "ref": "38f1f11f-d673-4758-8de9-fe5cb3e9b00c",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "59d3719e-85ae-4c5f-af5a-d67b41dec9ec"
        },
        "item": {
          "id": "31d38102-73b1-4721-8035-ded6b0af3081",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b5fb5aef-62bc-47c2-ba8e-5e519da366a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31d38102-73b1-4721-8035-ded6b0af3081",
        "cursor": {
          "ref": "38f1f11f-d673-4758-8de9-fe5cb3e9b00c",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "59d3719e-85ae-4c5f-af5a-d67b41dec9ec"
        },
        "item": {
          "id": "31d38102-73b1-4721-8035-ded6b0af3081",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b5fb5aef-62bc-47c2-ba8e-5e519da366a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dc6a412-379e-4f97-be42-931677ea9f00",
        "cursor": {
          "ref": "b292365e-3a42-4978-ae29-1db754f84067",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b3806c44-0e5d-465a-a1a0-8fe927e63ef5"
        },
        "item": {
          "id": "3dc6a412-379e-4f97-be42-931677ea9f00",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "fcfa1b18-2959-425f-a4bf-3a5beba4283f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dc6a412-379e-4f97-be42-931677ea9f00",
        "cursor": {
          "ref": "b292365e-3a42-4978-ae29-1db754f84067",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b3806c44-0e5d-465a-a1a0-8fe927e63ef5"
        },
        "item": {
          "id": "3dc6a412-379e-4f97-be42-931677ea9f00",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "fcfa1b18-2959-425f-a4bf-3a5beba4283f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afc1ee93-355d-43ed-9ac4-3f6def8e3c65",
        "cursor": {
          "ref": "63550d11-b1ad-4ddd-b909-b4f7b1b645c9",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "8bbaa3a2-8d47-41af-bbda-9a2548212a9f"
        },
        "item": {
          "id": "afc1ee93-355d-43ed-9ac4-3f6def8e3c65",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "6903fbb1-1ba5-4db1-965d-fdc98862ae66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afc1ee93-355d-43ed-9ac4-3f6def8e3c65",
        "cursor": {
          "ref": "63550d11-b1ad-4ddd-b909-b4f7b1b645c9",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "8bbaa3a2-8d47-41af-bbda-9a2548212a9f"
        },
        "item": {
          "id": "afc1ee93-355d-43ed-9ac4-3f6def8e3c65",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "6903fbb1-1ba5-4db1-965d-fdc98862ae66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "459e6cd8-0dec-4e0b-bfb6-7bb5abdc8de5",
        "cursor": {
          "ref": "557b4def-51b8-422a-96c6-cea28210125d",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "a91875ed-b71f-4a3e-b921-0963c0fa368a"
        },
        "item": {
          "id": "459e6cd8-0dec-4e0b-bfb6-7bb5abdc8de5",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c9c026ee-239c-47ba-96f3-31b73bf2d056",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "459e6cd8-0dec-4e0b-bfb6-7bb5abdc8de5",
        "cursor": {
          "ref": "557b4def-51b8-422a-96c6-cea28210125d",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "a91875ed-b71f-4a3e-b921-0963c0fa368a"
        },
        "item": {
          "id": "459e6cd8-0dec-4e0b-bfb6-7bb5abdc8de5",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c9c026ee-239c-47ba-96f3-31b73bf2d056",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6002adfd-7adc-466f-b66d-2e0e57273695",
        "cursor": {
          "ref": "ba935197-4809-431f-aa99-47d204585995",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e6556fc4-528e-4357-8d13-8c1b984d3afd"
        },
        "item": {
          "id": "6002adfd-7adc-466f-b66d-2e0e57273695",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "e9b769f1-ab4c-432d-955d-1e6944d8dfc2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6002adfd-7adc-466f-b66d-2e0e57273695",
        "cursor": {
          "ref": "ba935197-4809-431f-aa99-47d204585995",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e6556fc4-528e-4357-8d13-8c1b984d3afd"
        },
        "item": {
          "id": "6002adfd-7adc-466f-b66d-2e0e57273695",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "e9b769f1-ab4c-432d-955d-1e6944d8dfc2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11086327-b25c-45fb-8e72-321a4aab8e28",
        "cursor": {
          "ref": "7d2901e6-b03c-4a19-8029-c4a15b596326",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f1ffd71a-dd54-4d20-821d-4bc15c0934cc"
        },
        "item": {
          "id": "11086327-b25c-45fb-8e72-321a4aab8e28",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6c6bbaa4-cf88-45e0-8f47-a83f14c06018",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11086327-b25c-45fb-8e72-321a4aab8e28",
        "cursor": {
          "ref": "7d2901e6-b03c-4a19-8029-c4a15b596326",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f1ffd71a-dd54-4d20-821d-4bc15c0934cc"
        },
        "item": {
          "id": "11086327-b25c-45fb-8e72-321a4aab8e28",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6c6bbaa4-cf88-45e0-8f47-a83f14c06018",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "325f19ea-9adf-49b5-8233-860b19fb6ea8",
        "cursor": {
          "ref": "a4e9dd10-d7ba-4d42-9080-b177ff419005",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "4b830e33-5fa4-464c-aa44-8f3d268c299d"
        },
        "item": {
          "id": "325f19ea-9adf-49b5-8233-860b19fb6ea8",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f8a5f83b-493c-46fb-8b61-d2e6bb008584",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "325f19ea-9adf-49b5-8233-860b19fb6ea8",
        "cursor": {
          "ref": "a4e9dd10-d7ba-4d42-9080-b177ff419005",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "4b830e33-5fa4-464c-aa44-8f3d268c299d"
        },
        "item": {
          "id": "325f19ea-9adf-49b5-8233-860b19fb6ea8",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f8a5f83b-493c-46fb-8b61-d2e6bb008584",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ef43c0c-3118-40ce-8775-dab912f0cec7",
        "cursor": {
          "ref": "4621129f-5664-4a32-9ccb-cfaae31b8f98",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "165dc75f-b3b2-4fc8-b152-714e23b14374"
        },
        "item": {
          "id": "7ef43c0c-3118-40ce-8775-dab912f0cec7",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ea7b5f81-a0f9-4972-9bf1-106c0917781c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ef43c0c-3118-40ce-8775-dab912f0cec7",
        "cursor": {
          "ref": "4621129f-5664-4a32-9ccb-cfaae31b8f98",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "165dc75f-b3b2-4fc8-b152-714e23b14374"
        },
        "item": {
          "id": "7ef43c0c-3118-40ce-8775-dab912f0cec7",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ea7b5f81-a0f9-4972-9bf1-106c0917781c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b555881-ca7f-4db4-8f2f-f9d2f3f615e8",
        "cursor": {
          "ref": "7ee9515c-36f2-4faf-8e66-32e48269d2b1",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "434a7a00-14f7-441e-b38c-b878e2c86209"
        },
        "item": {
          "id": "0b555881-ca7f-4db4-8f2f-f9d2f3f615e8",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1c5d5974-5b8f-46c9-ad2c-7c7dc2e3cd0c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b555881-ca7f-4db4-8f2f-f9d2f3f615e8",
        "cursor": {
          "ref": "7ee9515c-36f2-4faf-8e66-32e48269d2b1",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "434a7a00-14f7-441e-b38c-b878e2c86209"
        },
        "item": {
          "id": "0b555881-ca7f-4db4-8f2f-f9d2f3f615e8",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1c5d5974-5b8f-46c9-ad2c-7c7dc2e3cd0c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bbd8b80-6ce5-473a-b6ed-cf4b0917576b",
        "cursor": {
          "ref": "d14d20f7-a6fc-4855-b839-75b6e56dbb68",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e921e1fc-bb33-4847-b3e3-569b2cbd0daa"
        },
        "item": {
          "id": "9bbd8b80-6ce5-473a-b6ed-cf4b0917576b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b1540f11-a20a-453e-95f8-cb0d0c2c59e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bbd8b80-6ce5-473a-b6ed-cf4b0917576b",
        "cursor": {
          "ref": "d14d20f7-a6fc-4855-b839-75b6e56dbb68",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e921e1fc-bb33-4847-b3e3-569b2cbd0daa"
        },
        "item": {
          "id": "9bbd8b80-6ce5-473a-b6ed-cf4b0917576b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b1540f11-a20a-453e-95f8-cb0d0c2c59e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5746779-19d1-4be7-8162-ba322fc37958",
        "cursor": {
          "ref": "ab30b00a-e41b-4a6b-99eb-9c8066613282",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "54804e1a-cea7-45c4-b52d-95338d70d011"
        },
        "item": {
          "id": "b5746779-19d1-4be7-8162-ba322fc37958",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "9a572c6b-566d-4650-8417-cc7bffbbf04b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5746779-19d1-4be7-8162-ba322fc37958",
        "cursor": {
          "ref": "ab30b00a-e41b-4a6b-99eb-9c8066613282",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "54804e1a-cea7-45c4-b52d-95338d70d011"
        },
        "item": {
          "id": "b5746779-19d1-4be7-8162-ba322fc37958",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "9a572c6b-566d-4650-8417-cc7bffbbf04b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9104a690-3206-454f-bcae-7485f03403f4",
        "cursor": {
          "ref": "0050923d-38f9-41d3-8202-e8723d11ba18",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9a68585a-d62c-4210-9142-2bfb7597f99f"
        },
        "item": {
          "id": "9104a690-3206-454f-bcae-7485f03403f4",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "51f01a8d-5dfc-4bd6-8375-16a9e63f0e26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9104a690-3206-454f-bcae-7485f03403f4",
        "cursor": {
          "ref": "0050923d-38f9-41d3-8202-e8723d11ba18",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9a68585a-d62c-4210-9142-2bfb7597f99f"
        },
        "item": {
          "id": "9104a690-3206-454f-bcae-7485f03403f4",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "51f01a8d-5dfc-4bd6-8375-16a9e63f0e26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd474472-83e6-4411-a721-73e26f106040",
        "cursor": {
          "ref": "7873c822-fddc-4cbb-925c-7017a80dc547",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "cb293ded-354e-4f20-b19d-9cb1bf0051cc"
        },
        "item": {
          "id": "dd474472-83e6-4411-a721-73e26f106040",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "59da6a31-cdbf-4f8e-88fd-f09a0a6277d5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd474472-83e6-4411-a721-73e26f106040",
        "cursor": {
          "ref": "7873c822-fddc-4cbb-925c-7017a80dc547",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "cb293ded-354e-4f20-b19d-9cb1bf0051cc"
        },
        "item": {
          "id": "dd474472-83e6-4411-a721-73e26f106040",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "59da6a31-cdbf-4f8e-88fd-f09a0a6277d5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9395e337-f5d0-468d-87aa-0f2a3fa3bc12",
        "cursor": {
          "ref": "a7cb9360-c5dc-4c62-bc59-90a9abea26dd",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "26ea42b1-0f18-413e-97e4-52e1ee1e527c"
        },
        "item": {
          "id": "9395e337-f5d0-468d-87aa-0f2a3fa3bc12",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "d9c8069c-2885-4af5-86c9-559567a9c310",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9395e337-f5d0-468d-87aa-0f2a3fa3bc12",
        "cursor": {
          "ref": "a7cb9360-c5dc-4c62-bc59-90a9abea26dd",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "26ea42b1-0f18-413e-97e4-52e1ee1e527c"
        },
        "item": {
          "id": "9395e337-f5d0-468d-87aa-0f2a3fa3bc12",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "d9c8069c-2885-4af5-86c9-559567a9c310",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adc57601-770b-4767-8bb0-799e8bcd42cb",
        "cursor": {
          "ref": "7872c4e0-8fd3-4b4d-84ab-80c082d37d15",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "9635ae5f-3bff-42fe-8799-f1f634a6c4dd"
        },
        "item": {
          "id": "adc57601-770b-4767-8bb0-799e8bcd42cb",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "d005dcbf-2c01-4c55-9b87-9bae4473d0e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adc57601-770b-4767-8bb0-799e8bcd42cb",
        "cursor": {
          "ref": "7872c4e0-8fd3-4b4d-84ab-80c082d37d15",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "9635ae5f-3bff-42fe-8799-f1f634a6c4dd"
        },
        "item": {
          "id": "adc57601-770b-4767-8bb0-799e8bcd42cb",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "d005dcbf-2c01-4c55-9b87-9bae4473d0e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "411b5ed1-f313-46d4-b071-a9c0144e30d6",
        "cursor": {
          "ref": "22194920-7d93-4050-a022-ea7d727aff42",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "6df668bb-307f-439d-bc2a-5cfb361ee45b"
        },
        "item": {
          "id": "411b5ed1-f313-46d4-b071-a9c0144e30d6",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d08fb147-2961-4f0a-a47c-41d757ae2e65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "411b5ed1-f313-46d4-b071-a9c0144e30d6",
        "cursor": {
          "ref": "22194920-7d93-4050-a022-ea7d727aff42",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "6df668bb-307f-439d-bc2a-5cfb361ee45b"
        },
        "item": {
          "id": "411b5ed1-f313-46d4-b071-a9c0144e30d6",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d08fb147-2961-4f0a-a47c-41d757ae2e65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8fc98a5-aa51-4038-a915-1d6bb1932d32",
        "cursor": {
          "ref": "9e5745dc-008d-417e-bd65-3ef05e734c02",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "3044425d-da6e-4383-bb81-10d19be8c4dc"
        },
        "item": {
          "id": "f8fc98a5-aa51-4038-a915-1d6bb1932d32",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "536e2665-7430-49cc-9219-de8605aa617a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8fc98a5-aa51-4038-a915-1d6bb1932d32",
        "cursor": {
          "ref": "9e5745dc-008d-417e-bd65-3ef05e734c02",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "3044425d-da6e-4383-bb81-10d19be8c4dc"
        },
        "item": {
          "id": "f8fc98a5-aa51-4038-a915-1d6bb1932d32",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "536e2665-7430-49cc-9219-de8605aa617a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76fcb84a-a108-442a-a0bf-650bed7c35cd",
        "cursor": {
          "ref": "04718303-3dcb-4883-8a6f-d7f0995e72c5",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "aa3c6941-960e-4a2c-b92d-91d84b301edc"
        },
        "item": {
          "id": "76fcb84a-a108-442a-a0bf-650bed7c35cd",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7243f746-cddc-41ae-8545-4ce8114274a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76fcb84a-a108-442a-a0bf-650bed7c35cd",
        "cursor": {
          "ref": "04718303-3dcb-4883-8a6f-d7f0995e72c5",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "aa3c6941-960e-4a2c-b92d-91d84b301edc"
        },
        "item": {
          "id": "76fcb84a-a108-442a-a0bf-650bed7c35cd",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7243f746-cddc-41ae-8545-4ce8114274a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72bf21ca-b35c-4d4e-a85f-47e137ed923a",
        "cursor": {
          "ref": "05aa0cf9-d114-4670-a649-e8591f9f9189",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "49c6592b-29fd-40dc-bbfe-1da50cf40f41"
        },
        "item": {
          "id": "72bf21ca-b35c-4d4e-a85f-47e137ed923a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "8da78d20-992a-4159-9e17-1a1c238c69f1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72bf21ca-b35c-4d4e-a85f-47e137ed923a",
        "cursor": {
          "ref": "05aa0cf9-d114-4670-a649-e8591f9f9189",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "49c6592b-29fd-40dc-bbfe-1da50cf40f41"
        },
        "item": {
          "id": "72bf21ca-b35c-4d4e-a85f-47e137ed923a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "8da78d20-992a-4159-9e17-1a1c238c69f1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bc8f9bd-4d53-4fb5-b28c-767f161fd8b8",
        "cursor": {
          "ref": "1773f511-4124-473a-b29b-93a5a69fe8c8",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "78f1acb7-aeff-4aef-8335-05165c8a9fbd"
        },
        "item": {
          "id": "1bc8f9bd-4d53-4fb5-b28c-767f161fd8b8",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ad39a30b-8556-4392-8318-cdb43560a4f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bc8f9bd-4d53-4fb5-b28c-767f161fd8b8",
        "cursor": {
          "ref": "1773f511-4124-473a-b29b-93a5a69fe8c8",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "78f1acb7-aeff-4aef-8335-05165c8a9fbd"
        },
        "item": {
          "id": "1bc8f9bd-4d53-4fb5-b28c-767f161fd8b8",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ad39a30b-8556-4392-8318-cdb43560a4f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "500a660f-2eaf-487c-9907-54e08acdfd47",
        "cursor": {
          "ref": "0121ce96-3081-41e3-a0c3-56700b6e291f",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "7d464121-a4bb-4797-8dbc-01fc1320a553"
        },
        "item": {
          "id": "500a660f-2eaf-487c-9907-54e08acdfd47",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "002738b7-8ce5-4304-a4e7-a85b8bb6c85c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "500a660f-2eaf-487c-9907-54e08acdfd47",
        "cursor": {
          "ref": "0121ce96-3081-41e3-a0c3-56700b6e291f",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "7d464121-a4bb-4797-8dbc-01fc1320a553"
        },
        "item": {
          "id": "500a660f-2eaf-487c-9907-54e08acdfd47",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "002738b7-8ce5-4304-a4e7-a85b8bb6c85c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69f24882-f9ea-4157-892a-83bf0ba24aab",
        "cursor": {
          "ref": "29b47683-8b8f-434c-a7b3-6f56764dd5bf",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "269b9f69-bdb1-4d70-9b90-45b6407a05a7"
        },
        "item": {
          "id": "69f24882-f9ea-4157-892a-83bf0ba24aab",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d7ef8a24-7491-46a4-8d4c-1e73f21a9d7b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69f24882-f9ea-4157-892a-83bf0ba24aab",
        "cursor": {
          "ref": "29b47683-8b8f-434c-a7b3-6f56764dd5bf",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "269b9f69-bdb1-4d70-9b90-45b6407a05a7"
        },
        "item": {
          "id": "69f24882-f9ea-4157-892a-83bf0ba24aab",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d7ef8a24-7491-46a4-8d4c-1e73f21a9d7b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec2ce424-0419-48c5-badd-0af5f9d9a2b9",
        "cursor": {
          "ref": "8a926a1a-4274-4841-af19-c242bce84d6a",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "b79f04bb-ea5e-406f-a36b-47771b57d075"
        },
        "item": {
          "id": "ec2ce424-0419-48c5-badd-0af5f9d9a2b9",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "bbc8ca19-ff08-4501-bfb1-2b62c594acfd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec2ce424-0419-48c5-badd-0af5f9d9a2b9",
        "cursor": {
          "ref": "8a926a1a-4274-4841-af19-c242bce84d6a",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "b79f04bb-ea5e-406f-a36b-47771b57d075"
        },
        "item": {
          "id": "ec2ce424-0419-48c5-badd-0af5f9d9a2b9",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "bbc8ca19-ff08-4501-bfb1-2b62c594acfd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "258aff57-1e90-415d-a6bc-acb204f21946",
        "cursor": {
          "ref": "c171b589-4d4f-43f9-b9de-42aaf35dbc55",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "3f7d419a-56a4-483b-851f-5c3b4f5ddaad"
        },
        "item": {
          "id": "258aff57-1e90-415d-a6bc-acb204f21946",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "7d1912bf-10b8-4b67-a457-5f1e0f3f4854",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "258aff57-1e90-415d-a6bc-acb204f21946",
        "cursor": {
          "ref": "c171b589-4d4f-43f9-b9de-42aaf35dbc55",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "3f7d419a-56a4-483b-851f-5c3b4f5ddaad"
        },
        "item": {
          "id": "258aff57-1e90-415d-a6bc-acb204f21946",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "7d1912bf-10b8-4b67-a457-5f1e0f3f4854",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae0b3a4f-c98f-44fc-9841-801aff7c9410",
        "cursor": {
          "ref": "1389543d-0701-4b78-90fd-bbb43cb50660",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "8c3e31de-1650-4a67-9014-80dc6f56239c"
        },
        "item": {
          "id": "ae0b3a4f-c98f-44fc-9841-801aff7c9410",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "738fa2db-88f7-4689-afdb-a3a3004a35d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae0b3a4f-c98f-44fc-9841-801aff7c9410",
        "cursor": {
          "ref": "1389543d-0701-4b78-90fd-bbb43cb50660",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "8c3e31de-1650-4a67-9014-80dc6f56239c"
        },
        "item": {
          "id": "ae0b3a4f-c98f-44fc-9841-801aff7c9410",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "738fa2db-88f7-4689-afdb-a3a3004a35d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3ca5f80-49cd-4bb0-8287-ab0ad49b4307",
        "cursor": {
          "ref": "ad157217-799b-40a3-8193-94f8656d5437",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "841558b6-e0d8-4f70-8bf2-ebc93cdc5d6b"
        },
        "item": {
          "id": "f3ca5f80-49cd-4bb0-8287-ab0ad49b4307",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "bd64281d-acb0-4382-b774-3bd91d1f005f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3ca5f80-49cd-4bb0-8287-ab0ad49b4307",
        "cursor": {
          "ref": "ad157217-799b-40a3-8193-94f8656d5437",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "841558b6-e0d8-4f70-8bf2-ebc93cdc5d6b"
        },
        "item": {
          "id": "f3ca5f80-49cd-4bb0-8287-ab0ad49b4307",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "bd64281d-acb0-4382-b774-3bd91d1f005f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bad099d-72eb-4fd4-b875-41d2cef9d6de",
        "cursor": {
          "ref": "61c247cb-a35e-426e-a33f-bd3c5e6999d2",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "185f9e75-f3f1-47b6-b06d-501788e47975"
        },
        "item": {
          "id": "0bad099d-72eb-4fd4-b875-41d2cef9d6de",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "381e8911-60ae-47dc-bcaf-43818469027a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bad099d-72eb-4fd4-b875-41d2cef9d6de",
        "cursor": {
          "ref": "61c247cb-a35e-426e-a33f-bd3c5e6999d2",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "185f9e75-f3f1-47b6-b06d-501788e47975"
        },
        "item": {
          "id": "0bad099d-72eb-4fd4-b875-41d2cef9d6de",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "381e8911-60ae-47dc-bcaf-43818469027a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d8a2ba-28eb-4c5c-ba2d-670eae6075e0",
        "cursor": {
          "ref": "cc6399bc-2b55-4b92-afef-307b26612676",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "9919ae75-236f-4edb-b0ff-ccf4f8c8afa8"
        },
        "item": {
          "id": "11d8a2ba-28eb-4c5c-ba2d-670eae6075e0",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ef824e54-9e51-493e-951d-3f6a6d8cec0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d8a2ba-28eb-4c5c-ba2d-670eae6075e0",
        "cursor": {
          "ref": "cc6399bc-2b55-4b92-afef-307b26612676",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "9919ae75-236f-4edb-b0ff-ccf4f8c8afa8"
        },
        "item": {
          "id": "11d8a2ba-28eb-4c5c-ba2d-670eae6075e0",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ef824e54-9e51-493e-951d-3f6a6d8cec0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be415f1b-3631-4287-9f61-0ce3b9870659",
        "cursor": {
          "ref": "2f42c362-b1c0-4aaf-820c-b67985e66fce",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "3b6942a1-7642-4534-95a0-b8e59176183b"
        },
        "item": {
          "id": "be415f1b-3631-4287-9f61-0ce3b9870659",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b6c6baba-c712-45e7-85e2-2598370e7849",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be415f1b-3631-4287-9f61-0ce3b9870659",
        "cursor": {
          "ref": "2f42c362-b1c0-4aaf-820c-b67985e66fce",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "3b6942a1-7642-4534-95a0-b8e59176183b"
        },
        "item": {
          "id": "be415f1b-3631-4287-9f61-0ce3b9870659",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b6c6baba-c712-45e7-85e2-2598370e7849",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eb03cbb-436d-45f7-ab86-5d9bd4d53fe7",
        "cursor": {
          "ref": "68cd4ec1-e291-4d33-8fbd-5f1bf6fb8554",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "0b3354bd-ebf4-42e7-bb6f-897fbac3e2a0"
        },
        "item": {
          "id": "0eb03cbb-436d-45f7-ab86-5d9bd4d53fe7",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "73e831df-a247-4b40-9840-683fa43b57ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eb03cbb-436d-45f7-ab86-5d9bd4d53fe7",
        "cursor": {
          "ref": "68cd4ec1-e291-4d33-8fbd-5f1bf6fb8554",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "0b3354bd-ebf4-42e7-bb6f-897fbac3e2a0"
        },
        "item": {
          "id": "0eb03cbb-436d-45f7-ab86-5d9bd4d53fe7",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "73e831df-a247-4b40-9840-683fa43b57ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e553210-251b-4956-a45d-aa7fe5f143c0",
        "cursor": {
          "ref": "af1293d2-a68e-4dac-8600-514af0f874c3",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "dd98b4cf-a65f-4977-a2be-28d33d2adf09"
        },
        "item": {
          "id": "0e553210-251b-4956-a45d-aa7fe5f143c0",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "0bca39b5-4beb-4064-a538-ae95fdbaa389",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e553210-251b-4956-a45d-aa7fe5f143c0",
        "cursor": {
          "ref": "af1293d2-a68e-4dac-8600-514af0f874c3",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "dd98b4cf-a65f-4977-a2be-28d33d2adf09"
        },
        "item": {
          "id": "0e553210-251b-4956-a45d-aa7fe5f143c0",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "0bca39b5-4beb-4064-a538-ae95fdbaa389",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd0b10a5-8b03-4f10-9e9e-0f0192ca82d9",
        "cursor": {
          "ref": "1683fe30-0749-415b-9487-d8b6c69755fa",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "a2c36813-e66d-4d00-887c-773281c2b3d8"
        },
        "item": {
          "id": "dd0b10a5-8b03-4f10-9e9e-0f0192ca82d9",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "986d7b7b-fa9f-4205-a29c-e9fd2b6f7b8b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd0b10a5-8b03-4f10-9e9e-0f0192ca82d9",
        "cursor": {
          "ref": "1683fe30-0749-415b-9487-d8b6c69755fa",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "a2c36813-e66d-4d00-887c-773281c2b3d8"
        },
        "item": {
          "id": "dd0b10a5-8b03-4f10-9e9e-0f0192ca82d9",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "986d7b7b-fa9f-4205-a29c-e9fd2b6f7b8b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab125d77-2f8d-40cb-9dd5-4d0727b3a205",
        "cursor": {
          "ref": "52e7b182-d714-4e29-b7ec-688a4c4524d8",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "33098608-3430-4160-8431-3df61b81cb1b"
        },
        "item": {
          "id": "ab125d77-2f8d-40cb-9dd5-4d0727b3a205",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d09337a2-1baf-4807-b72a-fba6772f4eaa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab125d77-2f8d-40cb-9dd5-4d0727b3a205",
        "cursor": {
          "ref": "52e7b182-d714-4e29-b7ec-688a4c4524d8",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "33098608-3430-4160-8431-3df61b81cb1b"
        },
        "item": {
          "id": "ab125d77-2f8d-40cb-9dd5-4d0727b3a205",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d09337a2-1baf-4807-b72a-fba6772f4eaa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c049f39-929f-4962-8c61-521975531077",
        "cursor": {
          "ref": "4aa5c6f3-d16b-49dd-9d40-0570471464bf",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "26efea93-f92b-4cf3-ad5c-7efa14fdf7b6"
        },
        "item": {
          "id": "8c049f39-929f-4962-8c61-521975531077",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "41f66ae8-6306-4d19-ad4f-bf1cf47153bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c049f39-929f-4962-8c61-521975531077",
        "cursor": {
          "ref": "4aa5c6f3-d16b-49dd-9d40-0570471464bf",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "26efea93-f92b-4cf3-ad5c-7efa14fdf7b6"
        },
        "item": {
          "id": "8c049f39-929f-4962-8c61-521975531077",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "41f66ae8-6306-4d19-ad4f-bf1cf47153bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82164021-1781-4191-b3e3-853adfa4db7e",
        "cursor": {
          "ref": "da7dad13-81c7-4725-a6fb-4573bd38bad8",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "c38e89a4-03ae-4136-9ef1-395d497cd722"
        },
        "item": {
          "id": "82164021-1781-4191-b3e3-853adfa4db7e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f71c08a4-d80d-42ce-862a-e1b5a0a011f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82164021-1781-4191-b3e3-853adfa4db7e",
        "cursor": {
          "ref": "da7dad13-81c7-4725-a6fb-4573bd38bad8",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "c38e89a4-03ae-4136-9ef1-395d497cd722"
        },
        "item": {
          "id": "82164021-1781-4191-b3e3-853adfa4db7e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f71c08a4-d80d-42ce-862a-e1b5a0a011f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ec0da8-6cca-4e1d-af2b-bda3b81118c9",
        "cursor": {
          "ref": "adf25b03-4bd0-45a4-8fb3-68131b028cab",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "4569de94-3c34-4a31-9343-3e72fa9492db"
        },
        "item": {
          "id": "33ec0da8-6cca-4e1d-af2b-bda3b81118c9",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "cc0dd108-08a7-4cd3-bb5b-7d9c09b96db7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ec0da8-6cca-4e1d-af2b-bda3b81118c9",
        "cursor": {
          "ref": "adf25b03-4bd0-45a4-8fb3-68131b028cab",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "4569de94-3c34-4a31-9343-3e72fa9492db"
        },
        "item": {
          "id": "33ec0da8-6cca-4e1d-af2b-bda3b81118c9",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "cc0dd108-08a7-4cd3-bb5b-7d9c09b96db7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4040d03-c8de-4aeb-8670-c9c6f9aad777",
        "cursor": {
          "ref": "e33b7d21-1298-4495-9f5f-6b135c45dbf2",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "1b3d5493-36ed-4833-bb32-4b012499e44b"
        },
        "item": {
          "id": "e4040d03-c8de-4aeb-8670-c9c6f9aad777",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "da10d7eb-f423-4bd1-98f3-60eb637cb6c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4040d03-c8de-4aeb-8670-c9c6f9aad777",
        "cursor": {
          "ref": "e33b7d21-1298-4495-9f5f-6b135c45dbf2",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "1b3d5493-36ed-4833-bb32-4b012499e44b"
        },
        "item": {
          "id": "e4040d03-c8de-4aeb-8670-c9c6f9aad777",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "da10d7eb-f423-4bd1-98f3-60eb637cb6c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6980d76-40bb-40bb-8419-23926fa82e13",
        "cursor": {
          "ref": "023f8f34-b0c6-4df7-b3fa-bfa8c0abc222",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "de54c141-78b8-4293-93e8-46d4d51a313a"
        },
        "item": {
          "id": "d6980d76-40bb-40bb-8419-23926fa82e13",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "c3a967a9-465e-4e69-aef0-5ae95446dc39",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6980d76-40bb-40bb-8419-23926fa82e13",
        "cursor": {
          "ref": "023f8f34-b0c6-4df7-b3fa-bfa8c0abc222",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "de54c141-78b8-4293-93e8-46d4d51a313a"
        },
        "item": {
          "id": "d6980d76-40bb-40bb-8419-23926fa82e13",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "c3a967a9-465e-4e69-aef0-5ae95446dc39",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71dd4389-2ac3-4316-89d8-d5fe811c32c6",
        "cursor": {
          "ref": "297a0cf0-ef1a-4565-8bfd-149b2699aaa2",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "104ce317-1c49-44a4-a46b-40c6517247b3"
        },
        "item": {
          "id": "71dd4389-2ac3-4316-89d8-d5fe811c32c6",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "76b9fff3-a11e-4d26-a7e3-deef7f2ff0f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71dd4389-2ac3-4316-89d8-d5fe811c32c6",
        "cursor": {
          "ref": "297a0cf0-ef1a-4565-8bfd-149b2699aaa2",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "104ce317-1c49-44a4-a46b-40c6517247b3"
        },
        "item": {
          "id": "71dd4389-2ac3-4316-89d8-d5fe811c32c6",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "76b9fff3-a11e-4d26-a7e3-deef7f2ff0f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c203c8-d902-4fff-accd-b1eb95493eeb",
        "cursor": {
          "ref": "d72bce27-da15-4ebc-8383-570766b5d213",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "b381a032-ba4e-4e99-b213-99d8ad5e687f"
        },
        "item": {
          "id": "78c203c8-d902-4fff-accd-b1eb95493eeb",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "c7fc07f3-884f-4497-9428-27d0f230a4b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c203c8-d902-4fff-accd-b1eb95493eeb",
        "cursor": {
          "ref": "d72bce27-da15-4ebc-8383-570766b5d213",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "b381a032-ba4e-4e99-b213-99d8ad5e687f"
        },
        "item": {
          "id": "78c203c8-d902-4fff-accd-b1eb95493eeb",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "c7fc07f3-884f-4497-9428-27d0f230a4b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd8300d-bad3-40ac-b252-e297358f533a",
        "cursor": {
          "ref": "9f638cb8-6656-491d-9c10-102b7b729c73",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "8bee1280-2c64-4017-866b-5c8fb31ad60b"
        },
        "item": {
          "id": "efd8300d-bad3-40ac-b252-e297358f533a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1aa28dbc-e5db-4446-a568-dd3f989f5adb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd8300d-bad3-40ac-b252-e297358f533a",
        "cursor": {
          "ref": "9f638cb8-6656-491d-9c10-102b7b729c73",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "8bee1280-2c64-4017-866b-5c8fb31ad60b"
        },
        "item": {
          "id": "efd8300d-bad3-40ac-b252-e297358f533a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1aa28dbc-e5db-4446-a568-dd3f989f5adb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "157e22f8-3a5c-4743-bb97-2837c1f31f59",
        "cursor": {
          "ref": "8bb52a13-850a-4bb2-bb0f-6f36c55378b6",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "3b9b5c26-d3e4-40ea-ba87-87b7fddc4bf2"
        },
        "item": {
          "id": "157e22f8-3a5c-4743-bb97-2837c1f31f59",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "13a9e182-5ad7-4b49-b12a-abf830fe6cef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "157e22f8-3a5c-4743-bb97-2837c1f31f59",
        "cursor": {
          "ref": "8bb52a13-850a-4bb2-bb0f-6f36c55378b6",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "3b9b5c26-d3e4-40ea-ba87-87b7fddc4bf2"
        },
        "item": {
          "id": "157e22f8-3a5c-4743-bb97-2837c1f31f59",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "13a9e182-5ad7-4b49-b12a-abf830fe6cef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "b6852757-ff03-4638-891f-89032051251d",
        "cursor": {
          "ref": "f29f7a61-edc5-446c-9064-aadecce5f257",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "f54e2b80-1c1a-4b21-b540-b8ae775b4b42"
        },
        "item": {
          "id": "b6852757-ff03-4638-891f-89032051251d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "3b39b529-457e-49d6-b35c-925471079cfb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 133,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "b6852757-ff03-4638-891f-89032051251d",
        "cursor": {
          "ref": "f29f7a61-edc5-446c-9064-aadecce5f257",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "f54e2b80-1c1a-4b21-b540-b8ae775b4b42"
        },
        "item": {
          "id": "b6852757-ff03-4638-891f-89032051251d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "3b39b529-457e-49d6-b35c-925471079cfb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 133,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "2e1b3ce4-8b61-4273-8b43-ba3d806617b8",
        "cursor": {
          "ref": "21a47e83-5f0b-40ee-a00a-d68424c0ee21",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "4f8ad677-ac8f-4c70-aca0-3eb236dfcd32"
        },
        "item": {
          "id": "2e1b3ce4-8b61-4273-8b43-ba3d806617b8",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "281b1724-e02e-450d-87ce-29f95079bd51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "2e1b3ce4-8b61-4273-8b43-ba3d806617b8",
        "cursor": {
          "ref": "21a47e83-5f0b-40ee-a00a-d68424c0ee21",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "4f8ad677-ac8f-4c70-aca0-3eb236dfcd32"
        },
        "item": {
          "id": "2e1b3ce4-8b61-4273-8b43-ba3d806617b8",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "281b1724-e02e-450d-87ce-29f95079bd51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "f8146bab-2f74-4e6d-8e4d-fb92659d395e",
        "cursor": {
          "ref": "44323201-6a53-492b-afaa-5d8986384683",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "b5b42339-a0b8-40d3-ac0d-c6a62054fd65"
        },
        "item": {
          "id": "f8146bab-2f74-4e6d-8e4d-fb92659d395e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f1c372e1-213f-4b29-a19a-0be5109618d5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8146bab-2f74-4e6d-8e4d-fb92659d395e",
        "cursor": {
          "ref": "44323201-6a53-492b-afaa-5d8986384683",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "b5b42339-a0b8-40d3-ac0d-c6a62054fd65"
        },
        "item": {
          "id": "f8146bab-2f74-4e6d-8e4d-fb92659d395e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f1c372e1-213f-4b29-a19a-0be5109618d5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8146bab-2f74-4e6d-8e4d-fb92659d395e",
        "cursor": {
          "ref": "44323201-6a53-492b-afaa-5d8986384683",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "b5b42339-a0b8-40d3-ac0d-c6a62054fd65"
        },
        "item": {
          "id": "f8146bab-2f74-4e6d-8e4d-fb92659d395e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f1c372e1-213f-4b29-a19a-0be5109618d5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3862730c-4b79-448f-99e1-5aae4b03bc3a",
        "cursor": {
          "ref": "867f180d-d4b8-442b-af33-c0311f4b4939",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "1161ec7e-cf74-40d7-938b-60553a609b51"
        },
        "item": {
          "id": "3862730c-4b79-448f-99e1-5aae4b03bc3a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "26cac22c-08f9-4f46-a401-4f7cf003b9d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3862730c-4b79-448f-99e1-5aae4b03bc3a",
        "cursor": {
          "ref": "867f180d-d4b8-442b-af33-c0311f4b4939",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "1161ec7e-cf74-40d7-938b-60553a609b51"
        },
        "item": {
          "id": "3862730c-4b79-448f-99e1-5aae4b03bc3a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "26cac22c-08f9-4f46-a401-4f7cf003b9d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee0dfdcf-8652-42a8-96d5-9146b2bd1549",
        "cursor": {
          "ref": "f861c4cc-fa84-4987-ad15-8a7c6bbca119",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "be0036e0-1322-480c-85bc-d521726f37d3"
        },
        "item": {
          "id": "ee0dfdcf-8652-42a8-96d5-9146b2bd1549",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "071b5c9b-51b7-47df-a4b6-054772e6c547",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee0dfdcf-8652-42a8-96d5-9146b2bd1549",
        "cursor": {
          "ref": "f861c4cc-fa84-4987-ad15-8a7c6bbca119",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "be0036e0-1322-480c-85bc-d521726f37d3"
        },
        "item": {
          "id": "ee0dfdcf-8652-42a8-96d5-9146b2bd1549",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "071b5c9b-51b7-47df-a4b6-054772e6c547",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}