{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "46d87b36-04b1-40a7-9ce1-125fddbba7b7",
        "name": "Clear Cache",
        "item": [
          {
            "id": "815c5795-9828-4f3f-83ab-0837ec951dff",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4875808f-f6ab-4ee9-be65-52eeed926dae",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "444cdbbd-5482-4cc6-8bd8-3ffe8018c0c6"
                }
              }
            ]
          },
          {
            "id": "71c36d14-0d39-47b0-bf6f-f397eb00c5c2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f3869b62-71d5-44cc-b3ed-50b806640aa6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3aa40d95-86bd-4344-87db-ecd8d0b87b60"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "16fae54d-9177-4f86-9410-81bea03f0c2a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e9bc9c67-271c-44ab-a03e-1cdfe35043c7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "48adf8dc-708f-4105-a192-75ecd28334f7",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ca569dd-012b-4833-996c-0e6aaf5919a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b6a99045-7780-46b1-92f7-9a60b3628a2c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4cdd486d-2cfe-453e-9fe7-7cda762ee5f2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4701acc3-e6e4-41e8-8baa-8ebb44ee0ae3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f846eb82-5adc-4001-8f9d-135e4b76c904",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7c4f8b41-009b-4c1b-b8fe-7adccf0ecb3b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f86c8d95-f1a8-4ddc-a9b2-fce4e33bed49",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f876abad-b8f9-4c69-96b4-82ddac02fb38"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "707319b7-a47f-41ee-b986-df4a6b84942a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2419e9f0-caf8-4122-a85c-c4094ee10405"
            }
          }
        ]
      },
      {
        "id": "1c95a921-719f-4c3d-87db-6430fc2dba22",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e3079a98-8385-4e91-b67a-5cd50800965a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "18a51b7d-4fc9-4a66-b4d0-d85318f38d6b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "39b51760-ebac-4e36-8657-ffbcffb05412",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eca90e6f-83b7-47ff-ba8e-6446ed605d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4447e167-f01b-4ad6-b936-f6fa2792ca4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d58a8a4-846c-456d-956b-1037b8756ab8",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d35a1a3-58b1-4485-9db3-9c50878e728c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "14d3cde8-1526-44fd-9593-f1aad11938bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fd8830f-2a13-4f8c-81fb-16925f4880dd",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56b8a184-e102-42ee-ae67-f9a18b109124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1875e478-36bd-4c7b-b03c-0dbe2e3811f6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7f0a1a1a-2af2-43de-b193-e0bda13477df",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6e88d679-7fd0-43b9-bcb2-3932c2a000b3",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd7ff602-15d8-47ab-b61e-4f4e73b1c08a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "defe973f-4456-4af9-a0ab-fd4118fbb3a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73d515b7-4ea3-4caf-b290-78c561df7a7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8f5e7b0-6024-4b27-895a-991dc32b5121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae4274d-99f8-43f8-8891-e60e29005021",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6108c1fe-88f6-4903-82cc-73836d8cf471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "70428619-22d1-4b99-8010-969e83af1857"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f6d86ac-dca6-47a4-82d3-7358057108ca",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "c11a50a7-2ae8-457a-a408-5756c1aab17a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b4dbbdeb-85ec-4661-b93d-046270bd6761",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fedfae95-d979-432e-bd32-e38e4591a8a9",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ca5293d-087f-41e0-8fcd-c82f89b24985",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "a7197d69-6ebd-464a-8e04-4b90ca78e29e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d5bf7806-5fb6-459d-b7e2-ef7680b67a50",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "71c0d5c4-5bc6-4a47-bfe3-395ca70d5159"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d48a627c-e6fe-46d0-b748-0b426917cb0f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a46150e3-22f0-41f9-be3d-d40bfa5d6102"
            }
          }
        ]
      },
      {
        "id": "c8200b52-122c-4021-a930-2e18d937e549",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "2a1bbd3a-eca8-476f-a898-eeefa971f2d4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dfd7caac-533a-4d7d-a31c-2761fb6265f0",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "63e0ff83-559f-4b02-a03d-cfd13fc7912b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1990711-eacc-4086-ae81-02e52c52cdc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d11d9870-f6ad-41ad-a8a4-af4e82fa7a49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aff304f-5bb0-43df-97a6-10338d7edaa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73f6859b-31aa-46d9-b43b-5d2a2c68c2a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3716c0f1-e14c-4159-91a6-c43f12b0c2e3",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cefda409-5fe8-45bb-85b9-062ac8f35eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d9d97b5-a5ec-4d0e-abb1-7493570effa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b88761bb-7adb-4d8f-b277-56053d00d856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3699289-f9aa-4c1b-94b0-24af4ebf0ba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b5db538-c7b1-442d-81a4-1d4ffd87cb37",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc7d930d-d942-4761-aaef-c5810f68b6d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab1bb4ed-4bcc-41ca-8938-e215c631ecf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62f7ccf2-0115-4944-a433-006019342bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db51cafc-a094-48d2-8cf0-c018c088bcf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28dedbba-0e5e-42a3-9095-3d0b2414ca6b",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c90c5cf-95bd-49fb-80a4-687fb92a8b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f369d11b-c2d0-4c88-822f-d27e54b56f1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f73788-c42a-4764-9cfb-06951f0cf99e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23ae7d85-c6c2-404d-a3e4-80a74c96e206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f100bf9b-2da6-4b44-9523-cd4ed9b7c8f6",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f86b0ec-81aa-4277-a9de-d080b1868794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ed10c3e-0e4e-493a-868f-e723cff998e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c227123c-8d5a-4cc1-ac50-c376be0feb32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "961274a5-2599-4c26-9fe6-5860b1407d25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b57e815-6763-4b88-ac17-3b587ecdf686",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e266c810-d508-4cd3-9373-333f24a3cea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce63940e-a2de-443a-a76b-569d42955bef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e4e88a8-2140-4dfe-8d80-e41ef0ce9fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7868423-844b-42a4-9ad0-11ba3f8fa342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9cb89cf-0fb2-4e91-8784-63ce25f906e2",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e2570d-3c0b-4f61-aa40-f4d67e0d5c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2236d5ee-7610-4d26-821b-156148d11ec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc8eb65-933f-4aae-8808-1de832b87710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a8796f0e-30a6-4b04-92ef-0f47a3cce99e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69155431-3503-460f-bc8f-f66bf7755bd0",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "451e12ec-4591-4185-8252-c77d40b87419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1ce887a-9e0c-4bd1-a871-457487a34824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13c9ac3b-6130-451d-930e-e84b6aaf66d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0d9957cb-dd72-42eb-8a40-6185004a95ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2556db6d-577b-46b9-8c95-5d47a5b56854",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64b644c0-ee6d-481f-9dbb-a9843e36ffcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1157589-4fcd-43c4-aad7-38988ae5d900"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb0447bd-1eef-4600-9508-16354fbf15f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c187b4ee-796f-4bb4-a872-d658cef2c912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccdccd3f-a369-4441-9952-c605c6d85525",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f7238b-f49e-4f65-b183-0074dd7b8506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff8beed9-143d-4407-bfb3-074d9efb009c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e0e662a-8249-4fae-a357-916d424797f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ced95795-2013-4c21-ad8e-2b8d854688f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d318731-e6a8-4b94-988c-01e7dda38544",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46ff6ab2-25b3-4a2a-86db-6d70494c5a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0177adfe-1f65-4ce2-a050-f06b579032c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0168503c-398f-4c1d-9077-222b8e3f7120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd7c07c9-1a27-4456-bddd-d0885c87b684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e820202-b306-4c49-a593-7f5cb94406c1",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbdb45de-6583-4e9a-a5c1-f7c79720fd43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ab323e0-9349-432a-8559-21c6d4b00ba6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9668e4de-7ef4-477d-a62d-c124e29b813c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d8dc367-56db-40fd-bbdd-d52ba0a70c91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53bef8d4-3f87-46d4-820e-020dc3cea825",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a890f02-41ee-4ee6-b5dd-75db44fbe941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba39e7fc-c72b-49a8-a5aa-04880df90221"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee4556c-63b6-4aa8-be73-2b7909310722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd09cba6-0308-4758-84f7-5764d21d5ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7256ef51-0974-4d97-9c8f-3210bea8aede",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63bd53a5-e33e-44f5-9a1a-fa390a930533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efe87bd9-762c-43e9-bee6-046133ac63be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "245caff1-4e30-4d60-a184-b3c450411efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "036a9d87-f2e0-4285-a686-9be18d102101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b67a0f4d-4aec-441b-8cd4-b44202104ee1",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b439b8b3-51b5-4f0d-875c-f364811c956b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f142db0-e3a4-4dc0-958f-c13a12cc19e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2454b0b7-4810-4bb4-92a6-5924d74afa08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e7aa1821-7d67-4020-8306-a4b6347bcb67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde5a2ea-020b-476c-b4d4-73d2b9e56ae2",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6567333-1615-4765-a28c-32b86529ca94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd428fbc-d21a-456b-8d7b-719c3d8cc95e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "770bdfdb-aab5-49b3-9974-89a0c4b514bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4300b4b8-231c-43ad-bc3e-f68ee532f048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8474e06c-1f7b-4265-b017-64c839b9752d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6546650f-dfd2-4d04-b4cc-95816ee28014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "361905e3-d280-4cd0-ac4d-4d366efc29fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d0bdad-befb-4fe9-ac09-25bc3df9fe4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da055712-0c6d-44ff-a46d-c576d2c95653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11db70fa-3bc6-4f0d-9d67-af134b185df2",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2965e1d-0ede-4163-8247-6d96534c04bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "607a35bf-c3e2-4705-8ddc-9a01473844ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0214865-7e49-4204-b6fd-fadd29b12551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "33584d5d-7e8f-4e93-8ce1-876ac0ca176c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2116502-ee57-439d-98f2-1cc328a6a404",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2233d9d-361b-491c-be4f-cfe993ecb7b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81e4d4c6-2315-4a8e-bd62-49c9297560b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27c92687-893e-4c19-a163-9607ed95e40b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "64f826d0-1b64-4441-9775-a6700e4052ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a33d6c1-207d-4ba6-a368-c0f619123804",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d16ab36-2f6d-4cb4-a34d-c6166fd0c8ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f91617ff-1b34-4129-b4ed-e986ea1b4e7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b51cfd-bbc8-4ff4-b8ae-c0f915dfe717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c98a244-6905-4014-bd21-2df5ec13625a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8012412-afaf-4733-bd18-0f0458d7e98a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc30561-ff74-4c9a-8940-5be12960f8a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "251a0916-d0b8-4604-b75c-5da7ae409a23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82722897-c1c1-40f1-8dd3-ad79c74af0be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "05c6891f-c79a-429c-aa13-87638bd4909e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0750cf86-c7eb-456c-ac61-aeb51db69d37",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d79feb-963c-49d5-89ad-2f7e51c317c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "803b4bc8-5752-46c2-9b7a-a02489361ee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "430eb8c2-ba8a-4fe0-abb3-69ba237bb15b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d0f53eb-3031-41a6-9a8a-9cc1a5339188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c45e7bf3-f1ce-40c4-a96e-54c88872058a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33eede18-ea83-4016-8bd6-16caa7b2d9f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4af96ae9-c777-4714-8e68-12895d825395"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af780f9-6487-4be0-8000-2992f533776a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9797be23-fac0-4f21-befe-45f4746537d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f827625c-a7c7-4679-9735-fd55b19c3399",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f97d3ecb-6f7f-4de8-80a7-2d7eeb58d222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "766d2c81-e913-480c-be94-e2e80a948997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e6d59bd-6468-457d-b1da-2502c4233a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "48b8e6dc-0b33-41a3-a2a0-46cf477fcec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d3681e-65ee-485f-873d-7d02e060f0b4",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e379e0f-ccde-4e4d-927e-4ea57668fd9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5194e0e-bc2c-452b-a3a8-ea1c0b16714c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5e27e3a-2da6-4c5c-aa84-e25e0c6353c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "41304458-e285-4b51-8b8f-df14d7e46159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f582e6c-5a13-4626-913b-98b6e914de1a",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "569b5091-c4d9-4b70-b774-15b1cffac74d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dc3ebd2-e782-4cbb-9f8d-384206a5fff1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b78602f-5e78-457e-b4f6-c767c3b504a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed1e5c77-c0ad-4ca5-8659-0c5139439e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e151c9-6cac-41d6-8014-4e84ebfd4c73",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3366a482-0e41-4083-a6ab-7256b48583e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e40f54d6-8035-4e2f-b16f-472b01997e08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d4f8e3-06a4-4cad-a488-53b012d028fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e8e30cb-6bf8-442a-a0e5-bbab70903c93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e16bb9ca-3694-46f2-a94e-1bab8b6646d7",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fbd16ea-e3d0-4150-868e-6c56b09a7ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8616960-b0c8-4b72-a7f5-9ac43b73c887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d471f8cd-94ec-40f2-a72d-8e5183b20b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb511a7f-677f-46d7-892d-de547080050d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b17f7ee-5f8d-4079-9452-ca9639761ad4",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c311f0-1c5c-473b-8d30-f528011a8351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9d29ef8-7a30-4ae3-9667-ca82b6f5fcb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36901a31-7b9a-403c-9f50-497070ca0ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "494f62c1-861c-4dfd-b50a-2d64fb0ac071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085b19b4-25bf-4fff-ac17-34f254785554",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eae59e4-a5ba-463a-abfc-55797bbd4ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9a7650b-e84c-4ac4-8c87-119d47becc6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7efd513b-9140-493c-af8e-a085272d5143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e17a640-93a2-4497-af09-2262d37e3dbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c04d8a-8d91-4dc9-bb90-60e23a1a4cf3",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7720b852-164f-42ba-8581-db56b77dd690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f1e872b-6d73-407e-af47-244b4e0d5b4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37c26f91-ea48-413c-a2ee-f17c1b037a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "08cdbd8e-5fe4-427a-aba7-cadc9a07167d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2c202b0-c04b-4f6e-8629-5131ca9cc5af",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04cd9138-ba76-4d35-888d-ac5b2ba1f41c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98527303-f010-400f-8a08-cb2fcf49b5b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc6b09f-54f5-4548-803e-67bc87b39fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "28b72fba-a622-495a-9c11-09e2dad35909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30df9b78-f965-4146-9d02-3b5d306dc758",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e6f9fd-019b-4e65-83ea-0e3b28d6f739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9bd7c0b-1904-41ba-b849-2845b1831187"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d94f04df-90fb-4922-8376-b8695f142f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c5ab551-76f4-4cdc-b243-dee08702bf2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c98d380-1418-4d25-b426-8b1e12a901f2",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5987c4b-d715-4ad3-a6f9-abf29111b3e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73fd99a9-4e6a-424d-a6c2-962ec360f172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a488dc-250f-4c67-b547-1be792a43d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9a31a45-3ba4-49e2-8d15-d2060876b1ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "151d2b19-2a57-451f-8cec-aa89144599f9",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d50d42e-4963-418c-84f3-f95e6907ab04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbd1e506-be64-411c-b607-be3a979f3613"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42618be4-2412-49bf-bf81-3514eea7b331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "3b227c06-82cc-41df-95e8-57b143ea49d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d48b3d-704f-4091-a883-56f83d1d3c8c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c307a8c-3a10-4bf0-9839-b27fafa711a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7fe7c456-bbab-4799-aee5-e6fe36e59cfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d018c5-db3a-440f-9795-2fafd4a79fb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "497b1560-378d-46f6-8647-17ca443605f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc0d2de-8189-4f08-bb45-8e37baaec3c7",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb524a2b-9275-4bcd-b0de-7ae8f30e3462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dff28ec4-0664-4d4c-8189-c572052ac283"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fabfa23-546e-4c53-bd13-adf0578a9479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "86a0cfaf-7996-4906-a71f-d921b6bd8d3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6089e7d-09e2-4fcf-8b12-a78e1f4487ca",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "249d18dd-31d0-42dc-b06b-89665dbd3d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "100cf610-ac77-4249-9024-589665c39d23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa9c6035-755a-40fe-bf05-1e3c97e7ea10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e3cbad5e-b6ce-4ee0-9d21-a6d06e8c9ba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8aef5cc-d84c-46ce-a16f-f36a7b495330",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82aad9ed-6a47-496a-b236-4895ac34aafc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad400ea7-082f-4361-a00a-aed287074109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ebad44-24f6-4dd7-912a-00e84a220236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "42ac98d8-50e0-4844-b5a9-27476ea7efec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91da13c1-aed7-41e6-9919-e9a5281c4dd7",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "447e5596-1110-4d72-9ce7-41e3b7037bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67821ce1-efb1-40fb-856d-82994f6db584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b30ceaa-522d-421f-bf4c-bf2446aebc91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c89ae7ef-79a6-4b58-b2f2-b39d9ffb9e8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ff168ff-611f-43b6-a8dd-d0f105208821",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "954528f4-a0e6-413f-ab10-e6b8abb2f516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86a56509-13de-4083-aef9-1c1a46c59f85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f4c876d-dcec-4d65-8657-e5e08a566cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "54c5142d-b2ff-4b33-8f65-b42cfa03cd02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "969ca7b3-d1a7-451a-bce1-516d2dc7a69c",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0a7dc3a-e697-4146-98bb-3939781e7578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89a53262-f030-4310-9447-77d8b5a8a91b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d50c60-c3d7-406c-8038-3b9170e72432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "bdccd821-c0f8-4495-a40b-e318b8a3b57e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41054cac-c4f1-4cb6-8868-4ec806444408",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2792fa25-f49f-494f-a7f2-5e0502e1d8f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0a1fa49-74a0-4482-b5c1-3188ac8894f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d7a970c-97ca-47a4-bc74-c07fdc4bb96e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "24bfa059-7370-4c65-b170-2628621fd109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "797a02b4-f1d9-4c9f-b993-5259f6ff48e4",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a4f7630-5fc1-4666-aa20-49268583ce05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3416993-c5b3-494c-924c-0be3fb86c813"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c19f4d6-bcbb-4ee1-b648-737a50f1004f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae4beffb-dffc-42d8-8b6c-dbe25c8872d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5b38552-d583-4767-8c8e-dea1b8d89ba7",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5d2f483-3a4b-44ce-9bed-53d724af2fc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcc14d55-1f48-4625-900c-a471c8788c35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "336260e6-1fa2-4c87-ade2-bfa46d4ae19d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a55d11ea-b6ef-4599-8916-9812bb712212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61893fbc-527f-4e0a-bab4-df694d6c819e",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0355fbb-5473-4d33-a591-62ae2e54f35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b07bffee-74c5-41f9-875c-c66824670cd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab6e1e8c-6d1f-4f62-94d6-5f40d8f1ea8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f2bf7ce-4884-476d-8e99-105efba50257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea968c19-078d-4c75-be56-8942f444057e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b81718af-b7a1-4e9b-907e-7ab64d115162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0032ec11-6240-473a-a1f6-0a84111f6e55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81ea2b6a-4262-4566-aeab-1c36944f5893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "689f7b6c-b831-4169-8c94-f0fa9d36ad19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f6403a5-af56-45ce-a38d-c88ff463f391",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ac8d47b-8664-4f68-8772-88cc8147ee45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94e09da3-a70d-4e5f-93f9-fea813c1f977"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d8e69a-3a3d-43e7-a0ce-09d119cca1a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7f81331-07e4-4fde-ab69-e7f8ceae7fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4434a27-b37d-49f6-9c8c-4270dd6ad626",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42d5f4f7-bcdf-4269-abde-155db99bf2b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d88330b-d6f6-4151-a044-88dca2ec467b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b495ef-0eab-4f6f-a85e-02c1326a8564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b393ffd2-7684-4ae4-b052-253cec8450ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7ea7fa0-f272-4ce1-804e-8bff1f7190ed",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5551a855-da69-45d0-a4d3-c91801522aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e425e5b-ff6b-499e-aac6-bc470a7dc7c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e34da416-1c79-46fb-8dd7-2ab4f163df50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "048bf0ee-24ac-4b10-b0f6-df56d84b2be4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddeb519f-d690-4954-87ee-152c75f1af67",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e53f087-4631-41e9-9e26-ebb5c2573748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2ac607e-bd4f-49da-94ad-a0568a148784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f619e63-4617-4496-a3f2-47d204f1ab9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "203c1962-7191-41ba-94ca-ce7e46423cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0bef2f3-ba17-4887-ac6c-646d6ac4c314",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d5f029-9760-42f7-af2e-dfc6459be436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ed03702-a1dc-4b48-96bd-699d08d27d77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c74810-0d56-454d-8351-eb3a4ebebba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a9f8cfd-f45b-4aab-9a04-de521f0856c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8556aa7-922b-48b9-9d8f-d703fc9027bd",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b78c06bd-9812-474b-9e5e-55e0594eb3be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3825f0e3-48ee-4606-ab1b-c10b1d6662e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60efd60d-76ae-4518-bbaf-dcf1a52f3c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e75bfa68-c1b0-43d0-bda5-6c99c53ef3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "220e2c9f-281e-4249-b219-03875c81c64b",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0961a6db-c091-4caf-901e-3de96fc4455b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b842bf1-f2ea-4e7c-8c5d-cada6232cfcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f2a9a1a-3ca7-43da-9589-0f0eb941ec59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "567d082f-9877-4b5d-b419-0cc4dff64d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d99462d3-2d18-440a-b456-6d1e4a31e1f3",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad60812b-1ef0-4eb0-87f0-b97fd0d61a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b980752a-ac34-42b4-b7f9-5222e6f60298"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1d2cf89-3645-4eac-a295-2fbdb3999978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d460ee56-a505-40b3-bcb5-56e89daa12d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eb0dba6-76ef-4c82-97f6-d04b3d5fec4c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30cd1447-adc9-404a-8e2f-57d1dd2ab060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8801ecf7-7083-4e9b-b1d1-f5fb808185c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aafea21-9d54-4d34-a1f5-dfd2bc2c66f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "1fac686d-2d3e-4161-b1c6-8356fea59c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3ab7604-733b-4f8c-9e1e-5bf32f107502",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a948cb3-2085-45bc-9d03-1850ce1d01f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09aeb074-1114-4e28-b25f-53a59d79daa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "074a4200-dfbc-43ef-960b-029a32df8921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c0f26a7-4fbf-4a7b-9e58-c76904d55e46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "249018ad-0ad1-408c-98bc-f009e18fdc83",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e20c240-26ac-4163-867f-478feecc2536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cdb7a74-53c2-450a-8347-ef54bc363fcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74fd4c8c-8642-47ea-94c7-4499e36d776b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "60c40983-9842-431f-9e61-6110a842ef39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1942b504-b2e7-49a9-9e67-4dcf4a31616e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f889ae62-9fe0-46e9-8823-9f7a388be5cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51f31135-c790-414e-88d0-f36af2d43842"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca152df8-36c4-48f4-8eba-50b2e7c76b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "db647ecd-b971-4b59-8c97-755c77b194c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51a8247d-997a-44aa-b7e4-6b959082b7be",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57a70e9f-26b3-41e0-bbf5-f1ae719344f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8c20ae9-a46e-4c6f-9a50-f71e85928c84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d13e3e5c-5476-436a-880f-3380afc3442f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "51111e10-f69d-4541-8e61-2526e847ee95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b71e39a-926c-42b4-a5e7-f7d37f9cf0e9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1817c65a-ba5e-4f7a-b1e9-23e9073f8c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca30be6d-25c9-4a70-8755-3e4f12dceb96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc8c70b0-6eac-4d05-a124-650fd76ce2a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5db93bae-4e9e-4b08-aab5-6a3f5b6fe2fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b78ca23e-a655-4f9c-9456-8e270049f599",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c7f5558-ebb0-42d4-a623-ca559a01519b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6918a625-3b39-4d41-8e8e-6e6592788217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b34390-8323-49bf-83f6-459649703a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "47ad10a7-95a7-4ddd-8b86-98212ee84b97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b2b2413-b327-41a0-b087-f8156b9ccd09",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d4b2f81-025d-4fec-b07b-8e811def7ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8130b802-c257-4ca8-a5ff-0c05e27c41d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "803b239e-c344-43e0-a64a-e2c202a0a65c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "51d0ccc0-d07c-4c20-8511-26c89efeca4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7df11c8-e4fa-489c-b312-a93a21097f63",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "077d1cb6-7526-43df-a2a8-5876f5cb1478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fe690de-3681-4d62-a7d0-77729cec43fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e7acb2c-a9a4-48e9-bef6-e44ba872765f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0324b196-7c58-4bee-98f8-7e9c1208bbb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5710dd82-da17-4ed3-8e41-f9c9e4fc5b8e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc326dc-86dc-4451-89ce-ae8c54d09828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61fd51b5-2b89-4921-b754-04b150a5c222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0b997bd-7b31-40ca-9338-73fe9653782f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6623b55-1a98-469d-9eb4-b348c3a35c30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fbe58a6-2eda-4a22-9dbe-005dce336ad0",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12dc4d09-ef8e-4a1f-a1fe-5a55fc61859c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fd670c3-c666-4ff6-bc2e-a4d93f7a1cf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b1b616e-9970-4edb-b470-2dae5d8ad315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2250c99-60be-4c09-a5d0-21a099ce3b85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "647d11e2-072e-48bb-9cc2-b8ea71dd2f02",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c554c243-de4d-4e5f-a02f-1139d4a146b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c59e8285-8148-494d-854f-cf0ead46f040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8db26b0f-8a89-46f9-9402-23f077b4f351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b441865e-861d-45d2-9942-47765077a446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f7f1c8e-b072-4912-a17a-7009ca59080c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1afc55eb-7dab-48b5-be9c-449eec335d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55dd7eb4-7083-48ad-9cc2-640321702607"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47dad591-c28a-4880-a4f4-f6d4c7235515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "337c47b3-fdf2-41cd-8369-65ce21e86498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ccfdf38-3b14-41b4-86ca-2491ad178bab",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07fbd5ea-5bba-444b-9fad-31d9e9a0aacb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fe91483-56b3-4ba2-8033-426aa48de2b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baae6bcc-e177-4bea-ad98-85b2e0e24722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a65a75c9-b375-4d31-b048-738e82af85c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eff1591-adf3-403f-a97a-908b25a99b2e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cc73946-10d0-4bcf-b707-5ab565087886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7795190a-87b8-4896-a1f5-0b2d2e31c17a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad6a7cc0-6265-4457-8d30-aee72963095e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aba4d325-035e-4650-89b6-707959a380af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056beece-19f6-44d8-b753-cbed3bbc0a10",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8bcc2d8-ca04-4ae4-a079-f9ffd66187c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b235d8d9-0282-449d-b367-bf3d1718532e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c64eae9-60b4-407c-b0a6-67c724eb577f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d14cc627-45c3-4898-98ab-4a1bac810f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4707b96e-6c21-49e9-98eb-eb0d3bc056af",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a38442-88e9-40d2-bce9-e418b45075e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "033a8244-07d8-48f7-bd1d-03b9d526cb19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aa2f681-dd8e-4cc2-9d7a-e29ce497d175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2243fa17-8403-4605-b52b-02c7cc652b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc7b8a39-4921-4bda-b6c7-d88ecc2dab30",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f509ffb-2387-47eb-8733-96795d4e2862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a920119-fe07-4be5-9195-19a6981fc9ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5aa1cb9-9e91-4cb8-83aa-4eac217a655d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d5a4c5a-6423-4a65-a81e-74c289df214f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc7da4a6-b52e-475a-91b1-333a34645c64",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc41f14-fee7-4f62-a1a3-e10c0af86514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e431edaa-6260-482e-b115-016a54d2f48b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28d96ae6-c330-4d4a-843d-0e1484766a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ae68c083-b7d8-4be0-a94e-088bf16b88b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3733712-066b-40aa-8d55-cf8a49dcfca2",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf85d08-3c03-4c01-b42d-1d80b17c3d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6996d6e-0bf6-4fcc-baf3-90e81b44b721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "401b661e-4f99-4c6b-a0c5-dec35b6872dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fa432c9-ed17-43d4-97f4-d735f31cd46b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00e34098-5a33-4e72-aa82-a0734d1aca6e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b10d23f4-ed0e-4696-ab02-088883180376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4ac312d-ec97-466a-815d-ddc330cf1fbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc1e794-3b6f-41bc-9f93-d7d0cada0a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fef34b42-1827-4952-a740-7885795ed9d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ccc7dc-af2d-406f-beaa-b9d5550f8807",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "605c6032-236b-4284-a276-fa7b2bab9252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ed8d900-0186-44fb-95e1-c8365c5daf47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3df31a4-99df-40d3-bc9b-83500643c6f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba07eec4-02c3-43dd-9074-05b53210d477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79eabaf9-3753-4e39-bfa8-0c703b66ed10",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5787993d-cf5f-4782-8527-409442e33e92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d1a1fbd-bf63-48ed-8755-fd9a076562d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "266f85a8-76f3-4421-a0e2-c2cfabcc9be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2188b99f-9a8b-415f-93e9-d6d745d04970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ad5f3c-63a4-4c81-bcd0-431a85588f51",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdda02bf-b0fb-483b-85f3-97d5abfc3c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c9c4865-e00d-41df-a573-a853bba836f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f86311a2-5bfe-4342-8597-15c2cffc86c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a1a6024-4498-427a-a2c7-7b4b95f1d427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "031fba11-f825-493a-b93d-7e45c04fb3d2",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdcd15be-87f0-4944-96fc-5b48530ae9f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9eb1d54-4da6-4783-b93d-a89d1b95944f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af78a607-fae7-47b5-ae99-f3b8f867bb4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ab6d2cb6-0770-43cd-bae8-377ad414b9a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18510791-95e3-4ff0-8378-d34d31010ab7",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7459faf0-fbde-4765-98a3-2a529acf4058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9190eba2-5a74-4346-b4b4-ecafcbb97b75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e19d6c57-5ae0-464b-b3ea-202154d36206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "95d98c67-afc5-4a08-bacb-0a2f03e65390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "421f8f36-e796-4fb6-8762-fed4eb66e0ab",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "653c21ba-ae2f-4f87-a30b-0b6e2f0bee7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "983914a7-95b0-4245-811c-5bf677a969f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8198638-8452-44fc-ac4a-619e2368b38f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eed2f754-386f-4e6c-bd67-01351b07639c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3c939bc-c4b0-49e0-ad4b-edeca6e27296",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "515d07bc-4fe9-4add-a85e-1388bd8740c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56372ad8-4253-4588-9d4a-0c66c0dfe268"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ed12c20-9bb4-400d-b869-381953130d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f09fdcd-2a69-4fed-976e-b40a51acad49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b26cd83-78d4-46c1-b3c8-e8472338f65e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec45bf46-0ff6-41a1-9141-d5c164c21787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c0e579d-d391-41ca-b996-081e5670df01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "170692bd-96ff-4833-9900-28b23744d979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a62f976-2d67-400b-9691-b7f851f20ba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a83e7a2-0981-417e-b6e2-d0c35ecf8284",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed54924-8377-41d9-aac9-46458444db5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0619d39-fe17-4990-a5d9-777523332c52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f2a1c60-85de-4fa8-8985-cd0bd06b9dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9c22a6c3-c874-48f0-9265-32751fb2dcd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c800756-2b0c-476b-8f8d-6cdd1903399c",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "201cb999-23e8-4892-8c4d-e95dfc8dfd3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d61f7a7-eef1-48c1-8ef2-3ad4b38b9bca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96e31cab-fb85-4371-995b-b065d1ff08aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "52c97f83-e6b5-4a72-9851-8ccca2431233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8401a8ed-e456-4398-adbb-c6f0360e0867",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e73fe60-883b-4dad-859c-b4df15ca664c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f272bbf8-7051-4bb9-9812-3d984fada44d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f990cf0f-40af-44be-bd6a-983216efd951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "89e33b13-5ad8-4b2f-93c1-278a632a8f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1548a97-1b58-4dd9-a907-d8c1fef31c4f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1725650d-ef4f-47ab-a07a-f4dc04ed6e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bebf5bb6-b81e-470f-bcb2-594b4f9e1668"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3949c125-51db-43dc-b984-b16128706a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "23e366c6-d37a-4ab8-986b-274063aa6a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d444fce3-f8c4-465f-948a-bc2da8e36724",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "681f738d-5494-4e9e-98aa-602ae7202222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eeb6588-42bc-46e0-a821-b166e24a7b82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ae153e-214c-47bc-8b70-8ddc5b6bf8ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0cc12b80-5278-4092-b57a-031e44fd7170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca7d7fb-7869-4b6d-b5b3-2adf1f86be01",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9773c119-d20c-4153-bbba-a1d957e3f293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fa1e635-0524-4f25-a878-f387afab3590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5edee280-f592-4424-87fe-369b63e1ef36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "20f258d3-95ee-4993-85f9-8efbabcd31a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b81b1388-8204-49bf-aa48-c59569b99d16",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf38c93-ef1b-4e99-80cb-e2306f5163c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9df2e1e6-6d8c-4f45-a823-04cf848a8ee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7b9000f-6141-4463-aca1-ded27642e47d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd356dcc-a4c6-4fcf-9ec1-8afa20f1b509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25eee8c3-3429-49dc-a03c-88c933d8228f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d3219d0-7ed8-4e81-8ce8-a7f20a54e337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "622a4cee-2439-44d0-ba0e-a353ff88fd07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d652957a-422b-4796-ad32-57ae4a59844f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "29d444da-750f-47ea-8ad1-becf77d9c2e4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "abb79d53-e5cc-460a-95be-3492b5602872",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c506e031-32db-4865-a2db-e21704e1a1e2",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "900442be-ad80-4acd-a22b-4a8da6ed64de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "52e68c9e-6d50-4be3-8b62-8f1491531269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8964ddb0-18d2-4e2b-ab22-68621f32f0c2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "c4b6098a-5243-40ee-a50c-6b7d56e8a6f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed23f2f6-b4af-491e-ac1d-979ef476b53b",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25100cd0-58a2-450e-a331-6c93b3fb341f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6c18904-6b53-47d3-8f87-d1993c36ee8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cedfc8a-30a8-48f0-b5b3-ff1cb3e8e2a0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "3b4c039b-40cf-4ae2-8607-5deaf4433d8c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e65a7df2-e8ce-4ee7-8661-884b14a35013",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "32c8fd79-c848-4eee-b0fa-ab2f2b838dde"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb2f235c-a5da-469f-b9fa-c2cae298d807",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed44abc3-b441-4865-905d-83377077ddac"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "36504473-4e18-41c1-84ff-a43e27de228f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1c26d553-83b6-4b42-a2a4-1eb6942a57b6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2e156825-7c76-44ba-8bc4-7ea15d477561",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d4a1aa68-5cba-4b1b-a528-cb3fb8bcc625"
                }
              }
            ]
          },
          {
            "id": "6f1509f9-ecbb-4a1c-9497-9fe72dcbbfa0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b934e168-b23e-474b-bb6a-f7dd199e85e3",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "016c215e-b3ce-488a-add0-d32e14168a5b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "65883214-e786-4590-92fa-8c424e75fae4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef002029-1512-4ffc-ae25-e156a1dd056b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bdf6456b-0180-467a-80c4-8c0f72e6399c"
                    }
                  }
                ]
              },
              {
                "id": "ea56e45a-7de8-4752-bb01-a49f61c943e8",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0337f6f1-a910-45bf-8c65-186b9bdf3e2a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f0a8c4d4-dc0e-4908-8e10-43acfa6f6c4b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "39a21df0-a0f2-4305-9638-5d1256fda672",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f1a2d0a6-e006-48a2-8303-a766d3a5698f"
                    }
                  }
                ]
              },
              {
                "id": "c8d56cbf-a4cf-4feb-8cdf-af9d116a87c1",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c25476f1-c2c2-4d77-9050-cb085b39caf7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "657452d2-65bb-4033-a020-8065e5fc225f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6b926790-d194-461a-88e7-8ac26bd774f2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7801da60-f3bc-4138-8849-23d485418473"
                    }
                  }
                ]
              },
              {
                "id": "e57b9afd-6e82-4933-a50e-b37ad17fe4f1",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3c7cbe7-0656-436d-be2a-3e498fa173fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f0602627-3ed8-470e-83d8-d76dbae5d162"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d2936e8-2c77-49dd-b1a6-c147dca1fc7c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "db1aaaa9-8850-44b6-87bb-d2f0d7fa2aa9"
                    }
                  }
                ]
              },
              {
                "id": "4f48506e-1e46-48e7-92f2-ed6ef4c03aad",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c40c6164-72e2-493c-9f7c-344c6cae87d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a2a59800-2f4f-4062-8a93-8699e00496df"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7f06590-4fc9-458a-a277-e4b335972cd1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d51108d7-3c2a-40f4-9bc3-32fea9b13527"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bfd1dfb3-ff8f-463f-92c1-aac2f501d7f7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c1969e0e-d1a9-46f6-b81a-adf958d07f3b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2a4553d8-6bc6-408f-b538-ce36c3eb8713",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9bfb092d-9df6-4408-b588-f4777a7fcd3b"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3aff0a4f-d20b-47ba-b03d-1473d65b6776",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ae9b2079-da5a-427b-831b-e46bed156fe5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9f4867a9-a980-4f32-badf-5d6cc5e727e7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "40eace2a-55a3-45d1-b4c2-1cc4851235e6"
            }
          }
        ]
      },
      {
        "id": "1e40a51e-1779-4dd5-8138-7c60e7ed6ba6",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "4ad2a8fb-4883-49c7-bb32-83b7ed541318",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bf0afbb2-baec-4812-9723-c5b8ab4edc20",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "516e1197-8583-4438-bf77-4675c8b235b2",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d93e85d4-ccd6-481b-be04-d817b17db0fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bff2f924-d88d-44f5-a9b6-d7d0f341fb16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1a86f05-d6b4-4750-8fb6-282ba7e29a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6db29c0c-5b4c-4cfb-98a0-fc893be3b9b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2477b97a-7944-4dad-b00c-f3457ede630b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b66c93-3357-4202-8e4c-3901dfa8f745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efc0be01-931d-43c5-b029-46800a4c69e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab9d017f-647a-4100-8d33-e82dfc7ffad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d9a6739-6121-4d02-a416-d6a5583d3d68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "002af85d-8217-4e39-b3bd-71a5db69470d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f5374d-55f1-4e73-9216-7b49c7c38dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "311eda19-7529-4c53-bf31-51ec7f2b247e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "773f1e08-4981-4ddc-975f-444fc4f41498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c99df42-c1d0-496d-858b-02e0e2f8a803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d32bc39-a9bd-416f-949d-57d0b3ccfa04",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e153e871-11de-4431-aa5a-fc4d325febfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a28ea94-abb9-4688-a591-658225259450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ad7497-408a-420e-99e3-fb325f5f198f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eefbf3d5-ad1f-4abb-b886-1b9ed9ae18e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffe158cb-6091-4640-b191-23c46335928f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d737d9-f2f0-422a-967f-dc5dd9f89407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91ef6e80-2e7a-41ae-aab6-4ffff1fa2933"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9e2c0e5-2d63-46e7-9d99-0d7aa4012ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "692e75c9-ff7d-41d2-93c4-2bd1631be8ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3bb5303-3617-49dd-8137-0cacfbe4e7b6",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5892f506-c53f-43fc-813e-2046a99a1aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f97681c-5b2f-409e-932d-d3638cee30a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603be4f8-debe-4da9-bc46-6432ccad8c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5892821-38ef-4c33-ae66-c91c1653227f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65f60fbe-059a-4a04-9a98-d78dcba42290",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e93b829d-248d-494b-b47e-7127aa37c43c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41fb2317-2d9c-445a-b0c1-949181f70dc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f01663-b505-4a94-bd11-2b2a71193e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1cf973b-a855-4956-903a-3994c8193ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffaf7b43-72f8-42ec-95ef-6aca633aadd1",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e42c024-0311-433e-8a53-316795930aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e30a129a-8046-45a1-82eb-8544d1d235e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15e164a1-59ad-447b-b151-dca3ed0df667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd3370f2-290e-44b9-a3c2-3c3db301319f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aed7992-2750-4a20-bb75-677a4c464136",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17364c83-9af4-476b-b395-457f6ed0add7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "389f1b42-3217-4040-acd9-c553b696b362"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d5eb68a-534a-4337-8d48-4abdf26414f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fba9d856-d4a8-4845-88db-988e685309c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "214af5b9-8acb-4087-b003-7e9ec3e6cdea",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d0a875-f094-41f0-886d-3c5b3232a3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d47536b3-f75b-4e26-8a2d-d3166e2a38d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21e42ca7-c158-449a-a21c-10ef0094ccf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e15e930-abc3-4790-8711-0d0ba3f1328f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1505417a-e91f-4b4c-95d5-9d1eb24a0f76",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4f0693b-027a-4883-8b00-b406783020fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebf87875-7065-49d7-aa2e-161fe94c98c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e141af-09d3-4b70-9c2a-d564f174c1f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c24ae429-4b97-4ece-a45f-2e7ade45520e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f15e3f56-a55d-49f4-a92c-19e827c40954",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ebd482d-e95e-40e3-94a3-73cf801469ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26e8f3f8-5fe9-4dbb-b1c8-3dd7126bb9d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c055bc07-c4b1-43c2-ab03-e265bafb6592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "639ec561-24c0-4f11-a6c9-4c21d3c95abd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb7dd26-37f9-4158-933a-b875201147df",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "643debaf-6fd3-452f-bd54-1b0270938126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf2ef4ca-0eae-4cb0-aba9-cb70674eaa12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bdc86e4-b2c6-4b40-91ef-8c7a9734388a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5547c274-c2ff-4fa0-95fb-a5825039425f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19091703-a924-4960-8735-9efa8382426a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "897898ce-1fbe-4832-9bbe-74fa8a475c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43f21678-9e1c-480b-a3af-9ad40f72f5a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a85a21d-2311-4150-80bf-fe710bba723b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b86c915-709c-4982-84fc-3f7c68f318e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b98cd47a-a2d2-4d65-937d-d3fb56ffcc50",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6fcab28-061d-44c9-a664-b587ef6f24c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52ada5fc-f7a6-4283-9495-44dae308f001"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d9eb9e-d2aa-4ca4-9207-5b6da75d2386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb888ea5-c6ce-41b0-bdb9-ea0126ae3cec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7fba2c0-b101-4cc2-8946-ab375652530e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53fb3202-9870-4e39-a0e7-fbc733e06fb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e24aa359-7124-4fc6-b064-a1ff1d8cb434"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90a82054-50d5-4516-8b15-394d1b3b850a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "938868df-f3dd-4bcf-a2ef-bc997ab9e752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "049809db-5181-4398-8d19-a66666502cbb",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f698cb82-cf71-4346-9ae1-75c7b7c62731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c0dd6a5-6cb4-4348-b561-fd0285c39052"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aea25cf-566f-4e47-a13c-fc9e717cb326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "dcb8c4a0-572e-499c-89ec-78ab955ac96f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ba0f2c5-d5eb-49a3-801a-aafbce174d03",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac9212f-8ff2-4571-82f8-3fac726e7b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70f74f71-df01-4cc5-805a-181f7645370c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73b1589b-b3b4-4f85-84ea-7620fb040e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b601d36c-0853-4cd9-9071-a31a8980eb47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2b19cbe-1acf-4e16-bef4-967259efc93c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24ff8f52-8c5a-47f8-89b0-20ebf000a7ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffa27319-c18b-410f-b73b-d58a4529b082"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e789f48-d7dc-4695-8e8e-376a74da4b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1da3c28-f96e-4ddf-b182-74eb92b6a63c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90e0f3f8-1dca-4356-8205-4031a377c417",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc292c37-be47-4dc2-a0e1-b8e572413f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5450388-630f-42c2-b865-e0d1ff916b9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0dd3ee4-c564-49cd-9b70-04fd331e4938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68bff431-5f74-45ed-8879-7e65ac003cf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffdacf42-2dbe-4f40-baa4-70dda8002584",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a71e66a-0af3-4b02-a3a6-e82dd450baca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76a137c4-212e-4c14-9a84-76a26a161353"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40de363c-e8bb-4b42-9469-a24438336d64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e4d6154-9d27-41ee-8bfa-04f4f89e1f2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "337e2be6-6df6-4c1d-a8c1-d24b0e84b067",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28cfe74d-0faa-4bfa-807d-22c7fff9bd0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ced1506a-8716-4535-8fe0-3966f847772d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4971d97d-917a-4647-a836-2ec56d6dd2b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1799e3f2-cb5e-41e2-8254-90e46f1de8e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb42d44f-049c-439e-bd07-713c1499b710",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f745c65c-6162-4010-bb2d-402b4e9eebde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b6e3978-b1c8-4fb9-86cb-5ef4f8cce486"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce985bb-490f-49e4-949f-665ac3070a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42985860-cd0d-4378-b6ec-11884595aff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c656f60-8f45-4593-95d0-39a358237858",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6f5ad75-7ed4-40a7-8ea8-086861a34656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0858bfdb-33ab-45fd-b2fb-19109403b726"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d7d6afb-09e6-46a8-82dd-69561c7ada05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31a2d96f-c53e-4ea9-b7fe-5dd733529589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2917dcfe-ddc8-408f-9464-e94ccfe454c3",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2d4248-dd76-43ae-8ba4-832ce0f970c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c11a2d71-3265-4a02-887a-bf24b9331569"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97239c3e-5107-4378-b0d1-776cfd133d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c3a0a1f-2680-4af3-918f-780a100324fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c543dba4-9eff-42bf-9ea1-cc3617aa3bc1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b804b534-5e92-4d73-a642-681c2d6767b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae26bf79-f184-4c27-b078-310ebf39df77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a7587c-dc1e-4309-b302-afc38477b29b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f1b10f1-7a83-4b3a-b1f5-4dc67a4e8437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09eb2baa-2a84-4c3d-a0d4-c6813aa4159a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d6f6856-1a2a-4e32-bb3d-3df93c1cc10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "919c8974-a9d8-47dd-bf40-792b47d8c507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1410dc2b-2b82-4b90-9aea-bf798ba0ecd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da91bc32-587f-40c0-8d2c-1b0089250473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d73167f6-11e0-4b4e-a2b1-949341b7de65",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b38419d4-e727-4699-922d-d86b5016da26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50ef0deb-986c-4f11-a958-abc35565bd00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc0be229-6dd4-47ae-aca6-c442894fea2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39b4e8aa-bb62-4e62-bf71-21795f0ad539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8672b449-b1cb-4b11-8471-bf296c9775b8",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1284d30-c28f-4c1e-95e2-76849bac9851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d54b729c-714e-484a-ab9a-92591d77d5ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abe90928-f3b6-41fd-bb40-d2e9b70aa830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52f0d745-43fe-4ff4-9429-36081acc1dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb84e7a8-0387-48ea-b1d1-eec3183d267f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e7e954-31f2-4b14-925b-185a052ef8db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75f11eed-2f03-47b3-94cb-fc29614f2250"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33379d86-cfc5-4b00-83c7-55e551d895da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00d8e905-dc06-4551-98a0-be39549327e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f60309d-064f-4184-aee9-d0cecb44be29",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fa8f276-ac31-4450-aeda-0642d81ac1ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "299c2c47-538c-4445-adc1-061973aac0c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a45f0b52-82d0-4cee-8e8b-aa58a8f413ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a0d3cc0-e63d-4614-bb54-55fbda455a97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2200fd7f-7b3a-4506-9036-c2416f21f901",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e593a66-608d-4074-a6bb-be96e9a0c65d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d91f7edd-30bf-4128-9be8-8e1bec97da32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8468dcf0-19d3-41da-9e6e-16659c6febd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27df285e-35e4-494c-8e80-e6684c7fef87"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "94ea3d60-23f4-4c69-b2f1-3552365c68ca",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "51fac5ee-ed7c-4ade-9042-4fd172a03964",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6753d332-08df-4c0e-9e3d-3aa72daeb398",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f4489c2-46b5-4806-9f63-5025205e9969"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c42a6b-8fb4-40c4-ad32-d1c8875392bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "10aafb21-acfa-4d59-8458-06a815d38919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4786639-1010-414b-b484-5487848ca53f",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "346048a0-e011-4955-9664-bf61938cfea3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "b1126839-c97c-4781-892e-629648c0298c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ffb56f2-fa98-4ddb-86a6-2346e86213c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6be85c6f-dcbe-48d8-a063-1ce9fcf134bc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5dd34190-9d7d-4913-bf76-3fa0d757f225",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce2739ba-23bd-4b1e-8764-cba988c7b1be"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "467cdf2b-c8dd-45b2-bd86-42b05dd9fabb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "037f9072-adb3-43ca-9041-79bbf22344a5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6279be7d-416f-43ec-8aa7-f9fa91a08089",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "46724a76-8760-4b8d-ac9d-82a3c505d003"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f6826c3a-8d0c-4f16-b54f-8589f9c96351",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d9a3ef71-85c1-4ebd-8f54-1528d520abf7"
            }
          }
        ]
      },
      {
        "id": "2e5fecf3-29ad-46ef-84bf-b5e8e0c355aa",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "2c238e9d-386e-4f44-9155-6f599e304c7a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "69010c69-a186-481d-b0dc-7e5f8b840df4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b48e0135-097c-4722-b64a-cb949c21ad1a",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb027cb-2ad0-4398-83d9-8f977878730d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2250abac-8271-4834-bcf2-ba9e1c8146c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10a7609e-6a0d-4f42-a62b-27099763f6a9",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a805870b-4300-4f16-ab2d-977a2dc8022d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfc2564c-273d-4ae3-b9ae-1481f027c386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c60efd44-c5c0-411f-a5cd-8c691604fb78",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d16019f8-491b-4899-b48d-1d026ccf9b66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e24ae384-cdec-4746-8989-da64c52bc422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "556d8356-b521-402f-a9db-e4dee5828248",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c925855-2fbd-43bf-8988-c3ecd341142d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff6e9ec5-ba06-4d82-aa4a-72896ea580cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5168a14-f196-4377-9e1d-b0e6e7c7f32d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9ce9055-443e-4e0a-8d32-632a51facbb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b52182d4-1574-4712-9d52-3f745479fe0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5584caa0-dbeb-44df-a269-484c60583308",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "698e25a2-50ba-4c64-a2e1-fe7443c8bbdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfab3633-230f-461f-901c-e380d07591e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d23b8c48-7bb3-462d-8175-398c9e137b39",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05fd9b32-69e0-438b-a63e-f67f18b8da56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cec89a6-6c10-4d86-96da-2fd49c5ab07c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ac7f5a-deec-48bb-aa73-51c4adafbc91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a256f731-e4a3-488a-ba3f-19434537e4bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82dd2763-5269-4411-a971-4b97c822145d",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b060842-d21b-4a67-9026-8a27968f2e21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78e39085-d450-4952-861a-405a870cf9e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b403912d-7cc0-4535-ba93-52062ffea2f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d102a4c-a457-4f4b-bee6-de0e2b7f9a70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0044b3e-f839-4af4-a79b-1e41424f19e0",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7fa6b2a-8504-4719-b078-28aa23cd6168",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70faafbc-6dbb-44b1-b0f4-f02bdcc30c0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdcc291a-4204-4775-b9d1-61e55d0b768e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bf4ffb4-17b3-4b8b-9a9b-5128c4ea3ab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99c9da39-f790-4ba7-9022-59c72b04f621",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8fbdb3-1c41-4ee0-8a49-d5cce0108dbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c56f79de-0f56-455c-9da5-9c5caffae5a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83df855d-5502-4895-975b-ea09c0ba7876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fd4ad07-13dc-4b29-a61a-24f8ea548dac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dd79367-8ed7-4831-9b30-54e6a1813105",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a7a4b7e-3a6e-4fc6-9f29-cb3244b9e29c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "651864c7-3ad2-4767-8d0b-96726946cfcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d8b3b4-556c-4a00-a997-77a522ca8d4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32a0f9c1-e793-4f87-8179-8fd159f5eba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ec33a6f-6437-4bb3-a93e-47ce0dd20196",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e69b59f-1b03-47c1-a94d-571c736aa801",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3e34634-71c8-47d7-a25f-ba5ea48be59d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76a01149-d2af-4a5e-83e2-4856093539a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "241f2b27-4316-4e20-bede-3de6ea8305b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d9a58d-b1d9-4608-ba8a-800e2c5ed396",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e18e4e7-b892-4d4a-acd7-5822ce7658e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "446301a6-a2a7-4019-a568-7094c2d77873"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46af4c7c-a5e1-44f4-a6f4-23a9ebf2ee4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04a0ec14-caba-4c27-b321-526b3933cd74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca7d1263-589a-45e1-b42b-91bc5d1461ec",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34053b80-059a-426c-b803-ef1c6ff6287f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0994db99-5bb9-4369-8175-1d6e2b36ccef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b2899f-df5c-40bd-816d-065881bace54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9ca495a-f083-4358-b5d6-f894b16e9ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06ff02c1-b851-41de-b7ab-a0b0223c6d2f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37274091-0a04-40a2-b5f2-7a4dbcf12ae9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "659837fb-955e-45e2-b643-0753c50407ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b067b83a-daca-4a64-b440-2a77dbc83914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1943fd97-1f6e-4623-bdb7-806f9c81d05a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a8854ea-aa7d-4605-93f7-4dc7d4cc931a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4071d9fb-c54e-4d61-8c52-52919c42edc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2553e1e0-a623-44a8-8593-4b1da697e5d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9c0460b-04df-4356-b7fe-029d0e83df94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "686e3bd7-83d4-44f8-89b5-e584845a73a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed671c7f-c6e2-43b0-ab26-f5f3872f9322",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "564085c5-2ace-4199-81ec-5f7e3deae16a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3381606-987c-45ae-bfdc-408fde4d9510"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68a649ca-daab-4b79-8397-f5a2c543f7b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21c66700-954c-4eb9-a8f5-8ae6b2f0da19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6fea9b3-3274-4c8c-84b4-934d1f856ffc",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d035bb-38a9-47f2-8207-5e25745697e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "433a4cbf-3eaa-4725-9fa6-1a242d2b03c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2058ceeb-c9d5-4fe4-8438-bb23ba2dba59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c866d65a-3db9-4811-bfb7-d257393dee70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00480d63-49c3-46b5-ab3f-8bb777dd815a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b44778ee-e1f5-47c9-9682-59004b48adbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "538edce4-616c-461e-847b-3f45d7351b2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d7758a-259d-4d2b-8010-a4d31e4de4f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff49d600-ca1b-4895-a195-5ce5b133f3ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c741d4fd-7ab3-4c2e-b7a3-547e045235f5",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dcc8306-fd5a-4ec9-873d-1a6f0ff3fd81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0180655a-700b-4449-9d6b-0f4619aaab40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81e71808-6c0f-4684-801f-19e6001d476d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5117f4d5-26a5-4f0e-b2d4-f9f13418e9e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba682eed-9911-4dc3-b370-f102d7e7f70f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92168a7e-0212-48a6-a9e7-c9ab9bc22b70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3da619e-d711-4e15-81c7-6c2e6f6f7a15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc371e25-1d7a-4e71-bd9e-30800ae4540e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "201a6c33-c226-4f97-a171-f8b1b88b3284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4f9f2bf-992a-4df5-a18b-204880ead312",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb1d862d-5283-4a69-923f-bdf4c612ac2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e916274-72c7-47dd-8a4a-63d835dfa639"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d06731-09e5-4007-977e-c221abb665da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b97a65a2-4b79-456e-ae22-a1d6f2c931ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a6b60cf-8466-4a6c-b573-367464159e3c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdb59023-e389-4732-b0da-7c714f876eca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93737dfb-2518-4d39-8e96-0bf9ffab7025"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8af04e-2d23-48f9-9ad7-bf31d8ffdf99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e385377a-dd01-434f-b442-9f6ba69cb53b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9830d426-a117-46c8-a1fc-55bcd3550a32",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d049ba5-37c9-4727-b118-a494193323fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2de74479-df52-476b-bd5b-f1a12d1f1d57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fbe5dab-f1bf-4d26-a3ca-618aff08aaa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d75d7cee-7212-4ccf-a90e-a0527b4e965a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41c8f631-b4a0-4b64-a225-2cfda233501b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95b28e00-38b6-42d9-b76c-f8ec0e4e7474",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21d7b80e-3966-4415-9931-66615f33605f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcdc0e1c-e992-4bd8-9a03-dfc81d87cffa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a334950e-1793-4f2c-a699-d45188badba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98232ec8-9e20-4eb0-aa48-641628caf0b8",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9603a41-10a3-4ebd-9095-497eb883926d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85afd4b3-5a7d-4038-a402-f671e937e44e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cff6495a-cea9-4622-ae57-a513819d994a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68094c66-1a9e-41e1-bcb3-6d2da1d4ab8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6208e013-c322-4964-828e-ecb23fcf9ade",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "727564d8-a227-4015-a361-f7270f9c2f99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12b4b6f6-80b7-4807-b836-ae3da61fecbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd2c0847-db6a-49b7-b0ed-7c10b3d8e3dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4c61c33-4ea5-4e64-949c-05782da3fe5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2376656f-9aa5-4c5a-910e-7d717e1c62ce",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cd83181-62f3-46bb-818f-e9cc3339e7d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfe950eb-a8c7-43e0-9475-e70635341e61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd6c8ad5-fc27-45d3-ba08-af3175959ce0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c7b8b6b-588e-4544-81fe-980d9ce6f717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e28b4d3a-1948-47ae-aeaf-350b77c2fc35",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f9d2d5-4fff-4f21-a11a-6d95911686a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "246dd588-bf0a-4e70-af49-e3323d3a0b1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d3eae2-73fc-439d-943b-5a019f6e00ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c2cb2aa-3e0b-4eba-8edc-8b9b6ae9fc3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7576a2d5-faf4-428e-a0ad-ac0f77a5b28d",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879f8169-860d-40ab-a1e1-5709be429370",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eda92ec8-892d-4f9c-b298-f0ee6110063c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d295986-5e83-4814-93d8-2e4e17387b80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "152ecb12-ca0b-4722-af8e-62e916a2e7ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa9d0be-95d3-4a9f-bdb2-c284d185021f",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15cc00b3-2f4a-4133-b74c-f92386190f70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f514dc0-b4ea-4890-b340-a5c180767c3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e18ab871-67e6-4aac-ae96-2565569d1bc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2f550ec-8eca-472c-ba3c-e1477d535b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ff39298-bacb-4c8e-a153-ad35b2b12c4b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5fa716f-4b22-478c-bfd4-162f94c37b6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f05612e-1c9d-4ce4-9f5c-9b291bd65d66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba65f70e-7c1d-462d-b255-ec3de759a403",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47db7e0a-4b36-46dd-a111-4df177e02674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9c8dae0-7d27-4d0c-81a0-7342b3f6c560",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac1f3b38-3d4a-4764-b071-aa511cfea269",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d96de84-7e47-4a8b-be99-b88c583f70ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d0f949-66a3-49b9-abef-c6f1985a2d03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "884b7c99-32a7-4a7a-8da9-e1c32414f774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0b48fa2-e98a-4418-b5a3-f0c3e57f4202",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa00b8d-141a-49cc-bfda-592946ffb1dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "971c120f-e60c-4324-a049-f9f3e1625132"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6da405b9-0a43-4595-8d7f-da846d00a162",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9c76f0c-d86e-4112-b222-cbef786ace5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07d77d4f-7074-472b-8b8a-5eaefa4e881b",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d852d5ca-9fbc-4e47-95cf-899f41e996ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbe77935-d708-4990-a50f-8a0fb25c80d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60765e06-e5e0-4ad4-af45-73801536e19e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83e42f9e-2b76-4d02-b942-e105a97f9f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de8148cd-765c-4902-8a91-2465d7d7345d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "696116e0-9608-41af-92c9-252a34d3ee44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca85bc6c-dd99-4ab6-8896-fd7b1bb2a0ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c93e9557-58cb-495c-b090-2b17d57fff69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "610a89c8-5a99-4c6f-9f2c-1b4157b1b313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dd132bb-dcea-4aba-9499-0c07ec09d724",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba28e200-0494-40d4-b29b-59c21aa597ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ba7ac03-9757-4c84-be29-19939b40c850"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91516677-6762-4816-a82b-2b7a3ac409af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b270ba7f-0660-4a71-9c08-4b9d106df68e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca8aa90-2be3-45c2-92a1-d7c09b1c099f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df77ab8-a753-48ba-9248-c8d5689e7e33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d816d96c-8a2a-4180-987b-4cbe153ab021"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ddea1e5-9ec0-47ae-9bcd-fb3277c6604d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "679c2aa8-7a3f-49ac-b30b-27ef60688e9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "879289f3-d3dd-44cc-b806-a9f46815dca4",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a053161-dba5-4a83-940e-894943af15ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6db7e857-9a14-46b4-9bb1-e6e00b5064d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55f1e463-3c98-4d91-91f7-681e2881ee78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49eca5ee-72cf-44e0-8559-00ee66176f2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08bc9480-b88a-4bc9-876a-0eccad9db432",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aee27f1b-9378-40bb-8ace-96b6cb25798a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7321e333-2a2f-43b8-9213-fe0868c76dc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7693555b-c559-45dd-b08f-6121d587419e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c5726dd-c61d-428e-ad8d-a5f2f49c4163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca46a85c-b2ec-461c-ab6d-a6d7beba92a9",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff7e7391-ca68-4682-9965-2ab2f0c9dd80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a203f34d-cebc-429e-88f4-65052fb52dea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a9026c1-492f-40a6-9dfd-8c5efe0510c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c0463f7-ce4c-4738-b60c-194413bade34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a47ca0-7781-447b-895a-cfe3b8cdf116",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79453089-5e07-4aed-83cf-b3e1dd1c4235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91951a34-48e8-4f80-abfc-1ae857714950"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a66dfdd-0084-47f7-8a3e-62fc063799b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b25481e2-bb06-4c77-a114-ec513238407a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "186cf629-cf9d-4097-bd12-789d0e5158d6",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c254e77-be24-4bb0-9e87-d32a0787c7eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e12078f-7362-4cd5-b58f-4a27db55cbfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1856abf-cc05-4466-ba42-e9ba6414c49b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eab7d76-085e-4187-bf77-defbcdab0bb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "447de2e2-30d6-4d85-abcf-14e2b3e78451",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b9ca4c7-8d55-414c-89c6-11b2419a8391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93bf7f9c-10e8-46fd-bbc4-0d36443e64c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d86699-d021-4407-b9b2-4b7027ee3671",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44d919b1-b447-4e7a-99c3-194efb6bcb99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e13d7415-280c-4f4f-b0af-dd76c8857588",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c932dfd-3f40-46b0-98e8-a2881caa19bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "391044e9-6995-47cb-b39b-144675bd5291"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0514466e-d3d3-41ad-83dc-9f2afbef6655",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d16901a-509f-4003-93f5-8d5529eedc8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a894dd5-17c2-4891-86b9-944a3e65413e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57a2bf23-73bf-4bd2-91a9-5c6689696f47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b313215-04da-4b89-9169-a8feaef6643f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7352369-b33e-41d5-a220-339b7ecffef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2300bca-6a2b-4021-8729-678729a95fd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67634a83-15e3-4e99-939b-b491a8619ba8",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d4d3bd-e56b-49de-ad3c-f7ea93e47328",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d0a75e8-8b17-4a57-a90b-37a0820d5d25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25903e8a-a5ae-4922-ac69-08d330cc20c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71e01107-184a-4f12-b0cd-458e674f9516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8550df2-68c3-46e9-b764-98894bdf4571",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb5b732e-1b77-43c5-808e-dbfa5367542f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58061a26-bc0d-40e3-aa57-54a6b7bade52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfbe2db0-1d63-4c49-98a3-c7e5f3d52ebf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d800cd0-89fc-474b-8fd8-2c39f8f4989b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d30a13d-19b6-4269-8d3f-a486d0b48d71",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36bd73e7-c071-45b0-8cb8-b7f418c0ae04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57e42e7e-dfd0-481a-a20f-987bb435e440"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f31d723-6bfb-4a6a-b665-3e4e4a00a40f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7338a40-41a5-4a97-b7af-3e057837adf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87f9c89e-d7e4-4d22-8ca1-c1d31f808d43",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3690081f-006c-42fc-a847-805f3cd18429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c36db47d-ed89-432b-ae82-c196827239f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e200413-20e8-43c6-81e6-017a662f2c24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eb3a26d-ac63-47cb-805e-de9ba6a2d045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0430962-2b39-4ccb-8226-374ba974aa6e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d2d48e2-6683-485a-9256-0dcb66ef30ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d97397c-fcd8-4ce4-b5fb-212b9120dad0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a46784-e49f-4310-aac8-649b09766ff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "440557f2-e166-48a0-81fc-7e713eacc702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac251ca-b155-4d74-ad8f-c0fc6f227b5b",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c79d13b-5d8b-4afc-b77c-6f67a9ddd939",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55dcc097-51bf-472d-a84e-bf24e1feccfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b46d2d5-19d8-4c5d-b3a3-c48128e2441e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e587d5c-a48e-4e84-9d6b-4f3a946c39b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "660a1fb7-dfef-4a94-aa41-e00eae88b49a",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00bf83d2-1307-49b0-aeb2-bb519e7b6f72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c173b62c-9ea8-413d-8319-04d3ee0c38ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "311bb98a-5908-4ab6-80bc-a0814411b32e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69a0ccf1-5bdd-4810-8421-37959f119536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a7f99e8-8016-4926-a5fc-9551ff1ab20e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef6d48a6-998d-4e59-bd42-56de890b01ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af99f7b1-99ad-4c9a-a000-887022e9c273"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65080e5f-9cf6-4655-93b2-1abb54d77648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd296438-a12f-4488-8889-89b5217c68d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b1f007-4f3d-4b8f-8e47-9e42d5a4a62c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b158807-7125-4e0e-81e0-4cb14b6b5b4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec3a8ce5-0e9f-4e3b-a370-9cd90ce0d6e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "455868ea-bbde-4cae-820a-45b99ea170c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f13adb07-904c-4eb0-be89-e35acde44554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d04cfb4-0c11-4077-a1ba-266160fdf1a4",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0195faf2-6a8f-494b-b31f-608e723a45a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19144251-0b39-481a-bb51-26eb1a5183c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c01bc8-b216-46b6-982b-d9ceef7b0a82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94f08a12-c193-4e00-9fe8-5825ac0b1889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0824bc6-ce27-4037-92e2-9d8c46fdc5cd",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2be49baa-e5b9-4b07-968d-2b850c10e65a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee3f4659-bde2-4c0d-a7a7-c023da53eb06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9213a649-ae93-4b08-b345-ea2663ade4f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5a2d121-5aeb-4e2d-8308-41fb12740114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d90b86b8-2877-4f1e-9e3e-29ffe138ca47",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f1e2d3-df51-481d-bdbd-92ace5d95afc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4841a542-a19c-4d81-9109-92674d1d8b27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43558582-fc8b-4eb8-be77-05a20d4823c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d49437fa-7a30-4dc9-885a-dffbf98ad01b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36a45574-a7f4-4caa-a6c7-cd837c25a2e4",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c1ac52f-1571-4741-9ede-4361fd9f9606",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cee7610-7d27-414c-8b87-b8c3281f7072"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3225053-e795-4b26-92d1-00da6c37c88e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23f2e8e8-c560-49e8-8c8e-9d8c47db00f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61d776fd-3354-43c6-a79e-1328e671c6e4",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d0feeb7-4430-4b78-a360-914aeb99cd37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6270207-5a7d-4bd3-ac84-28046b89fa4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "164cd6c6-e318-4b04-b214-4f36a941648b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6459a20-7c18-49e9-9f08-67270d20c16b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c69b39-8c67-4b72-81c5-0ac0dd94c9ea",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "041b5627-df8c-4bec-b0e4-33daab3438e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06e60fc5-b1cc-493d-a949-e20c162c9422"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71b5e8f-d286-43f0-8835-8660da059b17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48386114-098d-4371-a798-aeb9fb19fe96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3147a40-59ca-4f1b-801e-3bd74f31e722",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e566f1ff-7320-4fec-951c-fe9c405eb4c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a7b2e7e-c188-4be1-957a-642ab7a7ecae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1d9f54-4725-4b6d-988f-d4c7fde05078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85728e07-bab0-4e11-a1e2-fcc4ba532ebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f37190d0-b5fe-47cb-937b-a45dccccdb49",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e2f8ba-31d8-4049-a09c-6b70dd0b38c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e13ce0d-2346-48ef-9b96-ba22c37585cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adec1f2d-6aa4-48d6-8ad0-b5cdc2893d19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71b61538-7a56-47c8-850c-a51c84a86392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b3c1e60-0617-4482-90af-0bb97c15ab5c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4858c91-8ffe-4ead-8bd3-88c3f0933694",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d017b145-7ee8-4912-9b58-a6e8fbff0e3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a621b63-51a6-4a45-b12f-33dfba7cf130",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba0b030f-3fc1-4f28-a8cc-a786139670e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0579f89-597b-44f6-ac7f-ea082a6e3296",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8485f27c-023f-4b6d-9149-ea6bc73175c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acb6d672-887e-4edf-b090-f2b31983f4b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa2d74b-3d2d-4d04-979c-afc716fc5803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c576157e-6f15-48b1-9e5a-31d6af74f314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "906741f7-3bd3-4fb3-bb92-dcbedc88a40e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07a8462f-e198-464b-ad51-0f1d8b1ef0b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b2e2a18-4b0f-4bab-a2de-cbce437b514a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f88c92-7d77-43de-a4c0-1e805376cf72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f73e0fb6-8cad-412b-918a-9e1bfda3c148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3bf3a4e-06f3-4eca-82cc-98848e5cfe1b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f67ca914-b291-4038-8f14-92f4d21486dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7f6168c-e477-47af-817a-44d1d2dada6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2df6be2-fc7b-47e9-8cd3-4aa40d0c19d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4277b25f-17f2-4809-87a8-582c2e30c0ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c82cc61-78f2-45f0-8f86-daeee67f9936",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "055fd97b-568f-49b5-b49b-0acd2226e552",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "262005cf-4e1f-4b5a-b9a5-f2fd61fb221b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6097a4-62ec-40a5-b4f5-f6d139b47b48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "696912fe-0d63-4180-9178-8f33f0f3d38e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aac52aca-74ae-4052-978f-5cd9f4e4831f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67649bfd-dcbb-4559-a9fe-ca88b8fce3d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a343276-bb9c-46f3-81e7-5c08433ec3c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a19673ba-f9b6-41fc-ad78-2cee7a4d450f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adc4118d-7272-4443-b146-b10825c1caf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f983aa4f-78c2-4af8-b41e-4782b84e45eb",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "749c45c9-2a11-4a17-a010-1c0130aefbce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ff768f5-fecc-4eb5-bf21-c7a3ab89fc6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5902af5-be86-417b-b4d0-525786100473",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56d3fbe1-ab02-46ed-bd18-da4316ff9c65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a9b855-79a7-4fbf-aaec-68d005ff4d96",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b87eea88-136f-4e47-b6b2-c95da34379dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00339362-8934-4f0b-836e-c8d9287703c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73fb5f09-a32b-4e6c-882e-648948f5620d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f83913e6-70e7-4c35-b574-bfa5410818e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf9a94fa-df14-4ba1-bfea-0b2e95e01c99",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a1248ea-2804-4bf7-8d7b-33a53da89e74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abb03d9a-9dd1-4d12-b85b-47db4e9391fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e14366ef-9c7c-4852-99b9-2196dc678b53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e90ebda1-b4d1-452a-b850-f9970dacc934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88a71a70-e0a7-4154-8603-ef465df961cc",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f51a32a-a04f-4844-96e0-2c781b892837",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5a367cf-6a8d-403a-a505-7bddaadc02da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18121d4c-65f5-41c7-8792-651a76b44880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bb34df5-3afc-432e-973b-cafeff942a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c975fabf-5166-42f7-a3ab-0fee015ed441",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e8d5c32-130e-42ec-be53-bdcedacbf54b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50de9f32-9dce-4998-9dd7-6f1829b9669b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb379f9-41bf-42a5-8eb5-f2b3838bcabc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "328d2cc8-041d-497d-bd5a-6fbb4f7124f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd77e19-910a-49b8-b2cf-1b81a8c909a6",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "541fcffc-c265-41be-a4aa-31110912bf3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a30dd02-2dcf-40c1-80e9-dcd45585ba6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f8b1baf-c95d-4477-ab3b-12e56fd7be01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "850ec7cc-389d-40ea-9ab6-7ac16d552867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13695fd0-b64e-464b-a07f-b62d69d46366",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5afb223-96cb-47f4-bde6-41921489db5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fcd4dc9-22b8-43b0-a5c5-57cbc94dd14c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff0ed823-6dd7-4e82-9dbb-941b91c0b5af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d25a076d-ee3f-463d-9dd7-dde7e5c3ecea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "461c1ffe-adca-46ca-917a-47a492d2c428",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c312d00e-aede-4218-a039-b1a8e0321aca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0842489-00da-49c1-a77c-a62ee09dc1d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81a3bd26-eef7-4329-8b92-6f15178e6d15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92c70273-7a55-4ef4-b6ae-ef78e0b37f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3b0ae51-bdc9-4bd2-a9d5-db3f4d7f2139",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "251ab7d5-922f-4158-97a0-919ff6a0f5b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d6fa885-9e31-4bca-9337-ae91711d8f75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a3eb7f5-7747-4918-8d91-8fcaeee8a017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bad0a743-78b4-4431-be3e-2c98dc79ea18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efcc7b49-9457-45b2-87b5-d274663330f7",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fd2cf58-0a81-41ec-8272-586459e244a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5818f788-1a37-4271-a6c2-2edd249d7b21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ea1676-b2d5-4535-b1af-c614cc245722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59f03743-46f3-4066-bd4a-804ea8b99594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bce27f55-ee24-49c7-896b-090182f8109a",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d563e9d-fe2a-4279-8af2-46e36abec105",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8d8aa70-2c01-4673-a8e6-b0ccdc904101"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2bbffc8-2b76-4f60-bde4-015bee78858f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "245bbeef-5ce0-47dd-a038-1821df80098f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "988f5744-7b43-4e43-8433-4ea607ed94c0",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e6b211c-06f7-4c53-8bcc-157958126d6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e125c19d-b10e-406b-b6d0-fff72438565a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7edb013-71f8-4aed-808b-5f7f0e3179eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec855542-d6b3-4e53-9a98-bb8127a0ced5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56ea4aba-44fa-407b-985c-05b2ccf1f388",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc61993-19fa-46b8-8222-68ef2a760b07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03526cc8-e638-4287-b4fa-3a63c06f9657"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5231f608-89ea-4c3a-9ecf-9b94ca8f681f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7fd58bc-f3f6-4170-af00-8a8dbcd159d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "502c7b88-0b94-4b63-bcd8-2268f9207bf2",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b81381df-9b98-4051-b6ca-ca38c8eb7d66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f24f87f-49ee-45e4-aa4c-963e050665ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fa2fb44-ae1e-4bb0-9bc8-ccde182dd28d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97dcc452-7eba-438c-a283-13cdaaf01e3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb3ef971-f30c-4176-923f-9289aad292ab",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6402b33-ec05-4eb0-8cfc-cfd6ce321b0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70186b73-a36f-4b0b-9adf-cbe876363d40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe2c66d-191f-4d06-b21f-adbade9eae1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72e6c885-b653-425a-81de-119bf4121292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af608fee-2535-4366-af3f-72b4685f0b20",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68765ac-2ef8-4dc4-9f98-64ddfc8a202f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1904fd72-c1e0-42e4-8da7-b24d5b86a425"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dae7a9b-1bb3-4ca5-858f-e38e48ee357a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d59b9b7-583e-4013-bedb-4c8fc660761e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7be48c46-1663-4239-94eb-10aea50dcc6a",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e24f82-f572-4161-8e55-8ebd17a4fce2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d86a4935-c6bf-4684-a2a5-ad1f62de2a2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52055d3b-e83d-4f04-9b20-e72e8cd72bc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5d7b935-0266-4e42-a106-38e15f6bcbdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c36c28b6-c15c-42b2-960e-5f4430733434",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a4ba59-fb79-46b7-8488-f1e4ca361319",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce3fedf9-4ae9-4efd-a90a-e68e63a041ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c02a5bb-687b-4560-b860-207f64705a05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c304b33-58dd-4960-a3ca-907aeae72b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13cda9dc-3caf-49d4-ac66-5d3522415d3b",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8b3149a-b223-4e29-8a7a-98e32b654ac6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d473929c-22e2-487a-a2bc-027a4fd5faf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "960c2e8b-2603-41e3-92e3-51af75de9c2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa1bca2a-0726-44e4-865d-3180629784e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e33695cc-8442-45e5-bf58-de5418f8fab2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "388af60c-437c-4b1d-a53e-140758480cf2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9bb4ac2-1183-4a5c-a82d-391c984b9675"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "999cebba-50de-4294-a8ad-1781e43fe4ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "957761ad-940d-4e54-8604-8fa3f53b1771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dac84e87-e367-418e-ac6c-d13675f22ff3",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd984b2a-e90e-4b94-a139-49a59fe16d75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de1b9870-4af5-43cd-a263-733490f676ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9456a00-8853-4e69-9650-5efc01c65725",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c52c7147-2b5b-4b79-bbe6-9bd7d0e1e4b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91b3c6b3-c476-47e6-836e-49b423098679",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8c983ea-6682-4a08-bb7f-c74be70b9405",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20226f6d-963f-494f-835a-d0807c18c214"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d45cca4-5740-4634-bf81-a6b497f0dbff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb89caa5-3407-4c2a-8995-b935f6c03a6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b90d305d-7ba4-48a3-a602-1c523361391a",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "056afdd6-e7f1-46e0-afcf-83090c892718",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2938272-afd6-47c1-9867-06ff4ae15d86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb0eec2f-e978-4925-9fe4-3cf8056731e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e8b3c59-3c54-4dc5-8177-cc94affbd2f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "779924d4-94c6-4822-bb8d-7f69277ed565",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c9b9c2-60e3-4321-8c9e-c5051ce6626c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2024cee2-5419-4d43-b70d-7923a6c5e68b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0242eca5-5f47-402e-8e57-69ea9a3e0010",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03f7136d-8caa-434b-82ba-e68814ebfbe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6afbd13a-3d71-4ea9-b668-2f2834d4eb62",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a56f9034-df2e-49b5-b598-734c4793764b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f53fe3ca-28ff-4ac9-b38a-45039dab30b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c38de906-dc59-4227-97a7-36f6809e5bcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5e36b07-fd1e-4cf3-a77d-e05e13154c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4315f060-9dc1-4da6-9754-1d8b1827bcf9",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cddea428-f878-4d09-9b07-9485d3fb02c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85a3bc3c-55b0-4648-9827-a6e25d91ffa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7020d724-37a2-48ff-bce4-d8274f847543",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8fccbaf-185d-452c-a15d-ca905cc6fa75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "987733a5-7f89-40ac-9d4d-326a064f00c6",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e4a9f0f-7564-472c-b5e9-61c81b07f741",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "509ab99c-8618-4d86-826b-f14f038f68ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c153d7ee-3945-4e4a-9ff5-ce28aef44fa1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adcb69b9-6d73-4724-bff6-4f9ab89469c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70b065c2-4432-4542-8d19-fd43b0a1f1ce",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c855333c-5b88-4a76-b5c9-4956d4558efd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0782d60c-4d3d-4c1c-85b8-e2c8bb3aac61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c1c075c-49a8-4f6c-9536-252df386be55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ec50ead-06af-4f6d-b0d4-4f4ca76ea7d4"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "73ccb7dc-dd53-4885-98ce-47871d829f9c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0eacdee6-6627-4959-bd2d-4c2f69bad915"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "024e3a81-c4e8-4afb-b61f-293a4798cc28",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4645e798-a158-4a26-a56c-9da04a1edae7"
                    }
                  }
                ]
              },
              {
                "id": "f0ac4040-2ab4-45b4-b820-b9f65cc73634",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e4249fa4-c8c8-45f4-9149-bf5895c32c54",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "973ef41e-e0f1-4ee1-ae54-35512fbe96d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6a1aaa40-930c-44c5-a471-b292a990e682"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e77e80c-8953-4483-b8b4-b9bc388bc71e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7ca50bdd-d4cc-445a-a674-0f78f7752353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7017df11-17d3-46af-82e1-5480f16350da",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dca9523-a410-4c9e-a9b5-541c11b9e8a6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "1d4ef143-6597-4feb-8c28-39a8e6f19944"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c16f5a-2ea8-4d3a-94ff-69f3b3087a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66459625-ac67-4eb1-9e4f-d1b37df1e59a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "83a415db-ed70-41ad-853a-5d342162d59b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "215b28a0-3052-4095-8971-2e8b432c2024"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3821ebb7-9ffe-49f1-a0b1-ff4b2c51ea67",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ed6cbcf-65bf-41d7-84fa-218c376d9f27"
                    }
                  }
                ]
              },
              {
                "id": "2d483035-2b71-4f67-ba74-00d9a613a055",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "3d68b440-5bce-459e-a0ae-e5973516628b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0153687a-d529-435e-9710-421e58e8e78f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "46d5deb5-66f8-4d16-b507-4050440f69b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ad3ced9-e835-4975-96e4-80c11ce9c261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac4edbe2-4943-437b-881b-c00484c5a681"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "31bfd5cf-40a1-435f-9463-64732b577301",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1ed74251-0db7-48c6-a7b0-985bf3df3e39",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc49195e-15a6-42ae-852c-6a9ceb383eb9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "eedef4de-d278-4693-afec-ab7d028c69c3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "68a55ad0-07bf-4930-b90e-b96569e8e1d2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0016d177-027e-4f0c-99ae-82f0d0a37110"
                    }
                  }
                ]
              },
              {
                "id": "40c1cd7f-90b3-4007-a9d4-28bc8c4e6b79",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dbb4aa01-ce9a-4bd4-8392-620681516d37",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f540f0d0-3c22-4bfb-a4dc-6bf963e9e1e0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f0c7505-c63f-4c9c-9e4d-fe1924de8bbe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53ba64f7-c593-433b-a8ba-ad9b0d07dad0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1354ba78-b669-4322-ba87-a263d751ab6a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "8df8a353-8ac9-4551-9a7a-804188162e03"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "821b9e09-2335-4f2e-8d83-de9b78e5ba42",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "45e1fa1a-eb35-4cfb-8cd6-0fcacfe10d48"
            }
          }
        ]
      },
      {
        "id": "f2815117-cde5-429c-8eb3-1a29d8885d6f",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ba22ce12-c016-40a9-94ba-e1de991fbd87",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0039d32e-4e59-47ee-aa97-1d9b13588aa2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c7d56b47-78ea-46b9-906f-7836a0e396fd",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfa793d3-c411-4448-ba71-354b076f246b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6b060318-4030-47a5-97d4-2bb68f6adace"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "600c9438-ae71-45d8-9852-fc3c3973796a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f50b4459-6204-47eb-a5ce-47b56f348d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a34820c5-0db6-4665-b6a3-d1eb983d8819",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5cd7ec-b896-4a33-84bc-2b8c9d9d012e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ec2183ba-65d1-40e4-8df2-4348cad98178"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "195781f2-6cbf-4c52-a952-df520beb86a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "05f3d290-f125-487b-9af6-c61f4345d4f4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac681fa5-f3c8-4703-b8ac-5267eb542e15",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "29019a78-6da4-4515-b318-0eb044358194"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1bcd533e-c91a-4bf8-8ddf-1098bb48723b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a58f9868-3414-4ed2-903d-e70aa8d8e964"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d1647bf-8070-499f-ab4a-7be2ed492fa7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c3456c3f-052e-4d70-9952-ecba78b204dc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9649dd0b-e322-4a21-bfa6-82799830a010",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4089411f-850d-47a2-9f45-982b2b6697db"
            }
          }
        ]
      },
      {
        "id": "3f888c08-dcb3-4c68-a69b-49891cc1e7bf",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "6565b646-7eda-4924-9871-e5eff2aa9729",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9b035533-7d62-4c50-ab3f-2a9d8cba74c6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1d29cf4b-e07f-4984-a78a-6abc3e43d2e2",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "025c8cde-ccaa-41c1-b29c-94d87f9904e0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a64d006f-02f0-463d-ad02-2d2ec61758fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf39b6a-6a51-433c-b98e-75b78e75e754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d456d33-fee2-4258-a5ff-0bc6baa6f024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "253251ec-f7b2-4c31-89be-b6a89941aac7",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a5be18b-434a-4347-9cc6-e281615b2776",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f1c0437a-aabc-45d8-b00f-fab9f261c977"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51077d50-e069-448a-98a4-fc87b478e08e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fcb1581c-1bcf-4c8a-ad17-1120589f5a6f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8742b30d-6557-482c-bb48-77fbb791d637",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "725644dd-7143-4a01-9cb6-18904f73d3ea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8944e6ee-a7ba-4a87-8a02-4d65ff247a23",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5d74cf9a-f206-4437-9d26-b6fe3c2a1686"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9278c677-187e-4e0b-aa40-e984156ddb72",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "de257f89-08ad-401e-8d4d-131fa9a31a99"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fde55a77-ea80-4593-90d2-ac4259e45dfd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f25e9c33-94e7-4417-9857-2d207949f832"
            }
          }
        ]
      },
      {
        "id": "7ddd7cbc-d76c-4fa1-aef4-1aa30487f2a8",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "52bed032-ff0e-4afa-875f-07581929f09d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dea2728a-5d85-4c22-ba45-615ff6d56f54",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "20ddfe90-2881-4056-8274-7f1f89e206b6",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d102b4a0-cba1-40ff-970b-5c0239c93d13",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "88bfbd53-5f5c-4f4a-b2f7-e01159d4f0e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1f869f5-8870-4df7-a3ea-6f8e0318b81c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7beff9a5-4453-4c68-a9a6-25cd856aa40f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c70a5bd-251f-4581-a4ff-edac852e47c1",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b309bf2e-7fc5-4cb7-abb5-bd77ccc99003",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e87a3b86-cf26-43a1-8c41-c96e18a9ac42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c0d3b7-7df1-4720-ac63-2ca1917279c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cfc65ce3-a6ea-47ad-af91-a42318aced09"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45cca7d5-250c-4683-a6bd-4289ccfd9613",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6666bb7d-7ae3-461d-a362-f914fa676377"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "72c7e40e-7ae7-4fb1-82d8-97869051e299",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "45e491f6-7e38-43eb-96fd-cf69ce8e6f05"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "97b3a70d-65bc-4bc6-a00a-e9329b63378e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "51c67b8d-9bd3-468e-84df-45e285e4c937"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5b70a458-2e7c-46ed-a506-1f9e35c524eb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "189f81c7-773e-4507-85ee-8012c9ef2e57"
            }
          }
        ]
      },
      {
        "id": "de1afcc9-29f1-41ae-b8ad-9ecc55bb5fd5",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "139f796a-fd87-4029-ae7f-5847893df5cc",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0e462463-7da0-49da-a752-f4df81d707ba",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "48d44a12-6079-4351-aa42-f7299f33ffa3",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "881a5d63-8272-4120-9429-67c059b7167c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "69a1b722-f065-4348-be44-801fef40a051",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 35
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 71.18918918918914,
      "responseMin": 6,
      "responseMax": 239,
      "responseSd": 26.767101467364867,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1677544882254,
      "completed": 1677544915006
    },
    "executions": [
      {
        "id": "815c5795-9828-4f3f-83ab-0837ec951dff",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2accf1f8-c56a-4bce-92f5-62945f4a9da2",
          "httpRequestId": "f1cbf36e-115a-4d91-bf09-43e3b0859ce0"
        },
        "item": {
          "id": "815c5795-9828-4f3f-83ab-0837ec951dff",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "a0403c7a-5c47-43a4-96fd-84f73920568d",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 0
        }
      },
      {
        "id": "71c36d14-0d39-47b0-bf6f-f397eb00c5c2",
        "cursor": {
          "ref": "b66a3178-5dae-4a50-afa3-4795f9136853",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7b98ad1e-98ce-4f39-bddc-c7b8e73693ab"
        },
        "item": {
          "id": "71c36d14-0d39-47b0-bf6f-f397eb00c5c2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "80f96a43-8497-4f5f-b310-73843bde8a2b",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "48adf8dc-708f-4105-a192-75ecd28334f7",
        "cursor": {
          "ref": "3c9a4873-80a5-448d-99f9-e2677183d820",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8b8dce5d-98b5-4ab4-8a6f-ab8576ed3cbc"
        },
        "item": {
          "id": "48adf8dc-708f-4105-a192-75ecd28334f7",
          "name": "did_json"
        },
        "response": {
          "id": "5585f44f-373f-4418-a1b9-c1461d6311a4",
          "status": "OK",
          "code": 200,
          "responseTime": 216,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b51760-ebac-4e36-8657-ffbcffb05412",
        "cursor": {
          "ref": "31bf984d-0fb5-49d6-b7d2-7e4e27f667c8",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5e3a0b55-75cd-48dd-84e3-1983f81f3a7e"
        },
        "item": {
          "id": "39b51760-ebac-4e36-8657-ffbcffb05412",
          "name": "did:invalid"
        },
        "response": {
          "id": "c6ba5015-a703-44e7-8205-2e6f068cf45f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "39b51760-ebac-4e36-8657-ffbcffb05412",
        "cursor": {
          "ref": "31bf984d-0fb5-49d6-b7d2-7e4e27f667c8",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5e3a0b55-75cd-48dd-84e3-1983f81f3a7e"
        },
        "item": {
          "id": "39b51760-ebac-4e36-8657-ffbcffb05412",
          "name": "did:invalid"
        },
        "response": {
          "id": "c6ba5015-a703-44e7-8205-2e6f068cf45f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "7d58a8a4-846c-456d-956b-1037b8756ab8",
        "cursor": {
          "ref": "d8d4ea8e-5ec3-40dd-a8f3-fbe72f5f9dfb",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "380a48a1-4396-41ae-aee6-2fcfb84d2b1f"
        },
        "item": {
          "id": "7d58a8a4-846c-456d-956b-1037b8756ab8",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "69cb3d5d-e328-4b05-bde3-675796cae8af",
          "status": "Not Found",
          "code": 404,
          "responseTime": 109,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fd8830f-2a13-4f8c-81fb-16925f4880dd",
        "cursor": {
          "ref": "fb3978d2-9d1c-4413-8a95-8b9548003737",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "fa89fa7f-1bff-4c64-b1df-27cb25db998e"
        },
        "item": {
          "id": "9fd8830f-2a13-4f8c-81fb-16925f4880dd",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "31e8cf42-6c2a-472d-bb28-0417d91a6d65",
          "status": "Not Found",
          "code": 404,
          "responseTime": 66,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e88d679-7fd0-43b9-bcb2-3932c2a000b3",
        "cursor": {
          "ref": "d33cdf78-c5a5-41de-b3d4-e792ed2e194b",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "cdbcd3f0-0c86-40ad-9b5c-73ab3a5ae61c"
        },
        "item": {
          "id": "6e88d679-7fd0-43b9-bcb2-3932c2a000b3",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "40117841-1a57-47c9-b26c-6b45e78fd006",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ae4274d-99f8-43f8-8891-e60e29005021",
        "cursor": {
          "ref": "4d9fa373-5ff5-41dd-bd68-80524280e194",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f1b27e04-c14c-4192-9681-7e1a214ae771"
        },
        "item": {
          "id": "5ae4274d-99f8-43f8-8891-e60e29005021",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "ce1e8da2-b933-494f-8574-a7f3b1dfda72",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ae4274d-99f8-43f8-8891-e60e29005021",
        "cursor": {
          "ref": "4d9fa373-5ff5-41dd-bd68-80524280e194",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f1b27e04-c14c-4192-9681-7e1a214ae771"
        },
        "item": {
          "id": "5ae4274d-99f8-43f8-8891-e60e29005021",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "ce1e8da2-b933-494f-8574-a7f3b1dfda72",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fedfae95-d979-432e-bd32-e38e4591a8a9",
        "cursor": {
          "ref": "32f76126-6583-4780-b38a-1eade9e02ad6",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c72b055e-d1d4-4294-9b32-dd6b60438912"
        },
        "item": {
          "id": "fedfae95-d979-432e-bd32-e38e4591a8a9",
          "name": "identifiers"
        },
        "response": {
          "id": "baa9ff79-182c-4e9a-a841-aca013391ab3",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63e0ff83-559f-4b02-a03d-cfd13fc7912b",
        "cursor": {
          "ref": "4f7ae0e2-5963-4804-9acd-9d680df23020",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "dce697d5-90bc-4a77-b95b-b942f2145dee"
        },
        "item": {
          "id": "63e0ff83-559f-4b02-a03d-cfd13fc7912b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "340cfb56-99e4-4525-8320-0d77b7af606e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63e0ff83-559f-4b02-a03d-cfd13fc7912b",
        "cursor": {
          "ref": "4f7ae0e2-5963-4804-9acd-9d680df23020",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "dce697d5-90bc-4a77-b95b-b942f2145dee"
        },
        "item": {
          "id": "63e0ff83-559f-4b02-a03d-cfd13fc7912b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "340cfb56-99e4-4525-8320-0d77b7af606e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3716c0f1-e14c-4159-91a6-c43f12b0c2e3",
        "cursor": {
          "ref": "f98b0167-fed1-45bb-88a7-3c3c3ac05be9",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "64deee9a-f2a1-4886-ab20-152b860718e0"
        },
        "item": {
          "id": "3716c0f1-e14c-4159-91a6-c43f12b0c2e3",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7091be0c-c862-4417-83bf-5a2055defedc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b5db538-c7b1-442d-81a4-1d4ffd87cb37",
        "cursor": {
          "ref": "994aebb9-3caf-4a4f-93a2-ac22e558f588",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "611d8a73-bed4-4d34-9ccc-c79a9604ac54"
        },
        "item": {
          "id": "0b5db538-c7b1-442d-81a4-1d4ffd87cb37",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "638a7248-4306-411f-8444-0962529de777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28dedbba-0e5e-42a3-9095-3d0b2414ca6b",
        "cursor": {
          "ref": "e94a15bb-4d03-497c-83fc-6978daff5be7",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9fe35dfb-8391-47c1-a2de-dfc1d94e2fcd"
        },
        "item": {
          "id": "28dedbba-0e5e-42a3-9095-3d0b2414ca6b",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "9b277ce4-afae-4b40-9874-8dc2967db64f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f100bf9b-2da6-4b44-9523-cd4ed9b7c8f6",
        "cursor": {
          "ref": "e4befdd9-92b5-4960-b273-c77b86812d40",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "aacb91ab-a5a6-4459-b71e-7af8d9aea5de"
        },
        "item": {
          "id": "f100bf9b-2da6-4b44-9523-cd4ed9b7c8f6",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d3008b4e-90f0-49bb-82bf-475a3737da3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b57e815-6763-4b88-ac17-3b587ecdf686",
        "cursor": {
          "ref": "d8ffbef9-9915-4ddd-9ac8-12874d18928c",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9abe702a-f57d-41c0-ac42-16c8255133d1"
        },
        "item": {
          "id": "1b57e815-6763-4b88-ac17-3b587ecdf686",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "e512c783-5eac-4ca4-90e1-c6b0f62ed33e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9cb89cf-0fb2-4e91-8784-63ce25f906e2",
        "cursor": {
          "ref": "02bfa365-afb5-4020-9fa3-f69412358152",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "77af2736-0707-40bb-81f6-d25bf165bbe8"
        },
        "item": {
          "id": "b9cb89cf-0fb2-4e91-8784-63ce25f906e2",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c6557880-1a3a-496b-939c-cad4f80a34dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69155431-3503-460f-bc8f-f66bf7755bd0",
        "cursor": {
          "ref": "c7792562-cfc6-4987-88e6-7c093eda8332",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "2711adac-3620-42ad-aabd-ecd015bf65b2"
        },
        "item": {
          "id": "69155431-3503-460f-bc8f-f66bf7755bd0",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "41568017-68cf-4094-9e5f-379464f2e659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2556db6d-577b-46b9-8c95-5d47a5b56854",
        "cursor": {
          "ref": "eeeb78d3-e6db-4b3e-9182-c41959b3966c",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f183b96e-d1d3-44a1-9d98-58b37defce30"
        },
        "item": {
          "id": "2556db6d-577b-46b9-8c95-5d47a5b56854",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "2c3c58b6-a66c-4060-b4e9-9dabf381c6e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccdccd3f-a369-4441-9952-c605c6d85525",
        "cursor": {
          "ref": "8dbb22aa-6f28-4e11-9fbb-c9ff5a662d72",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cb729812-ff1d-439b-b00c-d6705e5f1df3"
        },
        "item": {
          "id": "ccdccd3f-a369-4441-9952-c605c6d85525",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "30a8bd83-8d45-4c6b-883a-1d517eced1db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d318731-e6a8-4b94-988c-01e7dda38544",
        "cursor": {
          "ref": "7a6295a4-fd15-4fe8-a6f9-767f910d5c0a",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3c8231fd-0e64-4094-a48f-d335c3c987e1"
        },
        "item": {
          "id": "4d318731-e6a8-4b94-988c-01e7dda38544",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "4e96acf4-97a2-454f-8b60-508001734020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e820202-b306-4c49-a593-7f5cb94406c1",
        "cursor": {
          "ref": "2e6fb3ff-9db4-4b44-8b0e-429f14992802",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b2c6a438-717f-405b-b4a2-67456a535fe0"
        },
        "item": {
          "id": "9e820202-b306-4c49-a593-7f5cb94406c1",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "304517b6-afe9-4045-a4e8-3682f11875cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53bef8d4-3f87-46d4-820e-020dc3cea825",
        "cursor": {
          "ref": "25cd5b25-1407-4008-8a62-bd09ab75d1ab",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "5bd76873-ea91-4bfe-abce-1d629daf086c"
        },
        "item": {
          "id": "53bef8d4-3f87-46d4-820e-020dc3cea825",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "684c02ee-13a1-433f-8845-5dbd9a7ebffa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7256ef51-0974-4d97-9c8f-3210bea8aede",
        "cursor": {
          "ref": "1553217e-fe20-4911-8618-5292e3079bee",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9601da26-7850-4b0c-9ad6-ec4052336cf3"
        },
        "item": {
          "id": "7256ef51-0974-4d97-9c8f-3210bea8aede",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d60002ed-917c-4b39-a60f-f49463e4ed62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b67a0f4d-4aec-441b-8cd4-b44202104ee1",
        "cursor": {
          "ref": "e4548e04-5324-46b2-b77d-8f74b6c17acc",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a8a98a6d-8153-44cd-bbe1-84ab32cd1ecd"
        },
        "item": {
          "id": "b67a0f4d-4aec-441b-8cd4-b44202104ee1",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4d32deb1-ac39-48e9-8d7b-9c2096a017c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cde5a2ea-020b-476c-b4d4-73d2b9e56ae2",
        "cursor": {
          "ref": "a0d84ce5-201b-4187-87f4-ed801186620a",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e97d35a4-50b2-4096-a638-15598c59281f"
        },
        "item": {
          "id": "cde5a2ea-020b-476c-b4d4-73d2b9e56ae2",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "268460c4-3b7d-4195-b997-a0d441afcfe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8474e06c-1f7b-4265-b017-64c839b9752d",
        "cursor": {
          "ref": "c7931bcc-4fc2-42a7-9315-811c681f8f2d",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "fe85f466-6e31-4ece-b5e9-38e59a1efcc7"
        },
        "item": {
          "id": "8474e06c-1f7b-4265-b017-64c839b9752d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "52cb4172-3f1f-4a3b-8956-913b27e32d39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11db70fa-3bc6-4f0d-9d67-af134b185df2",
        "cursor": {
          "ref": "99bbfa6a-f641-4a37-b44f-915baf3d5c3b",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ebee7bbb-290d-4dcd-ab65-3441ac1e55e4"
        },
        "item": {
          "id": "11db70fa-3bc6-4f0d-9d67-af134b185df2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "018b4e03-3e6c-4b17-a140-23cc45dc9654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2116502-ee57-439d-98f2-1cc328a6a404",
        "cursor": {
          "ref": "c4576657-d2f0-45bb-980a-af1414b9ca64",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e075ab45-d81a-4519-aceb-05a8f83595a8"
        },
        "item": {
          "id": "c2116502-ee57-439d-98f2-1cc328a6a404",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b2ca6f80-3d3c-4b1c-93c2-24834a47a137",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a33d6c1-207d-4ba6-a368-c0f619123804",
        "cursor": {
          "ref": "ed0ddc93-ef87-4734-817f-adc90171162e",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "7e14b91b-fe8f-4a5d-bf63-e8818a0ea2b7"
        },
        "item": {
          "id": "8a33d6c1-207d-4ba6-a368-c0f619123804",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a9429035-3c69-4f59-b33d-d2897349f5bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8012412-afaf-4733-bd18-0f0458d7e98a",
        "cursor": {
          "ref": "b6a93617-3037-4e56-b77b-d3385cfce677",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "bb02b312-3bad-46ec-9798-f47554352a67"
        },
        "item": {
          "id": "b8012412-afaf-4733-bd18-0f0458d7e98a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "a0974aae-25ba-453e-a823-cd7bb0e28571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0750cf86-c7eb-456c-ac61-aeb51db69d37",
        "cursor": {
          "ref": "9b4584b1-6754-4f2b-91d0-b964bc609bab",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "e265808b-6540-41b4-82e1-7ede377e4788"
        },
        "item": {
          "id": "0750cf86-c7eb-456c-ac61-aeb51db69d37",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "fc00d7f9-1f16-4d01-9f4b-f565d0e906a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c45e7bf3-f1ce-40c4-a96e-54c88872058a",
        "cursor": {
          "ref": "a3fc2673-ca31-42dd-a0ee-7c07a76b94d6",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "60e3a3ed-4be3-49a8-bb0d-78897ee4615d"
        },
        "item": {
          "id": "c45e7bf3-f1ce-40c4-a96e-54c88872058a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d2ce0309-9853-4756-8b48-9f14a4d792ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f827625c-a7c7-4679-9735-fd55b19c3399",
        "cursor": {
          "ref": "c7f51d32-0655-4509-86e5-549785201ede",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4c72f908-2407-4156-acff-5b57efefd92c"
        },
        "item": {
          "id": "f827625c-a7c7-4679-9735-fd55b19c3399",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "a9933e88-b760-40fe-9045-d9c1e77ed9e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99d3681e-65ee-485f-873d-7d02e060f0b4",
        "cursor": {
          "ref": "cf80a12d-3428-4c51-ae93-61989e45fbfd",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "0e9ae390-04dc-45eb-9006-d78ad14be861"
        },
        "item": {
          "id": "99d3681e-65ee-485f-873d-7d02e060f0b4",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "001a4522-474e-47a8-aa12-e5928860c133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f582e6c-5a13-4626-913b-98b6e914de1a",
        "cursor": {
          "ref": "9e28a90e-43bb-4a16-9644-22bdf06a216b",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "64878b91-f29d-44bb-8447-78c578ed54ec"
        },
        "item": {
          "id": "1f582e6c-5a13-4626-913b-98b6e914de1a",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "018bc3d4-2eba-45f4-9426-53435360e85a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8e151c9-6cac-41d6-8014-4e84ebfd4c73",
        "cursor": {
          "ref": "24196d8a-7e96-4de7-9e8b-1138e8f1b075",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "497b326c-377b-4b41-aa03-2ad114c51b43"
        },
        "item": {
          "id": "a8e151c9-6cac-41d6-8014-4e84ebfd4c73",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "4c6caabd-7c8a-42a5-9926-05ac83dad3d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e16bb9ca-3694-46f2-a94e-1bab8b6646d7",
        "cursor": {
          "ref": "db1136b1-eb91-499a-bc45-31a98574d3d0",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "113f353b-9357-44b5-af44-f9447b7778c8"
        },
        "item": {
          "id": "e16bb9ca-3694-46f2-a94e-1bab8b6646d7",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b14e6575-02ad-462a-81e9-bbfe49c0ff75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b17f7ee-5f8d-4079-9452-ca9639761ad4",
        "cursor": {
          "ref": "25cdf507-baf3-4be2-b24e-a9e768c22fdc",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "8f08d2a1-4353-456e-a0be-2f8877ed7186"
        },
        "item": {
          "id": "5b17f7ee-5f8d-4079-9452-ca9639761ad4",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "a2d09d85-5987-4dd9-9413-76cf25da98f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "085b19b4-25bf-4fff-ac17-34f254785554",
        "cursor": {
          "ref": "e1436c96-96ff-438b-bf38-786faceccb8a",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "db690401-5529-4863-938a-925196842f65"
        },
        "item": {
          "id": "085b19b4-25bf-4fff-ac17-34f254785554",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a4d7fbae-ef9b-491d-81c3-1b6e9e01c043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0c04d8a-8d91-4dc9-bb90-60e23a1a4cf3",
        "cursor": {
          "ref": "06b79103-dc44-4650-ad72-d1086581f92e",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "af0e1e85-5c5c-4264-849a-c0aad46e3bfa"
        },
        "item": {
          "id": "a0c04d8a-8d91-4dc9-bb90-60e23a1a4cf3",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "5a55f832-d790-42fa-b158-3932bd9f42bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2c202b0-c04b-4f6e-8629-5131ca9cc5af",
        "cursor": {
          "ref": "06af473e-b029-40c1-a075-5fe7011b3aac",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c65beedb-0728-4b61-b655-47d48c6776b8"
        },
        "item": {
          "id": "f2c202b0-c04b-4f6e-8629-5131ca9cc5af",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b4ee2af4-26aa-447a-9965-15c616ccfbfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30df9b78-f965-4146-9d02-3b5d306dc758",
        "cursor": {
          "ref": "5cdf35c0-db25-45c9-ab80-3baf5c114e20",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "6069b367-6602-4370-a3f4-8960c914f6fb"
        },
        "item": {
          "id": "30df9b78-f965-4146-9d02-3b5d306dc758",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "06daa9e6-e547-4ecb-95cc-ff011bc6fc7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c98d380-1418-4d25-b426-8b1e12a901f2",
        "cursor": {
          "ref": "c18b241b-3558-4570-8187-9c90c0ac33c8",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "21dd194c-1db0-44ac-a483-dff5e9ae091d"
        },
        "item": {
          "id": "9c98d380-1418-4d25-b426-8b1e12a901f2",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "89588860-653d-4e05-9e7a-80ffb5c32867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "151d2b19-2a57-451f-8cec-aa89144599f9",
        "cursor": {
          "ref": "f045db04-9877-4006-880f-1aed6dd8659b",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "3672f9d4-cecf-4075-863f-c951ffe0031a"
        },
        "item": {
          "id": "151d2b19-2a57-451f-8cec-aa89144599f9",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "19a89af0-6778-48e1-ae07-acc0b996ac35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0d48b3d-704f-4091-a883-56f83d1d3c8c",
        "cursor": {
          "ref": "0747ad79-21b8-47ef-9b7a-442c2fa57691",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "85b73907-8420-4910-80f2-af69168766b0"
        },
        "item": {
          "id": "e0d48b3d-704f-4091-a883-56f83d1d3c8c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "45b63a2d-66ac-4509-b338-48ae96a64039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "3bc0d2de-8189-4f08-bb45-8e37baaec3c7",
        "cursor": {
          "ref": "1fd144c3-3ef0-4037-8a52-7ed2f92ddf62",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "8fc68f72-e7bf-4b94-a4a4-999b79dab8e3"
        },
        "item": {
          "id": "3bc0d2de-8189-4f08-bb45-8e37baaec3c7",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e24c57b3-1394-4d90-869c-6d2fa945ddc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6089e7d-09e2-4fcf-8b12-a78e1f4487ca",
        "cursor": {
          "ref": "d9041a49-d302-4aa5-8925-7652005d9c9d",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "348b35f0-37fd-402e-96bf-32bf55b7cd32"
        },
        "item": {
          "id": "d6089e7d-09e2-4fcf-8b12-a78e1f4487ca",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "1dfd483d-ca2f-480b-86e0-92a363ef0422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8aef5cc-d84c-46ce-a16f-f36a7b495330",
        "cursor": {
          "ref": "13011d5a-8448-459f-b93d-e292af7e9f94",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "15fea88b-de04-437e-98b4-175146aa0b2d"
        },
        "item": {
          "id": "b8aef5cc-d84c-46ce-a16f-f36a7b495330",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "40f9a197-aa76-4380-abca-060de16322c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91da13c1-aed7-41e6-9919-e9a5281c4dd7",
        "cursor": {
          "ref": "5cf7b117-60be-4be3-9068-9be32360b9b2",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "09216792-7df5-4b6b-90dc-bbd4d900198b"
        },
        "item": {
          "id": "91da13c1-aed7-41e6-9919-e9a5281c4dd7",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "00138869-e513-4f31-9c1f-7f2b3033db41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ff168ff-611f-43b6-a8dd-d0f105208821",
        "cursor": {
          "ref": "04a1b8bf-a54c-48ed-8370-91f7eaaeec7f",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ab2bbe14-9982-4fc2-8be1-4b9801e8891f"
        },
        "item": {
          "id": "4ff168ff-611f-43b6-a8dd-d0f105208821",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "0418e5d0-97b5-4809-a16d-b5ffa88dbd33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "969ca7b3-d1a7-451a-bce1-516d2dc7a69c",
        "cursor": {
          "ref": "e9cf9dd1-6adf-4dff-b3c9-69907394dc5d",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6f9fd9a3-ddde-4118-ae05-eb15d56d34ac"
        },
        "item": {
          "id": "969ca7b3-d1a7-451a-bce1-516d2dc7a69c",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "c0ac017e-7801-43a3-bec0-9ecc7f504b64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41054cac-c4f1-4cb6-8868-4ec806444408",
        "cursor": {
          "ref": "86817f0e-5c1b-4078-8220-55324986f391",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a3acf71b-ffee-4821-89a7-688e41f8a193"
        },
        "item": {
          "id": "41054cac-c4f1-4cb6-8868-4ec806444408",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "307d260d-ebc9-4e95-a627-ce2fd6906340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "797a02b4-f1d9-4c9f-b993-5259f6ff48e4",
        "cursor": {
          "ref": "d81f268b-04dd-4bd9-a02c-8c0894654a53",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "38868ea6-0bd6-4fd0-a4d0-3fec25d644d5"
        },
        "item": {
          "id": "797a02b4-f1d9-4c9f-b993-5259f6ff48e4",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8d4d487a-a6e7-4fc2-b768-f81d941ee6ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5b38552-d583-4767-8c8e-dea1b8d89ba7",
        "cursor": {
          "ref": "c4859d20-de47-4045-8258-d9812712be81",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b2a80aff-5564-4508-b7b7-54a105104ed0"
        },
        "item": {
          "id": "f5b38552-d583-4767-8c8e-dea1b8d89ba7",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "548169f8-c390-46d8-bfad-22dc48933b63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61893fbc-527f-4e0a-bab4-df694d6c819e",
        "cursor": {
          "ref": "d6227bdf-7190-4898-9581-61b4c6747a9b",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "80dac21c-1bd7-491a-be4d-09fdea1efc63"
        },
        "item": {
          "id": "61893fbc-527f-4e0a-bab4-df694d6c819e",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "2216bd2b-2206-4dc3-9a9a-d431ff5bbfaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea968c19-078d-4c75-be56-8942f444057e",
        "cursor": {
          "ref": "98325ea9-0407-4a34-8d22-39c65aebd013",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d261fd77-97c8-468b-9b49-f13748515b31"
        },
        "item": {
          "id": "ea968c19-078d-4c75-be56-8942f444057e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "3ed31dfc-4085-48ee-b415-54f69061899d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f6403a5-af56-45ce-a38d-c88ff463f391",
        "cursor": {
          "ref": "04d0fb2f-3e82-4f83-aee5-761f5bfc6bbd",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "528c2af3-c4be-4fe8-86b2-e62503191289"
        },
        "item": {
          "id": "3f6403a5-af56-45ce-a38d-c88ff463f391",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "40b7b386-23bc-484f-a558-8f8a8e763e72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4434a27-b37d-49f6-9c8c-4270dd6ad626",
        "cursor": {
          "ref": "9fc8f7a5-d265-4469-8ea6-5e4047d976f3",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f9af70e7-db82-430c-8fe3-1f010c06f28a"
        },
        "item": {
          "id": "a4434a27-b37d-49f6-9c8c-4270dd6ad626",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "624a7a29-accf-47f2-9f91-a1476b8a1f02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7ea7fa0-f272-4ce1-804e-8bff1f7190ed",
        "cursor": {
          "ref": "fae036a7-c1cb-4084-a7e0-8af94d61ec64",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "81613c53-6547-4c44-b83e-b2575b8b357f"
        },
        "item": {
          "id": "f7ea7fa0-f272-4ce1-804e-8bff1f7190ed",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "5be9b923-6c4e-4b61-94ce-08fb344c436f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddeb519f-d690-4954-87ee-152c75f1af67",
        "cursor": {
          "ref": "c3bd0f25-18ab-421b-a0d7-bb6f20559938",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d5bca113-8dfa-468e-9c69-ed94e462dd37"
        },
        "item": {
          "id": "ddeb519f-d690-4954-87ee-152c75f1af67",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "3dfda3c2-611d-4779-891e-16e49b51e4ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0bef2f3-ba17-4887-ac6c-646d6ac4c314",
        "cursor": {
          "ref": "a6a18d3a-b78e-4b20-a0ee-e63d56c0db14",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "3b4a9d3c-0d05-4bde-8d3a-8ef9758487eb"
        },
        "item": {
          "id": "b0bef2f3-ba17-4887-ac6c-646d6ac4c314",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "32a1ae83-c470-485a-bd2a-b19755be9779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8556aa7-922b-48b9-9d8f-d703fc9027bd",
        "cursor": {
          "ref": "1e691e9f-cc5f-419c-b870-131220c5fb4e",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "a937b3e7-6891-4b3d-886b-c88ff974ba01"
        },
        "item": {
          "id": "d8556aa7-922b-48b9-9d8f-d703fc9027bd",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d3e9aa25-a26c-4e16-a114-a324f711f39a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "220e2c9f-281e-4249-b219-03875c81c64b",
        "cursor": {
          "ref": "78bc36a1-b489-4ddd-b117-44ccb4e21fdd",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c942907f-46c6-4d76-bf64-d8c5be62a81e"
        },
        "item": {
          "id": "220e2c9f-281e-4249-b219-03875c81c64b",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "abac9643-4836-43fa-819d-524a3e5055ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d99462d3-2d18-440a-b456-6d1e4a31e1f3",
        "cursor": {
          "ref": "ae9792d3-9437-4781-a3f3-48b8d70958bd",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "ed7af479-91a7-4f96-b5c5-77bf1547876d"
        },
        "item": {
          "id": "d99462d3-2d18-440a-b456-6d1e4a31e1f3",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "2ce49bd1-afd2-45ce-9606-963374d1f1be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eb0dba6-76ef-4c82-97f6-d04b3d5fec4c",
        "cursor": {
          "ref": "29f83a34-d558-4756-801d-ad28a2ed7d75",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "5ef4faa0-8759-4f63-9688-e49b8f29fcca"
        },
        "item": {
          "id": "3eb0dba6-76ef-4c82-97f6-d04b3d5fec4c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a7c1a972-f62e-4b53-83a9-2ca81a4361be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3ab7604-733b-4f8c-9e1e-5bf32f107502",
        "cursor": {
          "ref": "537831ba-1edc-4da0-bb1e-bf052a552548",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0f2e9e9c-71fe-4ccd-a209-da52c932c3ca"
        },
        "item": {
          "id": "c3ab7604-733b-4f8c-9e1e-5bf32f107502",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "7fbf3b72-d40b-4f86-8f46-3e416f7c461e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "249018ad-0ad1-408c-98bc-f009e18fdc83",
        "cursor": {
          "ref": "5c618788-893d-4290-b600-3d61df0aef84",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "18c932da-76ab-4b79-9b51-4100571ee8d6"
        },
        "item": {
          "id": "249018ad-0ad1-408c-98bc-f009e18fdc83",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "08949fa4-151d-49f7-bfc4-7efa087a1834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1942b504-b2e7-49a9-9e67-4dcf4a31616e",
        "cursor": {
          "ref": "cd7a9d60-dda7-42bb-84a3-088b0038bec6",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "181fc154-0f45-4ae2-8daa-acd5f640bdd1"
        },
        "item": {
          "id": "1942b504-b2e7-49a9-9e67-4dcf4a31616e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b0176f55-3937-4073-985a-07752c1da4de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51a8247d-997a-44aa-b7e4-6b959082b7be",
        "cursor": {
          "ref": "6d717aaa-d25c-4c0d-b0b9-959d9f4e9587",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "2f4405e4-c4fe-4521-b8ee-745f8146342e"
        },
        "item": {
          "id": "51a8247d-997a-44aa-b7e4-6b959082b7be",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "9523a6fa-f114-4128-a143-9e0c3d32aab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b71e39a-926c-42b4-a5e7-f7d37f9cf0e9",
        "cursor": {
          "ref": "d5687a24-d59e-4ce0-a3a2-d493aaf0d988",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "95f93566-b8e0-4f2a-bbda-58b090757409"
        },
        "item": {
          "id": "5b71e39a-926c-42b4-a5e7-f7d37f9cf0e9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "8f4bf1c1-dc4d-4955-9a59-bb8a8d4cb7ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b78ca23e-a655-4f9c-9456-8e270049f599",
        "cursor": {
          "ref": "55d9954d-692a-4128-b61d-43f0e240d055",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c4fffca0-7b67-4166-bfea-8040eef9c387"
        },
        "item": {
          "id": "b78ca23e-a655-4f9c-9456-8e270049f599",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "23501f80-40c1-4294-8baa-69e98ae9740f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b2b2413-b327-41a0-b087-f8156b9ccd09",
        "cursor": {
          "ref": "94977aac-ad43-4ec8-8d0c-6998a4bf1b18",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "50864277-a709-4966-a5a5-d425cbc8dfd1"
        },
        "item": {
          "id": "4b2b2413-b327-41a0-b087-f8156b9ccd09",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "313d2473-a0ff-4898-a7dc-4ba870efdf85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7df11c8-e4fa-489c-b312-a93a21097f63",
        "cursor": {
          "ref": "8e3b76f6-b221-46ff-b852-53452636fbf8",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9f7d45ce-622b-4017-b63a-83a9aa976ca1"
        },
        "item": {
          "id": "b7df11c8-e4fa-489c-b312-a93a21097f63",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "0af1c6c5-cbf1-4c82-9692-7a642fc5909f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5710dd82-da17-4ed3-8e41-f9c9e4fc5b8e",
        "cursor": {
          "ref": "065e83b5-c749-454a-bd94-913b66ced110",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c939a166-b68b-4505-a9c6-8e5d281bc4a7"
        },
        "item": {
          "id": "5710dd82-da17-4ed3-8e41-f9c9e4fc5b8e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "6dbe58f9-46de-459a-b124-5e14e263bd66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fbe58a6-2eda-4a22-9dbe-005dce336ad0",
        "cursor": {
          "ref": "48e36099-f9f9-4a6e-a378-3b4da97ed2c7",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "7e679adc-3ac3-41d8-96b0-6631e26e32db"
        },
        "item": {
          "id": "9fbe58a6-2eda-4a22-9dbe-005dce336ad0",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "13a2435a-0c13-4607-b889-b729f8a3cf6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "647d11e2-072e-48bb-9cc2-b8ea71dd2f02",
        "cursor": {
          "ref": "8b1dd1ad-221c-498c-9b63-616e7a3a5217",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b37372e6-35c2-4742-bbe1-07f9c1fd6722"
        },
        "item": {
          "id": "647d11e2-072e-48bb-9cc2-b8ea71dd2f02",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c3b23d14-a8e3-454f-974e-d86b7a2e489a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f7f1c8e-b072-4912-a17a-7009ca59080c",
        "cursor": {
          "ref": "9c907719-bd8a-4d05-9120-eb6068c84e24",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "80fafea1-db9a-45e0-bd1a-feaca669419f"
        },
        "item": {
          "id": "5f7f1c8e-b072-4912-a17a-7009ca59080c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "de3e7336-e240-48c7-b6b9-22d5bc6ef4b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ccfdf38-3b14-41b4-86ca-2491ad178bab",
        "cursor": {
          "ref": "fe2a769a-f04c-4c83-9cd9-59861a6644f5",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "062a5ef1-3b89-49cc-8d03-de03844fc134"
        },
        "item": {
          "id": "9ccfdf38-3b14-41b4-86ca-2491ad178bab",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "5e361d5c-f2d7-4696-9e22-5e99340a4014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eff1591-adf3-403f-a97a-908b25a99b2e",
        "cursor": {
          "ref": "e8b805eb-36b5-4b6b-8c74-a27075384ef8",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "6a1f60bd-b0e9-4e1d-8eff-edaf7cd6209e"
        },
        "item": {
          "id": "3eff1591-adf3-403f-a97a-908b25a99b2e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "049c4d4b-6f9e-4c63-81b5-d47fe908b8d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "056beece-19f6-44d8-b753-cbed3bbc0a10",
        "cursor": {
          "ref": "8b8b5b1e-f002-4a11-99a8-985dee03e320",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "566fd8f5-6299-428c-9f31-71a536296ca1"
        },
        "item": {
          "id": "056beece-19f6-44d8-b753-cbed3bbc0a10",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "2b87d7e1-0e28-4a18-84e1-babf924c48ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4707b96e-6c21-49e9-98eb-eb0d3bc056af",
        "cursor": {
          "ref": "cd278177-24c4-4f28-8ce5-25696173e371",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "cf3e727f-c3e3-41c9-a89c-3a19a1c1aaee"
        },
        "item": {
          "id": "4707b96e-6c21-49e9-98eb-eb0d3bc056af",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "83000e9a-c314-4906-82b3-bb8ebc94b5c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc7b8a39-4921-4bda-b6c7-d88ecc2dab30",
        "cursor": {
          "ref": "3536fff5-ed70-4938-a16a-073d6bb495ce",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "ee8aae21-9508-4b0e-830d-bb20eb6d6d75"
        },
        "item": {
          "id": "cc7b8a39-4921-4bda-b6c7-d88ecc2dab30",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "29614b4e-da1c-42fb-b693-d67c8d7c8ea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc7da4a6-b52e-475a-91b1-333a34645c64",
        "cursor": {
          "ref": "dacd6166-c8b4-477a-8213-5d4ffe846e18",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a00f800e-1b92-4496-9c8f-74e456bb2a27"
        },
        "item": {
          "id": "fc7da4a6-b52e-475a-91b1-333a34645c64",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c5c80dec-c86d-4bf3-bbfa-b3b8903a02fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3733712-066b-40aa-8d55-cf8a49dcfca2",
        "cursor": {
          "ref": "69f59189-e3d5-436a-bbd0-a38cdeb4ec26",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d111263d-c954-48fd-aded-36d35d9250f9"
        },
        "item": {
          "id": "e3733712-066b-40aa-8d55-cf8a49dcfca2",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "45f9141b-4137-4f44-a7f1-833cc476a89f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00e34098-5a33-4e72-aa82-a0734d1aca6e",
        "cursor": {
          "ref": "509f6fb8-7646-41d9-a20a-390a9eeb6e20",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "337b02db-cdf6-45cc-985c-bb5c5c32b44e"
        },
        "item": {
          "id": "00e34098-5a33-4e72-aa82-a0734d1aca6e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "005b5c00-05a8-4af9-82b8-ea2a08fc3944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ccc7dc-af2d-406f-beaa-b9d5550f8807",
        "cursor": {
          "ref": "339b8bbe-0d9f-42ea-8355-58ea4b2fad74",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2f9d56d2-8283-4988-9cc5-b05f0f8e91d2"
        },
        "item": {
          "id": "e5ccc7dc-af2d-406f-beaa-b9d5550f8807",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "6c39ec44-df49-4119-810d-b1409a91ba5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79eabaf9-3753-4e39-bfa8-0c703b66ed10",
        "cursor": {
          "ref": "a65e4b54-c1d5-43b9-85ea-91253490a953",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7420aef9-49be-407c-91cd-3a836d1d9dbe"
        },
        "item": {
          "id": "79eabaf9-3753-4e39-bfa8-0c703b66ed10",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "79cf8a4d-3407-488c-b344-2d72a213451f",
          "status": "Created",
          "code": 201,
          "responseTime": 84,
          "responseSize": 862
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "18ad5f3c-63a4-4c81-bcd0-431a85588f51",
        "cursor": {
          "ref": "1f446b47-b95e-4c3d-8bf2-a9ddfb240f81",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "c0e52ab4-7b73-4ab0-910f-1fe1aa1732bf"
        },
        "item": {
          "id": "18ad5f3c-63a4-4c81-bcd0-431a85588f51",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a6e66017-9e54-4cd7-b256-41aa608bc741",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "031fba11-f825-493a-b93d-7e45c04fb3d2",
        "cursor": {
          "ref": "08e35892-503b-4df2-9c28-9a0dcb4a0451",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "4be71ec6-2360-447e-bf4e-5c2417cb3b70"
        },
        "item": {
          "id": "031fba11-f825-493a-b93d-7e45c04fb3d2",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "b9121515-4316-4e20-82bf-2fc2091bdd31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18510791-95e3-4ff0-8378-d34d31010ab7",
        "cursor": {
          "ref": "126a599c-9a9a-454b-a4f6-45bc42ecce17",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "330fc638-322a-4fe8-82b7-c658fa484360"
        },
        "item": {
          "id": "18510791-95e3-4ff0-8378-d34d31010ab7",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "19736a9e-56d9-42a9-bfc8-1a8ee4ae71f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "421f8f36-e796-4fb6-8762-fed4eb66e0ab",
        "cursor": {
          "ref": "8d5c429d-c34a-41cf-af63-b600c28ce991",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "8f4bb8bf-b16b-4044-a0f6-30dea33f6680"
        },
        "item": {
          "id": "421f8f36-e796-4fb6-8762-fed4eb66e0ab",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "3de97d6c-0a03-41c4-9e77-d21a1137d8c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3c939bc-c4b0-49e0-ad4b-edeca6e27296",
        "cursor": {
          "ref": "4114eea7-50fd-44ae-8f8f-0546fbaabe6d",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ba7c0fbf-a65b-4076-8596-3185e31627b9"
        },
        "item": {
          "id": "e3c939bc-c4b0-49e0-ad4b-edeca6e27296",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b5189a39-19d2-48bc-ab2f-20c168507d23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b26cd83-78d4-46c1-b3c8-e8472338f65e",
        "cursor": {
          "ref": "aea9f685-0227-49d9-8420-97b94e2db7bd",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a8eda107-e295-4eb7-8582-d75c17028956"
        },
        "item": {
          "id": "6b26cd83-78d4-46c1-b3c8-e8472338f65e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "7c88b806-3c2a-4d36-b2c1-c3f78ca16aa8",
          "status": "Created",
          "code": 201,
          "responseTime": 83,
          "responseSize": 862
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "1a83e7a2-0981-417e-b6e2-d0c35ecf8284",
        "cursor": {
          "ref": "b1576dda-7d42-4e35-9741-fe761051d316",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e4710c2c-f365-440e-ad2d-bb1ed0cc3e40"
        },
        "item": {
          "id": "1a83e7a2-0981-417e-b6e2-d0c35ecf8284",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "0df7bb08-d279-46c0-8b9c-ad96f083127a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c800756-2b0c-476b-8f8d-6cdd1903399c",
        "cursor": {
          "ref": "86c6f757-fa12-4654-8712-5b8fbc00ac5f",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "c21921d8-2524-4a48-bafc-071c79a23729"
        },
        "item": {
          "id": "8c800756-2b0c-476b-8f8d-6cdd1903399c",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "29747a52-ced7-4957-a27e-9fb399a28a2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8401a8ed-e456-4398-adbb-c6f0360e0867",
        "cursor": {
          "ref": "d9b246a3-7472-4f7d-9b50-5c13a0cc1fc2",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "291d9e4a-4dc4-41b4-a5f0-1ac913b1f3fb"
        },
        "item": {
          "id": "8401a8ed-e456-4398-adbb-c6f0360e0867",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "7e8c96ac-f85f-42cd-a4c2-01c91e9edbfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1548a97-1b58-4dd9-a907-d8c1fef31c4f",
        "cursor": {
          "ref": "98f217fa-67c9-43cb-ac22-ea5e342be01d",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "383932fb-dac6-4a85-8e0e-37372de4a5b1"
        },
        "item": {
          "id": "f1548a97-1b58-4dd9-a907-d8c1fef31c4f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "69e28aca-29ce-448a-9e37-ab564e16a25a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d444fce3-f8c4-465f-948a-bc2da8e36724",
        "cursor": {
          "ref": "46986963-2118-402f-8b40-ba542f6fc0d6",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "631e7fad-b17b-413b-a493-fdb73676ea09"
        },
        "item": {
          "id": "d444fce3-f8c4-465f-948a-bc2da8e36724",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "c84545f4-5e9f-47bd-a33a-6d7a0d5874d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca7d7fb-7869-4b6d-b5b3-2adf1f86be01",
        "cursor": {
          "ref": "bde054a5-6303-409d-890a-d8564e7c92fb",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "c302ce5a-6325-474f-83b4-2bcd3369fbe3"
        },
        "item": {
          "id": "3ca7d7fb-7869-4b6d-b5b3-2adf1f86be01",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "5b5997d8-2164-42db-b59a-e4959b6e6886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b81b1388-8204-49bf-aa48-c59569b99d16",
        "cursor": {
          "ref": "afc2b9ee-f1c8-4678-9ccc-955032efa723",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d305c51b-218b-439e-87cf-acf2c0eec462"
        },
        "item": {
          "id": "b81b1388-8204-49bf-aa48-c59569b99d16",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "46eb57d8-8e03-4498-a669-83be4b133a13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25eee8c3-3429-49dc-a03c-88c933d8228f",
        "cursor": {
          "ref": "66115958-07d7-4d74-80c6-89d3705387b8",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "85fd588f-f7ca-49ef-af86-011d467fc6ff"
        },
        "item": {
          "id": "25eee8c3-3429-49dc-a03c-88c933d8228f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "37e3d8ba-469c-455a-8083-2b18e22203e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c506e031-32db-4865-a2db-e21704e1a1e2",
        "cursor": {
          "ref": "3c248054-aa31-4f10-9215-a664051c6f47",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "36edbb97-73a3-4411-a5f2-c70bfe1362c9"
        },
        "item": {
          "id": "c506e031-32db-4865-a2db-e21704e1a1e2",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "8377082d-0d15-47ed-9df5-bdfc2c12f951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "ed23f2f6-b4af-491e-ac1d-979ef476b53b",
        "cursor": {
          "ref": "5097f85c-8d22-4625-ac77-e46fd4cff12a",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "45beae01-1f62-4f28-94d6-ba18ab7a6fdd"
        },
        "item": {
          "id": "ed23f2f6-b4af-491e-ac1d-979ef476b53b",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "587d98c1-10a2-4e55-837b-ac14313d26f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 211,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "b934e168-b23e-474b-bb6a-f7dd199e85e3",
        "cursor": {
          "ref": "a004ff57-c177-4859-b8cc-883bdd547e88",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "db47dfe1-f58e-4710-b6a7-fdb8feafbc21"
        },
        "item": {
          "id": "b934e168-b23e-474b-bb6a-f7dd199e85e3",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e67c0648-4ea7-40de-b4f9-a69bd8343a59",
          "status": "Created",
          "code": 201,
          "responseTime": 103,
          "responseSize": 862
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea56e45a-7de8-4752-bb01-a49f61c943e8",
        "cursor": {
          "ref": "1662ef62-2fa2-4495-a706-a9ae6d72a83d",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f1481ec1-eba7-43bb-bddf-7615c73b1413"
        },
        "item": {
          "id": "ea56e45a-7de8-4752-bb01-a49f61c943e8",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ea9ff564-731b-4211-84a6-f961e178d00c",
          "status": "Created",
          "code": 201,
          "responseTime": 82,
          "responseSize": 862
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8d56cbf-a4cf-4feb-8cdf-af9d116a87c1",
        "cursor": {
          "ref": "60d7a243-c2ff-44fe-9b89-4e18d50eb823",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "0d8d7675-aae8-4541-8444-5a917301ce0c"
        },
        "item": {
          "id": "c8d56cbf-a4cf-4feb-8cdf-af9d116a87c1",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a37036a5-4f2f-420d-9f79-696ae75ae2b6",
          "status": "Created",
          "code": 201,
          "responseTime": 82,
          "responseSize": 884
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e57b9afd-6e82-4933-a50e-b37ad17fe4f1",
        "cursor": {
          "ref": "dcb2e487-9449-45ba-81ee-468e0c82ec60",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "268a1b52-76cb-4b9e-ba22-c25d80976a3b"
        },
        "item": {
          "id": "e57b9afd-6e82-4933-a50e-b37ad17fe4f1",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d0301673-a4ac-4137-b5f6-df4855d66ebc",
          "status": "Created",
          "code": 201,
          "responseTime": 82,
          "responseSize": 852
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f48506e-1e46-48e7-92f2-ed6ef4c03aad",
        "cursor": {
          "ref": "e8247b4e-e814-4b80-b329-5179ce565dc2",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "04ac7650-f658-4e3a-8028-4101812d79a6"
        },
        "item": {
          "id": "4f48506e-1e46-48e7-92f2-ed6ef4c03aad",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "fcbb1f9e-3d74-4767-89bd-023174d7fc69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "516e1197-8583-4438-bf77-4675c8b235b2",
        "cursor": {
          "ref": "bbbff75a-6915-4083-8aa6-668b2f3cf962",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "bfd75c5f-24c1-470a-8fb1-2c4c8bcee064"
        },
        "item": {
          "id": "516e1197-8583-4438-bf77-4675c8b235b2",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "61818270-94be-4029-bc9c-01b30d6a3ae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "516e1197-8583-4438-bf77-4675c8b235b2",
        "cursor": {
          "ref": "bbbff75a-6915-4083-8aa6-668b2f3cf962",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "bfd75c5f-24c1-470a-8fb1-2c4c8bcee064"
        },
        "item": {
          "id": "516e1197-8583-4438-bf77-4675c8b235b2",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "61818270-94be-4029-bc9c-01b30d6a3ae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2477b97a-7944-4dad-b00c-f3457ede630b",
        "cursor": {
          "ref": "3759dec6-d711-4699-a230-0c257b244a54",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f5d290fc-78ea-44f9-a831-13d373764968"
        },
        "item": {
          "id": "2477b97a-7944-4dad-b00c-f3457ede630b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "89675afd-5c73-441b-a72d-8dc08abe9d44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "002af85d-8217-4e39-b3bd-71a5db69470d",
        "cursor": {
          "ref": "f3e2a93f-2bf6-40c5-b596-4807ba660595",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "edca3a84-499c-4f6c-84a8-260eed634efe"
        },
        "item": {
          "id": "002af85d-8217-4e39-b3bd-71a5db69470d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "22a45a14-6386-407f-8d3f-59a9c4c5a3e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d32bc39-a9bd-416f-949d-57d0b3ccfa04",
        "cursor": {
          "ref": "6f4a101d-38fa-4e7e-9226-0770a185dcd4",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c78975d7-fae3-460a-becf-49e8f961036e"
        },
        "item": {
          "id": "9d32bc39-a9bd-416f-949d-57d0b3ccfa04",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "95f47871-7a82-4db9-8da1-77e88de5bbad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffe158cb-6091-4640-b191-23c46335928f",
        "cursor": {
          "ref": "aeb8b476-2c1b-42c0-badf-5af7e0eb13cb",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d5492dc6-18a0-4783-a4c1-2ab4730bacc8"
        },
        "item": {
          "id": "ffe158cb-6091-4640-b191-23c46335928f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "0598a6f3-47dd-4e91-8fa9-01496b1e9115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3bb5303-3617-49dd-8137-0cacfbe4e7b6",
        "cursor": {
          "ref": "1fc27725-8ac8-4ff8-806c-a8301961d16e",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "22c40ccd-331a-4016-8587-9600e9163fd2"
        },
        "item": {
          "id": "b3bb5303-3617-49dd-8137-0cacfbe4e7b6",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "67db2b88-6700-4d60-a574-2752ea2a6d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65f60fbe-059a-4a04-9a98-d78dcba42290",
        "cursor": {
          "ref": "7ee42db7-92d8-4553-bdb1-86ee9a996152",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "88cecc8d-d824-4c9c-bd1c-bc90fcffba5a"
        },
        "item": {
          "id": "65f60fbe-059a-4a04-9a98-d78dcba42290",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d7cd0e68-c914-4812-91d8-6d90f4e616c0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "ffaf7b43-72f8-42ec-95ef-6aca633aadd1",
        "cursor": {
          "ref": "0be8eca6-5d78-4d84-adda-e9df3bcb0c9a",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "b4e567d6-cb5d-4bda-8ef2-e95855b061f3"
        },
        "item": {
          "id": "ffaf7b43-72f8-42ec-95ef-6aca633aadd1",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c7623824-92b0-4516-a078-923304556c97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aed7992-2750-4a20-bb75-677a4c464136",
        "cursor": {
          "ref": "7506cad0-8584-4239-a30e-488b55e309b8",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "be960d26-b10a-4487-8bc2-b92863b4251c"
        },
        "item": {
          "id": "6aed7992-2750-4a20-bb75-677a4c464136",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f8a105c8-31e3-4ac9-ab84-44bdf2b97ada",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "214af5b9-8acb-4087-b003-7e9ec3e6cdea",
        "cursor": {
          "ref": "16506966-818c-40a5-b346-77f48e815727",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "85bdab8c-1d27-4e59-91de-cb1f39be4888"
        },
        "item": {
          "id": "214af5b9-8acb-4087-b003-7e9ec3e6cdea",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d4c98a65-5d6b-41f0-adad-b4a6ba4242a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1505417a-e91f-4b4c-95d5-9d1eb24a0f76",
        "cursor": {
          "ref": "215b7740-2ef5-41e2-957f-cbf604714fe8",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "3f20c3a7-1d48-43b2-9e37-1aba5c989ee3"
        },
        "item": {
          "id": "1505417a-e91f-4b4c-95d5-9d1eb24a0f76",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4418e054-e045-4cfe-8b90-6d51659b1132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f15e3f56-a55d-49f4-a92c-19e827c40954",
        "cursor": {
          "ref": "1b92c0c5-5d42-4132-b651-6915de998249",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6d8b7fa8-5d5b-41ab-8c40-a1f61bbf4da3"
        },
        "item": {
          "id": "f15e3f56-a55d-49f4-a92c-19e827c40954",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "73e5757d-34e9-4375-8bbf-b3ac67e96cbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eb7dd26-37f9-4158-933a-b875201147df",
        "cursor": {
          "ref": "e60d157d-352b-4d65-af8a-b24dbc8ecef9",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "323923a3-2bbf-44ba-8c50-7c4c31aa699a"
        },
        "item": {
          "id": "8eb7dd26-37f9-4158-933a-b875201147df",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "99a6b6dc-849a-45c9-bdbe-32ab90f81cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19091703-a924-4960-8735-9efa8382426a",
        "cursor": {
          "ref": "386563da-e941-4424-afdb-80fdbf0f8921",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8541b1f0-e41f-4cde-8fe1-dc68004cff49"
        },
        "item": {
          "id": "19091703-a924-4960-8735-9efa8382426a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "fe1a667a-9b27-4f69-8216-7491bd848f57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b98cd47a-a2d2-4d65-937d-d3fb56ffcc50",
        "cursor": {
          "ref": "97076d4a-279c-4f2e-af5f-24bd7164e3df",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "1a3ea8ae-17de-45b5-8a5b-e52d0a9133df"
        },
        "item": {
          "id": "b98cd47a-a2d2-4d65-937d-d3fb56ffcc50",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ce429417-de0f-4719-bc19-3fe829e3b5ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7fba2c0-b101-4cc2-8946-ab375652530e",
        "cursor": {
          "ref": "94fd4a50-d269-482c-aa93-a9db671961c9",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "1b708091-1140-4821-83f4-6f56b2340674"
        },
        "item": {
          "id": "d7fba2c0-b101-4cc2-8946-ab375652530e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ec511d9e-a6fb-457e-9993-cde218e60e0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "049809db-5181-4398-8d19-a66666502cbb",
        "cursor": {
          "ref": "eeb22e3d-569b-44e2-a414-85263bc16484",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "a7a55b2c-b2d0-4f48-86c5-f924ec31fdc9"
        },
        "item": {
          "id": "049809db-5181-4398-8d19-a66666502cbb",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6446b5b9-0c07-4d91-967f-42e2b70b4457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ba0f2c5-d5eb-49a3-801a-aafbce174d03",
        "cursor": {
          "ref": "58831e16-2a37-46f1-90f8-f85b656b0c49",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "3f863e0f-0d53-4198-8c60-0c31580b8bde"
        },
        "item": {
          "id": "7ba0f2c5-d5eb-49a3-801a-aafbce174d03",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5ddfde06-daf3-4f3e-8067-9ad59a9a314c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2b19cbe-1acf-4e16-bef4-967259efc93c",
        "cursor": {
          "ref": "cea892d5-221b-450a-8cd6-26a99b170381",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "04815be2-e7a0-42e3-bfda-c94244d7a3c5"
        },
        "item": {
          "id": "c2b19cbe-1acf-4e16-bef4-967259efc93c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d21ab120-a476-43a3-85e4-4a0760439ab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90e0f3f8-1dca-4356-8205-4031a377c417",
        "cursor": {
          "ref": "10aa9502-f535-4d3b-b143-ad3d9a233891",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "37fca64d-e19f-46f3-87d8-2d4e636b5ffa"
        },
        "item": {
          "id": "90e0f3f8-1dca-4356-8205-4031a377c417",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "96833972-9078-465a-9e26-5206946145d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffdacf42-2dbe-4f40-baa4-70dda8002584",
        "cursor": {
          "ref": "09442fe8-013c-4843-a48a-78c565a82c69",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "689bb215-fab2-40e9-bc5a-56e249b04c7b"
        },
        "item": {
          "id": "ffdacf42-2dbe-4f40-baa4-70dda8002584",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "abd68073-9cb3-4a5a-bfeb-bb4dff76b453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "337e2be6-6df6-4c1d-a8c1-d24b0e84b067",
        "cursor": {
          "ref": "027798ae-f58b-48b8-82d9-66f07fcc8f3b",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "58009d26-c4cc-4969-a986-5f60a8c4d39d"
        },
        "item": {
          "id": "337e2be6-6df6-4c1d-a8c1-d24b0e84b067",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8c5a2e4a-99f5-4e3b-9fae-3de0a18e1191",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb42d44f-049c-439e-bd07-713c1499b710",
        "cursor": {
          "ref": "01656b05-ca4a-49ab-bd7d-58f2fb8d150a",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1733ca75-eee1-4f64-8c6c-2c1cea0ae583"
        },
        "item": {
          "id": "fb42d44f-049c-439e-bd07-713c1499b710",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ad88d56c-a071-4242-b0f5-74005f26e091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c656f60-8f45-4593-95d0-39a358237858",
        "cursor": {
          "ref": "fcc3d075-7cb5-4c8d-8ec6-07d6a13f8dd6",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "10e36dca-0b51-4bb7-a2ca-aef30f84f77b"
        },
        "item": {
          "id": "2c656f60-8f45-4593-95d0-39a358237858",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7a1dc37a-78c1-4c10-9df7-b0552eac473c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2917dcfe-ddc8-408f-9464-e94ccfe454c3",
        "cursor": {
          "ref": "aa9d2f8f-9b78-4b96-a7e1-dd34952b6fc3",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "2fce6164-fc7a-4e39-bf59-29a6968f9859"
        },
        "item": {
          "id": "2917dcfe-ddc8-408f-9464-e94ccfe454c3",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f37bb93e-af99-4dcb-91a1-a569308b87be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c543dba4-9eff-42bf-9ea1-cc3617aa3bc1",
        "cursor": {
          "ref": "1ac09fa0-bc6a-4fdb-b3f1-bcf6f796a83d",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "352a659d-09ab-453d-8d18-c4beda2e81fb"
        },
        "item": {
          "id": "c543dba4-9eff-42bf-9ea1-cc3617aa3bc1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a1460497-2a8c-4114-8f4f-7065ca105454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09eb2baa-2a84-4c3d-a0d4-c6813aa4159a",
        "cursor": {
          "ref": "9ecf26ca-abad-40fb-8730-76e473e3c87f",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "32ae9641-395d-45a7-bef8-9e56e7025e70"
        },
        "item": {
          "id": "09eb2baa-2a84-4c3d-a0d4-c6813aa4159a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "53e3cfc2-b5fd-4606-ae7e-cc335e6c3760",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d73167f6-11e0-4b4e-a2b1-949341b7de65",
        "cursor": {
          "ref": "0ed4bc6c-bbf3-465a-ad62-018576f82d40",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e1800b4e-c7b7-4a39-9f71-4b2b35ec37e9"
        },
        "item": {
          "id": "d73167f6-11e0-4b4e-a2b1-949341b7de65",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "72a85264-4746-4e83-8855-3306b2ea458d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8672b449-b1cb-4b11-8471-bf296c9775b8",
        "cursor": {
          "ref": "a6de15fe-0c84-4258-84fa-28688fa6a3b0",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "3dfcd07c-7617-4069-a0a7-4488575bc964"
        },
        "item": {
          "id": "8672b449-b1cb-4b11-8471-bf296c9775b8",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "926b05f7-6105-4d1d-a922-4410baf24a1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb84e7a8-0387-48ea-b1d1-eec3183d267f",
        "cursor": {
          "ref": "88c678c6-9870-4c4a-97f8-d0424b4fe265",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "883b9d62-561a-416d-8aea-81c67bcf1a44"
        },
        "item": {
          "id": "cb84e7a8-0387-48ea-b1d1-eec3183d267f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d69bb9f0-eda9-495b-bafe-4f34e77cbb63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f60309d-064f-4184-aee9-d0cecb44be29",
        "cursor": {
          "ref": "ca4afdf0-a688-4a09-856a-0df831116525",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "7d9ced33-5f09-4f59-85c6-98dea4ed34b1"
        },
        "item": {
          "id": "3f60309d-064f-4184-aee9-d0cecb44be29",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7160c282-68d7-435f-839f-a550c8818698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2200fd7f-7b3a-4506-9036-c2416f21f901",
        "cursor": {
          "ref": "739b1ed3-d324-4fdd-aab1-332b4a71edd0",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "e0f45690-1183-4719-9f74-99216a4b3966"
        },
        "item": {
          "id": "2200fd7f-7b3a-4506-9036-c2416f21f901",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "f3efb838-d9f2-487b-a74e-287c8616545b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51fac5ee-ed7c-4ade-9042-4fd172a03964",
        "cursor": {
          "ref": "6b9f7d48-f323-400e-be96-cda3e523bae2",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "dab1a5fc-598c-4b9d-8d1f-aa17ad6dabcc"
        },
        "item": {
          "id": "51fac5ee-ed7c-4ade-9042-4fd172a03964",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b31381e7-16aa-4c53-8fff-587f4c408246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "c4786639-1010-414b-b484-5487848ca53f",
        "cursor": {
          "ref": "5c63d537-330c-4112-b772-8cbec2183949",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "be2af4ee-a29d-42e9-82bb-41f95f5d98dd"
        },
        "item": {
          "id": "c4786639-1010-414b-b484-5487848ca53f",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "cddd28be-252c-4b2b-abe3-367a867086a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "b48e0135-097c-4722-b64a-cb949c21ad1a",
        "cursor": {
          "ref": "32ecbc0a-db5b-480b-8ebe-555e29369560",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7a459423-5752-4359-a946-1463d00efa4c"
        },
        "item": {
          "id": "b48e0135-097c-4722-b64a-cb949c21ad1a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "39cf00fc-4f1f-421b-a0de-6823ed892dcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b48e0135-097c-4722-b64a-cb949c21ad1a",
        "cursor": {
          "ref": "32ecbc0a-db5b-480b-8ebe-555e29369560",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7a459423-5752-4359-a946-1463d00efa4c"
        },
        "item": {
          "id": "b48e0135-097c-4722-b64a-cb949c21ad1a",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "39cf00fc-4f1f-421b-a0de-6823ed892dcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10a7609e-6a0d-4f42-a62b-27099763f6a9",
        "cursor": {
          "ref": "ff960de6-fcfb-42c2-a37b-e44530d41537",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e113a3f0-c6c1-4a90-8f75-418e6833ea10"
        },
        "item": {
          "id": "10a7609e-6a0d-4f42-a62b-27099763f6a9",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0d5a9c60-740f-4a59-b304-134901b9ae8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c60efd44-c5c0-411f-a5cd-8c691604fb78",
        "cursor": {
          "ref": "46ce0fa1-bff2-405e-af27-9343729822b7",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "65453870-edda-47a4-a94c-8aad4f205f6d"
        },
        "item": {
          "id": "c60efd44-c5c0-411f-a5cd-8c691604fb78",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9c7a2f8d-4037-444a-a953-84172893749a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "556d8356-b521-402f-a9db-e4dee5828248",
        "cursor": {
          "ref": "fd49d27d-fd66-415f-9439-d51c6f012395",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "efa7ecd4-f7e0-4d20-a17c-be28d7fea72d"
        },
        "item": {
          "id": "556d8356-b521-402f-a9db-e4dee5828248",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "cf075e99-06e6-4e3e-899a-951710a8cb9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5168a14-f196-4377-9e1d-b0e6e7c7f32d",
        "cursor": {
          "ref": "d09baedd-f80f-4528-9c8d-4af73d435e52",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "7d54ca9d-3d09-4fdc-9463-3f1fd9727f4b"
        },
        "item": {
          "id": "a5168a14-f196-4377-9e1d-b0e6e7c7f32d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "424e467b-89eb-4a9e-a320-40283e326b6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5584caa0-dbeb-44df-a269-484c60583308",
        "cursor": {
          "ref": "99634c6a-bc13-41be-8a97-3057240189b1",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "e86f9c3e-1c68-40c7-8d62-fc007cd07044"
        },
        "item": {
          "id": "5584caa0-dbeb-44df-a269-484c60583308",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "6f5bf2be-fd60-4b95-91c1-59b0ea434ea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d23b8c48-7bb3-462d-8175-398c9e137b39",
        "cursor": {
          "ref": "ac44223c-c808-4db9-ab1c-d8720aa5cea6",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "08859b65-3145-45a8-8efd-f5535fc423e4"
        },
        "item": {
          "id": "d23b8c48-7bb3-462d-8175-398c9e137b39",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "34c745ea-40b4-4db9-bdab-29bbc4795833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82dd2763-5269-4411-a971-4b97c822145d",
        "cursor": {
          "ref": "bfe824be-344c-442b-87a4-dd657f847071",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "a9294df9-c681-4208-a63c-06e90520a7c3"
        },
        "item": {
          "id": "82dd2763-5269-4411-a971-4b97c822145d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "bae76481-193e-456f-be41-a87253743f62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0044b3e-f839-4af4-a79b-1e41424f19e0",
        "cursor": {
          "ref": "d8df8711-5a1d-47af-980c-7d66c8d96150",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "192ceb71-5937-4054-a828-a2e1c7fde15f"
        },
        "item": {
          "id": "e0044b3e-f839-4af4-a79b-1e41424f19e0",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "fd95d274-dbb7-4900-945a-e1459a46967d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99c9da39-f790-4ba7-9022-59c72b04f621",
        "cursor": {
          "ref": "40ca647c-8091-4eb0-8745-6cda0cd4deb4",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "8873815e-c0a6-4ad2-a860-503bacf1c378"
        },
        "item": {
          "id": "99c9da39-f790-4ba7-9022-59c72b04f621",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9fe444f1-b87e-426c-9b16-5cd8e1f844fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dd79367-8ed7-4831-9b30-54e6a1813105",
        "cursor": {
          "ref": "560c98a2-6695-4715-bb27-adaffab0fa27",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "a45912ac-e057-4550-917c-07b69f7339ac"
        },
        "item": {
          "id": "8dd79367-8ed7-4831-9b30-54e6a1813105",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "bf427bbf-0df1-4128-a34e-6d2ae6c2f15c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ec33a6f-6437-4bb3-a93e-47ce0dd20196",
        "cursor": {
          "ref": "65ae525c-5ca9-4cb0-bf31-0fd7f2b52a61",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "2cb98614-fdf3-4060-bb72-4abb7bdd3ba8"
        },
        "item": {
          "id": "6ec33a6f-6437-4bb3-a93e-47ce0dd20196",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "276e0878-e621-4df8-ab8b-e91f8d084be6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d9a58d-b1d9-4608-ba8a-800e2c5ed396",
        "cursor": {
          "ref": "72cbc01a-381f-4f2a-b121-85960506a9cc",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "f4640b2e-e0b6-4861-9269-e3f5b70d2f5c"
        },
        "item": {
          "id": "b9d9a58d-b1d9-4608-ba8a-800e2c5ed396",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "730dc74c-fb9f-456b-ac89-2307097ef692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca7d1263-589a-45e1-b42b-91bc5d1461ec",
        "cursor": {
          "ref": "042249bf-251a-4614-a551-a6898982a857",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d253b144-b2be-40c8-afbc-89f31389ba49"
        },
        "item": {
          "id": "ca7d1263-589a-45e1-b42b-91bc5d1461ec",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "27a2520b-4403-4ea8-8b19-e365336dcac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06ff02c1-b851-41de-b7ab-a0b0223c6d2f",
        "cursor": {
          "ref": "86c37155-e43c-4ac3-b293-5bf1234cf768",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "7daf6f29-4ef6-4e00-9840-495cedb54649"
        },
        "item": {
          "id": "06ff02c1-b851-41de-b7ab-a0b0223c6d2f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "3cf1ab0e-9de8-4e40-b56b-7e7471b9565a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a8854ea-aa7d-4605-93f7-4dc7d4cc931a",
        "cursor": {
          "ref": "3c93449d-4290-4f6f-a2c7-1d4f7344be54",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "95b28abd-a8df-43fe-89c0-53edd2964e3a"
        },
        "item": {
          "id": "4a8854ea-aa7d-4605-93f7-4dc7d4cc931a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "0510811a-37d3-4952-9dd7-dd5d0250d697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed671c7f-c6e2-43b0-ab26-f5f3872f9322",
        "cursor": {
          "ref": "a9464ffb-2e35-4174-8af9-bbd0fe26ee42",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "ff57ebb4-bb96-4b73-af08-9990b322dc89"
        },
        "item": {
          "id": "ed671c7f-c6e2-43b0-ab26-f5f3872f9322",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7d87938b-08a2-4e79-8e2a-00a7790a1904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6fea9b3-3274-4c8c-84b4-934d1f856ffc",
        "cursor": {
          "ref": "4ab430fa-4cc3-460b-b9cc-996cca7553c5",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "93498fc2-f842-4f78-a47f-052aceb6a458"
        },
        "item": {
          "id": "b6fea9b3-3274-4c8c-84b4-934d1f856ffc",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "496397cb-ad5a-44b6-b0b4-5fd6ab879a4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00480d63-49c3-46b5-ab3f-8bb777dd815a",
        "cursor": {
          "ref": "71344013-24bf-4c43-b3af-766321e88736",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "64ddca04-3c9a-43ec-a1bb-a30d34cb471d"
        },
        "item": {
          "id": "00480d63-49c3-46b5-ab3f-8bb777dd815a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "d1c1ccb6-c1df-4a15-88c1-7c0d4c4fbd71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c741d4fd-7ab3-4c2e-b7a3-547e045235f5",
        "cursor": {
          "ref": "5f5a2734-4f25-4b49-9c97-5942f001ce61",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b7cc23c0-6196-4f5f-93bc-40d2dba519d6"
        },
        "item": {
          "id": "c741d4fd-7ab3-4c2e-b7a3-547e045235f5",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "3fa842b5-fd9f-43a5-bb89-3c90b6bd91b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba682eed-9911-4dc3-b370-f102d7e7f70f",
        "cursor": {
          "ref": "c0a493a5-edf1-4fcc-b129-13c1ab4b6d33",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "1962bd36-1f76-484c-b359-36e4f8beae55"
        },
        "item": {
          "id": "ba682eed-9911-4dc3-b370-f102d7e7f70f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a9838594-2740-4cd0-a582-c92268764f86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f9f2bf-992a-4df5-a18b-204880ead312",
        "cursor": {
          "ref": "3ce49071-1bd7-4107-af2c-7fa9a2c05273",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "8621dc29-cd2b-43ba-b857-b0b58b3567b5"
        },
        "item": {
          "id": "d4f9f2bf-992a-4df5-a18b-204880ead312",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f027bd54-4a16-4619-a37f-8b6d87de9896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a6b60cf-8466-4a6c-b573-367464159e3c",
        "cursor": {
          "ref": "c51ca03e-ab31-4811-b6ce-84b7b81cac61",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "7fcaa79a-87ed-45cb-8da1-6783694c3578"
        },
        "item": {
          "id": "4a6b60cf-8466-4a6c-b573-367464159e3c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "e3e9f306-4d91-48dd-a580-dcf7f44bc930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9830d426-a117-46c8-a1fc-55bcd3550a32",
        "cursor": {
          "ref": "7dd69388-9a7c-45ef-97bf-0b9bd413343a",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "59f7ccdd-84ba-4516-8abc-0a617a702796"
        },
        "item": {
          "id": "9830d426-a117-46c8-a1fc-55bcd3550a32",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "03cde713-dfab-42d5-98cd-800c1f56612a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41c8f631-b4a0-4b64-a225-2cfda233501b",
        "cursor": {
          "ref": "2fd9bb20-ec8b-453b-a77f-d927f587da6e",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "4294ab88-ce25-4279-9d50-bf02de199e23"
        },
        "item": {
          "id": "41c8f631-b4a0-4b64-a225-2cfda233501b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "28a9f7eb-6cf9-4e4a-bd6d-5279ff4c2489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98232ec8-9e20-4eb0-aa48-641628caf0b8",
        "cursor": {
          "ref": "8b42a44d-8c84-47bc-8110-6b4ce7729577",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "b74a1e6a-1291-4a9a-8499-16db0adaa13c"
        },
        "item": {
          "id": "98232ec8-9e20-4eb0-aa48-641628caf0b8",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "02424052-7850-4ed6-a6c2-1ec09ead0eb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6208e013-c322-4964-828e-ecb23fcf9ade",
        "cursor": {
          "ref": "0201c153-dece-4aba-8d0f-f9c7fb3af775",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "4742f85a-b206-4f15-aa78-74a7cb55e8c0"
        },
        "item": {
          "id": "6208e013-c322-4964-828e-ecb23fcf9ade",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f21e0ca9-3432-4bfe-8c73-cb35f61fa1cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2376656f-9aa5-4c5a-910e-7d717e1c62ce",
        "cursor": {
          "ref": "b6521a06-f72d-4bc5-b495-9213164b5c05",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6112a72c-10c2-4a51-977c-dd34f5981d5f"
        },
        "item": {
          "id": "2376656f-9aa5-4c5a-910e-7d717e1c62ce",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "dde619d8-c78a-4305-9937-8a311d8611b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e28b4d3a-1948-47ae-aeaf-350b77c2fc35",
        "cursor": {
          "ref": "5431026e-b74d-4fcf-a0a1-bd41cb74c56b",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "655852ff-06bb-4dd0-bff0-a76f5de5785c"
        },
        "item": {
          "id": "e28b4d3a-1948-47ae-aeaf-350b77c2fc35",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e4bd318f-a1cc-449d-b85f-d1c9887cc0e9",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "7576a2d5-faf4-428e-a0ad-ac0f77a5b28d",
        "cursor": {
          "ref": "039ffcb7-5e1e-4c94-ad7e-68cb0b2ce60f",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "8e75999a-35eb-43a1-a8d9-68cfdd4ca7b7"
        },
        "item": {
          "id": "7576a2d5-faf4-428e-a0ad-ac0f77a5b28d",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "38d44ac8-5338-48c7-b44a-4d0f1be3d22d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa9d0be-95d3-4a9f-bdb2-c284d185021f",
        "cursor": {
          "ref": "5f2e3103-f5f7-4e4d-9c77-8a60dd923510",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "135dd155-41b9-4ab4-84a5-49a8764dde46"
        },
        "item": {
          "id": "0aa9d0be-95d3-4a9f-bdb2-c284d185021f",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b97fa568-2b62-4159-adcc-a2a54631e379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ff39298-bacb-4c8e-a153-ad35b2b12c4b",
        "cursor": {
          "ref": "48815803-a44f-40c1-aba6-0392256cdd4c",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7c9eac1d-4559-4dde-94c7-2d102822e69b"
        },
        "item": {
          "id": "4ff39298-bacb-4c8e-a153-ad35b2b12c4b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c9323400-8866-4a2e-b79b-c4df98fd8428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9c8dae0-7d27-4d0c-81a0-7342b3f6c560",
        "cursor": {
          "ref": "d089f9d6-dcab-4621-b087-66a7d25723da",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2a0b6c2e-a49a-4be2-a3a8-d23394dc3570"
        },
        "item": {
          "id": "c9c8dae0-7d27-4d0c-81a0-7342b3f6c560",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "03fce349-79fe-4131-a7c4-b607b9e08692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0b48fa2-e98a-4418-b5a3-f0c3e57f4202",
        "cursor": {
          "ref": "93dc4130-2ad6-47f2-8b50-fc4dc7a59b08",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "6cb448c2-71f6-42be-9b46-de0ce4960b66"
        },
        "item": {
          "id": "a0b48fa2-e98a-4418-b5a3-f0c3e57f4202",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d2c1b9e3-aca9-405e-88fa-646f6c5345e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07d77d4f-7074-472b-8b8a-5eaefa4e881b",
        "cursor": {
          "ref": "becbd666-bfb3-4925-a425-6b65b81acf7a",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "5b39fcbf-eb54-4e6c-ab0d-19c3ef25e700"
        },
        "item": {
          "id": "07d77d4f-7074-472b-8b8a-5eaefa4e881b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "20c2e58c-804c-4e51-b602-e8d9213a3d41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de8148cd-765c-4902-8a91-2465d7d7345d",
        "cursor": {
          "ref": "e177778d-5eca-452c-b6ac-4c4f5adafa90",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "5df6cc1e-9119-4fb0-9c05-b7ae4e24b113"
        },
        "item": {
          "id": "de8148cd-765c-4902-8a91-2465d7d7345d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f8ebda51-e672-4f02-af47-798bfa263499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dd132bb-dcea-4aba-9499-0c07ec09d724",
        "cursor": {
          "ref": "95dd3644-1e12-483b-ab62-3bc7c5f5848e",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f4d0db17-64b8-40db-9310-f68031a205b7"
        },
        "item": {
          "id": "5dd132bb-dcea-4aba-9499-0c07ec09d724",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7959914c-abe4-4709-9922-9d776dab31f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ca8aa90-2be3-45c2-92a1-d7c09b1c099f",
        "cursor": {
          "ref": "54d7c9f9-827b-4760-b546-4a73124e3048",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "4c0e45d6-9644-412b-b68e-afd5c0ab13d0"
        },
        "item": {
          "id": "7ca8aa90-2be3-45c2-92a1-d7c09b1c099f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d6e6810f-1fd6-4083-afed-85fec6beea82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "879289f3-d3dd-44cc-b806-a9f46815dca4",
        "cursor": {
          "ref": "1b841af8-69da-4048-b3a6-bbfdc75505b5",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "4e48ef7e-b520-4f8e-b914-5c711f9994b2"
        },
        "item": {
          "id": "879289f3-d3dd-44cc-b806-a9f46815dca4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "78dba0e5-1eea-4614-93c8-21f6fa053efb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08bc9480-b88a-4bc9-876a-0eccad9db432",
        "cursor": {
          "ref": "ab0a59bf-862c-4fc1-b130-b075df4b346a",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "14a2987a-8e82-405e-a831-7caf87993d13"
        },
        "item": {
          "id": "08bc9480-b88a-4bc9-876a-0eccad9db432",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "93a3d96b-2c5f-46bd-8b4c-9198234b7012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca46a85c-b2ec-461c-ab6d-a6d7beba92a9",
        "cursor": {
          "ref": "3e7128a3-4bdb-4a6b-9dd3-b3226c0d477e",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "439be49d-82b3-4904-a446-901461cec0a3"
        },
        "item": {
          "id": "ca46a85c-b2ec-461c-ab6d-a6d7beba92a9",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "52546423-972a-4937-8dae-941b7028241d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24a47ca0-7781-447b-895a-cfe3b8cdf116",
        "cursor": {
          "ref": "a432fc60-6f89-40ef-8eca-cf69ebf18588",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "85778bc6-33d2-4c7a-ad46-1266af0afcc5"
        },
        "item": {
          "id": "24a47ca0-7781-447b-895a-cfe3b8cdf116",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "fd7fa4b2-453e-4689-805c-36f1f2eedac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "186cf629-cf9d-4097-bd12-789d0e5158d6",
        "cursor": {
          "ref": "f7830e88-2578-483e-b646-4e29a3c247db",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "4a8ed412-d40a-4c2e-bca2-fe3d3222faf8"
        },
        "item": {
          "id": "186cf629-cf9d-4097-bd12-789d0e5158d6",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "515a781f-b8aa-4942-adc4-d0f773e91bec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "447de2e2-30d6-4d85-abcf-14e2b3e78451",
        "cursor": {
          "ref": "ec24ca2a-4ef9-475d-ac75-d74f3a501e28",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "779cda8c-5a15-4e9e-825d-f82a4def7038"
        },
        "item": {
          "id": "447de2e2-30d6-4d85-abcf-14e2b3e78451",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "805f1cb3-e446-4cce-9ea9-2dcfb8abf891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e13d7415-280c-4f4f-b0af-dd76c8857588",
        "cursor": {
          "ref": "bae0254e-3f96-475b-9c93-3c49c0764cc3",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "df08fa81-713c-47d1-b925-10ddd1118ad0"
        },
        "item": {
          "id": "e13d7415-280c-4f4f-b0af-dd76c8857588",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "40389f06-0f26-44d8-ac33-2fc6fa9e2431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a894dd5-17c2-4891-86b9-944a3e65413e",
        "cursor": {
          "ref": "8c3c0abb-b754-4f26-9d4f-9fdc7b4bd4c4",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "14f677cd-6b90-43e5-b56f-09bf71a89452"
        },
        "item": {
          "id": "5a894dd5-17c2-4891-86b9-944a3e65413e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c1a1a01f-b580-4332-bdcc-84aecd8f8bce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67634a83-15e3-4e99-939b-b491a8619ba8",
        "cursor": {
          "ref": "f5940187-e76d-4bb3-824b-c99d5eac8012",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "d4c4bc6c-979a-4dd9-8e0a-2b90db139279"
        },
        "item": {
          "id": "67634a83-15e3-4e99-939b-b491a8619ba8",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "757e0224-2f7c-44a1-bda0-7d39cc9a69af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8550df2-68c3-46e9-b764-98894bdf4571",
        "cursor": {
          "ref": "ba997d4b-9af7-49c4-976b-7d08d9e2f48c",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "b79c5174-6c29-4d4a-947e-efebd1c62cff"
        },
        "item": {
          "id": "b8550df2-68c3-46e9-b764-98894bdf4571",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e1845068-201b-49f1-b784-329cebf5490c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d30a13d-19b6-4269-8d3f-a486d0b48d71",
        "cursor": {
          "ref": "8bfb47be-3a49-4259-9efe-293fb600687f",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "1acf6861-4993-4082-9676-332bb2bcdae1"
        },
        "item": {
          "id": "0d30a13d-19b6-4269-8d3f-a486d0b48d71",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "84bb182f-ec78-476d-81af-fda09855af34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87f9c89e-d7e4-4d22-8ca1-c1d31f808d43",
        "cursor": {
          "ref": "55032aa3-f2ef-460b-9701-acb39f49e3ee",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d75ed928-4a68-4ab6-91b5-5fa854751e41"
        },
        "item": {
          "id": "87f9c89e-d7e4-4d22-8ca1-c1d31f808d43",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "c71424ad-6b30-4d35-b010-b3113abf3e27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0430962-2b39-4ccb-8226-374ba974aa6e",
        "cursor": {
          "ref": "7ff22f4b-b653-44d4-a764-baad9133c572",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "55500957-7293-4379-bd8d-835f832f55b9"
        },
        "item": {
          "id": "d0430962-2b39-4ccb-8226-374ba974aa6e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "56008ade-717c-48a7-a064-213236e09145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac251ca-b155-4d74-ad8f-c0fc6f227b5b",
        "cursor": {
          "ref": "e3044e7f-9c38-469a-8662-66dbf310ceee",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "d9e73241-b279-4f9a-a60c-ed62956e9f6b"
        },
        "item": {
          "id": "8ac251ca-b155-4d74-ad8f-c0fc6f227b5b",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ade58ab0-0f83-4d5f-9cf9-d85c0b07ac7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "660a1fb7-dfef-4a94-aa41-e00eae88b49a",
        "cursor": {
          "ref": "c232c5b4-e29a-4ec6-af02-2a2f38681015",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "44d92ee8-dcef-47d2-bef1-b6045ce350b0"
        },
        "item": {
          "id": "660a1fb7-dfef-4a94-aa41-e00eae88b49a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b1694f9f-1f0e-42ac-b755-910e05ccedcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a7f99e8-8016-4926-a5fc-9551ff1ab20e",
        "cursor": {
          "ref": "2a2ab31d-3938-419e-88ed-15d71f7b6988",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f433cef7-e3dd-4ad4-bb7c-9c82c800954d"
        },
        "item": {
          "id": "4a7f99e8-8016-4926-a5fc-9551ff1ab20e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a34212fd-c958-4ff5-9b88-706a973b8a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b1f007-4f3d-4b8f-8e47-9e42d5a4a62c",
        "cursor": {
          "ref": "2dd3fc65-8651-4bd5-ae8f-4515d8a0f3d6",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "e5621a5e-f3c0-4c19-a08b-e09d51a83dd7"
        },
        "item": {
          "id": "58b1f007-4f3d-4b8f-8e47-9e42d5a4a62c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "206f6480-df90-48f9-9f63-04447e601606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d04cfb4-0c11-4077-a1ba-266160fdf1a4",
        "cursor": {
          "ref": "11a16be0-50e4-4ea3-9b55-5dcce46fcd95",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e7a6ac9a-dc1a-440e-9782-de9950b65b76"
        },
        "item": {
          "id": "3d04cfb4-0c11-4077-a1ba-266160fdf1a4",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "3af254a4-e08d-4a20-b02f-24aa15cabe49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0824bc6-ce27-4037-92e2-9d8c46fdc5cd",
        "cursor": {
          "ref": "24eebca4-ef6f-428d-b790-b010e3447d3f",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "e94fa6f7-7b00-4930-a130-a301a8205ada"
        },
        "item": {
          "id": "b0824bc6-ce27-4037-92e2-9d8c46fdc5cd",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "c5a2a6c7-d4ee-4b0d-910f-2bde582eb66d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d90b86b8-2877-4f1e-9e3e-29ffe138ca47",
        "cursor": {
          "ref": "31908fe6-13a1-40d1-bddc-6f2826f24a5a",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "352dc5fd-e8e9-415a-a63d-708055e5ef4b"
        },
        "item": {
          "id": "d90b86b8-2877-4f1e-9e3e-29ffe138ca47",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "949a9136-f6a5-4f99-a018-a2c44e7f9f72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36a45574-a7f4-4caa-a6c7-cd837c25a2e4",
        "cursor": {
          "ref": "de9e9e9c-0e6d-41d3-89b5-34a614c6ed2c",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "72ca9e85-b6cb-4262-a409-45f8a37e166b"
        },
        "item": {
          "id": "36a45574-a7f4-4caa-a6c7-cd837c25a2e4",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "3641aacf-14d6-4d4f-93ed-1feaa0e85b79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61d776fd-3354-43c6-a79e-1328e671c6e4",
        "cursor": {
          "ref": "adefa51a-b070-42ed-86c5-baa95cf3d1d6",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e75cfe95-a45c-46c0-a398-8d01fc87b2e7"
        },
        "item": {
          "id": "61d776fd-3354-43c6-a79e-1328e671c6e4",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "3d2ca6c5-b454-424e-87d3-d4b4d7b11224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c69b39-8c67-4b72-81c5-0ac0dd94c9ea",
        "cursor": {
          "ref": "4a32af98-d69d-49a9-87ce-afdf1bca12c3",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "cd001d3e-d6a7-4d1d-91bd-d0c1b778c066"
        },
        "item": {
          "id": "57c69b39-8c67-4b72-81c5-0ac0dd94c9ea",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "41508b92-a877-4884-8ed7-4256d642aad0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3147a40-59ca-4f1b-801e-3bd74f31e722",
        "cursor": {
          "ref": "803bbfb1-4549-4cda-afcb-08f012c6338b",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "0dd2169e-3486-4955-82f4-18fd2136558c"
        },
        "item": {
          "id": "b3147a40-59ca-4f1b-801e-3bd74f31e722",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "0a4dbb26-4bc0-41d2-bd16-3498b40cbe0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f37190d0-b5fe-47cb-937b-a45dccccdb49",
        "cursor": {
          "ref": "d4229ad4-a38b-4d58-b30c-8b36b06ace69",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "93555052-8211-4024-9738-4e11f83f0c7d"
        },
        "item": {
          "id": "f37190d0-b5fe-47cb-937b-a45dccccdb49",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "4b2372eb-1c48-4f47-a3fa-a31db9ec50f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b3c1e60-0617-4482-90af-0bb97c15ab5c",
        "cursor": {
          "ref": "6604d2e9-bb87-4a67-9330-7a0501a9dea2",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "68783832-dbf7-4d5f-b733-b7fc7d988def"
        },
        "item": {
          "id": "1b3c1e60-0617-4482-90af-0bb97c15ab5c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ef67234a-2055-4504-b616-a2aa2cb5edda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0579f89-597b-44f6-ac7f-ea082a6e3296",
        "cursor": {
          "ref": "5dfd6027-1507-411e-86ca-cf30358d85e9",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "4d1454a2-63ea-47b7-9ba1-d98e735c7ee1"
        },
        "item": {
          "id": "e0579f89-597b-44f6-ac7f-ea082a6e3296",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "fd7ccd7c-9cc8-4c9c-aec1-e9876c2c825a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "906741f7-3bd3-4fb3-bb92-dcbedc88a40e",
        "cursor": {
          "ref": "f90c1e08-84a5-48d7-8801-1346e8996e4b",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "2c14da5f-5d4d-446f-8534-3b4c462b6a30"
        },
        "item": {
          "id": "906741f7-3bd3-4fb3-bb92-dcbedc88a40e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ff87c863-60af-42dd-8143-f242f6a7a104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3bf3a4e-06f3-4eca-82cc-98848e5cfe1b",
        "cursor": {
          "ref": "5d22a843-94ad-4b15-8ba1-0821ddee9a53",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "666e3a19-a61d-4144-80c9-9426ec460354"
        },
        "item": {
          "id": "f3bf3a4e-06f3-4eca-82cc-98848e5cfe1b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e20690dc-3d85-4829-9ff3-f52ee5b3fce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c82cc61-78f2-45f0-8f86-daeee67f9936",
        "cursor": {
          "ref": "516de556-aa5d-4204-a41e-715051d9d53e",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "973281d1-4bef-47ee-a61d-5f835cdce22a"
        },
        "item": {
          "id": "4c82cc61-78f2-45f0-8f86-daeee67f9936",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "cf0b94cd-67f0-4496-9c8f-9c993176b64b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aac52aca-74ae-4052-978f-5cd9f4e4831f",
        "cursor": {
          "ref": "9a79981e-6109-4bdc-b742-1551a4a31d5a",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f36ca26a-c925-4fc6-a451-bc53b90c1c87"
        },
        "item": {
          "id": "aac52aca-74ae-4052-978f-5cd9f4e4831f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "883eb691-28f4-49ce-b6b3-9204b7c0a827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f983aa4f-78c2-4af8-b41e-4782b84e45eb",
        "cursor": {
          "ref": "2d5e2424-7d0d-4505-97ad-e0335bad07b9",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "5474f2db-2960-45af-b826-cc49ac36e280"
        },
        "item": {
          "id": "f983aa4f-78c2-4af8-b41e-4782b84e45eb",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "e3f74d7c-545e-48f0-9f85-5886130c0692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a9b855-79a7-4fbf-aaec-68d005ff4d96",
        "cursor": {
          "ref": "4fd084ae-7f92-4e8a-b3fc-8d414bf32ebf",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "9b61b94d-983d-42ce-b070-37499d8a688e"
        },
        "item": {
          "id": "45a9b855-79a7-4fbf-aaec-68d005ff4d96",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "7750f378-f2c0-40b3-9539-7b4089eeba87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf9a94fa-df14-4ba1-bfea-0b2e95e01c99",
        "cursor": {
          "ref": "5a02c6b7-a30f-4ea5-9ffa-6033ad2ddcda",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "d5074d1e-795a-46dc-8c1d-4b944ed5c87a"
        },
        "item": {
          "id": "cf9a94fa-df14-4ba1-bfea-0b2e95e01c99",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "15ca6ad2-930f-44e1-bd35-6cedeeef391d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88a71a70-e0a7-4154-8603-ef465df961cc",
        "cursor": {
          "ref": "4d67746f-d6ee-440b-a7b8-9e6de7eddb5b",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "f76fd7c3-cc95-4d26-8501-62be4c52ce26"
        },
        "item": {
          "id": "88a71a70-e0a7-4154-8603-ef465df961cc",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "09e6f82f-b576-489f-800f-a2bc3b502f66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c975fabf-5166-42f7-a3ab-0fee015ed441",
        "cursor": {
          "ref": "bb3dda74-9c83-4489-8343-f2616d3ee547",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "910a4e02-503e-46d9-a957-6cf929b79373"
        },
        "item": {
          "id": "c975fabf-5166-42f7-a3ab-0fee015ed441",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3ef68994-32ba-40a8-a197-e352d4296634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcd77e19-910a-49b8-b2cf-1b81a8c909a6",
        "cursor": {
          "ref": "ff0c8498-b47d-4665-a7cc-15da29793d5e",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4162cbf4-a1ce-4f0c-a998-ffff283b4c15"
        },
        "item": {
          "id": "fcd77e19-910a-49b8-b2cf-1b81a8c909a6",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f8d912f0-3754-43e5-a72b-8620da67c2dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13695fd0-b64e-464b-a07f-b62d69d46366",
        "cursor": {
          "ref": "5d369f08-960a-48df-92a2-cf6ffc76b180",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "444bcab6-1030-48c8-902b-130e693e0051"
        },
        "item": {
          "id": "13695fd0-b64e-464b-a07f-b62d69d46366",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "868f9f83-d1b6-41ab-83f5-77cf6ccf9861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "461c1ffe-adca-46ca-917a-47a492d2c428",
        "cursor": {
          "ref": "37e3cf5f-7437-4329-a324-666b948e634f",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "822144de-5a0c-4291-9556-33303f2c752a"
        },
        "item": {
          "id": "461c1ffe-adca-46ca-917a-47a492d2c428",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "7610d9a2-3c6a-4ecd-8973-c2baf2beb12d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3b0ae51-bdc9-4bd2-a9d5-db3f4d7f2139",
        "cursor": {
          "ref": "21795cc8-f402-4df8-a536-eb7acfd76aa0",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "24b33bba-3ac2-4323-99b2-b939ff926419"
        },
        "item": {
          "id": "a3b0ae51-bdc9-4bd2-a9d5-db3f4d7f2139",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "6afca7f5-e87e-4e54-8cab-cab33e1c2fbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efcc7b49-9457-45b2-87b5-d274663330f7",
        "cursor": {
          "ref": "8219ad32-a41b-45a0-a50e-d74ed341f98c",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "89fc6040-495e-481b-8161-45ef6f4abac2"
        },
        "item": {
          "id": "efcc7b49-9457-45b2-87b5-d274663330f7",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "15325b60-43a6-42fe-a035-5f5b8bdbc81f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bce27f55-ee24-49c7-896b-090182f8109a",
        "cursor": {
          "ref": "c2caff78-38d5-4f87-9056-57d6a2c52b84",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "369b4beb-ea9d-44f4-8e6b-5e5b3629ff08"
        },
        "item": {
          "id": "bce27f55-ee24-49c7-896b-090182f8109a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f69864be-b820-49fd-80de-09f65c508acf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "988f5744-7b43-4e43-8433-4ea607ed94c0",
        "cursor": {
          "ref": "44bdf566-de5b-409d-8087-3fef540d1dc6",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "5bbe192c-fdbf-450c-85d9-00fa4f3d492a"
        },
        "item": {
          "id": "988f5744-7b43-4e43-8433-4ea607ed94c0",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "0a7741ec-f618-4290-a0d7-6e0092874cee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56ea4aba-44fa-407b-985c-05b2ccf1f388",
        "cursor": {
          "ref": "349f29a7-bc6e-46c6-8889-117561332d96",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "020a29e2-884b-40e7-955d-8172f8dc6360"
        },
        "item": {
          "id": "56ea4aba-44fa-407b-985c-05b2ccf1f388",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "42797c84-62c4-49a3-b5a5-d79407d746cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "502c7b88-0b94-4b63-bcd8-2268f9207bf2",
        "cursor": {
          "ref": "53d3e04b-a412-4b19-a240-13c8c63c867b",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3551a79c-f25b-4923-8cfe-1ba36bb22ce2"
        },
        "item": {
          "id": "502c7b88-0b94-4b63-bcd8-2268f9207bf2",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "5f719ff7-d742-49c3-a084-65a1990c51dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb3ef971-f30c-4176-923f-9289aad292ab",
        "cursor": {
          "ref": "1b1d4732-c675-4bed-8db7-f7473d4df298",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "00e4b851-cc49-4b3b-be82-b57dc2eb28f9"
        },
        "item": {
          "id": "cb3ef971-f30c-4176-923f-9289aad292ab",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "0ff5ada9-4dd4-424f-97ff-acd8ef6c510e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af608fee-2535-4366-af3f-72b4685f0b20",
        "cursor": {
          "ref": "a274afbb-5b8a-421d-82c8-2c6de087367b",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "72fca23c-765a-4e10-bcf4-69fe5f024b56"
        },
        "item": {
          "id": "af608fee-2535-4366-af3f-72b4685f0b20",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "3a18b5df-7c7d-4088-bb77-9fc5ec0b3dc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7be48c46-1663-4239-94eb-10aea50dcc6a",
        "cursor": {
          "ref": "de8b6096-98c3-4afd-9d0f-1da4c099763c",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "bb1675ae-e58c-4977-a080-770ac13b49a5"
        },
        "item": {
          "id": "7be48c46-1663-4239-94eb-10aea50dcc6a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "1e7acbb4-0ee8-4640-a59a-a1ec6cae2333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c36c28b6-c15c-42b2-960e-5f4430733434",
        "cursor": {
          "ref": "5a122b33-325d-4f27-bd7e-f5a3b5c6891f",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "fd346e8a-70c0-4106-a41d-dc7d349fa6d2"
        },
        "item": {
          "id": "c36c28b6-c15c-42b2-960e-5f4430733434",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "79153a57-bb39-488b-806d-0d2a276c4c02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13cda9dc-3caf-49d4-ac66-5d3522415d3b",
        "cursor": {
          "ref": "b66e9457-2586-457c-84b7-d292c50213e7",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "875f1221-dfdc-4ef8-8dfd-869a583f142b"
        },
        "item": {
          "id": "13cda9dc-3caf-49d4-ac66-5d3522415d3b",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "cec63fab-5c2f-4dab-9194-1c91c13863f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e33695cc-8442-45e5-bf58-de5418f8fab2",
        "cursor": {
          "ref": "e7d6de77-f9df-4bd2-a687-6b46d05a7b1f",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "359875f1-bf61-4ebb-9290-c144f6d79e28"
        },
        "item": {
          "id": "e33695cc-8442-45e5-bf58-de5418f8fab2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "4479c0ab-35b3-4a0b-a97c-4fd2143b325a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dac84e87-e367-418e-ac6c-d13675f22ff3",
        "cursor": {
          "ref": "980b3b23-d14e-4453-a86c-87c96768b8de",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e82105a3-4acc-470b-8bbf-90b5e378e69a"
        },
        "item": {
          "id": "dac84e87-e367-418e-ac6c-d13675f22ff3",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "8f0af352-5343-418e-9f52-01b25f97157c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91b3c6b3-c476-47e6-836e-49b423098679",
        "cursor": {
          "ref": "83d2cbc2-7f82-4628-9ce0-20eca66eb21f",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "7e992553-808b-4f97-b65d-f476191f04f1"
        },
        "item": {
          "id": "91b3c6b3-c476-47e6-836e-49b423098679",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "082589ff-3132-4ec3-9216-771f4e932eb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b90d305d-7ba4-48a3-a602-1c523361391a",
        "cursor": {
          "ref": "edb2b33b-d340-4bba-a8e6-6ee98a20a4af",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "9b050f83-78b4-48f6-b857-06fb52c97bf1"
        },
        "item": {
          "id": "b90d305d-7ba4-48a3-a602-1c523361391a",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "8618f634-0b89-4307-bea7-5d5e4f07ce26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "779924d4-94c6-4822-bb8d-7f69277ed565",
        "cursor": {
          "ref": "8b34c918-7c4b-46ee-911c-c965e95806d2",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3a59cc62-380e-49ef-88da-fd9f3c42af57"
        },
        "item": {
          "id": "779924d4-94c6-4822-bb8d-7f69277ed565",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "4191fc6a-53d5-487f-a958-0790568bd70b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6afbd13a-3d71-4ea9-b668-2f2834d4eb62",
        "cursor": {
          "ref": "be8d53f0-6d04-459f-a266-9f2a462c105c",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "162dfaff-1cc8-43eb-b284-5d210a876df6"
        },
        "item": {
          "id": "6afbd13a-3d71-4ea9-b668-2f2834d4eb62",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "25fa5aad-cdec-4519-80e6-694730014c1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4315f060-9dc1-4da6-9754-1d8b1827bcf9",
        "cursor": {
          "ref": "6a908c3a-9c20-47a5-96ca-6edfdbc7a7ee",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c2092f07-a2a8-4778-8385-de64bd7d4ec2"
        },
        "item": {
          "id": "4315f060-9dc1-4da6-9754-1d8b1827bcf9",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "646a4dc3-7434-462a-9f2c-f0f336b9e2f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "987733a5-7f89-40ac-9d4d-326a064f00c6",
        "cursor": {
          "ref": "4539800f-1626-4969-985c-174b871da004",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a9a7189f-7321-46d4-86c2-e4deba44c1a0"
        },
        "item": {
          "id": "987733a5-7f89-40ac-9d4d-326a064f00c6",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "0c43e3f1-6e95-4eda-ba6d-1feadce47b91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70b065c2-4432-4542-8d19-fd43b0a1f1ce",
        "cursor": {
          "ref": "82818130-2e96-458f-9c12-3c385a5a9a83",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "12a80bc9-4b86-4fca-9a35-3db9549ef314"
        },
        "item": {
          "id": "70b065c2-4432-4542-8d19-fd43b0a1f1ce",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "8936fc3c-711f-4822-aa09-5d220f30c702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4249fa4-c8c8-45f4-9149-bf5895c32c54",
        "cursor": {
          "ref": "02fd6234-9711-432d-8543-959f1466b63f",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "2bebcbac-86da-4ca9-ae05-cfa45dd46426"
        },
        "item": {
          "id": "e4249fa4-c8c8-45f4-9149-bf5895c32c54",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d450e87e-a84d-4e05-9459-8055421ac9a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7017df11-17d3-46af-82e1-5480f16350da",
        "cursor": {
          "ref": "f1f2d412-8e4b-4ed8-b6f1-b4b9d7d942c7",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "c5049dc3-1a73-4316-b476-bbb52028f138"
        },
        "item": {
          "id": "7017df11-17d3-46af-82e1-5480f16350da",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "777538bc-7faa-4704-bba0-8909211cfee4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d68b440-5bce-459e-a0ae-e5973516628b",
        "cursor": {
          "ref": "18c50576-f9c4-4b0e-908e-278c1eea2bf9",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "56274b29-1cb0-4170-8381-01867ecf9071"
        },
        "item": {
          "id": "3d68b440-5bce-459e-a0ae-e5973516628b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "8d258b1a-6601-46ec-b0fa-bf874b65fd05",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:242)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ed74251-0db7-48c6-a7b0-985bf3df3e39",
        "cursor": {
          "ref": "767ecad7-2b31-47b5-8abb-80c4001d0d14",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "4bb51a26-8f89-4b31-9c9f-3e2b6eadec65"
        },
        "item": {
          "id": "1ed74251-0db7-48c6-a7b0-985bf3df3e39",
          "name": "credentials_verify"
        },
        "response": {
          "id": "5dac6368-4643-4f4d-b892-ce3cae548979",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "40c1cd7f-90b3-4007-a9d4-28bc8c4e6b79",
        "cursor": {
          "ref": "a48fb282-45bc-4413-a0b2-6cce9037c6b8",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "8805d13b-9d10-4f3e-982b-658b08c64d55"
        },
        "item": {
          "id": "40c1cd7f-90b3-4007-a9d4-28bc8c4e6b79",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "ad950697-3771-45bb-b38f-4e283bcc1dab",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d56b47-78ea-46b9-906f-7836a0e396fd",
        "cursor": {
          "ref": "8f9ab5c0-cb53-4366-bab3-0e60485614be",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6e222525-b903-456e-a85e-01a515a9e713"
        },
        "item": {
          "id": "c7d56b47-78ea-46b9-906f-7836a0e396fd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "543d89a5-ddcb-4646-b4f1-9d276da48366",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d56b47-78ea-46b9-906f-7836a0e396fd",
        "cursor": {
          "ref": "8f9ab5c0-cb53-4366-bab3-0e60485614be",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6e222525-b903-456e-a85e-01a515a9e713"
        },
        "item": {
          "id": "c7d56b47-78ea-46b9-906f-7836a0e396fd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "543d89a5-ddcb-4646-b4f1-9d276da48366",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d56b47-78ea-46b9-906f-7836a0e396fd",
        "cursor": {
          "ref": "8f9ab5c0-cb53-4366-bab3-0e60485614be",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6e222525-b903-456e-a85e-01a515a9e713"
        },
        "item": {
          "id": "c7d56b47-78ea-46b9-906f-7836a0e396fd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "543d89a5-ddcb-4646-b4f1-9d276da48366",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a34820c5-0db6-4665-b6a3-d1eb983d8819",
        "cursor": {
          "ref": "bbda5d59-fd22-4e25-acf8-1e30e95180ee",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "5b1a82e0-c7bd-42b7-8450-c3de0909e75a"
        },
        "item": {
          "id": "a34820c5-0db6-4665-b6a3-d1eb983d8819",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "a52f1b8d-d70a-409d-8a2e-38bbdfda47a4",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 66,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d29cf4b-e07f-4984-a78a-6abc3e43d2e2",
        "cursor": {
          "ref": "fb991611-afd5-43f8-bb6e-9492f4604369",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b1c4822c-289b-4b54-8586-5cdb34ba2a93"
        },
        "item": {
          "id": "1d29cf4b-e07f-4984-a78a-6abc3e43d2e2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "97ff8c2d-f727-4d8a-a8d0-366df62a5acc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "1d29cf4b-e07f-4984-a78a-6abc3e43d2e2",
        "cursor": {
          "ref": "fb991611-afd5-43f8-bb6e-9492f4604369",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b1c4822c-289b-4b54-8586-5cdb34ba2a93"
        },
        "item": {
          "id": "1d29cf4b-e07f-4984-a78a-6abc3e43d2e2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "97ff8c2d-f727-4d8a-a8d0-366df62a5acc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "253251ec-f7b2-4c31-89be-b6a89941aac7",
        "cursor": {
          "ref": "c16c566f-6511-4946-abbe-81e3a9164292",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2ce9ec82-3cb4-4d10-a46c-9deecdb39c24"
        },
        "item": {
          "id": "253251ec-f7b2-4c31-89be-b6a89941aac7",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "5488bec5-d3b1-4903-983f-0dfbaf8c4f86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "20ddfe90-2881-4056-8274-7f1f89e206b6",
        "cursor": {
          "ref": "c7ee0083-c28a-45a3-921a-48669c3fc6a8",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "cbe11eeb-64f3-4cf1-ba47-bbc92ff2b683"
        },
        "item": {
          "id": "20ddfe90-2881-4056-8274-7f1f89e206b6",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "19d769f1-4ad5-46b7-a85b-27bb3132baac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "20ddfe90-2881-4056-8274-7f1f89e206b6",
        "cursor": {
          "ref": "c7ee0083-c28a-45a3-921a-48669c3fc6a8",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "cbe11eeb-64f3-4cf1-ba47-bbc92ff2b683"
        },
        "item": {
          "id": "20ddfe90-2881-4056-8274-7f1f89e206b6",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "19d769f1-4ad5-46b7-a85b-27bb3132baac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "2c70a5bd-251f-4581-a4ff-edac852e47c1",
        "cursor": {
          "ref": "796f6988-f048-45c5-ae19-e71f4c157e75",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ca4504ca-9c40-47e2-a97a-7957887a74a9"
        },
        "item": {
          "id": "2c70a5bd-251f-4581-a4ff-edac852e47c1",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "4f953553-50a9-43c6-b862-2e58a1ed876d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}