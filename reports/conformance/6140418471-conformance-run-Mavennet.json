{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "f8c9150c-4f2f-4b14-a4e8-5db049bb690a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "e32b519b-d259-48de-afcc-3ea3d1da83fb",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ef11c052-940e-45be-9958-d4eec9245d58",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8b98faac-0b28-4287-a1f8-826a0b3c03a0"
                }
              }
            ]
          },
          {
            "id": "a97efa09-459f-4257-b730-d78823befac2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4aeda67a-3f60-4d15-82f6-f24dbe0d0bff",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5d8aae0a-149c-4d4a-a11f-df74f6660726"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "cc4aabe7-f9d2-4c21-bf54-0b7d27d4e2b8",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1a624f9e-9d4a-4c64-91f9-4a4bb7cbcfcc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "81225edb-91c5-4ed9-a506-6b1ce2ed66d5",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "195ade7a-f539-430d-a931-4ec140555d4e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e7c8df7d-f32d-432d-9c35-530d1fdc212c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "62ff7848-b4a7-4f6a-9e19-59bf7e1413d9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "217d9d89-469f-4cbb-9308-ec4677d53d52"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8df9a5cd-095f-40a5-8016-7a8198546ccb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c76bb71d-d5f1-4d1b-9a27-04a4d89a0a91"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "40b4d782-dd0c-4da2-a811-65e47fea1f82",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "3cd28a48-5835-4c69-bc81-7c76663faa04"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ec840071-ab5e-497a-9ac9-b5a31694c67b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c456595c-b6ba-472a-8c0a-d2f7d7d6aded"
            }
          }
        ]
      },
      {
        "id": "fce3db7a-8e8f-4b54-95a1-381e5d593e91",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "b17a7ad1-dd57-4179-94d5-6cf3142b990c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "edd8031d-a69a-4393-ad33-397abd20e070",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "73c431ee-70e0-4640-bdb0-7739440dfcb7",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "671add01-95b6-4686-abe3-0ca2da124d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0e7841fb-e12a-4dd6-8860-20ea3f9964b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71510556-ebb4-4e4b-8202-0c89b69e5e7b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "882bde23-3bea-4223-82e4-dd396ed21b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "30f4c1c4-7e2e-48a4-bb07-2749b15bc1bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb67226e-b6e2-489c-b788-3b2a7359a520",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30655245-6d3a-49ff-91f7-b95eced22fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c94d332d-906a-4cbb-9854-887b9aa1c851"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "67f22cad-1a02-438b-b8d8-4aa14cf80dbe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7fd7ca5c-54bc-4130-9639-485c4dbee53a",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e81f050-3ccd-436b-b95a-b422918b6517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7bb6ad9e-c46d-4156-b52e-9ed712cc2057"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "208f789d-f056-4479-81e9-2d106b1e45ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d08846e7-4168-4d10-8c95-e4a083068516"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6d7701b6-8c70-4dfc-820d-a956e4eda1a2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8e3c1c41-44e8-4f9f-8d03-7092c6de61a0",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c8a1927-95ae-4605-b665-ff14885c0a64",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ac7e2ada-0d19-4f46-85e7-22ff4afca7f2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a188f08d-ebf0-49f1-b5fa-64e85a020269",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "4800ee03-46b7-4e9c-9d5a-06f3df906218"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7a817a38-fc4a-48b8-9783-bd2f6fdc7783",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "10cc7ca7-446e-4e0f-8a40-3dd705741f12"
            }
          }
        ]
      },
      {
        "id": "32242af8-0077-495f-b820-49d405e4480b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "d693f416-28a7-4a36-a1f8-072b7835b390",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ca753d8e-70bc-4a9b-8d05-2738afda990a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "fa54c141-2c27-4e5c-bb54-82150c7a0831",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8790a91f-1a29-4c1e-ad75-6092a0c9d518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53307531-3ea0-44be-bc23-11934f62d697"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66a05b7a-f627-4eb5-a536-44a9938064ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "25ccdad1-50a4-47c5-b73b-e7e83fd8c3d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6be91c2c-a63e-43c0-90c9-7555b1e591d4",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59fb2cc9-fec1-40a7-81ad-23db61556384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3859bd0-10be-45f2-a9b4-7b9d7cffff44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "872a9183-a985-4cec-93ba-4ffa774e05d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2973b8a1-91fc-4276-9eb5-a4b4f19dee46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db66c89a-bb6f-4b53-81e4-bc33f3d6e329",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d4ef70-8344-4407-9fb5-0e3ad4c96a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65530b41-42e4-4ff3-920e-ec1a252e7d44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c00ec25-35c0-4cc7-a6d1-2720026bb6da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3bbe9d15-dad9-4204-96ba-ab45f4d71ce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03cfd4a4-6ec0-4a90-b1cf-6e58c453724c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cadb16f2-2199-4fc1-8cae-5153e2ee2fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e01c283-14e0-4263-962f-422e5763aace"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1330785-baa4-4b29-a077-512add9754a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e8492c4-9afd-4bf9-8582-6710a0c72ca0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "897cea7c-55d6-4257-9a3c-8bf9c2a74a33",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b5fb78-a0b9-4034-bc8d-391943194ad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "939d8727-090a-4225-9058-efd4840ac2c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdcfd2df-7792-4759-aed3-c357c0b0d271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "093523a6-0dff-44b8-b62f-77fe82867f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db45448-8faa-43d1-9f64-32d50c8a13a6",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d69c88b-c4ab-4a00-9526-9b915ef4f345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fd9f9eb-8f98-465c-b526-81c1b508285a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2455a5cb-3c5e-4a12-92b7-ca1259966735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "43d6a9ce-5161-46a6-9793-2e400c8c1224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6b844a1-5858-4639-a162-90cae24873e0",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc8e309-87db-4ec4-b0cd-120429dea204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "344571b8-038c-4a9e-9084-49ef082b66ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffebf3d5-f2c0-43c8-b771-48ea1cc4fdbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9c9c1d4-05bc-4b27-81dd-0cb31dda2a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ccc9578-5580-4476-8a4d-a1df78e49efe",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b391977-32a5-476b-89cb-ba00f310fd3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a266cb7d-58f3-4306-9d50-52faea70e51e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "035449dd-3aec-4ab8-a334-899c1255ebb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d6483acb-96c4-42a0-8451-1ab01c98e8dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f82a0ddb-03ed-4625-9b8a-4cc92bffc55b",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4869b2ef-eb12-434d-ac20-39072751f2ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a017a355-6b57-49d2-b7ab-104c7cc4888c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fa52f38-dd9b-4c61-b87a-26748639e5b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5dfe5fcd-dc18-4ba3-b50b-cf1294f1fd6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d87838a-8e2f-4956-8ca3-6c50dd227db4",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b79bc9-306e-4f69-9738-6cfac8242d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04f7e114-6a2b-44af-8ad5-ef1768e99c77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0268ec8-f355-498c-ac8f-6df6900667c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c2d6a24-7388-41aa-aba2-3a98d87329e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f43c577f-87ec-48ef-b179-5c59104d0a5d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98fe8151-145d-4b3f-939b-972a9b054934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e07502e-a0ca-4d5b-85b4-29b572686cde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f51fe9b8-f126-4592-9f1a-88201c6d99fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a70adfb4-68b1-4c8c-bf54-fac4510a42dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fda5dda4-1adb-4ec8-b0aa-d22d7921bec8",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e06296e7-d96c-417d-bdf6-0da47af665b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66e02743-3e79-4ada-94f1-04ed5b78de77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afa95bbd-f3af-41f2-9509-9b774ca0f1b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e40afba5-727e-4ca7-875f-5c79557530dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d61db77-f276-4445-9bf8-f4fe6502b26f",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fab2532-1a62-49ed-8b92-dc4ee860bb1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4de1f48e-4334-4486-8b20-bc898fa173a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "149b8c42-c45c-43a8-913b-2d12842dc9e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a0f4ccc-31cf-4be5-a175-1d8ba3c33699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a9be792-d483-4269-97d7-8653623e80f3",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f802ecdf-da1d-4e91-afb0-0ae7b38095f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53cbae77-a3c9-44f7-be60-9438f8328225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5c605a8-a9b3-4e78-ad51-4a9586d0fb6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6cbb02c1-a090-46f5-9c0d-a4565530d90b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "780fcaed-036e-49f0-ae84-23881c309334",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae0f476-2421-41a7-bd3f-582fcf6654b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "932d1fbb-ddcb-46ca-b9fd-e5ae9bcf715c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87caee6a-91bb-44d2-b204-7121033ba6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6aebe9f-87ba-46ec-83e1-8c3dc6042dd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8faa489e-f598-4a8d-ace3-50c1dce26614",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e1b9b97-4239-4d7c-8d87-798f78cfcdf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "803a2eb1-9999-4d87-9ddf-0fcfa3b9a89e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "538d8967-105f-4f29-a555-9f1ef93ddd3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4289dad9-4973-4ffc-91f5-54e690f80466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee718a77-c1ea-48ee-982b-d0a806bbab6a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c138a3ce-c3f6-4761-8ba6-3dfed72a00c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "085188fa-ebe0-4a2a-aeb7-b05af07dc464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "620d184d-ea91-42ed-a4ec-6a4dd9ad9eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47644219-0724-4847-9f89-a5e0ee130414"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17d3d656-d228-4148-b196-496d84b41b03",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f06467b5-8215-47fe-9005-a95f6fc8e9ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cb8eb33-8654-4a40-9742-5e4d2a8b0a5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a67b236-31e3-4617-8737-eb8d58e6921a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b8daef9-6ed6-4af0-b42c-a45164057d6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9c3b23a-6456-4f8c-9092-5c7619dc164d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc8914f-17f8-48be-8079-24ecd1922931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec0ebe2b-f99e-49b2-ab84-34c7221b52f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7737d3e0-c566-4a95-86fb-330286cf6f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcc8b266-b693-4841-8cd4-3bb945bff715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d91f684-c605-4e68-81ae-50f0cbc6a420",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "502fa0e3-3718-4723-8343-5594c00444d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47c4b944-e683-4b3b-a149-08c20152eae3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0859d7c2-bf10-4980-864e-c211aa6d1adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea497580-7617-4c97-88a9-cc1b5a4419f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e473d11c-a489-477a-a606-36915fe88e6b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24cdb691-2f8a-4536-81bd-789db512cc39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ddd1af8-f340-4d9f-9c6c-f45e2d278199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81f05997-db1f-4577-afd2-c59e10c82071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "99b91b88-4bc7-48c8-b544-b68a0c4ee5ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94500d8c-e725-4510-a568-10115a4d5304",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eb15ca2-8d40-47ff-844a-b44be7b4a053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "867f3b03-f959-42bf-add9-f5cad4a7dd27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b4b59f7-80ad-4a6d-8e94-0d5966e899bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e918400-455e-4423-8aea-70795be1c076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4edbaa0-716a-4c19-8e1c-610573f38d98",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "907d4b94-4baa-47c5-94f7-1b3297e62125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c56f3648-9502-4bb6-9acc-31c8f62ed961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0266104-128b-43aa-95ca-622e56a76a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e14557c4-abbd-4b30-8d7f-87ba6b4218c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb91f373-15bd-452e-beea-7d3decb9a01b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e483cb3-9df3-4eb3-8c02-be9a09b117a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22a10d75-0fca-4c44-a5da-7c983ba6cef8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d396b83-b328-4a47-92f5-c476a6699fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "78f23134-aca0-4f03-8e5e-2a1802a0c66b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f372f8-8792-434a-8e72-91ac6583566e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d4dade0-d696-4ba2-914b-bc7f0fb80f20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb486830-5e1d-4bed-a036-9873db04fe1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74b80750-bf45-4bf2-a912-97d9724a0b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e18c9b6-02a8-40cd-99c5-5e935836f24d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a66d4b-9555-46e7-9484-1fcb86179d8d",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a4c258-a774-4ade-a6ec-d1b5d47fa8c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f873686-38f1-4157-b15e-e9bf34de0279"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "386d8a7c-35b3-4d7e-a013-2f7de5d2a3ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9f5feed-08bb-4723-9e67-dfe3ceb8b1ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ed1efc-7c58-479b-b669-a6bd86fb9654",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b0bcfa-3b25-4c22-8a6d-da4a03497a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54c6ab7e-33c0-4199-af30-1013647c43eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47cfcc29-83e8-4b91-bc27-36ebda428c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "699f7881-658a-426e-8b29-da48bcb5626a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74d98050-03fc-4d1f-b08a-acfe6ce24b53",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a65fc486-67d2-4103-b074-2699c1db7730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db027230-051b-4f56-b98a-125754496c04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eacd46f4-5c44-46ba-9a95-1cc921a266a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbe2d542-ccf8-43b5-8a94-a7a4814195a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "395d54f2-9a34-4d54-a3e1-d9aeb2a6d606",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c2dcff-cc6b-48da-a856-c861d158d564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24997fa7-3900-4697-9b2e-79a6c1501a9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06e07a74-6a36-4b05-bad3-bde5f8a73be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c172e2ad-a884-4891-92fe-87466ca2400f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd8ad0f9-2372-4159-84b0-26d18c11af25",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2870f60f-f93e-41e0-9851-4fd51cda7c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d436d8e7-1200-45dc-ba7e-da11a7adfe53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5b4f89e-95da-4273-aa41-833724dcbb06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbc273cd-93a7-471a-bcc8-c3bacb2ff792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "445bc5ed-136c-4473-877d-62e28472699c",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "413e2eb3-f408-4204-866d-da8931ab08d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f29f8f40-afbf-4b2c-b76c-7258bd5cf66a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11c5d1a-e80f-4475-a20f-1eb5c6b1d172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "00c98ba9-d45c-4389-90b7-e49d4cd55ef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e69fa2-1e7e-4f42-942e-67dec161f1a3",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5068db0-4c08-4c57-9de0-c322a51cf595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15bc78d3-e0bb-474a-84e4-60c0a2c26d63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d99c18c8-1027-42c0-8a16-eb8d1e140669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "58efa75a-5fe9-4bfb-a837-c1d23570670c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff69c8fb-7fbb-4a37-a33a-10eefe09834d",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a08f6b07-9348-4d06-9d81-28db36304ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e3e06cc-72c3-4dd8-925a-9ef849fdd240"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "776b2544-f06a-4ccd-a45d-ab3b33b1e0c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "041729d0-854c-4c63-9cc3-1e151652bfe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ac6713-eb65-4ab2-b336-9a99cc14f56d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b173a2-ca75-42f0-a0f0-c8c5d0059eb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee82b3da-ce2e-4098-b219-0d04b2868274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bcc381a-bb6b-4e4a-b31b-652c07ba05b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "47be8792-1c0c-4342-b6b6-1f855f03343e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "939c832f-ff9b-4ff6-a739-21923c54d0e6",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a9064f-f8f7-49d2-819f-eb1d4812bb71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ca19b51-2700-40c0-8f9f-a030bc93db0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae4e8fe8-4812-4e9d-b822-fa02c4989477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "51c7a85e-7e8a-4358-9c41-2f7fa01ec6ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dffd7cc-5bc1-4858-9914-93c8845b04d0",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "064e4a02-cf5e-4d99-a67f-89baf8abf70e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e10c0925-aa98-4abd-855d-4cc0e05d7253"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5077d104-d79e-4ea2-9d6e-bbcac66b3034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "65654a74-f5c5-49ed-b918-f37c8a632cd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2693b468-c8c8-4b38-a2a3-b94d0a1113f4",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dcacfd5-aa53-4ed6-be18-ae7e946cdacb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "678db76b-7b22-4e1c-8143-01c458f75402"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a12b034-4a6e-4e24-b765-4a78b96ec34c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee359987-d3d8-4191-af49-f38d6c682253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6cc72db-e75f-4477-ba57-7641d9f3b035",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f92cb8-b469-40e0-88b8-6ef1230cd752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce2ffb76-9e33-4c1a-b051-1621ff2ba438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2362b7bf-3575-474e-82ac-d74b3585be79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "27b26c5f-1364-48d2-9fab-4a68665100fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe13c123-1dea-44b9-8b7d-0887654cb845",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f1a1580-7aa9-49f7-93b3-40bb885294e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ed1e04c-0e4b-44aa-b502-bfb158c81672"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9687d6c0-9628-460b-a069-c6ad1857b9d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1cf831ed-9ca7-441e-ad5d-f94534a71de0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6f00d55-bee4-427d-b999-78e4d274c4d4",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "040bfff9-f269-411d-88ca-7827138d0c6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b2f5026-8f03-4262-8d3e-cdd9a9be5116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2072f73b-009c-4572-ac13-4787b1efab7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3682e5a5-3e3f-4414-bdc1-ef5f53a8cf2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4348ff2c-7d73-4a5d-926d-34e26af63bef",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59e35408-6ea3-49ab-9d79-2425f6a7eed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1748452-2219-4d2a-88fd-a9c353df4e22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcbf0991-0481-4800-b31e-0894189bbd86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1655978-6ac8-4394-90e6-04ca21883996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81132d2a-c942-4891-a2c7-314db7dc169b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc808765-d0ca-4581-b926-5d11bb058559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db7b9e69-3aa3-48b3-a6a0-c062e1d8f7ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51580062-7898-4817-bf87-9a4a3e1c3b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "cbfeae57-367a-4d40-85e4-86136c6cfa03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df9586b-9ce7-49d1-bd44-25ff611ee989",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bdf76a2-3c79-4632-8867-d4bdc0e16171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f48823f-db4a-4195-8dff-1b81813a1242"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4c6c59-7db3-4398-90a0-51cc89dcb6b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "160a74e2-88c4-4480-addd-cdc66a6f0ac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "821fafb2-2424-4480-a090-002d238523b7",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe5f932-1f8b-428a-a594-d74db350cd4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cb71fe8-c2a0-48c9-a063-cb7516daeb2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5e6a8d4-ec7f-482c-a943-05877c1ea730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a02d9420-8f71-4a93-b374-873e70432e92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "334b6c0b-c145-4535-9dd5-55d49e8f352a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde81d2a-c95a-44c4-904a-0fdab0328c7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84286a08-155c-4297-bac7-6d84c784e98d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e20c663-ba37-4559-a58e-8dc01e06b97e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ff88f63-2ed0-46b9-b887-987b3207c8d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08192684-0826-4c68-8a09-0f070d0b873c",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "115b209d-803f-4b02-add5-409956b0dd4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71524e63-f949-4f8c-9889-8b9bf6340fe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0241b770-8712-437d-bf39-ca98ebba16ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2c91813-522f-4f8e-8a0e-4dd43df9600a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d12a4a8d-4546-4981-a17d-d807246c447d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e156a2-58fe-448b-b07a-6bd9d9f5870c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f638b91a-0ab7-4021-932c-c456b41f00c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f444ce4b-7bc8-46dc-8f38-b1bd8bbea720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d639ad40-d89a-41ba-9424-915025a718c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edfa3b50-6815-4653-9d2e-145ce0405ac3",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2af2602e-bccb-4d28-a1ce-0cb5aae6de35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc39979b-fc3f-4969-9072-a89a1f49521f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2402eb81-f54a-4e36-b4a5-088091af052b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5704331a-e7f1-4f29-b9b8-4331d90f4c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc479a37-e697-4ef9-b2cc-216b493bca64",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8194e724-8ae2-4491-b8ad-7deb2d260602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bba69ce-67cc-4c89-810f-f072b73f6473"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc64106b-266b-47ab-b9ec-1f413d4a1dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b42629b-46ba-4fcf-9051-bbb546deb644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ac0cc0-2690-410d-8e34-47d7fbaf43d3",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a338c4f8-e755-4309-ac88-5612dbcc1c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54970962-feb6-4569-9f5e-bf45c87507b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86de5b7f-165d-4b0e-8d12-de67f848c88d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2098aeee-7f87-4739-9349-5ec06760446a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c74689f6-7089-451e-a83d-6dfbbe6b7f45",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f7ed52a-fdff-4a2f-960b-bb07bcc09436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "184d647b-84c2-4102-a1a5-3dc6deb14674"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47b5413d-7cc7-41a1-8b86-1260eaf77c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e5f6c30-0785-4a2a-87ac-76faac2b8a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfd1a81f-3a68-42e7-8b6f-c5031c8633ee",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c6f65b8-7648-4e10-955c-f380931fdc2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "515986d7-e7c1-4c3f-bf2e-446bea3d8594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "134f30cb-8f50-44d8-9bc2-a02a85bc9d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d04cd85e-36d3-41ac-b130-d53292c1cf55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f59cea5-d4d5-43c8-a634-ce11ca8d5213",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13769119-1e2e-45f0-a3a7-7cd72a36e8a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20c15d68-ac4d-4ed8-a88d-fc3c9524b8b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e41c62-6306-4dc3-8a80-ce726a62f362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7841b615-162b-4cb9-a654-b49a1c58964b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68216f78-eb5b-4edd-a3ed-a8b8d07985c6",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f43904a-9203-430a-af69-481dc8c5a65e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4a7b1e7-a96b-4fab-ba29-59336173f432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc3c6f80-d637-4983-bdaa-227f6024c93c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e8b8c40-cbb5-4ee9-b668-cb9ec3b0bfec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c400ae7f-3e43-4e9f-8891-7b733340df89",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede7e7b8-5bd5-458f-b2c8-10ebbf390dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20b03465-b0b9-427b-b3ba-90d2e9a28cfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "165af3c4-4778-4242-804b-c604a5e81f92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f355367-918d-4f7f-9a01-6f9a4fbf9c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d486fd-e7fc-4f39-a6f9-e6cfe88d3e55",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2437252b-9fbc-4021-a425-2e22f31d4b68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1db6587d-64b7-4bac-8dc5-c851095ef897"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1658609a-0c89-4d08-9277-eb9de1a3e2bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "27754c41-2018-40ff-bb29-c6bc9e1bc369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fe1d1ae-3086-47cb-af31-70f4c61bce23",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "870b640a-3a52-4c52-ae8e-838f230fc90c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ae1d891-ce12-48e2-bbc0-80fd9a51ff56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a9f66c-b3c9-40dc-abe4-55f1a49b30b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e1d9af07-4574-4eea-91bf-05caf2cb96ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e7ce029-eb93-4582-9d21-03d7c5e1ab13",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce7a3107-52bc-4a94-b1a2-60cd937bd9dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cceda231-f443-4426-bedb-dbea6fbdd3f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b532add1-1f57-4802-a746-862bf8cd6f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc89582a-76fb-4a4e-b2c8-afa6cabc24a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5fce5b0-734e-4a97-a160-d5c238b50748",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b875900b-6a65-4b6e-9bbe-913ffae81e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6717854-f05f-4f9d-b396-e0705f797de3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "885a8a8e-9413-4803-8431-e177fd3a300b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6f1b53f-8155-42e6-add5-6c104e35d530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1215ba9-88f6-4112-a003-6737e463c845",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daa16568-365b-435a-9174-5ab82b129697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "163836b6-ff4c-4b19-bece-a7d0a5de4ea5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164a9731-237c-4545-93a7-a41f3056c89b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e997185-e9f5-4bd1-8701-61c9ac8ea121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98f07dd3-eaca-49c5-9e71-86b63b57bca3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9257b980-85a2-461b-9e9e-332ec0f2a787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df30bc00-2fb8-45aa-9662-95619ee0904d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d3a0e6a-4de2-40fc-96cf-4833b75c6bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "32429bd2-d333-4414-9c12-91f45cea9a93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3c25c40-3ada-4914-9d09-f2f469324cfc",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c87681b-113e-459f-8260-20fc64f2cece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30dd393e-65e2-414d-8dfc-7b65e54a7589"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a664f6a2-f014-4433-ad87-86295c91b66e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "b42d5cab-754b-4478-844e-aa0d8bb50807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bc26369-9c28-4dbb-ac46-63bd8c566799",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "640d2c0d-739d-4d17-86fc-3ae24d50fa21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6e1db40-137f-4a97-ad3f-abf37f2340b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc669f6a-e4ee-4fe7-b796-bc02913171f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "97a30e82-1d70-4045-b3c0-27f420ba6774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94a8a478-1519-437f-9631-57a3046b99e2",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7aa9750-5999-451d-9912-aa9b41ecf041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ef5ba17-cd01-4926-9506-79a54d93a338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3afd3b45-cdbe-4a30-9037-385b0ffc1ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f105005-caa1-4626-a186-f6d6f1700855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "306718d6-8d4c-495d-b599-93be76a66ba8",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d33a39f5-3622-4fc3-a525-afe3d7931821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "877d034e-8d59-45ed-be97-8c6577397a32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de59fa3b-04c1-4e07-8726-ea7ec4a30e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c1c92b8-8003-4c00-a136-fe76b81779fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ff28e74-37f4-43fa-b62f-af21dd47060a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff0a5a3-8ca5-46a8-b638-90170e798995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73954b1f-fa8b-4a16-9f1e-d8201b3b9627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879eae2a-bc44-4360-9d73-36d7c0887745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a4fcafd-f5b2-492d-8b8b-2fc522d006bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2751809d-6c7c-4ce2-9e88-9b84233d588f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6959fc4e-6b5e-4577-9762-7a032ac2a8b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e862595e-caa0-478f-9f06-72fcb0cdab92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69eced43-c370-45a3-8964-4a74fdceeb4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6e82ada9-ff5d-4f2a-8501-28540b7042c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86e16827-faa2-4949-9dcf-96aa55431576",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0553d99d-7513-4880-9edd-44a56a9f7bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb829e0b-a89c-4a6d-91b3-139fc7961551"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c067ec3b-85a8-4e5f-bb34-a4fb92ca3b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0018da44-0265-4b27-ad98-49229e515f5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2f74053-6e23-47e8-894d-4ce0ec796a77",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b1f4a1-e31d-44ed-91f4-afdb8232f924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4374fe16-8092-4dbb-a252-e5a7cdf66e4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c487d1-2b36-45f0-b0dd-0fc2c0b53b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac66c30c-6ba4-44c3-ab49-cbfcd31ae707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0647fcf-a088-46a8-aa66-91fbe72d74fd",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7562ab2f-e742-4aef-bf95-06a5ff78282c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba335ebe-2bf2-4f2b-a492-0d5e0f286bf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3273f7c8-c1ee-458c-aa5e-9d3462711511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "66802978-6ea6-4151-9c23-7ac200eddecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c57c0966-728f-4605-b37d-e67f40347d22",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "646ca644-3591-4423-9556-e205fd3f0056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69cd6d1c-2261-4b35-8f6b-6fb910cc81a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "629cc763-ef62-42da-9699-7f123822e42c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "595df236-37c7-4a5c-afe2-9869d8ecc63e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5483cb9-01fc-44da-9472-69f4da4c05ab",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db076e47-4161-450b-b755-7fc02f6ff2ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aaff228-7b23-4d60-8361-bd69164e7956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14bffdf9-3a87-4026-bc77-642b2bcbb69a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d99afeb-792c-4b7e-9679-67f5288874ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fc1bc66-69b1-4243-8886-29b9b13ad66c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4259024-77bc-4936-97d2-5c78b53ae8e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46764547-1583-4077-a2bd-cf774d01b861"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e944968d-d984-4d08-af94-4df3da14f76b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3728a51c-2d0f-4453-a3f4-41afd12b8cba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50d50cf9-f527-489e-9db3-36df543ac96e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec5a2b5-089c-44c1-9fcd-546fe8c5952e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "043add2c-6d0e-4214-9ebf-ffa9b6f49a1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "398f949a-c10e-4209-9f91-cfef75e89b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6544ccb4-1161-45fa-9f41-448055138012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "366547d4-c768-47e0-974e-bc26fe5331f2",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f1c472b-1c9d-4e16-baf5-761173128b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6931a3c-8fad-4f5e-85a1-15078eda3d28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d719c8a9-1640-4846-8ab8-ceac226688f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8934063c-cf19-4d5b-b23f-46ce6f0abf53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c403c75e-cbed-4914-99b6-a34bbc4bbb30",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df33d91f-ce3f-472f-bd2c-6df8127e409f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03abc4cb-6ec6-4bb3-896b-b1a69df50ac1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ccabc2-b641-4c7c-bfa8-603809bb2480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc720598-7387-4fe5-99ef-4b6f8aced365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222f6e48-1baf-4080-8a81-d44a0551b2e4",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc827633-d26e-4e66-b1b9-95a031402182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ce56468-ddbb-4170-b57e-86d04938236a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "067e4411-308a-4f7b-8cf0-0c6aa47987a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a05ed543-6edc-4529-86bb-fa36f9bf9eab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3804211d-267a-4f54-93e1-7309d7bf498c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c9d305a-305e-4e29-8547-3ab513a7c03f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e9fa41b-c6e9-4a69-a6cf-40aec9a2f5db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05d0eebe-cdff-4994-958a-4c0a50a8b0e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3da09c1d-3e38-4301-82aa-0f50c76348e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7108ab24-baff-4b6a-a1d9-1abc162292db",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f10f76-e02f-4407-a3ee-40a710a580b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34aac23f-b6a4-4b14-87f2-5a2b6dc9f579"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ef47a35-70a5-475e-aad7-58d96137caee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "be6c5f58-2a10-4254-8ec5-64595bff1fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74afac79-22d0-4ffb-ad95-ec38233a4aca",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "976abf76-0a99-4902-b95b-8142e579221c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a42f3c85-86b2-4ff8-a338-8b44daeacd40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44b4634a-0fe4-4aed-b8bb-05d9014291f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "81926c3b-8b18-4160-a0c9-14a1824c4f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "046e5ee2-02c5-42d6-88a0-9664c6d72b26",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b673be45-0761-4e26-82a7-84e28e342866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e43a9e1-956d-4221-b554-c0b6fcbffea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f93dc6d-83c4-4432-ae56-13a9257fd7a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2f717e6-2414-47a4-a6c0-819f3d96109e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "067b13dd-e27c-4b51-90c3-95284a4d7fb8",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "549706c5-f769-4f46-a6f6-3eabc47f65bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10a89e6f-1002-4154-821b-365fc10d7317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "503d12ab-89e4-425a-98bf-36a9c5c8e5d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c175463-83d4-4f7d-90f1-e498e80847ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38f18015-6a1d-4e84-b793-cdde14fc08ef",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1832330-9f8b-4fed-9142-afd7ab135a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad98959c-83e9-45e5-ad77-9b9ca3ccaa35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e1050e-55a6-432f-9885-36f7e1128635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e1588dc-256e-4c04-9bd2-59ceb112c443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c100ec2e-55c5-49b7-9489-d1e668461e4b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13dc308d-aef7-4e46-876a-cdaff0bfac62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9daf3a04-74ab-4ce4-80dd-ffcdc95a3881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "189ea79f-e691-4952-86bc-f7b0fbb21f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f3570b7-eb40-47b9-85d9-94cc2f86cd1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5852a44-42e6-414d-8fb5-5e3048d2e5ae",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9469e635-463d-44db-bf28-5a71baca8ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63333afd-ffe5-4c65-9c3c-5b45d55533dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cbc292a-81d0-4dcc-8e43-f318d3785131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "475e0307-c8a9-4997-b495-b5a02d015961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8cb1f7e-8a0b-4e78-8fb5-cecddc166227",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb94a9bf-1b1d-4769-a23d-d6f0eebd1c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5904ca7c-da42-4a2e-8710-faecbbea6fa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0dc2332-8375-4be0-855d-b4dd7b55b039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2794331e-28c9-42bd-8cac-aa332d1258c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d2de1e-ddc5-4738-88de-8fd43a04b3ae",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f2dfa7-13ed-4f67-88a4-404b9be34f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52088b3c-5c92-4937-8c12-ee6fdca65993"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76da8e6c-d24b-424b-9319-2783d33bc6fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb7a6f3a-a529-4db5-bf40-8267f1b33d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1bc029-59a8-44ae-a99d-c2da6eceb748",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b356814-c1db-4eac-b634-7a7137e264fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ffcbcfc-058b-49de-b910-de88b3d3fc42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18784ce6-e915-4d2e-8144-8e11279b591f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "240d6133-093f-4d19-ae7f-3f51d1381136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d33baee-9d9f-480d-b0a9-06ca4c26f577",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "376ace01-e5e5-4ef7-90d3-a8756f07b0e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd1f9dc8-6480-46dc-bcc1-4fbb9b77c150"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1cc66c6-2de7-470f-b5c0-c3205ce6c6b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4844be80-f2d9-4d1c-8dee-6d5957285ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68244f93-5676-4ac4-bfe3-61c1b965dff8",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f425c92-6040-46ed-ba5b-9505c5fded81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "459754fc-2423-4035-b1e9-ddeb20c369fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d6890d-e9f7-41ba-b339-0c8f98ac6434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "82b6fe96-955b-40b7-b855-49e11b538d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e28eaac1-0b92-44f3-b5ce-b79a3d50f975",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40333bcc-f919-4d74-92c2-196a428690be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "579c9014-cce6-4ec7-aef3-6cda816a3285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c4598da-498a-41c5-ab8b-887274ffe9e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ec372ce-eeed-4b2d-9cb5-9624db6ec829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d302d276-eb8f-4a68-a882-650b2eee0b8d",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ea724c-bdc3-48ed-bbe5-c947025d1b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "cd26c9c0-87f3-41d1-bcce-c5254bb5b7eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf662ba-7596-499c-9975-f8742f06987a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9eb10ebe-2575-488d-bdf0-b7f8354a587c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e2583041-1721-46ea-bbf6-00a44f1debab",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6c914116-0752-4cd6-81aa-71e179c4bf2d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71e2b6e5-29e8-48a4-8154-4d35af2cf126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc7d0797-7ef3-4c6e-bf6d-89d1d535d6d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c18afdae-67f3-4211-9fcd-5fee4a89b735",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d04931b3-d2ce-4132-bb43-26e2f7828b11"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44065bff-37f6-41a9-a427-7ca864c94365",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e4b1e24-1788-4d0a-8749-cfbc947051f1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e99fc4ec-f81c-400c-9710-1c0554e82f94",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "25435755-e7f6-4adb-8fc0-4cbc80412bf9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d837b951-ee74-4afb-896a-72bef5494d7e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "80647221-a5f9-48c4-9ee0-cdf2e95ca538"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "56ea8f80-b0ca-49de-9002-68bfaacd0265",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "36272e80-6906-47b2-be97-22e194ca8b5f"
                }
              }
            ]
          },
          {
            "id": "97b777e5-9bc5-4634-823d-3fddd94fce39",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b5eba8f3-acdf-4b67-aa35-166c2695190c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "89d8d7a3-72fc-442e-a1e5-47ab2ce0845c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "50ea1efe-ae32-4383-8e37-ea23d447056e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4ee2c60d-4467-405b-bd44-d4bf2361009d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2ea73606-23d3-4ba6-bb85-ade92a50dbab"
                    }
                  }
                ]
              },
              {
                "id": "16945f63-a24b-443f-906b-80789a556c06",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "faf9208c-f9fa-415e-a743-b01979e2b7fc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ca7b510d-3679-4a27-b0fa-8a5bf5bdf1b3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d98dc70f-6901-483a-80b4-d75e12ebf070",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "52ed0fd2-6c1c-4f81-bccb-cb9780359db7"
                    }
                  }
                ]
              },
              {
                "id": "784d49ab-9dca-4f92-99e3-5e2b1d745c5e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5607bfd4-6225-4a84-85f5-840f49187a2c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ef603f7b-d69e-4f08-a6b7-e721af55f675"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f5978015-43c3-4365-acd2-61524ee896b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "269fbfd4-009e-4db4-9e29-22fd003bd0e3"
                    }
                  }
                ]
              },
              {
                "id": "d3ebe73f-be1d-4405-8a1b-e210bd177ec5",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "05055ec9-19f1-4e22-93c3-113e206f2de2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "be1e4718-19cb-4a0d-b1a2-8961f1e7871a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5767e111-38e0-47b0-aba1-03e2ffb10599",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "573004e1-e225-4448-a88d-dc3218148556"
                    }
                  }
                ]
              },
              {
                "id": "d1224fe8-5adc-4746-a712-2dc729aeb87f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dd3fbb5c-d9a9-483e-934e-3db54a9175be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e7a4f743-4ba0-4062-9be4-f1801e5f2fa9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b19743a-3924-4942-8d5c-33debaa3fb65",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "21c85421-ddd2-48ee-89c7-cda6ae633a75"
                    }
                  }
                ]
              },
              {
                "id": "70856720-6541-4d09-8556-a2f7d19b0552",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7c66ce8-8cc1-4b86-a7c9-7b2f924be103",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3b600137-7169-4a31-9aae-3e6c2fcaab7c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5e1e5e77-d980-42d5-bde5-7de1eadba151",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c7c2abc1-9f4c-443e-860f-330a848a48e4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "936edf66-a4e5-4205-8c4c-09fd29fc45fe",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "65fee1f3-d8c5-4c1b-a75a-5239529126df"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "39773f69-9673-4bf7-a1f9-2ccc37c455bc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "626f56c1-a133-48d2-9443-d647a9143f58"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "91afd3f6-23d4-4919-b85b-f0f036e881f6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "6f7fe52c-4a56-4785-9115-418a1487c4a7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "990f457a-8384-477b-8fc9-e20d12f4005a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3cccc0de-a12d-4633-a920-595c840ba0b1"
            }
          }
        ]
      },
      {
        "id": "bee88c41-3b36-439a-8dbb-abf4e65c027a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "7f7134d5-c6bb-417c-b6e3-858a7af6d305",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fa48b5c1-c31c-44c8-bd10-5583623ae522",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6c9c5233-98b9-4ed1-a23a-80d39d653284",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b544163-d52d-4057-ad27-af95719d33f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "427a741a-bd12-4e61-992e-8695155d4a63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ac45ee1-43cd-43ae-b3b9-f67e74aaf687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f20dbbeb-565d-4497-8009-22ff84adcf4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6354f2b-0c77-432f-b2c5-766dafc62012",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12cab3cf-f55e-4004-8e55-9aae5e7b560a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da013729-ef9b-41a9-8827-6767b1e6d8ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c91ceed-06e9-4cfb-a1e3-ab951d043d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "87331f96-032c-407c-ae62-75a85d16e329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c9e78cc-e3ab-4cc2-a31d-95558aa7de21",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2035d954-ed62-4f07-8625-561eeedcab01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5225341d-7c3a-4c19-81a6-dd9dea5b64ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b50348de-cd58-4a59-892b-74bba831f476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "986806b7-ba9d-4d0a-9bd2-927551d9587e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a93b578-7399-4df8-bd0c-9d3555745dfd",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dccb03b-4ea0-479c-b6c1-ba968630a45a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "734cbe9b-af1e-4157-8d7e-fb51ac981dda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e2bc0ab-ab12-40e2-a24e-219baa4f0a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d7962a4-14b0-453a-8f2f-230a443a8539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "317b28d3-b96c-45dc-bcad-96c4f871e182",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f7987ae-5ccb-45f2-86c2-d3463460d1ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31e2655d-f4b6-4a51-86ad-5ec771f8ae36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb61d0c4-415d-416a-aa2b-000878de8f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe996060-c6bc-4c2e-9689-7f3a6e0825ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1295071a-d8d5-4a63-957d-115309b70200",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3687e7d7-5578-4156-bf98-48784721bcd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70c23185-da68-4f66-aa5a-9cb6090c6b2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3a5afe-0d12-4c74-90c1-16b9d293a2d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "846ee4fc-4dd6-482d-9777-afd323ce00e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e976ee66-97f8-4115-aeb5-df40a78051da",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb34640-d293-4150-b8ba-a8e6b2a2f23d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2acfb490-2e6c-4028-9907-7a27eaea62c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bdaaa09-9660-4c6b-bcf8-611635361057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b62503cf-ec69-4b18-a78b-574e1798bd64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79921674-3ad9-4c5a-bb50-4f3c092e683f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c7b8ae-63d5-4398-97c7-fa3cd98d18f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c2e96e0-54cd-4787-a0a6-5ac0cfb4cd68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c71af2-e160-4f5b-a5c3-aa77e08ce370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d85b6c5-2159-4e91-a36d-72ebed3a99be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f6d5f83-4363-4319-a913-2439e4723117",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddf09b3d-2be2-4d89-83ff-56cadf5177a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "362ef81a-f29b-477f-890e-fc05505812bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee495159-4df5-4531-91dc-722399586183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4802d49-ab3c-4fb7-aaa5-c405e27757a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a016232-bb2a-4841-a213-8e1c192ce73e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8baa56c1-7d55-4d95-8d81-001caad93f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7d1393f-f121-487f-8da2-9b88b43c31e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5acfdd5-4f74-43fa-9c0f-092c2ebb52ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ac43aad-e3ec-4d40-aa47-203d905b3769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e45dfb1-df62-4c54-8c77-c1808eb415c9",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c0a7d60-2999-49ff-9451-04eb3e8f7341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d3f829f-3820-4995-830f-0ac952f9fa29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bf746dd-120c-4aab-9274-9ef937d6fd9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "fab03c48-eb03-4d70-89e4-89159a02afa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e748aca-8b61-45e1-abad-9dc306132ce9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40cf4fe5-c00f-4baf-8871-bb585b1244aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b67b4c4-9ee6-4b92-97c0-bf18a18e071c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93934b1a-1cef-4e74-821f-4f68080da88f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ae900a5a-e682-4e28-b1f6-ad26e770bd9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b21967b7-da80-4ab2-9f1b-70b9b97ea2cd",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b35343-e760-4a90-84c1-fd4e07b789ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35c42ac9-fad2-4802-9609-4fc47a7caa49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a64f8aa2-ce23-4103-ba78-dc96e450a8b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6724cacb-a4bf-4c81-b848-593f92042880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "542bae24-d159-42d4-8572-bf505c2f69e1",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48cd0c64-3dca-4b04-b06a-898ae5e2f50a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c50a1d14-8572-4495-aeff-a1cbe25cbc60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f82e8b5b-eac3-4341-b00c-1330a3633797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "93090e08-6547-45bd-bcf9-9d3e7d61946a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ba9a5ba-5631-482c-979b-5fba4d0c836b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c3ecb38-5583-469b-a96f-1f76ed5c538d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a847e3-a14c-41db-a317-9c89a612bdaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc2e0d11-79e7-4100-8de4-4aa2f15c7a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae342bcf-5691-4ada-9940-278d6893ffc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79bf8259-d801-4897-bcb0-5882928ac9eb",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c5db63-39f1-46a7-a0b2-2b1cb5a4171a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c899c7eb-bf09-4e74-b44d-e6488708244a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06759378-49da-4eac-80fa-89cfff6bc814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cce1ff7-6902-4593-9a7f-21250ea8e993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f3fc83a-f5b2-4b6b-ad05-696371b93ddf",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d823e269-31e6-4acd-b17e-b996bc509223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe432865-26c5-476a-84a7-454035bfd4cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "808a2442-d1c2-4653-95fd-045b0c4404e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "153a3742-459a-438c-b77b-debe66704d61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72fd8292-10ff-4e48-a70d-c1e8f030eebb",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1086a079-9f93-427e-b53c-9f60fa04308d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b55192ff-e28b-4a80-ad2f-a15794e7d3dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "492e77ee-9d4a-49c1-9a49-fdcffdbf89c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7cb7129-a36c-4e3a-a0bf-c622f2d1e4f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c50d564a-8310-449e-9dfc-f6cb0151b146",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaab6938-95f2-4ffc-ab2c-2264791e9712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1c769b3-a9b4-4ec8-901b-c43b7158f395"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3630e951-ada9-4149-a316-3bbeb446a778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "645ee07b-003e-4e1c-a5fe-4800c7227adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb49f5ab-689e-47dc-9f24-f5c95ca175f4",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de5959a-af94-40fe-b63f-246e661ec476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f2ac7b2-fd1e-4731-bf0d-5cdcb304fad4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "557a16fe-ad8a-4b3f-895c-61014e5193bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd7a4ef7-2d67-4c4f-9abb-bd7e731b60da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5870407c-2b76-4e75-8963-57f7dea4edf1",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c0d0996-3da2-459f-b5b8-366a8c25e279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afeb747a-f09d-41e0-abc8-42272d9f2627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b4e536-0917-4b06-b8a5-24873b7396cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d35a98a-ebc7-4e2c-b6f8-dd3cb5033577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8059ae2d-1221-4527-8baf-d0f3ece262b0",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a55baa-bf50-4461-952d-b84cf4df72ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cedcc878-0277-4a87-b31b-ed34fc79e8df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c35cb3fb-dc69-425a-9f2c-12e1c1dde32a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be8b1e76-84f8-490d-99fd-963309846386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e108a59d-272d-4719-8d70-f64889131f5c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d44041-9a0d-41b6-b15d-d8fd0e954cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9fc8dcd-6ba5-4ab0-afbb-6e30af2e6a26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e8e495-de67-4a73-8f1a-7d9710914e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "19ecd44e-31a5-4d73-b36b-b96218ccd1e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a32f2993-57db-4379-a9d3-437a60433b1c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "447eefb4-63ec-4b20-b3eb-460a2b9273ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2f19296-24b0-4613-bf21-a1b0d876b012"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d0333e-5899-4c66-85f5-8654602108da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "227a0a96-08e6-47ae-b157-130342521986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1aeedae-577f-4752-a9d8-f435cc2b1562",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f54fcb12-0aa6-400c-9c08-46a85691753c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "252fe2e7-2a4c-40a8-abb9-5d034e40527e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c77f67-4814-4151-834f-1ba33d78fa83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fa3a590-ba28-4b38-a44a-31917f62ffb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd59a3c8-6f5d-4d47-8114-33c4607aafad",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85aefb8b-e644-471d-b82a-2fa5cfd4c307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0258eac0-3174-4658-8811-0d5039320665"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62bfdaff-28b0-45b9-93b6-6073d0a54c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ce84412-8497-47a8-81dc-0bd8ef2c4cb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "068e7ac1-4f7e-4975-8a7a-18f366ed6644",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c5619cb-d65c-4f81-8109-0fcabed43e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57cef164-cc7a-43f0-a0a7-fa1472a8fe76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "602752bc-7d7b-4961-a23b-5e16d7293d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b227f23e-9176-4788-aacf-57636807595a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee531fc0-7998-403e-8f90-300b8f5ec6b2",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f1055b2-1da9-4400-9ec4-3ce38c005d86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f752614-ec80-4958-929e-67f2cf7c5565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43cdfc7a-8b8a-488f-a035-6807035e7e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "465bf6b9-481c-4a16-bd98-3d4c6cb522c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "486ef950-8d1a-4a0c-9d8b-b06b554f8e35",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc1b6677-3de4-4f6f-ab27-ae2b3053e679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa054b65-ff4d-46eb-9ea5-ea08239b39df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c3ed306-8658-4f85-a789-580ade305318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94088812-d309-4711-9aaf-5f4bfd4ba4e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "073044ff-ed12-491f-8343-d4232959b8d0",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ba01b81-3ce8-4d46-9e74-7db6db48febe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df0ed5b9-9fec-45c4-8e2f-f384787f25c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c25acb8-d4aa-4a87-8ba2-a4a021376fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6023ea1-965a-484c-a82e-1a1c2d416488"
                        }
                      }
                    ]
                  },
                  {
                    "id": "538ee0ec-1f2f-48cd-88bb-9bedeef1e0f2",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9763c9b8-e8a0-47e0-8c08-53d0b6371687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca533f13-523c-4bb0-bf48-e0c865f8756d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6f32ad4-152b-4c96-a68e-4bf355e2ab0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "30d8ba61-c0e0-4774-95e9-5072fb89c9f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05bfbed7-2210-4689-9be7-9047449bb032",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3291703-158d-4696-8216-635c0a55ff47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12af9bc5-e2e6-428c-9e00-3e2e2bc6cd6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e086f63e-96b1-445e-ba68-7a4b28b22c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "91bc3e8d-9468-4f9a-912f-50fe6095fdfa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a4aff22c-f73d-4b8e-a386-53e52086ca1b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7b063949-ffcd-474e-8e31-4a2f18670f15",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a956dde-f662-49c6-8330-750f323d168a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d196e0ec-2e3d-413f-8a8b-e6d167e3ec2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e77bd36-f195-41c1-b828-12aa52b3499c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3abcfdfa-7d21-4ed1-bdfb-bdef7ef58397"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dbcea823-560a-4476-98ad-f3b59266d495",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "34463e4a-251a-4d4d-ade4-be59b51a1520"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8dfdd512-fdc5-4b59-ac7f-58f5748af5ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f4071af2-9f1f-4f64-a3b5-40f33ceb096c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "23812143-268c-4bed-aefd-383b41bae1da",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bbe8dc87-f043-4b21-a2d0-c8d16789ded7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4586cd6d-1e66-432d-b19c-d4152d0328e5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "19e82d51-612f-474f-a40e-73387e7d9235"
            }
          }
        ]
      },
      {
        "id": "48278ed9-16c8-43bf-b690-5321ee332eff",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "d044a9c7-af87-4289-ab05-af69680d9bf9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9f19752e-c97b-4117-a31f-400c5573986d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4f9541d3-7587-4ee0-9721-0de1130bd017",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad4b3a8b-d1bd-4c7a-90a2-41bb36dd6d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65210603-7feb-49ab-8dda-001a86fcbb77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbdf993a-384a-42e9-adc5-d3c90b8760cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6012ed77-accb-4c50-b972-85d1b15da52d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac416b6-6bcd-4026-8a20-fe9f2d3120ca",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd877158-7437-4acb-864c-2c1d7550d9f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84dd7607-dbc4-4187-bdee-ec62c09aafd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "628b4e73-2425-4ec7-ab6c-a836cbafcde0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "13b7552e-46da-4d70-9207-426c2a4fc285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8039134-e98e-4b9e-ac7f-76a2d6f96c55",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8319abd6-bf6e-465e-b6e3-0ffc2e9ef1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae0af434-8f20-475d-98f2-47ff65870424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b56a3f-d64d-4e3a-a3ba-32baa5fe3f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "59e01b5b-d64d-4a19-9b30-a55763378c6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11c198b2-e252-450b-b6c1-a4afbdf1ebdd",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba502ca5-0789-4e75-ae7b-e9b235f98c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c76035fb-8d21-465d-98a9-1eb7fafc5955"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af993108-e7a3-4e90-b767-45478cb9aa5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a220b5f-e489-4b53-a3f6-b7b4e4147ee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc95231-234e-4dec-a8c2-6a1b1efe22f8",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2ad91a3-c2a5-4cc6-933c-f287d75e0221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6338d37a-11e2-4054-a1de-05f23d053c09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e478a6a8-7e75-4076-a1cb-c90cc8dfa7b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "42ae961c-3c3f-4f45-b3bd-6bfea168b1b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f521fcf5-4509-44c6-8c31-0a5833f3a17c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87a64e0a-3a83-4f90-8a41-28b5fdc43134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87e12164-87ac-4dd9-a48a-3c28cd1c2770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de4028c-e9a1-48e1-b9ac-798d1cc74a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "85a212d7-4aee-40a9-bd37-de2923c2e483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f65948c-e3c3-4403-87d0-0d4344f983b1",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "014ba170-c2e6-48b8-984b-bd06a6526ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab440e43-d416-4585-bff4-761ca1109514"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e085d0a1-47f5-401d-ad0f-fd685b3d1177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e652a35-cd8a-4e9a-b085-ec6b6bdc431a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4da0023-d039-4a63-ba92-a9dd3ffac527",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a846015-d081-4a20-88c9-6339334692a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39b76486-a3d5-4725-af5c-c4aac0c4e7af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2942d812-43dc-4bb6-a484-6a7116978515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "211a4bb5-95e4-4cfc-992b-13c3417444a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4c82300-bb53-439f-8513-8157b2394390",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6745a328-60a4-4fb2-92a3-85e666a45077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f7b6ecd-6ef3-4b12-9092-4ab4e0d14252"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45901aed-20f9-44b0-aa49-dcceb41c675e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5f6cbd5-fc02-4acb-9b9e-20429f91539a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b19eb6ce-a814-4313-ae61-538a6960a67a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf1dfa3a-38ec-4b18-ac36-76877f9fb82e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1fdacce-5b93-4c4f-a066-bdad60572292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6063696e-f59f-4b25-9910-a1313b98c30d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "19b34832-01bb-4be4-9f7d-7a51156ac655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1c4020a-6c68-4a86-9616-bb7e79679c0c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91eff519-bc91-4952-bdc5-f1c8356c52c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f105721e-820b-44c4-b0ed-bb274597adbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b453b7-993c-4a97-b11a-6f071f86d31c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "23c6e765-ad73-41fb-bfa0-dc6df1f999f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ba0e0d9-dc41-432b-8b5f-665350ded967",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d63474-6492-4ccf-ab88-a4d543535b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf1cbfdb-f30b-4080-8918-88883c857528"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ff33532-7a71-45b1-8bfe-171c8b3f36e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b15bfdb8-cf68-4a3b-ac20-8f0cea352cc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d90dac4-7291-498e-b8ce-f5ad71643b99",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d54f62b0-f26a-4517-886f-19625104c55d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd3b5eab-afc3-4097-ad1e-32ea373cf1a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d196c68f-7b2d-4f30-a945-3d5df9292b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "167a31d1-dcee-4fd4-8b9a-edaef3064825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50733690-4ff7-45c1-9f73-f481ef79de5e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e92a4a-cd91-40c5-afec-8bb3d78d918d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1673a79f-817c-428d-95a0-4ca415611660"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f68568f-19e1-4069-81ef-ff16b07c071b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe356575-9204-42d7-8b6b-80e391c3b1a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7e50726-327f-4188-8392-bfa7035e28dc",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d973a0b2-2ed4-4788-99e0-c0381669bb50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73994539-b94e-435b-b45e-b9b7ce2ae66b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01441131-f484-4abe-8bd9-f65657347ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "da793135-a9ca-440f-9cd1-42d011c7e559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e652646b-8019-40c5-8c26-47a90c270e11",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f40d179-df91-4096-9a13-444496a39db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "913bd815-ae40-4cbf-98a6-7bb454f42f12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a145ad84-6154-4c9e-9ba1-88c25063f4aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd52e8b2-fd37-4ddb-a524-abb26d6b61ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19133a0e-30d2-4a98-ad76-7b188a41364a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e3a917-481e-4bdd-835d-9208dd4c5a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a20c43e-4086-49c2-84b0-d94774831092"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa2cf57-97ec-4961-9bb6-c04bef50c50a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b494339-6396-41ed-9f56-6186ddbeb174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d05ab0-87dc-4438-8cb9-0a86e735c3cd",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d35132-cedb-4bdb-a895-625f6133b7f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70318536-d3dd-47de-9dd2-f24c85156672"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e98b978-3c81-42a5-b92a-18524e5d58e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6ea8db2-89c5-4d1e-84b3-f38b275fd5f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e996da4-496f-4553-a201-62009fec1e88",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e23ee1f-401c-4a39-a393-603c91a5b6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5228eb54-ec3b-42cf-a66b-77ed40220bf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3295ad5e-248c-430f-ae60-5e4229b54c2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "066970cb-f4bd-431a-9169-f2fc7476d2ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef963a5-3f30-44d0-915d-f8a03e4536f3",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8a2af8b-ddf6-4d39-aea2-558fb0016748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba1b99f6-78a8-4a53-8020-c3299d0de713"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879ca777-2854-48f9-b5fc-f85d20822fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6211b358-e1e1-43a2-b701-1f652df255f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de5734e-7217-4111-8901-6ef31eb5015d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "498c0cf7-5c98-42d2-a02c-cfb0cb467eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4d70560-1e5f-438f-9b59-83741e3f0e46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a55393a5-cd51-4dcb-a265-a0d4ad67fe46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6e6b9e9-af8e-4bee-a9cc-f96e5bd36125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c0f3bb6-648f-4555-84b3-8adb72876ef6",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b6f084e-3b33-4b21-930c-e487dda57bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86345dcd-2d4c-44e1-9cc9-ea363846f11e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eddb538-4e37-4624-a366-fa0a665907aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83b65bda-1b80-461f-a0fd-06bbaa33bb7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "297d29e8-64d6-4b60-9c2c-657887a52877",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "262a162d-32e7-449e-b941-9e5bd1603def",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "606e245c-7ac9-48be-b810-e0cd509d6bd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66b7a593-608e-4ac4-91c1-781e655bfe7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1549b205-426f-4854-b6a8-9c8874de8c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66fb7a2b-3b5f-4580-a7e3-4782e5f0f72a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e434f20f-8cb8-4edd-913f-e1fda6d3e811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a3c6a95-b84b-468e-bd2c-6810b03b6601"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f8f747-1c85-48c2-b39b-4be609b31768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4275c13-d7b1-4d24-b07f-7d7c86a8e155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0c08934-cb4d-42e1-8dd0-19aed33a2a2a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acbf5886-c0ba-434a-936b-cba2b1f6b55b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b71f1f48-d54a-487a-b9aa-cc1528e292c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b381a37c-a4b0-45a8-96e5-932eb1807a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c4452da-c95e-4169-ab6c-b8f3c7f76809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2dedeef-6ef1-48d3-9262-65c7b092609c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d4d127c-5e41-4cbe-b4cb-0325f12cd26c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9839865-9a4c-4073-9c35-aee709840588"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad65b3ed-ab0e-452b-958a-c4131f2b7797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7c76941-d07a-4bc1-b8e0-d040d807a2a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19001882-7f5f-40d4-af69-9c977b72979f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7337771d-69f7-4425-9e83-e595650ac561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cd89adc-ca31-422b-b49a-712ed8b70a0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44058ba-6d79-4d66-8966-6e12cb1d4648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "85957fab-f27a-4689-ab37-eb9ca9e1df4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e37eb8e2-62e3-444a-b130-d4b4b7a556fe",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09448d6c-5e69-47e6-afcc-d3997f41b78e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fded3bf-3b57-4154-a16a-f2044ba7cc6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9977ecae-7962-4d52-9eeb-094e56a714be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "046b26dd-0ca5-49d2-8426-6c601c22bfca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0070c2bb-5d2d-428f-ac3e-c13f36539dba",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1f872c-4072-4e87-bab6-7707c2f7a58a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fa36827-8422-4ad8-87b9-e810970c191a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af17b5b7-8ab0-4bac-8c5d-69890175a9f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07e35aa0-84f9-4d04-907e-0677626a3d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1988dd5a-0f86-42c3-ad07-a713d6866844",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c7e2357-ebfe-4e3a-9870-eb9da8c40e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ba51f83-5773-435d-ac8d-504ef48767c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2f56e2b-ba71-4f35-8b1b-46f4d55f13f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15151368-ebfa-4d43-9a4e-daa32b31bca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb55fa76-0610-4b09-aa2e-e539c310870f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2dc1da7-6a55-4028-b7fa-7a571244455b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1569aec-276b-4edd-a3c8-88cd486c0cf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abd83295-8140-4b0e-bfff-7d4c23a58d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eaffede5-f3ff-44e6-a919-f00d166dbca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa444f3a-6ded-4f58-8591-affb598ba7ee",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe26297a-5237-49d2-8741-68208c626243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1715e4d-5482-47ce-a449-c86f6a312d72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48488a66-29bd-47ff-bd0f-46ca6c00b142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c754d038-a0b9-4dca-b582-3d6691433b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "023902ed-6fdf-41a3-9863-71d95d96417a",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fee73f03-18d7-4dcb-8baf-e6e5a7b8a29a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cd09830-c291-458a-98ff-b673ebef41cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c283ac66-9760-4c93-a5ff-1067226520b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "234ed692-bda7-43c1-93d7-e674e61614b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af97486-249d-4cc4-8944-ed7af6ff01bb",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4723dd93-734d-4aac-9779-e8c159cb15f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d016ed2c-5d7c-41b5-8c76-f7b941502e43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c26f3d-b505-46fb-9aec-dfb5a42c75ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10d685f6-09d4-4dc1-a4c3-0594441e5e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a43ae78-902e-4863-9f4c-cade1f3297d9",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15a65d3b-a4c0-4f91-ba64-819f6d5ed24d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e95fe35b-417a-4bce-8aad-41137a28d01c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f502860-5948-44ae-96f9-dad18cc29d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11e76a32-d5c0-42d7-bf9f-934a6eaa7170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55bdb220-0e96-4f6c-87e9-3b61298f1539",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57d847d5-ef86-4f59-888b-df0c5439d736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ac20e9f-40d3-4276-ba42-159aa8b67ed1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a74b41db-3c92-470a-86bc-10d0978468d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a41f1b66-57ce-4eab-ae16-ac1edeaf0d6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99528a2b-d848-4ef0-9f2d-12d88b0555be",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27c6f20b-c8f1-4e6e-99e1-682c288b6bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edf0053a-4816-484d-9610-404ffca715c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97a235a7-def6-4919-ab69-99d06e0b5abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c53523d1-a416-453a-8987-cc903e034efe"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "160a38f3-00d9-4caf-aa2f-6d78e9301ce6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "603e2a0d-b534-4b7b-bfa2-93301931d18b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebd1e4d4-c074-4138-b203-f1ebe8aafe62",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8438ed9f-f56d-4f96-ad68-29062e704614"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e65f9d88-a595-4cc3-bbe7-942917974a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3655efb5-747f-4d2e-b099-ce2630814119"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4bb746a2-a755-4b2c-ba87-d895a3dbd08f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11103391-05a2-467f-bfc8-26a11a11fc02"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9a14ebae-9761-4715-80a5-8ab9667ae5cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "01a3e32e-e668-4244-a9da-c91d22a27ae8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6af532f4-4ca3-4244-8c25-7acb107413d3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bb1fb83a-93c2-414f-b01b-b59e219a789f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e78616bd-1d08-4589-8090-dcdb1a753f59",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fc934578-cdfb-4a60-9ce2-7ddf72fdc49b"
            }
          }
        ]
      },
      {
        "id": "c2010af7-8279-4539-8407-35966c35f3ea",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "4a868654-594a-4658-9b95-ee075ad72c4d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "66b362ae-ff6c-4a6e-afdd-1607a2b63060",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cc4bf4f3-c8d9-4923-bd5b-6ea8ba136acc",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ca93e23-1f1c-42c5-b524-8b695fc87067",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "806a08a9-c79c-4100-8a9a-922093b047fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a16773a-9cc7-479f-9831-162351f31e50",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e3c66f-44dd-452c-9d49-c58bcaea51c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed7c0018-3726-4908-a51d-a49466381d92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2044d7d-1d58-41bf-bd39-c714d582befa",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f63a6cc-30f9-42b7-b5d8-3155efe8a25a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a71c2699-1c24-4452-883e-afbe5a0f9836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19aa43ce-eb39-434e-b700-617d8784f516",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b2c1c0-2641-4fa3-985c-e25b7b47ca91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f916d10b-0cee-4af0-9cc3-494d5102c2cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fc49aa9-5251-4ac1-8944-98351d6307c8",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8527ab4d-b3fe-492f-860a-a7c13ab7fc85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d302b419-742b-4ba9-b823-ed380b3c44d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e93188-07e4-40a7-afd6-840534f79836",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1919b8c6-8a37-4c4b-b353-6bbbb8b5c84f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9fbd3ea-5e50-4681-b776-a37a1120aef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9177e85e-a815-4d55-874d-58177ab670b8",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c4b91e-8c80-4cce-b741-90e8633a08f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0f71725-8d47-4502-87d6-063326d0781a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55186092-1a33-4eca-a1b4-4c6a3a4cd0cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa7bec7e-d862-4a23-86d7-bfda4aeed744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "507bb6eb-0117-42b0-af57-4d64fae237e3",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c5b8d31-1819-41b1-ab8a-ca5c50edff00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4265ff4d-0fc6-4f30-bd2f-0495e30ecf46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d90c1f-fef2-40d8-975f-e70bf562936e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67da2293-62f5-4df7-9860-f626b5e68ec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7402fa01-59ea-48eb-bf88-a108e492e54e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "533d6d92-5cb0-4f55-89a3-a045dfd9be4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cf90e30-574f-4eec-b935-772b16d3afdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "522d332c-4336-474c-a103-2b60291b7386",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8331681a-206b-44f2-b65b-9fcbbf2e41fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d952209-1d4e-487e-9a62-ee98129593f6",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f032510-6f4b-4cce-a075-4eb24afec380",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c83644af-be1f-4e36-9541-a65bcc213ec1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e3c7f29-3367-48a6-94a4-2eb1cfc460c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d04cc352-d8c3-4aaa-aa4d-5bce7d4fe647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b74af0d-e9c9-487a-ae52-3c06dadf011e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b1de83-7d6a-4904-add4-f530d23e2af8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed7cb087-c4e1-4a88-bf65-70a475dce2c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "191d8035-6ef6-4268-90e7-75c9175998fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89c16e39-6ec1-48a0-bc06-7f5d28328c5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f973531e-6b45-440d-9a83-8b98a084a87f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20b23aac-3ab2-4687-8d1b-5d7dfc099390",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e9ded4b-8f66-421c-9d36-74fb150f1357"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c1b5a0-780f-4a78-837d-e405d11609df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23a2111c-1dc7-4f51-ae29-e94a97dbb537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f57695-ecf5-47cc-a836-a49770f2e37e",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74c3dbcc-9f01-4c36-9393-60df8a189c05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d58337b-dedf-4344-a948-e6bff07c6613"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dbaa2ee-3012-41cf-b5c1-480e7ee899b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9b1a891-615c-4fbe-881f-5b6bde291570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39af746e-f774-46db-9320-024af428063f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fca1613-6f67-47e8-aff1-c59edaee5b95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b06c1234-405a-4470-b48d-741dddb90514"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0055d56c-86b8-4e12-b311-c699097c45a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6d18897-6eef-4661-9b6c-cc99eeffec03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "784530d2-daf2-42b7-baf5-ec7464843464",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a88471f1-b9d8-462e-8e10-0043012aad05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c5750a7-4459-425a-84c2-a801ac981d35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f02bcf2-e842-4ac0-856d-3d4481d482e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d823f2a3-4076-4dd3-b36e-590f0c43e854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21d67556-525e-4e51-9093-4466dd571b79",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f24044-7c2e-4f43-ba91-4f1790e74a54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88492ca6-5815-439a-8cb1-7801b4df1e94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e26375e-ab1c-41e5-bafe-6187e68a2a92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0cb9e20-bbe9-4a36-b58f-0584feec384f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c4c27f-218e-4cd8-8c08-6acfb3b57fe1",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e723cb80-28da-4898-b8f7-5268627e887e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe330a88-0da7-4aaf-9901-93e1b933b9cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae8e8ec-94be-4225-92c0-9be66666ddd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c52f8dc8-93b2-4bf3-8212-c1f5492100b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9440908-ac7b-4dfc-85ce-9dea1c02eeb6",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45c060ad-f0f5-418e-8140-eb4897e5a5cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4116d6e0-87f7-4ef0-bd09-208b3ee9c732"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2126b1-5459-46a4-9a0e-ebf853ce976b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "698ac133-1290-4b07-a356-11044d592adb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aa5d54c-d0f4-4475-b395-26466d5c1000",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74017c1c-50f9-4bd9-9864-655a6fdb7e71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8526a48-52e9-46b6-a191-c07d11bd8fa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f06c909-5341-467c-8f72-f500880eeadd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fbfd00c-ec6f-4f19-9a5e-2ca25c907bee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4540abb-c406-4fbe-9102-db2d2388ce05",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c121512-bba0-417c-bb87-14d3cc6a3f2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93a445ba-a8f4-4cae-9218-199c3e6b6c65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac6d2a33-fbe3-4db4-ba30-cf72e9f7991f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21f4479f-447e-41ae-b482-c066bdb25176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5446b9f-969b-413f-bc82-8c2553a79098",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dd23455-2b00-4d76-a007-80fcab903eca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba9bdfe6-a648-4c37-b6e6-174d1ed432c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a26ce56-30e7-4f54-9faf-32aa94512b5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7777924-8c89-4048-8de0-244b38daa05a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6f215ff-a5f3-4896-8e37-36beb280a84c",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e053e767-1a02-4ce1-9a73-230c4663ad96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3dd28c1-4158-49b8-9c02-b0470126e7db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77dd636f-ec6a-41e9-a28d-221a628f9c3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aed8c9e-bce2-49e1-b962-95a154cd569d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d6a2c6-6681-4fed-9215-8bcb2c220dfe",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8208863d-6365-48d6-aef4-7c8e8fefc489",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b62a821-c229-462d-baa2-552ab7e16ce5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bfd5beb-2b49-406f-8ba8-5cbb80ed6967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c206776e-3e7a-43e5-8599-7f1290eaecff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2b54e79-721b-4218-b26a-2577308b2502",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a8b4df8-ab83-41cd-86b0-c9203549ea50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83733c65-8e6a-4b59-bbe7-6a858e27c6a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "125ec511-9b06-433d-8afd-65f0a7cbe346",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c15fa76-f233-4b11-9ae3-98044d2cb087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f73e198-859e-4c63-a8fe-fc770238a043",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e9672c-34b5-4fac-b13d-1c2e556e6c92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0bc91a4-4927-4231-a8df-b71f409321a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f341f105-a14d-4426-9278-245583c573e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bbd90bb-1920-435b-9882-429632a8d12e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "120efb1a-5f50-4923-94a9-e16e4ec4f3c0",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f06f1dc-4c23-4266-b5d1-f1ab4d2bfe4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7270524a-41ea-4a3b-a089-050e4eae421c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "099c3422-675d-4b6e-8627-18f447e17a58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ddfaba7-55f3-47c1-8a92-b4c45cda2752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05bb9a18-0d0f-43f6-9759-61bbf0d1c7da",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b372ceed-ebfd-4054-9528-73472b950e2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3596482e-1fb6-46fb-824c-8b5c68c7e5cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efd6728d-9683-4a78-9059-26000411094f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bee30a5-b442-42e4-b9ba-1e58df880b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e28524-01ee-452c-9532-ee2acf88ffa9",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2466c755-8e6a-4d53-8423-c30129acfe61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ad3c59d-2756-4e75-971d-da135df50c9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab98e2e-15ad-4380-a903-026c6e90095c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "582730b9-91fa-44a5-8b7b-d1831f170e8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "238ffc1b-ebc2-49fc-bbd1-1d9faa524120",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a33379-835c-4f05-b2dc-ff3cf60b3790",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f7aea30-e317-4cae-be27-6c4a173ffd91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae7c8ca7-d6d5-4bef-a20d-e47ee21b3e7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "064b4fce-acc7-465c-8762-c27138be796b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10a05b61-8ed8-4405-b15f-b9f738c9a7ed",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be065628-2168-490c-a3dd-a9db2a014c3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "223d24de-1446-4563-8628-de548c566221"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b84945-c149-43ad-8635-a990e7a41c6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e3a779a-f029-49a6-882a-0961e03e7706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1c3c694-d52d-4a5e-a375-c28e9b95526b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81b9c147-c9ed-4b49-9436-211a9a75327b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1aedc975-9533-4b33-a542-e0fe59ca2a45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edc41c47-3e2b-46f4-9739-09baed8dd62e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21a3593e-8968-478f-89bf-7d73a4f12959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b6dde1-efd7-4870-a55a-a54f214a0b96",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04b4b202-9fbd-4be5-add4-a3be6eb63940",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b0888ef-bcc0-40cc-9cde-b33c5c5d8523"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1136bbb4-85ff-4b50-a592-7f22062b686a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4a2a70f-254f-4ebd-8189-bfc01b759356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9401a4e8-70ce-4694-88b5-24b0c59d8b9a",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "539765a7-3687-45d6-bb96-c07ca0da09e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b35020b1-3dae-4e66-8a5d-58933146820e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b673269e-47d3-4dcb-9b65-62c1c2e490ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "668b43e9-14e9-4ab7-a79b-c4e8b990b70e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e13e7049-8871-4318-8b99-8b48b17c7ec9",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77ddafb4-428d-4f1a-a3d3-b05f3a501ef8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1590107-f304-4e30-8784-474eaec18b18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8018e5d5-c0d6-4d0f-8aa7-033880d5f817",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25104eb2-6b9d-439d-97d6-d28f5846bda3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "446e4eb3-164a-49d4-a1f2-0ce1beacb386",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff2ca329-9cb3-46f9-a1c5-e6403f676a3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eec69bc2-3eb3-49d3-a1ce-83bb9ac50200"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e742042c-db99-42ce-b259-fc223038e460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be8c1b9a-025a-4a48-be51-97bd6ac62730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cb3feef-0fd8-4217-845c-fe6f0e1ee0ac",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da6886b1-9855-4a2c-9383-31073ded7dcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08f3bae6-984d-4738-80f2-ddb7a0436592"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f71c676c-abd1-4825-b091-e99991517078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6b0db2d-9993-4c2f-a454-c40d8658436a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17d388cd-3a5b-4b00-9d43-fd2ceb9d2118",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15b29a16-b6f5-42a7-ba4e-29210fd7765b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e8c580a-4173-4d80-9bce-1adce7ba17b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f93c808-4b5b-4d0b-a205-9ad8a624a1c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d13e3d2a-5091-4149-aec6-9d4d1f6fa7d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3891812-6009-411e-a8db-83978f30225c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a3b6934-d95a-4bc9-bc5b-566a58a9e67d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f3e5d29-c5f3-420e-b208-79d3b41399b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f088ef3-b3fa-4533-afc9-e6989c4c0dad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ef08355-70ac-4ef4-9127-0428b037f32d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcbea422-cb51-4c3d-8a53-6c1e763ffa8d",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "669cae20-3798-48a7-a213-a007011160e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4055a8ec-6716-43e3-8aaf-81e7972bab16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84395808-6cd4-4ca9-b3f9-dfd1a51b4418",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe048bc8-bd76-4c96-a007-0a7e1858d0ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45f6c2b3-eab8-4001-bcef-861d53efd721",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e936180-a30b-4c06-859b-40d4565faefa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1088bc9f-6eda-4b20-9d49-6943c5d98cad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ed626da-4424-4e64-a481-e5243472f515",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd23bce6-30ba-4d8c-96bf-435557c9d3e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9326a618-6589-4e52-91ff-250e8b933b5a",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c94c8126-29af-475c-ab73-2f760a04495d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8342809b-aba6-4c91-9d2f-767c67b1403c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21f8939d-8275-47f8-b1b9-21002f86fe3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e0e602d-fcf5-4479-b3c9-6bd2ad237e15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14484a08-3342-4517-91ce-89296e86f764",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae3ecc60-ce27-495c-b3c3-876714c606e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98a82e26-f56a-4c8d-9e2b-0196752813cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "687c2bf1-b458-4817-b406-92ede93fdfca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5be5e4bf-279f-4b46-8079-3d785f4771e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26bc7bcf-e79d-4640-a274-932e021cf90e",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b47849-c5d1-43e4-9c3c-5b30e450aeb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "325e78a5-8195-45e1-840e-c600b385f8ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94bcc5ce-832a-46c4-88ff-aea0e91a317a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f992dcdd-4c2a-494f-a1ac-2e6096922951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f25efb2f-0064-4147-91f5-01fa36c5404c",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a4537f-86a7-43f9-b7c9-e103474ed763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21e00218-d509-4ff5-844c-112152d6dd60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dbb5614-878d-4679-841f-e794fa77acec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d67fef5-0071-458e-bc3e-423b0862a6af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc7000ad-086a-4226-8468-6c6139b8a939",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c713b8d7-6b78-43ef-95aa-2a5781c7d005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df795da2-c7de-4463-bc60-20ee9087ab4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcc92e0a-d09d-4155-93f7-afd04ee1b63b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22b6b4e0-489d-4fcf-864e-09fa390cd3b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "885053eb-bc52-4ec2-a5ce-aed0695d3aed",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e92b97f-e204-4ea8-ad10-ed32c28e8924",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44ff46fc-7d9e-4475-953a-b235a8f44f2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "342ccb8c-5280-48a2-9a8c-41b9deb69836",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a546ec70-14ba-4397-887f-351f1540ec68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4629b0ea-30ca-4c68-9b24-95abb059bf70",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc69b7e7-c164-47c3-b41a-e082f6ed0a90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7511bef7-9e25-4c45-952a-1092195b0167"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c8416e-793c-43fc-be33-127a16bc1123",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68c79659-ca6b-4c96-b49e-d76805382ef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97a290d4-dee0-4a9e-bf90-1d3b81f3e45a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f0e7c1-4150-4a2f-b286-c99fc29d5f47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c789d3c6-ce0d-4235-af4d-d8456c001ece"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45bbe26a-a371-4502-941c-1f6d6df38b47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c69cfaa2-082f-4cd5-89d3-eebdec098855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26651240-8ba0-4b8a-9a20-2ab319ec4113",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b2418c-ccac-4182-93ac-14c73b0a4058",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "418e8c40-74f9-4da2-85bc-38dcad355960"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc3cb38a-a6d5-4aaf-88d7-63079d710501",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8e3a317-4559-47f4-b1ea-87d5fc5ee9e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "599109d6-5438-4fde-8577-ca2ae37cd374",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d657f4e5-bf38-4f75-8d0d-7d70a0ab09e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a0bb7ec-4719-40d4-827e-2d170d9fd92d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f1aa4a-cd96-4d58-b6eb-220b8670cf89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3624adc4-d803-4acc-9735-d527abe23a73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e22aa02-8232-49ef-8383-9c08f6e1790f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cffda8e-8843-4993-bb21-41cebb39a3f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8a8ac2f-4e5b-4328-9d9c-64a3e06bb50e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e1d4b49-df92-489f-83ec-918cc540253c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10c81fa8-9685-4fe5-b763-80ef8a5b348a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "595d85c1-8306-4f00-b809-1add940ef83f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f5eac0-9bc5-4c0f-b6be-395b83335386",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e985d3c-4e27-4199-93c9-8f9835e23796"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c41840d-e50d-4432-b581-b9b9eb9ed54e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b18d73a-9781-45c7-a6f7-13de499a9564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f412fe1-38e2-4839-a191-7761a33d8c2c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22130c28-dde9-467c-9282-244c520f4e7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69711c89-3f9a-44ed-be90-998e1ef591f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcfeee05-6330-4b3d-b4c4-a297378d864f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4f83f7b-9eb8-4c78-9476-ccd53ce910d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bdd9aea-f294-4d85-883c-645e743a0c71",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e15a8c94-e57d-4d9e-896c-11b5dda86a60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "522bc267-169c-4579-b06e-3619b04b948b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d21c603-115d-4f9b-8626-766a0a677110",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "902d4bb5-8e2a-4ae4-8297-1f38b5beae77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "348b9310-1ce3-4bbd-8653-ca78e58fd113",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f42149c-09c9-4c33-bb16-33eb3b8aca79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebcbbc2f-d894-4782-b419-e6ab4205d76c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a1f84e3-f6f2-43d0-b184-382253d2a039",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7fbce76-9951-4f93-9cc7-29f2b31a6b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e1915ae-1f92-4f6d-b4c9-e5f35b50bcf5",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2f7c365-2cc4-45d3-a4bd-995d77c7e2a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6181106a-cff5-46c1-84fc-b1768a48949e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00ce46b7-c925-4f5b-98e6-fe85a49bc977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c71e758-30cc-4e78-9482-563a8ac35112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c64850ef-a69a-483b-ad04-253eb06e3b7f",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d89d80-f07b-4012-af74-c902872abe79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2e57da3-7b32-40de-a61d-379015047b55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb299e9d-c75d-43fb-bf5b-7a1931e5e5bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0f43f70-1f91-4fcf-8a1a-356f509d8a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d53525-c25e-4417-a6f4-cc6189939080",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f15e6b2-9031-4f7f-9668-fdb6375e8347",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1dc05d5-8ccb-4f42-96d9-8666bdb6506a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "665dec2a-81c5-4861-bd9c-40602ed8720c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51bf5793-7b41-49dc-bca3-9af01d37896b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "883bb1b1-80da-4073-ab15-81fd56466de6",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b82349dc-2d18-462c-ab90-36ed7c631cfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8b987f4-cde8-44ff-9dd2-ca6dffd383a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ead0fc-dc2c-4b88-9d10-c7c17e28be18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b9465cc-7b37-4318-928c-2f99f9812ccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c604ad6-58db-4417-91a5-713c49d4f716",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e46fcb-700a-4265-8309-5259539b0f1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aea97e3-5e00-4c2e-a835-32f328eb3329"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e083a1c-d125-43c9-9050-19d81b9dc926",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b75e2dbc-0504-4732-a476-39d4c67cb354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcdac0b3-1ec8-4121-bc02-e59e4d53de19",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97279322-ae3f-40d9-86ef-2c4daf1c95da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e75308ac-1a0a-4934-9240-70ad3f34e3b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b63c1d75-5267-4dd8-a711-83dc50771f2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42f9de5b-5a8d-4c44-99fe-7d28c09ab96a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec2c907f-b666-4613-b858-86d021db9369",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c999df-d454-4208-8669-358520dffa41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff346d5b-8665-4c14-861f-0a2e687e9fd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ec6c903-6b43-49b9-80be-473445493343",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d276d630-fa7a-4ec5-bb19-1d140939ab31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d843fce-f523-4f3c-b873-253a0fafb9f6",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4aea2b2-e38e-4be2-8144-2032c7c5ad80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ccd8b8a-8c73-415e-85f5-5aa0edd991ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d037809-99af-4b1a-84dd-c3bc0aed07a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e23867b3-3954-4cd0-86eb-9dffbf882ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "719f8612-5d6f-4b15-8023-2c5939dd1ebf",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "700ff253-2cf9-4a7c-9c02-05d469c8e43c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d33b089-12d3-4755-9e21-a04e7443ff09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "646ce2e6-b595-4000-9cc5-8d3fca0824a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "153f44f3-d30c-4df5-8072-b4963556ff1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c91d589a-d6de-486c-9711-dd77c36e14ce",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0dec229-df11-4896-bb7d-487d96a91891",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f227c2a9-d928-4a51-8143-325c3d39d510"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "686ab722-86be-4283-bd66-2edbd9b834bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a786e4ab-d00b-4ff5-b91a-8ee9e695fecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24ec80e0-a613-4b2f-9ee8-c509de814bd4",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e7c9ade-73dd-492b-ab50-d6036f8c63c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1954e4a-a88b-4737-b424-f84a7d40713e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac9293e0-64a8-4995-b768-db600781c5d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef5ed960-33a3-4ac4-b4bc-ec941db224bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f43706a-08f7-46f8-a10d-6eadf92b0bb6",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6042aba-70ef-49d2-92cf-b14b766f559c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e21b37c-a98d-4ad1-ab2e-40a1d69efa24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "460d9e13-f6a1-4a73-a14f-f9a1334bbb85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce0092ce-4bc4-4c70-9f36-6bc2c6375e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f592b8a-55fb-43c1-a277-0abb1655f183",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "524c0bb6-7e1a-4079-9926-c2fa92bd275f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f618941-9b59-4f9d-80c3-b674c72994db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36a1dc58-80ca-4768-bc79-533765da15d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94c028e3-e8a8-4ccf-a732-c532030ade67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23fc7380-f93c-40d3-b6c6-ecbf502a5263",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "235d8ea4-dc7e-45a5-a79f-6f19118e877f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4aaafd46-6b9e-4442-869c-682a3288c5bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "078bfcf0-e061-4e04-9c46-e4876d7ffa84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37d33bc3-3855-4d3f-8ef4-2b3a6f2773ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d19cae-667b-4934-9f2a-dab4ba842d3a",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09eaf87e-8473-4371-a4a3-a4b9afb95bdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab5a310e-d5a8-4a6b-9284-fbc755122ea5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab2321f-665a-4539-9264-aad5be04e974",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "408173c5-27cc-4d7f-92bf-d3e6177fb975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a8d71d2-8724-4df6-9a99-78ca58f15865",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ca1f54-3c34-4900-9d5c-f9a4df135bee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf43af75-589b-4c31-9a3e-4e368ac0b072"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fa36584-4457-45e7-9260-ac33187f169a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e57521c5-a77c-4074-931a-a8b50c96e34e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cd3f8bc-5082-4642-a706-d117e2501140",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b865e12e-49e5-425e-86c8-504e9dfe06ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67c1e727-8642-4bd4-a143-d1a7ceb2b8aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb6f37a-1ed0-43b5-9ac6-f82c391ac718",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d411bd5-55a6-4cf2-aefe-7eb25b1b80bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffdcaeca-e21c-4388-8b32-d346e710c018",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f28ef67f-c95a-4be4-90e7-b896ed0f4a3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1b37e97-8dc8-4d2d-8d20-91bef132c778"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1382bca1-218e-491d-a1a0-d44e63a3ca07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4185913d-1ff1-433d-a4a9-77e63c500857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ef91e82-cdb5-4409-be56-200c7ab6a114",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52e12ec3-9aac-4c21-a682-c75f16548ddb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d96d80d0-b391-4203-8999-386a17b38e03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40cda8ca-90d1-487e-8588-33efe2fd9433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e6de2fd-c930-4ebd-9724-8640520ed8cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d9a4ae-4de6-4f93-9f83-c3dc917ec5b6",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60761af2-f90e-41f7-b380-283a21d72568",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b797f6af-3440-494e-a270-b9632a3e25b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05a8c48b-7438-45e7-9d2d-45daa6e4ccb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9bcf152-de69-40c4-b7c4-47d06cbafbd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26153117-fccc-4832-8296-9eeb16248357",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db3bf0bf-98ba-4e98-8f70-fa693eab1798",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd66881c-7dc8-4840-8a72-57bb35dc303b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a79d1a87-5acf-48eb-a648-3696f9f48f1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82c0c20c-89a6-4706-b3bb-6ac95b5ef5a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b220007-d444-4035-9c66-033f05feeed6",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bce7e32b-b22e-4e99-abae-c13d261daef9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49ed211a-9d4b-47f9-ad2a-4a3ae3952c68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23c83e3f-e199-4680-a7aa-6031ceee7d1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73ed1dd4-99b2-4328-b900-6fc871672e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45917e8f-1a15-4c40-a6c5-f1c27da4b976",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e61c3c00-7210-4747-8acb-0eac5a55a47f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cb9d7c8-be09-4bc9-9783-d5c62c19fb68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4473c11d-8bbd-4784-a96d-ff81733f74f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e996dcaf-2259-44aa-9b56-c30dba0a895d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ec8db7-6afd-4605-abbe-3fe5e8c5be3d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8838f22b-d12d-47c4-bcde-35a47fdce41a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59bdff21-9f62-4182-8403-c3e2a23eb55c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a496f03-cc01-4bd0-aa30-fb6cda869761",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3330dc9f-05b1-404c-8dac-cccdd3fbd34c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c415cfcb-3c43-43bd-9219-67b952275648",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4a089d9-e1f0-488f-ac7f-f2b698f53085",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51ca0731-2383-415c-9ad2-3b994a76303e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d35bb2c-e1fc-441b-a8e7-9923b74c604e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bb1aefa-4f56-45c5-b214-e8451ff8cfc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d9fe013-4ab5-4155-806a-f67b039efed9",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a7c38d-b1d7-4508-b7e2-d33591d37bf2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7ecbb29-82d6-412d-addd-dbfbcc030ebd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3ad282-08ba-40d1-8fdb-262220986b3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdb69ce1-f811-46dc-8977-9e8561e815fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e91e375-91dc-4e6f-b286-5cda9f1beaef",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75834a6f-bd63-4b35-b235-92af9dd272aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d722b8a4-30ca-4c9e-8f56-512d2d27c448"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61035505-617a-44ad-9f94-2f590caf9260",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bac6e2fe-0ea4-49b5-9fbc-6be821a9872f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f056ce4-94f4-4495-afe5-64bbeae7045a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b76a8f14-bec1-4ce6-ba56-55cca8051ff3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6445440-3456-4655-b55f-ac4c36ec4894"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aff76ad-4727-415a-9c6c-a384bf6582ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3480d295-0e4e-433b-8fb1-e1cb06a8011b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "726a98d0-4584-4348-b484-1ee6962628d5",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8cc9bf8-8cd6-4a5f-83f6-f6eea3f88b4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c429ecae-8c79-4204-9d0a-dfa4f74e467d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb1b26a-dad7-4f87-aef4-7932b1cab833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e7a5037-419a-4be4-89f7-73d726878a29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9318c99c-ecf7-4502-baf2-80b13331db96",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b24ffa8a-4cc4-4002-83b2-6be114e923d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01a2ae84-d8c3-4c35-987c-42845e63ddbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d02e4565-ed15-4264-b59f-c3f65575f1fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4226d9d4-f103-4365-b4a4-115ee7c8b1c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72b16307-b0d6-462b-8fb8-4432195dad5c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91125837-04d0-4b04-8094-6ed963351766",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "929d8553-ac06-4e1a-b1a5-bfbb00f5baf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e29c5fc-9ce3-494c-afde-400defafed60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dfaa106-b3f4-4d2b-ad90-e14bd2114c77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "694bcd7c-6110-44bc-b2eb-263effcd98f1",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a89fce-d1d5-487e-84fe-531762c2aaa7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b2747ce-11b7-44e0-b649-9e961fe8fb48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c7530de-9f18-402d-998c-d46452e9adcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40f79904-4d3b-4717-a95d-297b78e9d516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "112836c8-ec23-4d92-8428-7a5595a42378",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc562336-0fc4-4955-aa90-de6c5c6588a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab6f7efa-9313-4b64-a26c-d14198695c55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e88f7ce1-f8a2-4de0-9cd0-5eb6e7455e2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf79c38b-d301-4900-80e3-70444bb179f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74516f1-0147-4991-afd9-3ea4c42c9988",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b57c01a8-57b4-4276-889c-047608799b79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7d1d3cf-07ab-4f9e-9bc2-2ded055d7fbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecfc2ece-1014-4062-9569-0b2e69637f52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "721ea992-d3cb-4386-aed3-209aee957001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63f50b86-3142-4cdf-9d07-e782ce8b51c0",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdebdaf7-da63-4eb3-80a7-60c0e2510905",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "419bc52b-7909-4aec-8454-4d3d62025386"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e394508-7b31-49e6-afaa-c84cf7e27c57",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ade5a9bb-77c0-4992-aae5-a7639b2d1269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f33e4ea-0e48-4200-a2e3-2f21ed5e93cb",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1db94c0-398a-492b-93e2-9b3df374b72c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "142a9d21-7839-4069-bd92-2c9436de84b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0301c00d-c869-4ca8-aa04-705dab7be5eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "633131f2-7e5b-480c-8a86-1b729e4f8134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a2d949-164f-4fc7-8b0a-00b365c6cf8b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7241018f-281f-4fbf-9246-e1bc09154b96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24a7b814-69fe-4d4f-9d4e-bead54fa432a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c7a71e5-f7b4-4d9b-844f-867dd9399a76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34aad320-a691-467a-a75d-2caf03c929c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53bef1b9-8e6b-4260-9e12-c3b453ef5de5",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e0b5c43-0c0a-4315-b2bc-3ea7d5fa3b36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18a02d85-968a-47e1-b391-73e6b6c34367"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c77cbf-a790-4999-8578-e0555e4f0e4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5a94ca1-8a0f-44c3-942c-9b2862a29b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9785b370-060c-4ef8-8082-d7aeaaaa7a7c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7293b8-7244-413c-b430-89ab7f059416",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0afd524-1f0d-4d5a-8789-3328c347fcd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0dd09e-8c1f-42b7-8625-c12fa593e005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06090ea4-641c-4a68-8741-9281e1f76a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1e9588d-3f3c-40c5-b849-c088f4303029",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a71662c-9752-4b4c-bf95-90a9f607a41e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7b0232e-d5db-4bef-8ff7-408ace1cca71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "512864ad-4755-4346-a62e-5607380fce1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc487ada-a9a1-4c7b-babc-443e73f8337b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6caca525-0d03-402f-b31a-7f889ea6660a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a540136-9d93-4ddb-848b-d5494312b649",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7dee510-fb98-48e3-b4ae-7d234f3a7d26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e68e0521-454e-4ead-9a4f-e4a00180064e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ece051a2-403f-4ff0-9baa-e044bb04d0f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef454e8-c764-4559-a0e4-a3768a0fee80",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20ad9580-cbf5-47c7-8c87-7e2739f44239",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4017c640-1fb3-420c-853a-6843bd7b6597"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f0a793f-7b45-44fb-a91c-5a43c3aa8c2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9bd68f0-ed77-4093-b579-e6be15284a93"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac8a3cd5-8234-473c-a5fc-134376554800",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4d6bf709-5aaf-4e90-ae75-082885814be9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a13f07c-de6f-49f6-a186-676ea5180236",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e90ced57-ccc8-4505-a348-192be0df6486"
                    }
                  }
                ]
              },
              {
                "id": "e78d1792-7992-4204-a564-a952dad79b89",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "88e17dad-2d39-4b10-98bf-cda9b757bd82",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fc524c9-3842-4a14-9523-bad849f93329",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9e4cf14e-f50d-400a-869d-05767b2c2b01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "726133a1-09f8-4514-b478-240b79836445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "34e307ec-d7a0-498e-8c11-07a61620c5f1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "869e13b0-22f2-4888-a63b-b0f3fd71eb88",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "99d79b01-63dc-41e8-bfbc-302cd207d69e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f2c1768-9126-4ed6-b183-a137bcefd564",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe0f69ca-4ab4-44b6-90d7-e3b805c0a793"
                    }
                  }
                ]
              },
              {
                "id": "66b5c9e7-c1d4-4967-b74b-70bfdc237619",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "fd8e4ec1-c4c3-4d8b-829c-007c7c67804a",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7760e066-5f96-428c-8418-233998a8e003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "cee98ebb-b45e-4678-9f54-56d5221e26b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fca2768-4f7b-4d81-8d2a-4b0a17d14150",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "877deaa8-2098-4ec8-9e88-85bb1fd8be48"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "92459146-9531-4092-824a-fda1ee593b03",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7d110797-1db2-4298-b6ab-41c6ccd2a8fc",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "012d955f-f99d-4492-beb5-dcdfb4802923",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b1fc85ac-4419-47e2-97a0-cf6aeafb4029"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "89606300-f592-4ddd-9e6a-7da7c5b96e85",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a9d0402-3609-43ee-a4f3-6f8d90009035"
                    }
                  }
                ]
              },
              {
                "id": "0befd68b-e6d2-4451-8ba9-75c63cd6cbfa",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b163ff2b-e457-4113-ab3e-76eb40c0ab35",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "66e41668-4734-4028-bebf-4e0c4514d9de"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8665b6e-040b-4bf1-a4db-98e890eba712",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "57c42793-19b6-4930-b958-734552cef22b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5c6b93b9-36ed-4da7-845a-61e8432c2b34",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "a7900ce2-64a0-4f50-8d09-1a66987d97c0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5dc5dcf3-c839-4aba-93af-7ac4ce484ff1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c9578203-8e36-41f7-b35b-99e50431d5ca"
            }
          }
        ]
      },
      {
        "id": "fb4aad24-da07-4606-b434-719ff6937efc",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f2da2421-80a6-4919-b140-8394897f47ce",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1ca5295a-88ab-4c2d-9200-21e590b4296b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f476d257-4180-4292-86b7-18c0f4484c96",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8928392-6dce-4c95-bfe4-6f46315b42fb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6428e340-912a-4079-b77c-1011de87c271"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d00bdf4e-b7ec-40ea-a2bf-e7d58a22ca35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "880de98a-e744-4967-a398-2f993ccd127b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d1fbead6-4055-4162-b929-bde24cbb4b73",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad5e2c94-3e78-45a0-903a-27360f0305d9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5928f7ce-3ca4-499c-b3a8-11b08813428c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eaf8b739-b769-465d-abc9-69c3345bb4c6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "abe8876a-a076-4924-a0f6-6dc2e6e941ad",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "36e9c55f-fbc3-40a7-80eb-64fc11a46c14"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0e06a34e-5bc2-4a3e-93ea-a0dc1257663b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d3912bdc-a4ee-4e12-8fcc-e4289e955bde"
            }
          }
        ]
      },
      {
        "id": "2014b80d-07c7-427c-b55d-8ca119de1371",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "5345048d-8502-46a6-b5ee-d77118a04845",
            "name": "Negative Testing",
            "item": [
              {
                "id": "638c50ca-05a6-472d-a012-1d9683f8136d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "588941d1-b329-4f9d-a514-c1ed970b519e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57588846-91e8-4d4f-a89b-4986cf2eb6cd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3abd63f4-8fbf-4572-af26-6594fa04159b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "384bf592-8ae5-4408-90e6-cadbf9dcf688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f89e6145-edce-4f68-86b1-3a9626edbf97"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef970fd3-4edb-4d5e-891e-190d746f21e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6669508c-3a82-471a-9b08-76df28c697d6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ec5896a-8601-4c3d-8a12-c715a91b8ca3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0c899010-d55a-418f-b079-e839c3483d8d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c4e9c4cf-ba44-4022-9653-ff9dfef03a99",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bb26786c-0cba-4edf-be8a-38af6eec4655"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "769bb2e4-b37a-44c3-a240-9a371b3171c4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0df273c6-b60f-492f-9604-31cfd92b07fd"
            }
          }
        ]
      },
      {
        "id": "50e0582d-9c2c-495c-b738-a088c8448728",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "c077bb07-0e40-4cc0-8788-3fce24827277",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6004c071-11d9-453a-a9a9-325378f64a4f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "936bf26b-fcc9-41d1-ab3f-c5e1ae3f73f4",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa45d06d-d9a6-48c7-bd27-6ed8faef0500",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7334b3d7-405a-402e-9637-2f00af69fa4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c07a949-ae46-4dd2-b6bf-2e3a721d15fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "375395f3-fb43-470b-bf11-96748bf1f61e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "41a07e2f-a589-4526-85d6-b14b957b52fd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5fd29d4-df7a-4ef8-a859-a9994da74d5d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "90f2704a-fd9c-4e1d-8c21-129b08b1e1aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f97a6968-7377-4693-b8e2-c4d3ffb07779"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f7c40573-0cb2-4e95-9359-35af69a8f2ac",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d770d67a-49e7-4365-a518-46aaf17b5dc5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "26704861-b56b-4de9-9524-cdd51b6f625f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dd58296a-a26a-4bab-bdd5-d0876a8f5465"
            }
          }
        ]
      },
      {
        "id": "b1c9405f-679e-4cd1-a8d5-6fd6d8f883da",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c67ae844-9eff-483e-bb3b-7a3ad07972a5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "af747f11-8c9d-4c16-8e3f-3439465f4e66",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "a7803f5a-9d10-4023-a252-5420097096d9",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "672c7c21-1df3-47c2-9f91-989086b1a1c4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1d7da2fc-0ff9-4c0f-bb83-e32fb2169138",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 101.70070422535213,
      "responseMin": 6,
      "responseMax": 2036,
      "responseSd": 262.3839620110782,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1694392392997,
      "completed": 1694392434390
    },
    "executions": [
      {
        "id": "e32b519b-d259-48de-afcc-3ea3d1da83fb",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ff68da82-774b-40c5-8efb-42e6161b7a2f",
          "httpRequestId": "99efff2f-a682-41dd-90de-ef5bdc1cf3c4"
        },
        "item": {
          "id": "e32b519b-d259-48de-afcc-3ea3d1da83fb",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "c67321fa-68dd-4f83-b570-62770371cb37",
          "status": "OK",
          "code": 200,
          "responseTime": 58,
          "responseSize": 0
        }
      },
      {
        "id": "a97efa09-459f-4257-b730-d78823befac2",
        "cursor": {
          "ref": "a50c717f-c572-40aa-bc07-30bc0e647323",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "20ac8aca-3840-4aa4-8aa4-1f89497bc3d1"
        },
        "item": {
          "id": "a97efa09-459f-4257-b730-d78823befac2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "8d6d0c0e-c9b0-47a0-818b-cbae17bc81f1",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "81225edb-91c5-4ed9-a506-6b1ce2ed66d5",
        "cursor": {
          "ref": "e3c38a97-5c69-432f-824b-9dd919ba6e9c",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c6199293-4d09-48d4-bf65-5e9f773473dc"
        },
        "item": {
          "id": "81225edb-91c5-4ed9-a506-6b1ce2ed66d5",
          "name": "did_json"
        },
        "response": {
          "id": "ec90c66b-eb2f-43e8-83b9-cc4ea7c09982",
          "status": "OK",
          "code": 200,
          "responseTime": 215,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73c431ee-70e0-4640-bdb0-7739440dfcb7",
        "cursor": {
          "ref": "c80745c2-972a-46a4-83ac-1b550f3ea2d0",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "47729425-09b7-417e-b597-023254c90a1b"
        },
        "item": {
          "id": "73c431ee-70e0-4640-bdb0-7739440dfcb7",
          "name": "did:invalid"
        },
        "response": {
          "id": "729b78a1-497c-418c-b70e-71719fffa120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73c431ee-70e0-4640-bdb0-7739440dfcb7",
        "cursor": {
          "ref": "c80745c2-972a-46a4-83ac-1b550f3ea2d0",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "47729425-09b7-417e-b597-023254c90a1b"
        },
        "item": {
          "id": "73c431ee-70e0-4640-bdb0-7739440dfcb7",
          "name": "did:invalid"
        },
        "response": {
          "id": "729b78a1-497c-418c-b70e-71719fffa120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71510556-ebb4-4e4b-8202-0c89b69e5e7b",
        "cursor": {
          "ref": "b3cbbcb4-6e5a-4477-8f37-eee522a622e2",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a379b63c-9799-4392-80f6-4924b461325b"
        },
        "item": {
          "id": "71510556-ebb4-4e4b-8202-0c89b69e5e7b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "4c2274e5-a2c6-43ca-8213-981df59dd795",
          "status": "Not Found",
          "code": 404,
          "responseTime": 94,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb67226e-b6e2-489c-b788-3b2a7359a520",
        "cursor": {
          "ref": "7e922169-135a-4544-bd23-56ebc11ab837",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a87bb8e2-e273-41a0-9327-6482d4a8406a"
        },
        "item": {
          "id": "cb67226e-b6e2-489c-b788-3b2a7359a520",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ed5ccab6-1df0-4c1e-9035-7d76d0e041d9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 39,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fd7ca5c-54bc-4130-9639-485c4dbee53a",
        "cursor": {
          "ref": "1c1fc8e6-8456-4988-a923-5a8447b49d7e",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8af10af3-c2ce-4f27-bab6-b40c41fe56b7"
        },
        "item": {
          "id": "7fd7ca5c-54bc-4130-9639-485c4dbee53a",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ead769e2-321a-4c0f-a809-297bb2430781",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e3c1c41-44e8-4f9f-8d03-7092c6de61a0",
        "cursor": {
          "ref": "32bbd56f-343d-48a3-9061-e86a6c99e7cd",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9f650ed6-74a1-4560-845c-eda60fbb4e5e"
        },
        "item": {
          "id": "8e3c1c41-44e8-4f9f-8d03-7092c6de61a0",
          "name": "identifiers"
        },
        "response": {
          "id": "0290bd1e-9c4e-4e81-a487-06749ff462ae",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa54c141-2c27-4e5c-bb54-82150c7a0831",
        "cursor": {
          "ref": "4f418c58-a6b1-447d-bdac-fff6a37f8e43",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "093ee9c3-d6d3-4c2a-a3c3-c8d609311975"
        },
        "item": {
          "id": "fa54c141-2c27-4e5c-bb54-82150c7a0831",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ae209efe-de1b-4459-8aca-471b64c287fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6be91c2c-a63e-43c0-90c9-7555b1e591d4",
        "cursor": {
          "ref": "047f8d32-e916-43e1-a1f7-e8b3d3b75db9",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4937ded9-19e0-43f4-8bf6-11a72fcf764a"
        },
        "item": {
          "id": "6be91c2c-a63e-43c0-90c9-7555b1e591d4",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "eb4f88a2-eb08-480b-b356-ff0b7f7338a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db66c89a-bb6f-4b53-81e4-bc33f3d6e329",
        "cursor": {
          "ref": "e4354fa2-3fcc-45ad-ba70-152e770fe7bf",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "fbaaa4e3-d045-4044-8a75-d18eedd629be"
        },
        "item": {
          "id": "db66c89a-bb6f-4b53-81e4-bc33f3d6e329",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "0b4708c3-8d75-476b-9d8f-4fb316bcfc5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03cfd4a4-6ec0-4a90-b1cf-6e58c453724c",
        "cursor": {
          "ref": "7a8639af-5567-4fcb-8d22-05d51301a6dd",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0fb07045-0e83-46e8-80ee-e00ca00e7c83"
        },
        "item": {
          "id": "03cfd4a4-6ec0-4a90-b1cf-6e58c453724c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "10e4f44f-fe34-4cbb-827f-fe3ce526bc3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "897cea7c-55d6-4257-9a3c-8bf9c2a74a33",
        "cursor": {
          "ref": "7ab904cc-2139-4b4b-8368-0a7ff7d573d4",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "bfcba99f-f524-4014-aa4a-5383cbdd85e7"
        },
        "item": {
          "id": "897cea7c-55d6-4257-9a3c-8bf9c2a74a33",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "320c53f0-cabc-4c8b-ad75-79270f30b97e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7db45448-8faa-43d1-9f64-32d50c8a13a6",
        "cursor": {
          "ref": "f9a3ba3a-8e04-4569-a859-c724a297c518",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "62251a3f-cebd-42d2-91f0-d9b5d683b62e"
        },
        "item": {
          "id": "7db45448-8faa-43d1-9f64-32d50c8a13a6",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d8512a16-7849-44f5-aed5-601705577455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6b844a1-5858-4639-a162-90cae24873e0",
        "cursor": {
          "ref": "2abeba28-18be-4049-b6b3-e962e9861acf",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c82f8622-1a1c-4e87-9466-72ef5034399f"
        },
        "item": {
          "id": "b6b844a1-5858-4639-a162-90cae24873e0",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "aa1f04a2-c180-43e7-a8b2-66ee3c6f33ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ccc9578-5580-4476-8a4d-a1df78e49efe",
        "cursor": {
          "ref": "1e664590-4a62-4605-94fb-6e48329dd3cf",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "07e72b6e-b995-45cd-8050-6f213a3e44ed"
        },
        "item": {
          "id": "8ccc9578-5580-4476-8a4d-a1df78e49efe",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e6edf7c1-7c0f-456b-ad8c-45608fa54df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f82a0ddb-03ed-4625-9b8a-4cc92bffc55b",
        "cursor": {
          "ref": "6d40a0e7-16d9-459c-a5c6-1ee8d4e4e761",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "bd366f7c-0ecb-4f8b-b6c5-d70812daf613"
        },
        "item": {
          "id": "f82a0ddb-03ed-4625-9b8a-4cc92bffc55b",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "f719c4db-37a0-44ab-93a8-f39a3db22d65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d87838a-8e2f-4956-8ca3-6c50dd227db4",
        "cursor": {
          "ref": "0950762d-0e0d-4e52-b403-bf26e6e4d71b",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "de8dd9fe-0262-4aa8-9f90-abddfb9ddb63"
        },
        "item": {
          "id": "9d87838a-8e2f-4956-8ca3-6c50dd227db4",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "dba19401-8e71-4aaa-80dd-e615ece8b5ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f43c577f-87ec-48ef-b179-5c59104d0a5d",
        "cursor": {
          "ref": "83956b55-848a-4df6-869c-d12b5cd48472",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7f205bb5-a5d7-42b7-89b1-90184e62400e"
        },
        "item": {
          "id": "f43c577f-87ec-48ef-b179-5c59104d0a5d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "bdb96c80-caa1-434f-8381-a26f5ffac7ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fda5dda4-1adb-4ec8-b0aa-d22d7921bec8",
        "cursor": {
          "ref": "a06bea60-c784-495c-8c62-7ad969ee36c6",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "afd79cdc-03eb-4f4d-b6a3-685f070d5d52"
        },
        "item": {
          "id": "fda5dda4-1adb-4ec8-b0aa-d22d7921bec8",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "5cee0475-2666-4f93-83bc-cd36b9a8e3d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d61db77-f276-4445-9bf8-f4fe6502b26f",
        "cursor": {
          "ref": "49a6f45d-53c3-49c2-8135-921c7edb62b0",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "944a5b6c-f000-4469-9edd-11dd05ac51a4"
        },
        "item": {
          "id": "5d61db77-f276-4445-9bf8-f4fe6502b26f",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "355f855f-bdb4-4d92-9da0-8b36c348b8ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a9be792-d483-4269-97d7-8653623e80f3",
        "cursor": {
          "ref": "8bfcc009-48f5-4ad3-9259-345d20f72c54",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "56960818-0089-4eda-ace0-139e6abce171"
        },
        "item": {
          "id": "2a9be792-d483-4269-97d7-8653623e80f3",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "059e7966-148f-4427-a714-ba90f6b24e1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "780fcaed-036e-49f0-ae84-23881c309334",
        "cursor": {
          "ref": "79b31e47-cde8-44e6-bea8-6063f0f0ed00",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "26136105-9d27-42c3-ba7e-2281f8d4ec59"
        },
        "item": {
          "id": "780fcaed-036e-49f0-ae84-23881c309334",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d43182f8-90df-4307-9a83-b5d5d6b9b72c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8faa489e-f598-4a8d-ace3-50c1dce26614",
        "cursor": {
          "ref": "da0937c6-0efd-40f1-9ac4-5be62c4fc6b1",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e21cc60c-ca57-4720-ba03-5204fb04c9b9"
        },
        "item": {
          "id": "8faa489e-f598-4a8d-ace3-50c1dce26614",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "05910acc-ea70-4400-9e2b-5d134cee47bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee718a77-c1ea-48ee-982b-d0a806bbab6a",
        "cursor": {
          "ref": "e12d7cec-ce3f-4fed-b427-c07afc939973",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "89c0a33a-48fb-4ece-a006-f7f76336bf89"
        },
        "item": {
          "id": "ee718a77-c1ea-48ee-982b-d0a806bbab6a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "ca7633e5-4124-4957-a146-709679c57f02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17d3d656-d228-4148-b196-496d84b41b03",
        "cursor": {
          "ref": "2c210e5c-5002-4a26-a114-0b0b10d0519d",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7bf364d6-529d-4256-a11d-1de52f81a88b"
        },
        "item": {
          "id": "17d3d656-d228-4148-b196-496d84b41b03",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "20800504-859d-44da-a99e-7d9def7f175a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9c3b23a-6456-4f8c-9092-5c7619dc164d",
        "cursor": {
          "ref": "1b853342-8023-4827-a404-f3ef26ac40ea",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "589292e4-bbff-47c9-9e5c-1c34cd4c7f63"
        },
        "item": {
          "id": "c9c3b23a-6456-4f8c-9092-5c7619dc164d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "e15a4ea0-daf3-4502-bd54-27374c8bb4f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d91f684-c605-4e68-81ae-50f0cbc6a420",
        "cursor": {
          "ref": "78133953-1d05-4491-b9f1-ff11b8842a0f",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "baf29bf2-977b-4c14-8c1e-47d5125c508b"
        },
        "item": {
          "id": "7d91f684-c605-4e68-81ae-50f0cbc6a420",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "605e03ce-803e-46b8-9c82-8ea18e779d44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e473d11c-a489-477a-a606-36915fe88e6b",
        "cursor": {
          "ref": "52589d32-ccc9-4c50-80ef-6fe99b6c16c9",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "da3bdb61-9ed7-48fa-bc19-c0df654a44f7"
        },
        "item": {
          "id": "e473d11c-a489-477a-a606-36915fe88e6b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "0c664f88-efba-4eaf-87ac-519e79661a81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94500d8c-e725-4510-a568-10115a4d5304",
        "cursor": {
          "ref": "93489fd9-2dcc-466e-8b31-d9f70b22ae94",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "67f6228f-3707-48bb-b4f3-4222e194ea75"
        },
        "item": {
          "id": "94500d8c-e725-4510-a568-10115a4d5304",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "cb3c0e9c-5e55-4061-b4e6-372dfb432007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4edbaa0-716a-4c19-8e1c-610573f38d98",
        "cursor": {
          "ref": "ec84efbe-38fa-4868-a3f6-39b97453d621",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b556e0ef-c525-494c-a314-b9a856fe0ca6"
        },
        "item": {
          "id": "a4edbaa0-716a-4c19-8e1c-610573f38d98",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "9b088169-2154-4203-ba8b-f5b674da2e19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb91f373-15bd-452e-beea-7d3decb9a01b",
        "cursor": {
          "ref": "dd7caecc-e887-4b3c-84a4-86d665668a4d",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c7bcacdd-a4b1-4490-9ddf-1690aede3885"
        },
        "item": {
          "id": "fb91f373-15bd-452e-beea-7d3decb9a01b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "658ce9b7-7c22-4671-b099-30f705c10c97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f372f8-8792-434a-8e72-91ac6583566e",
        "cursor": {
          "ref": "6bee7f71-b974-4d0c-8df6-971129ab1844",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "9f27a365-ff1b-47ae-8296-36eadd8572d8"
        },
        "item": {
          "id": "51f372f8-8792-434a-8e72-91ac6583566e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "86fcc28b-7dc1-4505-9ddc-a4218c9d78c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a66d4b-9555-46e7-9484-1fcb86179d8d",
        "cursor": {
          "ref": "733b21ab-a3f8-468f-bc72-21e266272b3e",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8b8e3bcb-e7cd-48d1-b342-273f30d80912"
        },
        "item": {
          "id": "a5a66d4b-9555-46e7-9484-1fcb86179d8d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "1eb33eca-ec2c-425b-9563-f9b99f0aacaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ed1efc-7c58-479b-b669-a6bd86fb9654",
        "cursor": {
          "ref": "955caea3-5605-44e4-af64-277db2b9a231",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d4bff05a-5893-423a-8c10-87c28c2daf98"
        },
        "item": {
          "id": "41ed1efc-7c58-479b-b669-a6bd86fb9654",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "de2d42a0-2196-40e6-aab4-8fac8b5a501c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74d98050-03fc-4d1f-b08a-acfe6ce24b53",
        "cursor": {
          "ref": "38e2dbbd-177e-41b0-a5b0-282514017d4c",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "5cac6ef5-46e0-412c-bb67-14990b306e44"
        },
        "item": {
          "id": "74d98050-03fc-4d1f-b08a-acfe6ce24b53",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "0d98f3e1-cbeb-4fd4-bcc7-8e76ef8d7032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "395d54f2-9a34-4d54-a3e1-d9aeb2a6d606",
        "cursor": {
          "ref": "37a1a468-1b21-4495-96d2-3e343aa04291",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "26b4a437-9118-4f05-9530-f549fc1a0941"
        },
        "item": {
          "id": "395d54f2-9a34-4d54-a3e1-d9aeb2a6d606",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e69587c1-7dd8-49d5-b515-3ba3f8b28fda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd8ad0f9-2372-4159-84b0-26d18c11af25",
        "cursor": {
          "ref": "500d80bd-fced-4872-8373-a0977d3a955a",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6332c24e-448d-4ae7-b297-563343764456"
        },
        "item": {
          "id": "dd8ad0f9-2372-4159-84b0-26d18c11af25",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "32e0528a-ca88-4798-bfd8-839987c0153b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "445bc5ed-136c-4473-877d-62e28472699c",
        "cursor": {
          "ref": "b784ffd3-3c0e-4168-89c8-c3c0afbb2594",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1dac1380-0392-4905-aab0-982ed3890501"
        },
        "item": {
          "id": "445bc5ed-136c-4473-877d-62e28472699c",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "8f23f10c-e84d-40dc-905b-29e4993189fa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "33e69fa2-1e7e-4f42-942e-67dec161f1a3",
        "cursor": {
          "ref": "e17311b1-a4bb-4055-913d-e58cc281148b",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "da15163b-dff8-4b28-9bd4-67d0f2b3fa5c"
        },
        "item": {
          "id": "33e69fa2-1e7e-4f42-942e-67dec161f1a3",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "5949abc8-1dba-4792-ba35-ec9cc17cb577",
          "status": "Created",
          "code": 201,
          "responseTime": 2036,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "ff69c8fb-7fbb-4a37-a33a-10eefe09834d",
        "cursor": {
          "ref": "8aebcbe0-33e9-46ff-8d8e-c953f391d248",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "90b32dfe-89bd-4e57-adea-e75a2dcee285"
        },
        "item": {
          "id": "ff69c8fb-7fbb-4a37-a33a-10eefe09834d",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "db740f41-6b49-409a-85e8-44b03d2d7eb8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "05ac6713-eb65-4ab2-b336-9a99cc14f56d",
        "cursor": {
          "ref": "2fbc73fd-3289-41de-b709-0038c43a4340",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "cbfc269f-4b27-43a1-b0d9-69c10f6a89af"
        },
        "item": {
          "id": "05ac6713-eb65-4ab2-b336-9a99cc14f56d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "a18d974b-b8e7-4f9b-b683-32dbb37d8af6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "939c832f-ff9b-4ff6-a739-21923c54d0e6",
        "cursor": {
          "ref": "3e32ce9a-5c42-4fab-9f19-55d96efb0a64",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "aed23b87-d30c-4230-be92-92bafc2e3706"
        },
        "item": {
          "id": "939c832f-ff9b-4ff6-a739-21923c54d0e6",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "33c31d44-9816-4e32-98ce-ba0097fa3f4e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 42,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "9dffd7cc-5bc1-4858-9914-93c8845b04d0",
        "cursor": {
          "ref": "ed7c5ba8-176b-4c98-b72a-7da229c71782",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "4b796b9e-edae-4b4e-a56d-f8c3e40d23dc"
        },
        "item": {
          "id": "9dffd7cc-5bc1-4858-9914-93c8845b04d0",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "2d683bec-18a2-4173-928b-091c0e9f111e",
          "status": "Created",
          "code": 201,
          "responseTime": 1619,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "2693b468-c8c8-4b38-a2a3-b94d0a1113f4",
        "cursor": {
          "ref": "c7471845-1492-4bd8-9e25-63a87d9092cd",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "862bb242-4732-4195-923f-f291a8904e07"
        },
        "item": {
          "id": "2693b468-c8c8-4b38-a2a3-b94d0a1113f4",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "cf794161-34c6-44b4-a397-5326172e77a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "c6cc72db-e75f-4477-ba57-7641d9f3b035",
        "cursor": {
          "ref": "ae437193-a8d5-491c-89b8-83ffe0730df9",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c5217062-2b9e-4ea1-ab38-0e203559c2c8"
        },
        "item": {
          "id": "c6cc72db-e75f-4477-ba57-7641d9f3b035",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "38ed0e47-2882-4522-b3d4-b10de647b053",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 768,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "fe13c123-1dea-44b9-8b7d-0887654cb845",
        "cursor": {
          "ref": "51621e65-1cbf-44bc-969a-e5fc950f4ac6",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "725dfa49-862c-4843-b590-51167c8e1ba6"
        },
        "item": {
          "id": "fe13c123-1dea-44b9-8b7d-0887654cb845",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "77a77401-e5f2-4293-9bf3-19004901273b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "e6f00d55-bee4-427d-b999-78e4d274c4d4",
        "cursor": {
          "ref": "2fadd6da-75c7-47ab-ae05-c03374491636",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "23aba8c3-ce81-4796-92d4-52a5e00d5280"
        },
        "item": {
          "id": "e6f00d55-bee4-427d-b999-78e4d274c4d4",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "bbefc2a3-d7d6-4389-b425-3c082369e07b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "4348ff2c-7d73-4a5d-926d-34e26af63bef",
        "cursor": {
          "ref": "ef9611a3-d087-42e0-bf48-b2359ccbcc90",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f82a0a28-f725-4bbe-b46f-65cdfc744c18"
        },
        "item": {
          "id": "4348ff2c-7d73-4a5d-926d-34e26af63bef",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "eeefa31d-8bb5-4afc-b1f1-dc0ed5f650a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "81132d2a-c942-4891-a2c7-314db7dc169b",
        "cursor": {
          "ref": "79a6dd6c-8067-48e4-9307-3c99ca556e59",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7dd85b8a-d2cf-4758-9e20-35268cbfe6b5"
        },
        "item": {
          "id": "81132d2a-c942-4891-a2c7-314db7dc169b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "39bf5849-32dc-4230-b752-61933a26f3cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "0df9586b-9ce7-49d1-bd44-25ff611ee989",
        "cursor": {
          "ref": "7bb2f8b9-73c6-4e91-8720-7cf8f1528cdc",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "89c38e75-b0e1-4dfd-8412-2df843c01735"
        },
        "item": {
          "id": "0df9586b-9ce7-49d1-bd44-25ff611ee989",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "8738a8ff-b316-466c-b56a-0f7e43cba6d9",
          "status": "Created",
          "code": 201,
          "responseTime": 998,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "821fafb2-2424-4480-a090-002d238523b7",
        "cursor": {
          "ref": "c6cbe916-a3f4-4bfe-b5f0-b131ee59002b",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "52e39606-ba5c-464e-abb1-daf25b146606"
        },
        "item": {
          "id": "821fafb2-2424-4480-a090-002d238523b7",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "7b7469ac-0c5a-4718-8ed7-9560da091205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "334b6c0b-c145-4535-9dd5-55d49e8f352a",
        "cursor": {
          "ref": "35368486-e713-4176-a555-711d67e672c3",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e748e44e-429c-46aa-8c38-ac4ed3bed6c9"
        },
        "item": {
          "id": "334b6c0b-c145-4535-9dd5-55d49e8f352a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "dff69feb-2ca3-4580-8368-fa6c0ace8ca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08192684-0826-4c68-8a09-0f070d0b873c",
        "cursor": {
          "ref": "a28cd1e7-cd2f-45b4-9cab-39ca8fb71e68",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "77397dfb-26d3-46f5-95e1-a36f46551d9d"
        },
        "item": {
          "id": "08192684-0826-4c68-8a09-0f070d0b873c",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "b7ffe1f8-5f1b-43e0-9feb-9f92ea301c0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d12a4a8d-4546-4981-a17d-d807246c447d",
        "cursor": {
          "ref": "a70d8d73-e73e-44ac-b78b-3f0ae8e0156a",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "739f497c-3287-4a8c-b132-885f24605379"
        },
        "item": {
          "id": "d12a4a8d-4546-4981-a17d-d807246c447d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "cfba4e05-19dd-4e64-9b09-a2d79e192f05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edfa3b50-6815-4653-9d2e-145ce0405ac3",
        "cursor": {
          "ref": "de0ac7f8-a520-45da-9fd2-1f2335ec3562",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "0c085e89-9bd5-4ac3-a4cb-18307dbdcec6"
        },
        "item": {
          "id": "edfa3b50-6815-4653-9d2e-145ce0405ac3",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2b3ea4e1-3b23-4071-8b01-baed6b7c1f78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc479a37-e697-4ef9-b2cc-216b493bca64",
        "cursor": {
          "ref": "5888e998-f7dc-465e-a024-70740fd63854",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "450d1264-7b01-484d-9e84-41c145dc84e1"
        },
        "item": {
          "id": "bc479a37-e697-4ef9-b2cc-216b493bca64",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "7b39e019-b291-483f-b96e-549443293a2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ac0cc0-2690-410d-8e34-47d7fbaf43d3",
        "cursor": {
          "ref": "23ea7b26-e6c7-4f69-a550-1c46430a3fb3",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d122bf08-34bf-42dc-a369-b3d2f643f8b5"
        },
        "item": {
          "id": "c4ac0cc0-2690-410d-8e34-47d7fbaf43d3",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "aa699dd5-e596-4d33-883e-a1ba5621a928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c74689f6-7089-451e-a83d-6dfbbe6b7f45",
        "cursor": {
          "ref": "c99f8f0b-a8d8-441e-87f2-4a0d700fc907",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3129527b-70aa-441a-9330-74d048489a87"
        },
        "item": {
          "id": "c74689f6-7089-451e-a83d-6dfbbe6b7f45",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "babe99ee-1b63-4114-9a5c-0bc2e3e74961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfd1a81f-3a68-42e7-8b6f-c5031c8633ee",
        "cursor": {
          "ref": "aa97fd4c-ab18-48a1-ace8-1ec1f1e786a2",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "919aa079-a1b8-4d3d-9931-2c7c40ee3e8c"
        },
        "item": {
          "id": "bfd1a81f-3a68-42e7-8b6f-c5031c8633ee",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "997fe040-f205-4527-8030-7d67997b8b46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f59cea5-d4d5-43c8-a634-ce11ca8d5213",
        "cursor": {
          "ref": "a8ae470f-c9c5-4145-98f1-91689becc188",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b4f51ffb-1df7-4b5a-a56e-031e6406bf16"
        },
        "item": {
          "id": "4f59cea5-d4d5-43c8-a634-ce11ca8d5213",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "910dc9e1-8381-4886-a60d-3eb9ccbab6c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68216f78-eb5b-4edd-a3ed-a8b8d07985c6",
        "cursor": {
          "ref": "cfc5e3ca-15a3-4ec8-bfe7-ce43f9f29747",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "67f5256b-f817-439a-9627-cc9212700ceb"
        },
        "item": {
          "id": "68216f78-eb5b-4edd-a3ed-a8b8d07985c6",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "546305df-446d-4013-9f7f-c7f65e92e9f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c400ae7f-3e43-4e9f-8891-7b733340df89",
        "cursor": {
          "ref": "6cb107ff-7da5-47f2-b8e2-7bf3bb0dba5f",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ef430f23-ba9c-4bdc-9080-dfd7d9fd7c32"
        },
        "item": {
          "id": "c400ae7f-3e43-4e9f-8891-7b733340df89",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "9612b848-ca46-43bb-9d53-613e3d4fe4ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d486fd-e7fc-4f39-a6f9-e6cfe88d3e55",
        "cursor": {
          "ref": "86cf93e3-2724-4916-be9d-3fc6794ecb63",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "88aa6343-a435-4d08-9430-0ff69731708d"
        },
        "item": {
          "id": "69d486fd-e7fc-4f39-a6f9-e6cfe88d3e55",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "758528c8-f8f5-4064-a858-83307b5e78e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fe1d1ae-3086-47cb-af31-70f4c61bce23",
        "cursor": {
          "ref": "c9eba90f-ae2a-4e2d-8a60-96762a70ff71",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "be02eb18-6eb6-4f3e-ae81-006d5b58b28b"
        },
        "item": {
          "id": "8fe1d1ae-3086-47cb-af31-70f4c61bce23",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "5980cdbb-8209-44b7-a9a8-313f43dd4d56",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 753,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "2e7ce029-eb93-4582-9d21-03d7c5e1ab13",
        "cursor": {
          "ref": "b8e20800-2803-4771-b877-1f53ba5b4b75",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "fe913be9-7f08-4eb2-b42c-a2bbb46181fc"
        },
        "item": {
          "id": "2e7ce029-eb93-4582-9d21-03d7c5e1ab13",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ee557be2-a2d2-48eb-b065-611d7beddbc6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 757,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "f5fce5b0-734e-4a97-a160-d5c238b50748",
        "cursor": {
          "ref": "672ba554-cbc6-4250-927d-031873353aec",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "fe0b6a8b-2af5-43b4-9033-a61f4e1c69df"
        },
        "item": {
          "id": "f5fce5b0-734e-4a97-a160-d5c238b50748",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "3ff8ef78-34fe-4352-86bd-301c06af8afd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "b1215ba9-88f6-4112-a003-6737e463c845",
        "cursor": {
          "ref": "6d357676-dc27-4315-9d8f-86da89c165dc",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "65094829-0ef0-49e6-9606-cf071fe3089f"
        },
        "item": {
          "id": "b1215ba9-88f6-4112-a003-6737e463c845",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "b87c0eb2-4fba-4b41-af14-158754af1ecc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 780,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "98f07dd3-eaca-49c5-9e71-86b63b57bca3",
        "cursor": {
          "ref": "cb031f14-c418-496e-a796-4323cbe784a0",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "13c40959-3bba-4dd9-90a0-0c2b05785e58"
        },
        "item": {
          "id": "98f07dd3-eaca-49c5-9e71-86b63b57bca3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "aa655854-20ab-4ebb-b9a1-8dfd563086e5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "c3c25c40-3ada-4914-9d09-f2f469324cfc",
        "cursor": {
          "ref": "b76c412d-3431-4b62-828c-fbf3ff98a81c",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "502e140d-6bfb-43f3-8fe2-aad085adb24b"
        },
        "item": {
          "id": "c3c25c40-3ada-4914-9d09-f2f469324cfc",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "25b4e744-23f4-4cac-aeb0-a86a849ed4d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bc26369-9c28-4dbb-ac46-63bd8c566799",
        "cursor": {
          "ref": "ce6b7fa3-9f0d-4545-8fc6-0edabcc43a8d",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "01c4ede7-64ac-4ca1-b32c-04ce322560b6"
        },
        "item": {
          "id": "1bc26369-9c28-4dbb-ac46-63bd8c566799",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "602d38fb-cb14-4968-a086-e8d3d72718bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94a8a478-1519-437f-9631-57a3046b99e2",
        "cursor": {
          "ref": "8380daba-b5a6-43a7-9db7-813cf0ba6c32",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "7b82e5a0-acd9-43d1-b565-2a1c9c7bc534"
        },
        "item": {
          "id": "94a8a478-1519-437f-9631-57a3046b99e2",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "fe085933-463a-4944-9c13-059313b4e0ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "306718d6-8d4c-495d-b599-93be76a66ba8",
        "cursor": {
          "ref": "e2f4ae7c-9d64-4ae6-b382-c63621814237",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "f7031e20-b001-4329-8ab9-a06b24fdd936"
        },
        "item": {
          "id": "306718d6-8d4c-495d-b599-93be76a66ba8",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e483091a-3522-4551-9f1c-f4fb479f43d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ff28e74-37f4-43fa-b62f-af21dd47060a",
        "cursor": {
          "ref": "07de851f-5fd8-4bfb-bb13-9aa98ea9c680",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "383634d5-31e7-4cad-9107-3b8c62240c18"
        },
        "item": {
          "id": "5ff28e74-37f4-43fa-b62f-af21dd47060a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "7b5ea159-2a8c-491d-9713-4da0fdb038f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2751809d-6c7c-4ce2-9e88-9b84233d588f",
        "cursor": {
          "ref": "2896ace9-f603-4842-b229-fd2336b34e2b",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "5db7122b-34cf-4053-99b0-98f0d9728064"
        },
        "item": {
          "id": "2751809d-6c7c-4ce2-9e88-9b84233d588f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d2703a42-6b08-4278-af65-610967a2bf5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86e16827-faa2-4949-9dcf-96aa55431576",
        "cursor": {
          "ref": "eb25bbde-4829-48e5-ac9d-b0d4a090549e",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a7b472ac-b6b3-4b3f-b043-a48cdcbc181d"
        },
        "item": {
          "id": "86e16827-faa2-4949-9dcf-96aa55431576",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "823051e4-0170-4c57-8d0f-db543de7cce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2f74053-6e23-47e8-894d-4ce0ec796a77",
        "cursor": {
          "ref": "a63547d3-862b-4ed9-8866-83ddecf01720",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d0cd1b47-9379-4dec-bdaf-08641c82bc2c"
        },
        "item": {
          "id": "c2f74053-6e23-47e8-894d-4ce0ec796a77",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "37191f59-79fb-402f-a89a-9bc2d68fd274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0647fcf-a088-46a8-aa66-91fbe72d74fd",
        "cursor": {
          "ref": "c2587736-ef2c-4550-be2a-a966c4fb5a7a",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "cfe85829-67f3-49be-825d-a6b7c92e0244"
        },
        "item": {
          "id": "e0647fcf-a088-46a8-aa66-91fbe72d74fd",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "8eb586e1-ec59-46f7-a5a9-0318e64b119e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c57c0966-728f-4605-b37d-e67f40347d22",
        "cursor": {
          "ref": "5c9e8df7-d4d3-4b62-b88a-5a3ad544afa1",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "9be88fad-abbf-4c0b-a960-b16ffd6bba7a"
        },
        "item": {
          "id": "c57c0966-728f-4605-b37d-e67f40347d22",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "c193277c-f771-43f2-a761-1565691d16fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5483cb9-01fc-44da-9472-69f4da4c05ab",
        "cursor": {
          "ref": "cf803ecc-9a0f-4c13-a913-d22651436c18",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "29788519-ce52-405c-b514-cc4524ee839e"
        },
        "item": {
          "id": "d5483cb9-01fc-44da-9472-69f4da4c05ab",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b55f4a1f-2aca-485a-930e-5db208b27ac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fc1bc66-69b1-4243-8886-29b9b13ad66c",
        "cursor": {
          "ref": "8c399fc8-8750-4260-94be-6cd8b10dc0e7",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "bf98d52f-a845-43ea-916e-e64e17a466a5"
        },
        "item": {
          "id": "9fc1bc66-69b1-4243-8886-29b9b13ad66c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "13582361-ff04-4a40-93aa-562b0fd78009",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50d50cf9-f527-489e-9db3-36df543ac96e",
        "cursor": {
          "ref": "5bab8ce5-b3cf-4915-80c7-55ad7aa7fad3",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "3269cb3f-b646-43ff-8093-a333209b1c08"
        },
        "item": {
          "id": "50d50cf9-f527-489e-9db3-36df543ac96e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "dc88812c-1153-42fc-aab6-f7199867f6e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "366547d4-c768-47e0-974e-bc26fe5331f2",
        "cursor": {
          "ref": "af54dd27-fb6e-4c89-b560-709b46347d89",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "61cbf325-5a35-458f-a1cd-a20107c8d3ba"
        },
        "item": {
          "id": "366547d4-c768-47e0-974e-bc26fe5331f2",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "648af504-6122-47ab-86c0-f8954056beee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c403c75e-cbed-4914-99b6-a34bbc4bbb30",
        "cursor": {
          "ref": "74ec8e03-c0cf-4fe9-9bad-6cdf1641c90f",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "cbcb3c62-1841-4c36-8e90-9dcb6afa454d"
        },
        "item": {
          "id": "c403c75e-cbed-4914-99b6-a34bbc4bbb30",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "483d49e7-c6af-495e-9dbb-2e906b74abe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222f6e48-1baf-4080-8a81-d44a0551b2e4",
        "cursor": {
          "ref": "9a5eb37e-fd4f-4557-9310-3a469d56d168",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "339ea996-f780-4d1c-8177-cb67647d4406"
        },
        "item": {
          "id": "222f6e48-1baf-4080-8a81-d44a0551b2e4",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "9168f32c-d0c0-4df3-89f5-986d4880154f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3804211d-267a-4f54-93e1-7309d7bf498c",
        "cursor": {
          "ref": "cdce754c-6073-4e33-97ac-24f5a470b03c",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "456904e0-ac8b-4677-99c0-9c4781148406"
        },
        "item": {
          "id": "3804211d-267a-4f54-93e1-7309d7bf498c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "4527864a-8a97-4c20-a057-cb689cbddc61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7108ab24-baff-4b6a-a1d9-1abc162292db",
        "cursor": {
          "ref": "2cabea96-b829-4f20-a6e1-048bc30de904",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "cb0b3f07-3d2d-433f-9e21-ef8c45bb659e"
        },
        "item": {
          "id": "7108ab24-baff-4b6a-a1d9-1abc162292db",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "fcbd0935-b4b3-4fe6-ba13-eadc89e5b249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74afac79-22d0-4ffb-ad95-ec38233a4aca",
        "cursor": {
          "ref": "c3f46ed9-8bbb-4b21-9c69-cdd49a77ee8a",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "047d0780-4063-457a-a5a7-a876b544ccdd"
        },
        "item": {
          "id": "74afac79-22d0-4ffb-ad95-ec38233a4aca",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "55aa5e1e-924e-4fc5-99c0-9d77833cd042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "046e5ee2-02c5-42d6-88a0-9664c6d72b26",
        "cursor": {
          "ref": "101b308b-4cbb-40de-bb42-36750c80c905",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f8ce483f-e7f6-4bc3-87d0-199443c9939a"
        },
        "item": {
          "id": "046e5ee2-02c5-42d6-88a0-9664c6d72b26",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b342bb4e-a1b4-43fa-b647-abbd0edd8889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "067b13dd-e27c-4b51-90c3-95284a4d7fb8",
        "cursor": {
          "ref": "b1925650-e75d-4edc-b0f6-f02e0890bd12",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b72fb86d-be91-4107-82e1-2493fb9ca9c0"
        },
        "item": {
          "id": "067b13dd-e27c-4b51-90c3-95284a4d7fb8",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "86f73d70-c452-42e5-90a4-ec95b908cf17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38f18015-6a1d-4e84-b793-cdde14fc08ef",
        "cursor": {
          "ref": "686da2b9-558f-477e-9455-3d33fdce96c4",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "3df84e09-5ba7-468c-acb9-f16bc4a783a1"
        },
        "item": {
          "id": "38f18015-6a1d-4e84-b793-cdde14fc08ef",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "db776c6b-cf91-49f3-b022-9922b24bd4fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c100ec2e-55c5-49b7-9489-d1e668461e4b",
        "cursor": {
          "ref": "babc29d8-c6ec-49bf-a4e2-93931127a440",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ef6bedad-cfe7-4839-825d-9df2c3017379"
        },
        "item": {
          "id": "c100ec2e-55c5-49b7-9489-d1e668461e4b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "ebeb3e63-718a-414a-8b1c-40296d8d7040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5852a44-42e6-414d-8fb5-5e3048d2e5ae",
        "cursor": {
          "ref": "56e7487a-3e0e-4655-8c17-b42dbeca7f45",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f847ba12-e3e7-41bb-bddd-ccd9e344adf2"
        },
        "item": {
          "id": "c5852a44-42e6-414d-8fb5-5e3048d2e5ae",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "91fe388b-550b-4631-9ed6-63fc5aee6e94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8cb1f7e-8a0b-4e78-8fb5-cecddc166227",
        "cursor": {
          "ref": "89931ead-55f5-414e-a1be-858617f06435",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "66da579d-b41f-48be-ac8f-7dfc17435972"
        },
        "item": {
          "id": "c8cb1f7e-8a0b-4e78-8fb5-cecddc166227",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "0ff90a60-6b71-4742-bbe6-f336f028a4c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d2de1e-ddc5-4738-88de-8fd43a04b3ae",
        "cursor": {
          "ref": "ca0f356e-1a91-4d55-a943-e5705ff6d191",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "7c9a6503-3b41-4099-8525-2df4fca5a74b"
        },
        "item": {
          "id": "b1d2de1e-ddc5-4738-88de-8fd43a04b3ae",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "0dc45452-fa81-4918-bdb7-8a16849b8f50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd1bc029-59a8-44ae-a99d-c2da6eceb748",
        "cursor": {
          "ref": "5953dd15-1e0d-4584-8b79-9d770418a9f4",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "5c12b88f-4234-4a5f-bd4d-6dda435d221b"
        },
        "item": {
          "id": "bd1bc029-59a8-44ae-a99d-c2da6eceb748",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "2f9feef3-b767-46da-8046-516bddec225a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d33baee-9d9f-480d-b0a9-06ca4c26f577",
        "cursor": {
          "ref": "bc67d51f-6cf1-4658-9c83-7104503c3c9d",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "602280d8-ee49-4891-84d8-496c8e8ec3ec"
        },
        "item": {
          "id": "1d33baee-9d9f-480d-b0a9-06ca4c26f577",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "374a2edb-cf29-4ff2-ad3d-4e17bfda51c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68244f93-5676-4ac4-bfe3-61c1b965dff8",
        "cursor": {
          "ref": "cf5afa9a-ebb5-4762-a6e0-3d769d54303a",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e299394a-e22d-45d5-9bb9-548a3a65a91b"
        },
        "item": {
          "id": "68244f93-5676-4ac4-bfe3-61c1b965dff8",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "028e80ee-13d0-442a-8265-2d2bdef5546c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e28eaac1-0b92-44f3-b5ce-b79a3d50f975",
        "cursor": {
          "ref": "6ef5664e-97d5-4604-a5e0-f12646974acc",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "5c534f20-5912-4fd3-b5f7-ebdbcc844031"
        },
        "item": {
          "id": "e28eaac1-0b92-44f3-b5ce-b79a3d50f975",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "50c02516-3c9a-4ac4-9082-5cd493970d23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d302d276-eb8f-4a68-a882-650b2eee0b8d",
        "cursor": {
          "ref": "9eb11fa7-9528-4242-9e7e-b1ba7fddb979",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "b5aa0148-1a27-42b5-b39a-d29af75fe9b8"
        },
        "item": {
          "id": "d302d276-eb8f-4a68-a882-650b2eee0b8d",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3ddea079-a4d4-4b77-a89f-996f07b62104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c914116-0752-4cd6-81aa-71e179c4bf2d",
        "cursor": {
          "ref": "7b6bd5fe-fa5a-489a-af18-9f33586816bd",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c9d8d5d4-d290-4a10-a0c4-c8ed4be9193b"
        },
        "item": {
          "id": "6c914116-0752-4cd6-81aa-71e179c4bf2d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "bd4996ea-9e4c-4bba-a293-499267321b07",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5eba8f3-acdf-4b67-aa35-166c2695190c",
        "cursor": {
          "ref": "24e17891-885d-4a55-b2c8-ba06bc418ef9",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d16a7b71-f5a5-4804-8cb5-de3bbad0d6da"
        },
        "item": {
          "id": "b5eba8f3-acdf-4b67-aa35-166c2695190c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f6f3e50f-0a9b-425c-af81-accb6f4e35a7",
          "status": "Created",
          "code": 201,
          "responseTime": 1110,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "16945f63-a24b-443f-906b-80789a556c06",
        "cursor": {
          "ref": "6a4a945b-16d1-4cae-bc15-f28c58fe9bd2",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "e6672a97-a035-461e-8aae-529daed95b50"
        },
        "item": {
          "id": "16945f63-a24b-443f-906b-80789a556c06",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "33a73d77-fd97-46b3-acbe-c15dd7774ef5",
          "status": "Created",
          "code": 201,
          "responseTime": 1490,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "784d49ab-9dca-4f92-99e3-5e2b1d745c5e",
        "cursor": {
          "ref": "baae29e0-9919-4511-b212-79ea078825a7",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "4bb0eef3-bd9e-4982-af9d-e54cd664a452"
        },
        "item": {
          "id": "784d49ab-9dca-4f92-99e3-5e2b1d745c5e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "7642d043-f4ae-4941-ab49-743005308100",
          "status": "Created",
          "code": 201,
          "responseTime": 1005,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3ebe73f-be1d-4405-8a1b-e210bd177ec5",
        "cursor": {
          "ref": "626233a0-9341-4a95-b424-e279def10bc3",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4170fd0f-150f-495a-8818-3f103a1808ac"
        },
        "item": {
          "id": "d3ebe73f-be1d-4405-8a1b-e210bd177ec5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "db2d0dc7-500e-469f-ab69-bdc0689ccd99",
          "status": "Created",
          "code": 201,
          "responseTime": 1020,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1224fe8-5adc-4746-a712-2dc729aeb87f",
        "cursor": {
          "ref": "1ff76571-70bf-4a0e-91b1-82ca06bee22d",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1b9afef6-b630-4206-ae94-77d6428929ed"
        },
        "item": {
          "id": "d1224fe8-5adc-4746-a712-2dc729aeb87f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "0eadfcd3-cb04-42e0-8d88-837afe916625",
          "status": "Created",
          "code": 201,
          "responseTime": 1033,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "70856720-6541-4d09-8556-a2f7d19b0552",
        "cursor": {
          "ref": "ec9a7b00-d670-4bd8-bfe9-c57316694d5a",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "f11cf3ad-349d-4cd5-a40f-48789272af27"
        },
        "item": {
          "id": "70856720-6541-4d09-8556-a2f7d19b0552",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b97d2239-3290-411c-a716-4215779bc710",
          "status": "Created",
          "code": 201,
          "responseTime": 1050,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c9c5233-98b9-4ed1-a23a-80d39d653284",
        "cursor": {
          "ref": "70baea5d-78e5-4b30-9030-6bf8b5d60ac7",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "9a91090c-efc4-4f97-ae68-c720d55c546b"
        },
        "item": {
          "id": "6c9c5233-98b9-4ed1-a23a-80d39d653284",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f9937b5e-bfa7-4187-82f8-dc8bedcab678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6354f2b-0c77-432f-b2c5-766dafc62012",
        "cursor": {
          "ref": "f83e9673-551e-4c72-ae32-0556aa6cd6c2",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "93974217-ee84-4e25-b2af-8ebcc34f6dff"
        },
        "item": {
          "id": "a6354f2b-0c77-432f-b2c5-766dafc62012",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "cef2bd4e-48ca-4f25-8052-73408a596154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c9e78cc-e3ab-4cc2-a31d-95558aa7de21",
        "cursor": {
          "ref": "260738c0-76c2-43f1-a87b-d9892b584f9a",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "21bff62c-d657-4b63-a17c-3557096345a0"
        },
        "item": {
          "id": "6c9e78cc-e3ab-4cc2-a31d-95558aa7de21",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a2cb7eaf-9d44-4b99-8464-01dab44a059d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a93b578-7399-4df8-bd0c-9d3555745dfd",
        "cursor": {
          "ref": "8213e21e-2796-4e7e-96aa-15f9ec7ca94e",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "68e2dad9-4714-4ae2-a7c2-10be77cc6d84"
        },
        "item": {
          "id": "1a93b578-7399-4df8-bd0c-9d3555745dfd",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "79497c4f-f89c-4053-8ab7-6a924ec1b001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "317b28d3-b96c-45dc-bcad-96c4f871e182",
        "cursor": {
          "ref": "05b85f10-bd22-4cd4-8b11-c8e650053cd4",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "54085fe9-ef6c-4d0c-9487-5d33a1af73eb"
        },
        "item": {
          "id": "317b28d3-b96c-45dc-bcad-96c4f871e182",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "4fd414dd-2115-4598-bb15-b9692f24fb11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1295071a-d8d5-4a63-957d-115309b70200",
        "cursor": {
          "ref": "8854d33b-5765-46a8-915c-e9bc500ae8c0",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2fc42e87-e882-422b-b443-3bbf38764526"
        },
        "item": {
          "id": "1295071a-d8d5-4a63-957d-115309b70200",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "981c3b7d-b24d-4d05-97c0-1735db4d8b9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e976ee66-97f8-4115-aeb5-df40a78051da",
        "cursor": {
          "ref": "0ee7c058-4b24-44d3-acda-73ed9d8c617b",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6a64cdf0-aca2-4841-9f49-2c4153efd05b"
        },
        "item": {
          "id": "e976ee66-97f8-4115-aeb5-df40a78051da",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c1b303b3-084c-4fc1-9da8-288459a38e3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79921674-3ad9-4c5a-bb50-4f3c092e683f",
        "cursor": {
          "ref": "8136f1ad-552d-4047-bd72-9c1e129d8e6d",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "c3277b1e-bd31-4ce2-ba4e-ebc5b23cf8c8"
        },
        "item": {
          "id": "79921674-3ad9-4c5a-bb50-4f3c092e683f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0e6cd6d1-f4ce-45af-866f-ba160f05db4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f6d5f83-4363-4319-a913-2439e4723117",
        "cursor": {
          "ref": "a2a0c33d-6a90-4d31-8e6e-652db8705748",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "187a9988-2c75-4538-b95a-531b1d3720d6"
        },
        "item": {
          "id": "7f6d5f83-4363-4319-a913-2439e4723117",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "10686af1-4971-477f-b4ed-9b7efd70c61d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a016232-bb2a-4841-a213-8e1c192ce73e",
        "cursor": {
          "ref": "12a42248-c1ff-4294-be07-663b60d6f787",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "09f0ea05-3590-475b-9a4b-73c65bb26697"
        },
        "item": {
          "id": "5a016232-bb2a-4841-a213-8e1c192ce73e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "18e2954e-5ee2-4a91-a421-8e7f7278439a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e45dfb1-df62-4c54-8c77-c1808eb415c9",
        "cursor": {
          "ref": "3d7321a4-8f87-4261-82ea-ee7f403149f9",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1ac62bab-1e1d-4eb1-b401-d58a4e5952fc"
        },
        "item": {
          "id": "3e45dfb1-df62-4c54-8c77-c1808eb415c9",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "05fd162e-6697-4e90-8ded-14725188a657",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e748aca-8b61-45e1-abad-9dc306132ce9",
        "cursor": {
          "ref": "a2a409da-1656-419b-b92b-3f2b627fcd21",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "7786beb0-249e-4428-930a-9069053fc3be"
        },
        "item": {
          "id": "6e748aca-8b61-45e1-abad-9dc306132ce9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "08cabbdc-cbbb-49e6-8d6f-579b72ec0562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b21967b7-da80-4ab2-9f1b-70b9b97ea2cd",
        "cursor": {
          "ref": "ce22bde7-f2c7-4f8e-96a4-d21434e498ac",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "53ff3ef4-693a-4df1-92b5-1f0bf2c8d8f8"
        },
        "item": {
          "id": "b21967b7-da80-4ab2-9f1b-70b9b97ea2cd",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e264021a-671e-4999-9afb-f7d5f7f708b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "542bae24-d159-42d4-8572-bf505c2f69e1",
        "cursor": {
          "ref": "46592643-030e-4630-a35d-baaf6a48371c",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "169117b7-482b-44a1-a18e-f4a9faeed92c"
        },
        "item": {
          "id": "542bae24-d159-42d4-8572-bf505c2f69e1",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c5dd7bd2-214d-48e5-8c40-3e98d764fc16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ba9a5ba-5631-482c-979b-5fba4d0c836b",
        "cursor": {
          "ref": "16187f6d-35a3-4e43-aad2-89c6152099a0",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e99dc5c7-777c-40ab-a344-c09d567bbafc"
        },
        "item": {
          "id": "5ba9a5ba-5631-482c-979b-5fba4d0c836b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "86f764a5-6b0f-4ee3-928b-04d07138b4a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79bf8259-d801-4897-bcb0-5882928ac9eb",
        "cursor": {
          "ref": "556bffb4-d165-4cbb-bf63-9a64e420c9fb",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "02db4e07-59db-4926-97c5-794d48ac629f"
        },
        "item": {
          "id": "79bf8259-d801-4897-bcb0-5882928ac9eb",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9f46efba-cf65-48d1-a61b-f9a64596b5f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f3fc83a-f5b2-4b6b-ad05-696371b93ddf",
        "cursor": {
          "ref": "cc985687-f371-44eb-ae8c-f7fb75a179f6",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "3d093a1b-1c8f-465a-88c0-7f262256a3fe"
        },
        "item": {
          "id": "2f3fc83a-f5b2-4b6b-ad05-696371b93ddf",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "72cc1210-07ee-4b78-9e52-b09ab3531089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72fd8292-10ff-4e48-a70d-c1e8f030eebb",
        "cursor": {
          "ref": "7967ce92-acc8-4f1b-9ec1-ce5142fa35bb",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "1cf8eaa0-920c-48cf-90ce-ccb69629e13d"
        },
        "item": {
          "id": "72fd8292-10ff-4e48-a70d-c1e8f030eebb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ac53b344-6641-4a0b-866c-088c5b8bc652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c50d564a-8310-449e-9dfc-f6cb0151b146",
        "cursor": {
          "ref": "587ba820-4690-46c6-85ac-bb1dd74bef7f",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "2c3b504a-6c76-485a-ac18-962ade4bc558"
        },
        "item": {
          "id": "c50d564a-8310-449e-9dfc-f6cb0151b146",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "98ee8d3f-f1e5-48bc-8c59-3b431d7a8f3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb49f5ab-689e-47dc-9f24-f5c95ca175f4",
        "cursor": {
          "ref": "02f2c2b3-e90a-4483-ae56-6c930a1d2124",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "199bd248-c116-4e6d-89be-2659f4a0fdbc"
        },
        "item": {
          "id": "cb49f5ab-689e-47dc-9f24-f5c95ca175f4",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "39902f97-0359-47b2-9e1a-d6293b3acfc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5870407c-2b76-4e75-8963-57f7dea4edf1",
        "cursor": {
          "ref": "477c088a-5269-4630-8864-ccb5ba1ce71a",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "9011d3eb-c68f-439d-a9e3-6a8aeb7e726c"
        },
        "item": {
          "id": "5870407c-2b76-4e75-8963-57f7dea4edf1",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8277d626-d8ee-4848-9d4d-8c8a09ea3828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8059ae2d-1221-4527-8baf-d0f3ece262b0",
        "cursor": {
          "ref": "fbc3ab42-c245-41fe-8eed-fdc5df1581a1",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0caece37-6365-4ecb-9926-049cf84b2756"
        },
        "item": {
          "id": "8059ae2d-1221-4527-8baf-d0f3ece262b0",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a2772b3f-41f2-4adb-9543-54b710d66bab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e108a59d-272d-4719-8d70-f64889131f5c",
        "cursor": {
          "ref": "d92eee19-e584-4155-accf-579280bbf6ae",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ac77cacf-03e3-4a59-84cf-5c7a5b877ac8"
        },
        "item": {
          "id": "e108a59d-272d-4719-8d70-f64889131f5c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a05394ea-463d-4d98-9b2d-18fa4876b80b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a32f2993-57db-4379-a9d3-437a60433b1c",
        "cursor": {
          "ref": "315f7bf1-651d-404b-9941-f1954a9e0927",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "81a74b30-53d6-4079-bdaa-af9a7ccf1aba"
        },
        "item": {
          "id": "a32f2993-57db-4379-a9d3-437a60433b1c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "bd4129e3-4ec0-4964-a3cb-8b8f50526351",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1aeedae-577f-4752-a9d8-f435cc2b1562",
        "cursor": {
          "ref": "2c43de93-fb46-481f-bc91-1dfa22b72ad6",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "33ffa196-20ae-4642-a7e7-58d7e426bd3f"
        },
        "item": {
          "id": "a1aeedae-577f-4752-a9d8-f435cc2b1562",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2432f3bf-7b50-49b7-b41b-362ab3554aef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd59a3c8-6f5d-4d47-8114-33c4607aafad",
        "cursor": {
          "ref": "bfe6ec72-64b7-49c7-aa3c-e6dd6efb2e16",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "027349d8-6f36-4275-9526-df0ffbfaac93"
        },
        "item": {
          "id": "cd59a3c8-6f5d-4d47-8114-33c4607aafad",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ad5d52f1-63f0-4edb-8745-7a584b754e05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "068e7ac1-4f7e-4975-8a7a-18f366ed6644",
        "cursor": {
          "ref": "e3f1637c-28bc-45c5-b6eb-581cd526cd16",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "98714303-ea30-404e-86b5-c94afafb2b0e"
        },
        "item": {
          "id": "068e7ac1-4f7e-4975-8a7a-18f366ed6644",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9fcd8c3a-76d9-4888-aee0-a434643b933a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee531fc0-7998-403e-8f90-300b8f5ec6b2",
        "cursor": {
          "ref": "d7ce05ca-3645-4e7d-aa58-90266f8a66f4",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "a30d671f-ad12-4268-9338-4c27c66ff4c6"
        },
        "item": {
          "id": "ee531fc0-7998-403e-8f90-300b8f5ec6b2",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1ddb4fbf-003c-4050-ae3f-39cc3879ea51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "486ef950-8d1a-4a0c-9d8b-b06b554f8e35",
        "cursor": {
          "ref": "dad53a82-f3a4-4701-bc58-d88ed6939fc8",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "93dee302-9bfd-4fc9-90fa-5e67c4899cf1"
        },
        "item": {
          "id": "486ef950-8d1a-4a0c-9d8b-b06b554f8e35",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "60466c8c-21d4-4ebb-90a5-f9b2d5b22358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "073044ff-ed12-491f-8343-d4232959b8d0",
        "cursor": {
          "ref": "0465053e-90f4-40b3-a14a-e0530fce0f4d",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f4f1d4dd-590a-43b9-b2f1-11e50a5f58f5"
        },
        "item": {
          "id": "073044ff-ed12-491f-8343-d4232959b8d0",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6d56e406-9250-47e0-a3c1-c5d99b5eb8b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "538ee0ec-1f2f-48cd-88bb-9bedeef1e0f2",
        "cursor": {
          "ref": "b1a882ff-7136-488b-8f54-0da01cd753ff",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "69620e9d-a8f9-4853-8ffe-61caecffaf12"
        },
        "item": {
          "id": "538ee0ec-1f2f-48cd-88bb-9bedeef1e0f2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c23d6827-b5a8-463b-83a0-94b4bb6c84f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05bfbed7-2210-4689-9be7-9047449bb032",
        "cursor": {
          "ref": "e70dddfa-0929-46a4-a45c-9c3174ed1a28",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "0b9921fd-3e99-4e62-9e83-c6a5b3ab0740"
        },
        "item": {
          "id": "05bfbed7-2210-4689-9be7-9047449bb032",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4bd1f32f-7d4f-48a7-ac48-7b40a38dd1e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b063949-ffcd-474e-8e31-4a2f18670f15",
        "cursor": {
          "ref": "90c5b0c2-d27a-4c33-99c9-e76140cd50f7",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "e53e23fe-02ab-407e-b589-05e4f0f7dc00"
        },
        "item": {
          "id": "7b063949-ffcd-474e-8e31-4a2f18670f15",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a2d2aabf-769d-42ea-b95b-b890c0973e3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f9541d3-7587-4ee0-9721-0de1130bd017",
        "cursor": {
          "ref": "61505cce-4af8-498e-97e4-dfc4d3a593af",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b91e0d64-1735-4f17-87ea-e2f654c487f3"
        },
        "item": {
          "id": "4f9541d3-7587-4ee0-9721-0de1130bd017",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a5ca8eab-615f-4e03-b8bb-23b658f39d0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ac416b6-6bcd-4026-8a20-fe9f2d3120ca",
        "cursor": {
          "ref": "a78d39ba-872c-4b54-9c97-928899e13007",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "e712fe78-9518-4085-9d51-2c47dcb11778"
        },
        "item": {
          "id": "2ac416b6-6bcd-4026-8a20-fe9f2d3120ca",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "41815aad-8e95-4c4e-ac35-256403013563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8039134-e98e-4b9e-ac7f-76a2d6f96c55",
        "cursor": {
          "ref": "4201cd2e-6a03-4085-b5bf-4283c8ad562f",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "767878dc-369e-45bd-bd06-52e2c2f9abc6"
        },
        "item": {
          "id": "d8039134-e98e-4b9e-ac7f-76a2d6f96c55",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "02aade9e-b68c-4a9e-a39f-e61727a96413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11c198b2-e252-450b-b6c1-a4afbdf1ebdd",
        "cursor": {
          "ref": "05276a73-fbef-4000-86d8-f9fb3af45314",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2ab12960-90a6-4c7c-bd19-49b3065834d8"
        },
        "item": {
          "id": "11c198b2-e252-450b-b6c1-a4afbdf1ebdd",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6059bbdf-02e2-410b-a891-2c7d167fbc16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dc95231-234e-4dec-a8c2-6a1b1efe22f8",
        "cursor": {
          "ref": "73b28796-b6b5-4d50-aa3a-4241bd4807bd",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "f4f590f5-6fcb-4992-941e-efab405970e7"
        },
        "item": {
          "id": "8dc95231-234e-4dec-a8c2-6a1b1efe22f8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e12b339b-21bb-4e01-9bf9-5189b37ba9af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f521fcf5-4509-44c6-8c31-0a5833f3a17c",
        "cursor": {
          "ref": "c88b1c2b-e1f9-4c63-9e5b-a4d43b0dd83b",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "cb5fe686-d53f-4809-b4be-f77cf1edc61a"
        },
        "item": {
          "id": "f521fcf5-4509-44c6-8c31-0a5833f3a17c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "80796887-7467-4ade-b51b-4be3382a706e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f65948c-e3c3-4403-87d0-0d4344f983b1",
        "cursor": {
          "ref": "2e7dda8e-23f6-4b1f-a38f-628d0ea376d1",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "33b4bb9b-99cf-49b1-945c-75777c269e85"
        },
        "item": {
          "id": "4f65948c-e3c3-4403-87d0-0d4344f983b1",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "265aba61-efa4-4996-9862-952a2ab5eb1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4da0023-d039-4a63-ba92-a9dd3ffac527",
        "cursor": {
          "ref": "853402d0-8b9b-493a-b91e-84529144ae9c",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "67dff721-df8e-4c1e-b65d-ae6ee822b260"
        },
        "item": {
          "id": "b4da0023-d039-4a63-ba92-a9dd3ffac527",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5613ca4a-2f99-483a-8ce1-7dc941994bec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4c82300-bb53-439f-8513-8157b2394390",
        "cursor": {
          "ref": "9d12ffa4-537a-484f-8d26-e1af3aeea672",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "139663f6-ad61-43f3-8c89-7460868b6340"
        },
        "item": {
          "id": "a4c82300-bb53-439f-8513-8157b2394390",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "1c6208ed-6153-44d8-a537-22caf8085f32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b19eb6ce-a814-4313-ae61-538a6960a67a",
        "cursor": {
          "ref": "c8354ff8-190d-48ff-87f1-54e4630c417c",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "725f2d1a-6afd-4ccb-a498-638d15079429"
        },
        "item": {
          "id": "b19eb6ce-a814-4313-ae61-538a6960a67a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e4bce4e4-7d7f-4d8d-8f70-aca9d586178b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1c4020a-6c68-4a86-9616-bb7e79679c0c",
        "cursor": {
          "ref": "e0a6d915-9fd8-4416-a460-7376313d354f",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "7ffccc1f-c682-4b0d-bf74-eaaf5854d514"
        },
        "item": {
          "id": "f1c4020a-6c68-4a86-9616-bb7e79679c0c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "8cb6469b-581e-48d4-96f9-bd28f3811aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ba0e0d9-dc41-432b-8b5f-665350ded967",
        "cursor": {
          "ref": "2788223a-39d3-4aa2-a4d4-b0d0c39b6274",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "0a6ff655-c878-498a-a42f-d1df52c51d8f"
        },
        "item": {
          "id": "8ba0e0d9-dc41-432b-8b5f-665350ded967",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "90308fc8-451c-40f7-9ea1-7024e1d05dff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d90dac4-7291-498e-b8ce-f5ad71643b99",
        "cursor": {
          "ref": "40cce884-a064-4d7d-ac0f-9546f70e9578",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "caa4e2c6-27be-47c4-96f5-b55c1d6bdd56"
        },
        "item": {
          "id": "6d90dac4-7291-498e-b8ce-f5ad71643b99",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "6c1cda97-6b34-4ca6-b335-329ec4d4483e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50733690-4ff7-45c1-9f73-f481ef79de5e",
        "cursor": {
          "ref": "f72d0e69-ad2d-477c-b898-9e59f9b49b40",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "7f7a8a45-ab9d-4331-837e-16fbef3b612c"
        },
        "item": {
          "id": "50733690-4ff7-45c1-9f73-f481ef79de5e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9e85ed88-dd52-40ab-9cd0-8e00b6289216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7e50726-327f-4188-8392-bfa7035e28dc",
        "cursor": {
          "ref": "e82725d6-2d32-4a18-a80e-33cfad17bdcf",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "f890082a-354e-49db-954f-711040fa67fc"
        },
        "item": {
          "id": "d7e50726-327f-4188-8392-bfa7035e28dc",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "476b275d-2d7e-4f0c-ba05-43c2a05c0399",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e652646b-8019-40c5-8c26-47a90c270e11",
        "cursor": {
          "ref": "3f41e00f-8171-4588-bceb-67581e61d87a",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "cee283f4-bbfe-4e6f-9ad4-d24eddba7832"
        },
        "item": {
          "id": "e652646b-8019-40c5-8c26-47a90c270e11",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3749adbf-1197-405c-a1e3-bcdc117a8340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19133a0e-30d2-4a98-ad76-7b188a41364a",
        "cursor": {
          "ref": "324f3934-e0c0-4925-b510-3409fe351f4b",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "0b75d141-c373-4584-bbe6-69c57dd10ba4"
        },
        "item": {
          "id": "19133a0e-30d2-4a98-ad76-7b188a41364a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "160f9cbb-a1c9-45c5-993f-e8ae3e83faea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91d05ab0-87dc-4438-8cb9-0a86e735c3cd",
        "cursor": {
          "ref": "83ac168a-d344-444d-b947-af47776c3e7d",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "245d45d0-4155-4385-bd38-51c94d026244"
        },
        "item": {
          "id": "91d05ab0-87dc-4438-8cb9-0a86e735c3cd",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e9877da3-8d29-4656-a8c9-54f4dd7eb59e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e996da4-496f-4553-a201-62009fec1e88",
        "cursor": {
          "ref": "41036f73-b3e3-499a-b616-601fb9af50c7",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "0f2d2ff9-721b-4815-96ac-5567f5060f33"
        },
        "item": {
          "id": "6e996da4-496f-4553-a201-62009fec1e88",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "99041789-5974-4787-a899-5ffc0ab8c150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef963a5-3f30-44d0-915d-f8a03e4536f3",
        "cursor": {
          "ref": "9d51c3aa-d2eb-4d5d-af47-9c17b62820af",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "716c9532-951e-4187-a4a0-27fe21f36b1a"
        },
        "item": {
          "id": "9ef963a5-3f30-44d0-915d-f8a03e4536f3",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c7098d5b-78d0-4d4c-8112-daaf1f4febb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de5734e-7217-4111-8901-6ef31eb5015d",
        "cursor": {
          "ref": "8d2f1716-27ee-426f-80af-29b6e882368b",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "265f87bf-470a-4936-8c32-fd206addadf6"
        },
        "item": {
          "id": "6de5734e-7217-4111-8901-6ef31eb5015d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d87c7043-492e-4a66-a8e6-a0771bbe027c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c0f3bb6-648f-4555-84b3-8adb72876ef6",
        "cursor": {
          "ref": "61b0e4f8-eb2b-44cf-99eb-a19801cea059",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f4113272-8569-4ea1-b51a-be91450c2fd0"
        },
        "item": {
          "id": "5c0f3bb6-648f-4555-84b3-8adb72876ef6",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f69b699c-fe46-41e1-bef7-9e53107d96ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "297d29e8-64d6-4b60-9c2c-657887a52877",
        "cursor": {
          "ref": "315b5496-1138-499e-bcec-b99320c7948e",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8258e81b-07e7-4f1d-b62c-bcf24ed22a15"
        },
        "item": {
          "id": "297d29e8-64d6-4b60-9c2c-657887a52877",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8a34bf5a-5517-49e7-b718-b32c6d07b8a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66fb7a2b-3b5f-4580-a7e3-4782e5f0f72a",
        "cursor": {
          "ref": "07faabcb-ee27-4690-9467-a9e4f208e6de",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "72ea35a1-3d27-45d3-b0dc-410a52d1ccd9"
        },
        "item": {
          "id": "66fb7a2b-3b5f-4580-a7e3-4782e5f0f72a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9751eb8a-17c1-4423-a80b-581624418bab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0c08934-cb4d-42e1-8dd0-19aed33a2a2a",
        "cursor": {
          "ref": "cfae672f-c904-48f4-992d-64d2e7b29080",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ec3d531f-1eed-404d-8e8a-fcfe51341fe2"
        },
        "item": {
          "id": "e0c08934-cb4d-42e1-8dd0-19aed33a2a2a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d9b2c880-0734-425d-952c-f782902ddd92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2dedeef-6ef1-48d3-9262-65c7b092609c",
        "cursor": {
          "ref": "73424bc0-d1fb-41a0-859a-cc215e6be994",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "3639114c-6119-4b74-aec7-b689d2fc4170"
        },
        "item": {
          "id": "c2dedeef-6ef1-48d3-9262-65c7b092609c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "cb3d113f-38bd-45d8-88ea-1c4f05db0340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19001882-7f5f-40d4-af69-9c977b72979f",
        "cursor": {
          "ref": "dd54bcff-dadc-4a52-95f0-243234844cd6",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e98fe8f2-df9c-444f-b54e-05bb6d23714e"
        },
        "item": {
          "id": "19001882-7f5f-40d4-af69-9c977b72979f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "36f0b7d7-5e07-4884-9c73-15dccfe2f0ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e37eb8e2-62e3-444a-b130-d4b4b7a556fe",
        "cursor": {
          "ref": "dfe206c9-af14-412b-8442-13de2397b221",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "b2eb99a0-a12d-41ab-9b29-572c6e217a54"
        },
        "item": {
          "id": "e37eb8e2-62e3-444a-b130-d4b4b7a556fe",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e580673e-4b22-4cce-9f60-f1f4f8809248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0070c2bb-5d2d-428f-ac3e-c13f36539dba",
        "cursor": {
          "ref": "3d6abb7d-712a-49b0-8474-145495c883b6",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "204bc39b-4fc6-4571-8e36-488bd0e7783e"
        },
        "item": {
          "id": "0070c2bb-5d2d-428f-ac3e-c13f36539dba",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7252c2c8-142f-4109-8dba-c9fb586b971e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1988dd5a-0f86-42c3-ad07-a713d6866844",
        "cursor": {
          "ref": "a847eeb9-fe9d-43d6-8437-21b986b188ba",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f0f62b52-5b16-42bb-b71b-21a277ffdae6"
        },
        "item": {
          "id": "1988dd5a-0f86-42c3-ad07-a713d6866844",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f3182258-1040-4bb2-8b6d-c3d41b27054a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb55fa76-0610-4b09-aa2e-e539c310870f",
        "cursor": {
          "ref": "2b95181d-49da-40b1-92a9-99aefa7e766a",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "03cd7f8c-74be-42a0-b77a-c9adb8800f55"
        },
        "item": {
          "id": "fb55fa76-0610-4b09-aa2e-e539c310870f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "84500e48-50e1-4015-8576-d8dbcb0690fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa444f3a-6ded-4f58-8591-affb598ba7ee",
        "cursor": {
          "ref": "bc4ccaac-90c6-4735-ab1a-02e92b8a7572",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "5340ad04-7321-4d7f-a9d9-586f88fd1d8d"
        },
        "item": {
          "id": "aa444f3a-6ded-4f58-8591-affb598ba7ee",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "33abc4e9-697e-47a4-ba0d-4af41d7ccabc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "023902ed-6fdf-41a3-9863-71d95d96417a",
        "cursor": {
          "ref": "dd1c1c3d-b9a9-4a1a-95e6-4565a45a9edd",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "4cc443d9-c61b-40af-b350-a8d0b686d1d3"
        },
        "item": {
          "id": "023902ed-6fdf-41a3-9863-71d95d96417a",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "daca1898-a02f-452e-917c-6f7efd04bd64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af97486-249d-4cc4-8944-ed7af6ff01bb",
        "cursor": {
          "ref": "6e4bb444-a9d2-41ce-81fd-4dcbfb418421",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "ab504fdf-5212-4481-a4ef-f72cba2575dd"
        },
        "item": {
          "id": "6af97486-249d-4cc4-8944-ed7af6ff01bb",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "0c13c482-422d-4bc0-bd16-927e14475aa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a43ae78-902e-4863-9f4c-cade1f3297d9",
        "cursor": {
          "ref": "11f46fc7-905e-4b97-b20c-1d2f9ca1b7c3",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f4b5fa1d-665c-4a6a-b072-a9ef180ac6c8"
        },
        "item": {
          "id": "6a43ae78-902e-4863-9f4c-cade1f3297d9",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "6afc5cbe-145b-4dd5-b2a7-073bdb808a43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55bdb220-0e96-4f6c-87e9-3b61298f1539",
        "cursor": {
          "ref": "4959f73f-3d04-4c4e-b23e-ed9c51907b12",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "00658748-2fc0-4616-9b69-876e86711434"
        },
        "item": {
          "id": "55bdb220-0e96-4f6c-87e9-3b61298f1539",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "dbc5eda6-3042-486d-93ce-fb5c9b12ba30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99528a2b-d848-4ef0-9f2d-12d88b0555be",
        "cursor": {
          "ref": "b2a76abf-2012-4e67-a8db-4e68612813c7",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f744e697-4f71-409c-8f6e-256d389f09b4"
        },
        "item": {
          "id": "99528a2b-d848-4ef0-9f2d-12d88b0555be",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "a51e7d39-c540-4b1d-9f50-175551591168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "603e2a0d-b534-4b7b-bfa2-93301931d18b",
        "cursor": {
          "ref": "fe36f078-30cd-41c6-95df-7c87e9f890b2",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "8b9b05e7-8db5-44b0-a7be-edb7b9128c2b"
        },
        "item": {
          "id": "603e2a0d-b534-4b7b-bfa2-93301931d18b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "970072e5-18be-4dfb-8a96-a46ca77511ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc4bf4f3-c8d9-4923-bd5b-6ea8ba136acc",
        "cursor": {
          "ref": "b6970466-ef40-4139-b2ab-62ff1720a78f",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "acfb0485-3e7b-4204-855b-c12056e8cdaa"
        },
        "item": {
          "id": "cc4bf4f3-c8d9-4923-bd5b-6ea8ba136acc",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "15dd2c29-18d3-42be-ac10-54888cad2294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a16773a-9cc7-479f-9831-162351f31e50",
        "cursor": {
          "ref": "a5b70ee0-da72-445f-98fd-821375d514df",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "bfa3f9f3-24da-498f-9d00-e1e2ce5fb790"
        },
        "item": {
          "id": "6a16773a-9cc7-479f-9831-162351f31e50",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "f29c5133-b78b-4022-b81b-e1804f07cf92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2044d7d-1d58-41bf-bd39-c714d582befa",
        "cursor": {
          "ref": "00179157-42df-42cc-90cb-13d7b89594f7",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "41cf2bad-38a1-4d7b-8b4a-f4a4110b1eac"
        },
        "item": {
          "id": "e2044d7d-1d58-41bf-bd39-c714d582befa",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "da694cc2-d800-4bf9-a2d7-bb3c82e59f40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19aa43ce-eb39-434e-b700-617d8784f516",
        "cursor": {
          "ref": "84e07ae5-b9f7-46d0-aaea-86aafc552834",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "b3f87453-0c71-4fed-a5f1-a06f8e5dda52"
        },
        "item": {
          "id": "19aa43ce-eb39-434e-b700-617d8784f516",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "e97cf0ec-9696-411e-8d3d-cc08fcad6e88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fc49aa9-5251-4ac1-8944-98351d6307c8",
        "cursor": {
          "ref": "6024ac14-131e-4a5e-a743-9479fd2a940d",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "614c1fe6-61bb-4ca6-a92e-ce754db8a495"
        },
        "item": {
          "id": "6fc49aa9-5251-4ac1-8944-98351d6307c8",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "bb1da449-c20f-44be-bb20-89adb8352363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e93188-07e4-40a7-afd6-840534f79836",
        "cursor": {
          "ref": "e4cc4d54-b0f8-4aca-ba99-1629705818b1",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "e3697ad9-52fa-4d86-b598-10efef94494f"
        },
        "item": {
          "id": "c3e93188-07e4-40a7-afd6-840534f79836",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3d53bbae-36dd-4507-915f-084786c1c714",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "9177e85e-a815-4d55-874d-58177ab670b8",
        "cursor": {
          "ref": "54b87c2e-8584-4770-ae26-ef5d9829cdae",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "0a148b68-20e2-44a0-b1a7-73e1bb071d6b"
        },
        "item": {
          "id": "9177e85e-a815-4d55-874d-58177ab670b8",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "11d4a91a-b24c-4699-af33-ff64377fc574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "507bb6eb-0117-42b0-af57-4d64fae237e3",
        "cursor": {
          "ref": "ade53a57-1612-4a91-9083-49efc1227eb3",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "16d2908b-4304-4dfd-83a5-ffd06e2b18bd"
        },
        "item": {
          "id": "507bb6eb-0117-42b0-af57-4d64fae237e3",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "78e1b9f0-544b-4461-acf0-698c03fe85e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7402fa01-59ea-48eb-bf88-a108e492e54e",
        "cursor": {
          "ref": "bc6c75ad-9e84-4025-9dc7-ea2483de165a",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "33a29b2e-e699-460f-a0e6-06f0a8a5c50d"
        },
        "item": {
          "id": "7402fa01-59ea-48eb-bf88-a108e492e54e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "34e2714e-3c68-41f0-b13c-bdb8d6af192e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d952209-1d4e-487e-9a62-ee98129593f6",
        "cursor": {
          "ref": "276b5d82-5f05-450c-b280-ad5304906a34",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "0dc0333e-be79-44d7-8fb0-fc2bd53bd853"
        },
        "item": {
          "id": "7d952209-1d4e-487e-9a62-ee98129593f6",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "58e4dead-dbe3-48ef-b762-5151feb854c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b74af0d-e9c9-487a-ae52-3c06dadf011e",
        "cursor": {
          "ref": "b0a2bfde-9cc9-44af-840b-f4f046fe08b3",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "02e9b186-f64a-4b42-bc40-7838fc78432f"
        },
        "item": {
          "id": "9b74af0d-e9c9-487a-ae52-3c06dadf011e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "1b416f04-c36f-4581-a0e5-83bb012653d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f973531e-6b45-440d-9a83-8b98a084a87f",
        "cursor": {
          "ref": "b9eb268f-ee87-42df-a271-2f570e90cd4c",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "352147a6-4c70-41f7-82f6-82b99e1b2e9d"
        },
        "item": {
          "id": "f973531e-6b45-440d-9a83-8b98a084a87f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "d289b5de-dfd5-4fdd-ba2c-13924baa2abb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f57695-ecf5-47cc-a836-a49770f2e37e",
        "cursor": {
          "ref": "bc20bb0d-166b-4f0a-ab58-b956aa862608",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9dcb64f8-4867-44e2-b665-f433a1e3df39"
        },
        "item": {
          "id": "59f57695-ecf5-47cc-a836-a49770f2e37e",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "13073fad-b31b-41a5-baf5-57117129ce38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39af746e-f774-46db-9320-024af428063f",
        "cursor": {
          "ref": "3b2f2bb7-51a2-4c3e-9925-5eb2c47055be",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "6e7d4a20-252a-49f6-9e35-64cebe2d840e"
        },
        "item": {
          "id": "39af746e-f774-46db-9320-024af428063f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "58af3a0c-119a-4c18-aa14-4428edc9c2e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "784530d2-daf2-42b7-baf5-ec7464843464",
        "cursor": {
          "ref": "64cfc0fb-412c-4264-9905-235925bf6cc4",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "ca0d81eb-64ad-4e3d-9de3-5142ae08717d"
        },
        "item": {
          "id": "784530d2-daf2-42b7-baf5-ec7464843464",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "9fd8debf-7135-4cd3-a5e6-5ed728b59a06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21d67556-525e-4e51-9093-4466dd571b79",
        "cursor": {
          "ref": "a6118a2c-1c57-4fe0-8e2a-4799542cfd05",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "26949f82-3444-4358-98ad-5dbfa18ee2fe"
        },
        "item": {
          "id": "21d67556-525e-4e51-9093-4466dd571b79",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "dfdd9bb3-ea42-4328-8081-5cb40036f7a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c4c27f-218e-4cd8-8c08-6acfb3b57fe1",
        "cursor": {
          "ref": "9f6f0a50-2bba-4040-903a-a17351400f92",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "32c58570-9208-450a-acc7-f0a3b015a170"
        },
        "item": {
          "id": "13c4c27f-218e-4cd8-8c08-6acfb3b57fe1",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "73d949b7-5878-46f1-9dc6-77822ee938b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9440908-ac7b-4dfc-85ce-9dea1c02eeb6",
        "cursor": {
          "ref": "ecc2436c-679f-49a7-84d1-a0b641c04ed1",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "07ac8cf6-3a53-432a-a5e8-77c7c39e301b"
        },
        "item": {
          "id": "b9440908-ac7b-4dfc-85ce-9dea1c02eeb6",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "e9f4af24-40eb-4fac-a088-8244bd701ca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aa5d54c-d0f4-4475-b395-26466d5c1000",
        "cursor": {
          "ref": "c372fcc3-358e-443f-a5e3-1712c3da0a87",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "295ec4ac-186f-4118-af76-985a7e1bd010"
        },
        "item": {
          "id": "6aa5d54c-d0f4-4475-b395-26466d5c1000",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "172d2a58-8166-4147-acde-d66bd7d765fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4540abb-c406-4fbe-9102-db2d2388ce05",
        "cursor": {
          "ref": "adc1df8d-4071-47e3-a056-f62726f1314e",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "82ff5c82-6d01-4ee6-85e3-cc46325bb370"
        },
        "item": {
          "id": "a4540abb-c406-4fbe-9102-db2d2388ce05",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "43f946e2-b9d3-4d6c-89ee-11f8c406fd2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5446b9f-969b-413f-bc82-8c2553a79098",
        "cursor": {
          "ref": "4d1b112d-2bff-45b8-8155-d59ea1382e85",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "e3ba2fca-cb0d-4ca4-806b-0547cc7fc3f2"
        },
        "item": {
          "id": "c5446b9f-969b-413f-bc82-8c2553a79098",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a024b1cf-ebc1-4d5b-8cae-dff13e8c751e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6f215ff-a5f3-4896-8e37-36beb280a84c",
        "cursor": {
          "ref": "c18ed791-f39e-4cbb-895a-9be81bdf4a38",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "42664437-2af3-44a2-9845-ebc01ab2839d"
        },
        "item": {
          "id": "c6f215ff-a5f3-4896-8e37-36beb280a84c",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "87198e01-2b89-4c39-b667-7fd3d7068fa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42d6a2c6-6681-4fed-9215-8bcb2c220dfe",
        "cursor": {
          "ref": "6dcb99a2-e818-445a-a0bc-ac84e3fecabb",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "aacf21d9-992b-49c9-9261-96a1308198f8"
        },
        "item": {
          "id": "42d6a2c6-6681-4fed-9215-8bcb2c220dfe",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "176d3720-d7e7-4a2f-aa6f-4d4c5fa153c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2b54e79-721b-4218-b26a-2577308b2502",
        "cursor": {
          "ref": "d2a10f23-9b1a-43cc-97ba-043f438ee620",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "128b18d0-2e17-48ee-9da6-9adef435b384"
        },
        "item": {
          "id": "c2b54e79-721b-4218-b26a-2577308b2502",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "8b05c35f-ee07-4a27-a69e-15916ab2eb16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f73e198-859e-4c63-a8fe-fc770238a043",
        "cursor": {
          "ref": "d0e381be-66e4-440d-a89a-86829b2eed33",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "0c897d1c-6d79-4dbd-bf48-0c5f79293059"
        },
        "item": {
          "id": "2f73e198-859e-4c63-a8fe-fc770238a043",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ee4ead90-a37b-4f3e-9975-3d3faceb9532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "120efb1a-5f50-4923-94a9-e16e4ec4f3c0",
        "cursor": {
          "ref": "fd06638f-ec75-41fe-80ec-2d91fad28ab5",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "655e9e40-fe5b-430c-bcf1-443b94f6c2a2"
        },
        "item": {
          "id": "120efb1a-5f50-4923-94a9-e16e4ec4f3c0",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "131e1da3-dea0-496e-a100-0725b36691b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05bb9a18-0d0f-43f6-9759-61bbf0d1c7da",
        "cursor": {
          "ref": "fafd6393-7bab-40c5-a919-49166f4d0f21",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "3b641462-e79f-4563-a33c-c319e109892f"
        },
        "item": {
          "id": "05bb9a18-0d0f-43f6-9759-61bbf0d1c7da",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "099627c4-a0c5-49ac-9b27-e342236d1fff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e28524-01ee-452c-9532-ee2acf88ffa9",
        "cursor": {
          "ref": "22f0f121-3afb-4177-bafc-ff8b77cfa774",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "376eb4a7-a807-4cd7-b1c0-9fb0f90f6a00"
        },
        "item": {
          "id": "94e28524-01ee-452c-9532-ee2acf88ffa9",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "636ce4e6-a8b8-4251-8b30-a1f9606fcdb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "238ffc1b-ebc2-49fc-bbd1-1d9faa524120",
        "cursor": {
          "ref": "1aeb329b-471d-4dd4-92e2-22013300c1f6",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "3138c77d-e305-4251-8269-08ff57477db5"
        },
        "item": {
          "id": "238ffc1b-ebc2-49fc-bbd1-1d9faa524120",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "20707faf-9b54-4bc8-83a3-62dac0d51808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10a05b61-8ed8-4405-b15f-b9f738c9a7ed",
        "cursor": {
          "ref": "ba42dbc1-9928-4fb8-8981-dce80e5aff40",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "5660bef5-3e4b-468d-84b7-0196c4080910"
        },
        "item": {
          "id": "10a05b61-8ed8-4405-b15f-b9f738c9a7ed",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f0d31072-5761-4832-bba2-fbf4112ac546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1c3c694-d52d-4a5e-a375-c28e9b95526b",
        "cursor": {
          "ref": "b962d07d-9f21-4d67-8224-d9976dcd5674",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "783f79b7-e428-4aaf-977e-11b1403432d3"
        },
        "item": {
          "id": "d1c3c694-d52d-4a5e-a375-c28e9b95526b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "446ce756-5175-4b5d-b261-522859213fad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b6dde1-efd7-4870-a55a-a54f214a0b96",
        "cursor": {
          "ref": "9cbf6940-4b2a-443b-861c-e8029d6d06d4",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "22325e82-528c-4818-b8e4-eb29a25296d9"
        },
        "item": {
          "id": "46b6dde1-efd7-4870-a55a-a54f214a0b96",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5c7da566-f2d0-4cb8-9467-2f5ba7e1f8bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9401a4e8-70ce-4694-88b5-24b0c59d8b9a",
        "cursor": {
          "ref": "f8d7ecef-3740-4aff-975a-0a42fca4f364",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "7f842b19-e96c-42f0-8520-59b320ec6106"
        },
        "item": {
          "id": "9401a4e8-70ce-4694-88b5-24b0c59d8b9a",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "cd634e78-a042-4142-b338-f71982c8aa7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e13e7049-8871-4318-8b99-8b48b17c7ec9",
        "cursor": {
          "ref": "be3015c1-e14b-4948-b09e-9fb1b042d66c",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ccaa2b07-8329-43a3-8324-7523120c8ce3"
        },
        "item": {
          "id": "e13e7049-8871-4318-8b99-8b48b17c7ec9",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "501e0cc2-e32b-44ae-91df-a42f87b7638d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "446e4eb3-164a-49d4-a1f2-0ce1beacb386",
        "cursor": {
          "ref": "a77d2c88-484d-40da-a8d5-2a02b2db136a",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "67fafbf6-d805-4711-9ca6-0979e98c296c"
        },
        "item": {
          "id": "446e4eb3-164a-49d4-a1f2-0ce1beacb386",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "2466546e-c8cf-49bf-828b-eccd26ded667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cb3feef-0fd8-4217-845c-fe6f0e1ee0ac",
        "cursor": {
          "ref": "b2e98d97-0a7d-47bb-8d50-68b798abc3fa",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "6d9dd2c7-17f2-4605-96b3-26c680d1d05f"
        },
        "item": {
          "id": "1cb3feef-0fd8-4217-845c-fe6f0e1ee0ac",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ed68c884-3aef-4511-9c72-d161ba51a2d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "17d388cd-3a5b-4b00-9d43-fd2ceb9d2118",
        "cursor": {
          "ref": "b5779223-2a77-475f-97d2-022bc3f5055d",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "4c76d616-903c-489e-a09d-d69cf2043950"
        },
        "item": {
          "id": "17d388cd-3a5b-4b00-9d43-fd2ceb9d2118",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "6fe9aa7d-2f4e-447c-8f5d-23c888966bc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "d3891812-6009-411e-a8db-83978f30225c",
        "cursor": {
          "ref": "385a3e23-e524-4460-9ee2-c69fbf64d378",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "8cc123bc-c9eb-4613-956a-ef06d925ee56"
        },
        "item": {
          "id": "d3891812-6009-411e-a8db-83978f30225c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a78f7b24-6dfe-44d9-b8d8-71ef13b9f833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "bcbea422-cb51-4c3d-8a53-6c1e763ffa8d",
        "cursor": {
          "ref": "e63a2cc0-19ea-4e33-8334-851906f098e5",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "559b05eb-1e95-4a88-8acd-db8238bbced9"
        },
        "item": {
          "id": "bcbea422-cb51-4c3d-8a53-6c1e763ffa8d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "23cbfe04-8d7a-4f0e-99d6-3df60fb23e82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45f6c2b3-eab8-4001-bcef-861d53efd721",
        "cursor": {
          "ref": "4d8d5dae-1990-4111-b9a2-878af14497e2",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "3ef9c6b1-22a6-47a0-a831-790dd534351e"
        },
        "item": {
          "id": "45f6c2b3-eab8-4001-bcef-861d53efd721",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "64b14f80-e410-4a67-8928-5c4d327b77bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "9326a618-6589-4e52-91ff-250e8b933b5a",
        "cursor": {
          "ref": "8b50f779-f6d4-4584-bd51-5faad7787ecf",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "7ab3df06-1680-4acf-9757-48882ca219cb"
        },
        "item": {
          "id": "9326a618-6589-4e52-91ff-250e8b933b5a",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "03b5a33a-866a-455d-93b1-418910b049eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 834,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "14484a08-3342-4517-91ce-89296e86f764",
        "cursor": {
          "ref": "f2ee696a-4918-4593-99cb-f4038fee831a",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "baf5df1a-db4d-4cc6-b3e7-541c9b8b0b36"
        },
        "item": {
          "id": "14484a08-3342-4517-91ce-89296e86f764",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "0bf88cd1-bb7c-4020-a076-d63b7776911b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "26bc7bcf-e79d-4640-a274-932e021cf90e",
        "cursor": {
          "ref": "d1064434-2ef8-4eed-b550-d6dccc292561",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "be4a71e6-a481-4aa1-9cb6-200fe5d946f1"
        },
        "item": {
          "id": "26bc7bcf-e79d-4640-a274-932e021cf90e",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "29134e4d-fdda-46a4-a5da-99da4f413a4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "f25efb2f-0064-4147-91f5-01fa36c5404c",
        "cursor": {
          "ref": "96db393c-03ec-4ad6-996b-7976f1bd6c54",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "9dba23e4-0ecb-4fe6-abc8-149ff78c7643"
        },
        "item": {
          "id": "f25efb2f-0064-4147-91f5-01fa36c5404c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "57fd75ea-8fd4-441e-a988-64528c67534f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "dc7000ad-086a-4226-8468-6c6139b8a939",
        "cursor": {
          "ref": "fc81c796-f3cd-4fd9-8f09-09628629521b",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "ca0ccf35-c1a4-4abc-92b3-acb96ebf1a4a"
        },
        "item": {
          "id": "dc7000ad-086a-4226-8468-6c6139b8a939",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "9b7d9f56-dc27-45f2-afcc-4864a841850e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "885053eb-bc52-4ec2-a5ce-aed0695d3aed",
        "cursor": {
          "ref": "19decb28-a28b-4712-b502-08efc469510b",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e20c09fd-ef70-4b3f-ab59-82afc6a0624c"
        },
        "item": {
          "id": "885053eb-bc52-4ec2-a5ce-aed0695d3aed",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "8a962c8c-23ce-494e-a1f6-b089ecb0222d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4629b0ea-30ca-4c68-9b24-95abb059bf70",
        "cursor": {
          "ref": "6a126f5d-2c60-476a-bc55-b47a708fc6e8",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "d32c5ba9-fd94-40b9-a9cf-dc9908d87f10"
        },
        "item": {
          "id": "4629b0ea-30ca-4c68-9b24-95abb059bf70",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "8272a56d-e26f-49e5-85c6-425ee517c730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97a290d4-dee0-4a9e-bf90-1d3b81f3e45a",
        "cursor": {
          "ref": "ee4d5b6c-ca67-45ff-a229-9c9da854bbc8",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e0829937-5ef6-4231-9e96-9c09d196a8d8"
        },
        "item": {
          "id": "97a290d4-dee0-4a9e-bf90-1d3b81f3e45a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c7c3403f-d6e6-4319-9116-b45a1ecd70cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26651240-8ba0-4b8a-9a20-2ab319ec4113",
        "cursor": {
          "ref": "b62e9947-8551-4ac4-914f-b13392bf0ac5",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3b0eb66a-eb21-42ba-850a-c706ace5f019"
        },
        "item": {
          "id": "26651240-8ba0-4b8a-9a20-2ab319ec4113",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f7a324a5-ef16-4093-ad8a-e204a4cab972",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "599109d6-5438-4fde-8577-ca2ae37cd374",
        "cursor": {
          "ref": "565bc2f4-3e96-4fbc-a4f0-323c3ba2f407",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "9db80dee-507b-4f2a-8493-88d3ec2f4419"
        },
        "item": {
          "id": "599109d6-5438-4fde-8577-ca2ae37cd374",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "8a36547a-44f2-4ceb-b78f-c25325fc148e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e22aa02-8232-49ef-8383-9c08f6e1790f",
        "cursor": {
          "ref": "41a95665-1ef1-439f-986a-c6b60bc81566",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "8a85b570-2cb2-4cb1-899f-40b1421bf347"
        },
        "item": {
          "id": "7e22aa02-8232-49ef-8383-9c08f6e1790f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "adfe7ebe-e0cc-4942-ba6d-b0cfc47fc9f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "595d85c1-8306-4f00-b809-1add940ef83f",
        "cursor": {
          "ref": "a484a180-85ed-4045-a76f-d72c8c2d98e0",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "3eef5d4a-4955-4fd1-9684-1951b832cb1e"
        },
        "item": {
          "id": "595d85c1-8306-4f00-b809-1add940ef83f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "495461a6-3f13-41d5-b72e-1764fde0cc0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f412fe1-38e2-4839-a191-7761a33d8c2c",
        "cursor": {
          "ref": "39d41be0-162a-4323-b6c8-bf0fbc818570",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "88da7e0f-7034-40ee-b8e9-35ac106e7d55"
        },
        "item": {
          "id": "3f412fe1-38e2-4839-a191-7761a33d8c2c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "100569df-10f9-4c9a-ba08-320b27f02bc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bdd9aea-f294-4d85-883c-645e743a0c71",
        "cursor": {
          "ref": "29721139-3aad-4618-ba9a-eb362a9f087d",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "fd514c94-777e-48e7-ac88-a2d352661843"
        },
        "item": {
          "id": "9bdd9aea-f294-4d85-883c-645e743a0c71",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d2736429-78f9-4d3c-867c-f1797dba37ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "348b9310-1ce3-4bbd-8653-ca78e58fd113",
        "cursor": {
          "ref": "40a88546-9976-482d-aa01-ae2e4d2a2d2d",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "c14359cf-f2d7-4c1c-be69-ff4ff01ae421"
        },
        "item": {
          "id": "348b9310-1ce3-4bbd-8653-ca78e58fd113",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "888686f3-abec-453f-8aec-0213ff145b7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e1915ae-1f92-4f6d-b4c9-e5f35b50bcf5",
        "cursor": {
          "ref": "e444e2c0-ccc6-4bde-927a-da39cd99ce63",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "b6908bad-e07e-46fa-84e4-f3e85f71078e"
        },
        "item": {
          "id": "8e1915ae-1f92-4f6d-b4c9-e5f35b50bcf5",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "12de82e7-739f-4afb-84f1-938b99ffd5e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c64850ef-a69a-483b-ad04-253eb06e3b7f",
        "cursor": {
          "ref": "11c49061-5d95-4828-be8d-1373ce4d8364",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e58277ec-a685-4d2d-96ba-02f1302bf476"
        },
        "item": {
          "id": "c64850ef-a69a-483b-ad04-253eb06e3b7f",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "887a66ff-968b-4442-998e-3284b5f769f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d53525-c25e-4417-a6f4-cc6189939080",
        "cursor": {
          "ref": "d0eadb1b-468e-42a8-98d3-87d9c1a5e356",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "ea4f079c-2813-49b0-a010-b99c8eabc525"
        },
        "item": {
          "id": "c1d53525-c25e-4417-a6f4-cc6189939080",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "9d59ee5e-fefc-4063-a89c-6a289302e430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "883bb1b1-80da-4073-ab15-81fd56466de6",
        "cursor": {
          "ref": "0064357b-405b-4033-baec-ba4cfec9c6d4",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "69a5b87a-b485-4148-bbc3-52e03b95ccb6"
        },
        "item": {
          "id": "883bb1b1-80da-4073-ab15-81fd56466de6",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "43b33144-473e-4433-acce-a6db86a348a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1154,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "1c604ad6-58db-4417-91a5-713c49d4f716",
        "cursor": {
          "ref": "f360d0b3-d7e4-4926-95fc-8b55aa2f8aa6",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e8dfac70-a826-47a6-987d-ce0940590ea8"
        },
        "item": {
          "id": "1c604ad6-58db-4417-91a5-713c49d4f716",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "1dde20ce-f787-4b2b-ad99-8aa856504f93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 735,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "fcdac0b3-1ec8-4121-bc02-e59e4d53de19",
        "cursor": {
          "ref": "65c0961f-3272-44b4-a3bc-f466d16418f6",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "8eb22836-ed05-49d0-bdd2-513d3ca53b0f"
        },
        "item": {
          "id": "fcdac0b3-1ec8-4121-bc02-e59e4d53de19",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c6dfd010-f52d-4357-bf51-3921da8b2234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "ec2c907f-b666-4613-b858-86d021db9369",
        "cursor": {
          "ref": "be8339de-f21a-4016-a0bd-78c9aa3d60dd",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "84087c77-18a8-4a47-be3b-88095dadab64"
        },
        "item": {
          "id": "ec2c907f-b666-4613-b858-86d021db9369",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "2bc7ded8-a2b3-4d72-acfe-53f4d6f2e7cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 788,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "9d843fce-f523-4f3c-b873-253a0fafb9f6",
        "cursor": {
          "ref": "f6cc8049-e13c-45b4-8ac2-d1bf2d024f51",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "9fea88a1-5f6d-4fac-a16a-dd98238a4cfe"
        },
        "item": {
          "id": "9d843fce-f523-4f3c-b873-253a0fafb9f6",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "98f65ea6-e401-4d6c-94e9-8fe8b07bb678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "719f8612-5d6f-4b15-8023-2c5939dd1ebf",
        "cursor": {
          "ref": "bba2a052-71ed-4688-a9df-d5cafa762634",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8908fab8-c1fb-43c6-8710-1a8d80ed04f4"
        },
        "item": {
          "id": "719f8612-5d6f-4b15-8023-2c5939dd1ebf",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "bcbcfa40-6fdc-4b52-987e-c5399e8fc82e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c91d589a-d6de-486c-9711-dd77c36e14ce",
        "cursor": {
          "ref": "ef8b5433-cdf2-4357-91b7-dc980f3113ba",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "6510bc34-2eff-498f-a6c3-039e63baed88"
        },
        "item": {
          "id": "c91d589a-d6de-486c-9711-dd77c36e14ce",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "5370842d-04b3-43d6-8305-3d73fad1b28c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24ec80e0-a613-4b2f-9ee8-c509de814bd4",
        "cursor": {
          "ref": "7bed47ac-24b4-421b-8d74-83614c1d69aa",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4a0ee4f9-4e60-4630-8069-eac5e05414ce"
        },
        "item": {
          "id": "24ec80e0-a613-4b2f-9ee8-c509de814bd4",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "976de62b-7f52-4309-8861-14d07f369946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f43706a-08f7-46f8-a10d-6eadf92b0bb6",
        "cursor": {
          "ref": "a25bbd67-5ba5-4afa-a7c7-894fbc9e43a4",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a286b0bc-699f-4ad4-8cbc-cf83a87a30ef"
        },
        "item": {
          "id": "2f43706a-08f7-46f8-a10d-6eadf92b0bb6",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "f61287c9-8ca9-4afb-83ea-b7cc0eb3aec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f592b8a-55fb-43c1-a277-0abb1655f183",
        "cursor": {
          "ref": "c1092e99-600c-4355-8023-d719a21ec418",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "b17b585c-1f85-4702-b236-d40340931ec2"
        },
        "item": {
          "id": "7f592b8a-55fb-43c1-a277-0abb1655f183",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "275f15c4-ad47-49ca-b60c-3aeb5349e30a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23fc7380-f93c-40d3-b6c6-ecbf502a5263",
        "cursor": {
          "ref": "9b7890da-d9fc-4687-bc82-1606c8502ee9",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "53040007-f50e-4916-afc0-7cc1ba83461b"
        },
        "item": {
          "id": "23fc7380-f93c-40d3-b6c6-ecbf502a5263",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "0716d183-9f63-4251-be89-74eb8d42c6f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82d19cae-667b-4934-9f2a-dab4ba842d3a",
        "cursor": {
          "ref": "a5659cf6-a443-44a8-a26c-115455976e77",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "41e45414-430f-4d79-b573-7664e62588f4"
        },
        "item": {
          "id": "82d19cae-667b-4934-9f2a-dab4ba842d3a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "506b4914-ab3a-4db4-ada5-ac4fc3ac9a95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a8d71d2-8724-4df6-9a99-78ca58f15865",
        "cursor": {
          "ref": "0e0359e1-3e56-48b2-a839-9920fc996e53",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "2b74dc2a-149a-40e0-9139-57fb47e0b3a7"
        },
        "item": {
          "id": "0a8d71d2-8724-4df6-9a99-78ca58f15865",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "23afda3f-805d-417e-be47-1635ff7ff2d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd3f8bc-5082-4642-a706-d117e2501140",
        "cursor": {
          "ref": "6689f243-ddd6-4e59-98d9-d886fea776da",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "fd36bb05-bd75-455b-b749-76de7c6068c5"
        },
        "item": {
          "id": "4cd3f8bc-5082-4642-a706-d117e2501140",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "4436d825-2b91-4a11-adf4-cb77de341924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffdcaeca-e21c-4388-8b32-d346e710c018",
        "cursor": {
          "ref": "bba411d0-a778-4f20-a42a-cfeae15359e5",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "5f49269d-105a-4b3f-9885-cb66cc25235c"
        },
        "item": {
          "id": "ffdcaeca-e21c-4388-8b32-d346e710c018",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "7f6f1e15-6437-4476-abd1-93c9099ae337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ef91e82-cdb5-4409-be56-200c7ab6a114",
        "cursor": {
          "ref": "b086d335-1e4c-4d57-a4e6-f63deecd381e",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "c1ba1c9a-0065-43be-a5c1-49e2ab9c7add"
        },
        "item": {
          "id": "3ef91e82-cdb5-4409-be56-200c7ab6a114",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "1a06d812-85b2-462d-b702-43eeda5cd957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57d9a4ae-4de6-4f93-9f83-c3dc917ec5b6",
        "cursor": {
          "ref": "839d05ac-4c3c-4920-bcb3-d8f80f6e5047",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "834bb041-d108-41b9-be45-823e50c3dd32"
        },
        "item": {
          "id": "57d9a4ae-4de6-4f93-9f83-c3dc917ec5b6",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "db739346-71e0-4f03-b4d3-63eaac1303d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26153117-fccc-4832-8296-9eeb16248357",
        "cursor": {
          "ref": "689fd01e-ce4f-4165-bb9d-24490d77819e",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "658b3670-41a8-4e7c-8b63-c69278e45a04"
        },
        "item": {
          "id": "26153117-fccc-4832-8296-9eeb16248357",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "0db94132-bd07-4643-ba34-7dd9605052c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b220007-d444-4035-9c66-033f05feeed6",
        "cursor": {
          "ref": "2108c34a-ce11-467c-835e-d1423c33ba6b",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "9321ca56-1d52-444f-a8cb-41c7d9452e6a"
        },
        "item": {
          "id": "8b220007-d444-4035-9c66-033f05feeed6",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "222b11d3-e095-4051-8e7d-fff2019f74c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45917e8f-1a15-4c40-a6c5-f1c27da4b976",
        "cursor": {
          "ref": "4256b4f3-cb24-48ac-99f8-e22cffdeae0a",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "2b7c695c-e772-4a4f-a06d-ee95634f6369"
        },
        "item": {
          "id": "45917e8f-1a15-4c40-a6c5-f1c27da4b976",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "915a5c4f-1a16-457e-808a-a779126eab4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ec8db7-6afd-4605-abbe-3fe5e8c5be3d",
        "cursor": {
          "ref": "2c813991-753b-4554-991a-ed772344f477",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "08d636af-70e0-4fb7-9d3d-95823ab459b0"
        },
        "item": {
          "id": "67ec8db7-6afd-4605-abbe-3fe5e8c5be3d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "e8f1ad53-2ba4-4287-afbf-b5e4a26d5a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c415cfcb-3c43-43bd-9219-67b952275648",
        "cursor": {
          "ref": "328f1b61-bd8a-4fd8-aee4-8be2b7eede9d",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "7807292e-bbf1-42f4-8d4f-f2b6d65ae881"
        },
        "item": {
          "id": "c415cfcb-3c43-43bd-9219-67b952275648",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "1534fc00-f69f-482f-b394-bebe839b8f98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d9fe013-4ab5-4155-806a-f67b039efed9",
        "cursor": {
          "ref": "c48a657a-0549-4ccd-bdeb-d3924b6d373b",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "1bbca748-659d-4a27-936d-05617d1dd1bd"
        },
        "item": {
          "id": "5d9fe013-4ab5-4155-806a-f67b039efed9",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "b2682c44-48b3-4fbe-bf53-f8ec08d1c561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e91e375-91dc-4e6f-b286-5cda9f1beaef",
        "cursor": {
          "ref": "b64eec5c-20fa-47d6-907a-7ec9e0e1de6c",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "663a22d6-3591-4d88-a2a7-6e735d8397bc"
        },
        "item": {
          "id": "2e91e375-91dc-4e6f-b286-5cda9f1beaef",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "42a63fd6-d7a7-4b50-b37e-894f73090404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f056ce4-94f4-4495-afe5-64bbeae7045a",
        "cursor": {
          "ref": "430f5885-c373-48c0-ab0d-ef0a01ee6a62",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "1643b6af-d6e9-45c4-bc83-286adce43938"
        },
        "item": {
          "id": "0f056ce4-94f4-4495-afe5-64bbeae7045a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "266c9dc5-cc83-4305-8c45-64ebed40f851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "726a98d0-4584-4348-b484-1ee6962628d5",
        "cursor": {
          "ref": "c2baf877-8e1c-455e-8619-cc073e504f85",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "59ffbdd8-1377-4e65-a5d9-f6e41c6ec9f5"
        },
        "item": {
          "id": "726a98d0-4584-4348-b484-1ee6962628d5",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "3adf931e-f255-49a7-b206-82099e16cf87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9318c99c-ecf7-4502-baf2-80b13331db96",
        "cursor": {
          "ref": "ceeb09db-c385-4934-9986-9d2c16b2ee44",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "0a05433f-0d45-4661-8987-d81d52322721"
        },
        "item": {
          "id": "9318c99c-ecf7-4502-baf2-80b13331db96",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "9a57e814-c81b-40f0-8a1d-7d99a9ae0656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72b16307-b0d6-462b-8fb8-4432195dad5c",
        "cursor": {
          "ref": "28534d63-bbb2-461f-afce-e8fcf17132b8",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "242b4145-744f-4e4d-9c59-10507b0f826a"
        },
        "item": {
          "id": "72b16307-b0d6-462b-8fb8-4432195dad5c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b00c1372-0fc7-46cb-8a94-444c0b20ce3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "694bcd7c-6110-44bc-b2eb-263effcd98f1",
        "cursor": {
          "ref": "20b2c377-a9f3-407a-9a90-22c9b8711415",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "943d8f17-3aad-494d-81fb-e5665e769a90"
        },
        "item": {
          "id": "694bcd7c-6110-44bc-b2eb-263effcd98f1",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "08a36b46-56ba-4983-b7de-2301c61364a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "112836c8-ec23-4d92-8428-7a5595a42378",
        "cursor": {
          "ref": "c27f658b-bb94-401a-a39e-dafce7263bfc",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "6f4f7826-7db5-4ca9-9c62-15df6f8d9607"
        },
        "item": {
          "id": "112836c8-ec23-4d92-8428-7a5595a42378",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "3fa47a01-860e-4b11-982d-c62148b7f57a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74516f1-0147-4991-afd9-3ea4c42c9988",
        "cursor": {
          "ref": "6e7cff40-d140-49c3-b1f9-79871dc49617",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "53dd5dfb-5587-4efe-8485-a805690ccbb1"
        },
        "item": {
          "id": "d74516f1-0147-4991-afd9-3ea4c42c9988",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "b8deffa2-fb4e-4e76-a456-11c2ed7f8e4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63f50b86-3142-4cdf-9d07-e782ce8b51c0",
        "cursor": {
          "ref": "639c3c8d-1a8d-4854-8a04-f92449063b07",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "82303b8e-0064-4cb5-9bad-66787c0a03f4"
        },
        "item": {
          "id": "63f50b86-3142-4cdf-9d07-e782ce8b51c0",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "068b651b-2c32-4b26-881b-7507252216ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f33e4ea-0e48-4200-a2e3-2f21ed5e93cb",
        "cursor": {
          "ref": "1633cb83-16fb-4465-b307-16f1f36b3eaf",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "2e00f4e1-7959-4bb7-a062-4a912407f3dc"
        },
        "item": {
          "id": "9f33e4ea-0e48-4200-a2e3-2f21ed5e93cb",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7cc6dc68-5a1a-43c7-b0b8-6d55f6d4ef35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a2d949-164f-4fc7-8b0a-00b365c6cf8b",
        "cursor": {
          "ref": "d331c060-da53-48bd-8b49-9d4ecf1a4e29",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "b2665792-0f97-45b7-be9f-8ec789d7e73a"
        },
        "item": {
          "id": "91a2d949-164f-4fc7-8b0a-00b365c6cf8b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ad80fcaf-91c4-4289-a8d2-6afa33040f01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53bef1b9-8e6b-4260-9e12-c3b453ef5de5",
        "cursor": {
          "ref": "bb7848ea-f74a-49c9-b252-b4a6fe349da0",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "48ba6411-c0b8-4b0c-be2c-d9a0add9386e"
        },
        "item": {
          "id": "53bef1b9-8e6b-4260-9e12-c3b453ef5de5",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ca753c45-0463-4566-b432-24bfee5151cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9785b370-060c-4ef8-8082-d7aeaaaa7a7c",
        "cursor": {
          "ref": "4e6445fa-8742-4b7e-8917-efd9bfc531ac",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "d9e28b48-fea1-444f-8345-1730b212bd34"
        },
        "item": {
          "id": "9785b370-060c-4ef8-8082-d7aeaaaa7a7c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "f75b1fb6-ac32-4041-bc6d-e9addff18191",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1e9588d-3f3c-40c5-b849-c088f4303029",
        "cursor": {
          "ref": "d8fadb69-6022-4abb-a5ea-6d71655ca8c1",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "c9a668e8-df8a-46ce-89f6-3ccaf7c152c0"
        },
        "item": {
          "id": "e1e9588d-3f3c-40c5-b849-c088f4303029",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "4b1c3b72-6207-4709-8a7d-01765fc7557a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6caca525-0d03-402f-b31a-7f889ea6660a",
        "cursor": {
          "ref": "529ec39e-f559-425d-88e0-74ff2be51932",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "25c8f7c4-ae7e-4a77-8026-db2a4f72bcb3"
        },
        "item": {
          "id": "6caca525-0d03-402f-b31a-7f889ea6660a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a6979fcf-84ca-4852-93d1-7fa1d1ae2cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef454e8-c764-4559-a0e4-a3768a0fee80",
        "cursor": {
          "ref": "09ee9d82-9c23-460c-9892-c4662c96646e",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "0d168836-8812-438a-8c1e-6fb3441fbc9e"
        },
        "item": {
          "id": "8ef454e8-c764-4559-a0e4-a3768a0fee80",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "b20d3553-630a-46ff-921c-5eb0c4349c0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88e17dad-2d39-4b10-98bf-cda9b757bd82",
        "cursor": {
          "ref": "ee6980f4-fedf-4b6c-ac48-4c51a3a22cec",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "f5249ed2-175f-4347-a571-ab88c0bbe450"
        },
        "item": {
          "id": "88e17dad-2d39-4b10-98bf-cda9b757bd82",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a5a9af4d-d11a-4240-93e2-95375481879e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd8e4ec1-c4c3-4d8b-829c-007c7c67804a",
        "cursor": {
          "ref": "697447cb-5661-4ac1-be82-5cd5da792879",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "a9c40720-fb0f-4ef8-97c8-947181af5e4c"
        },
        "item": {
          "id": "fd8e4ec1-c4c3-4d8b-829c-007c7c67804a",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "12763c20-ce1a-48e3-80eb-017454b33dfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d110797-1db2-4298-b6ab-41c6ccd2a8fc",
        "cursor": {
          "ref": "dcce9bd0-e7fa-4d28-b856-fa2e3c66613b",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "89dc25ab-2912-4def-86bb-ec19ff874e3d"
        },
        "item": {
          "id": "7d110797-1db2-4298-b6ab-41c6ccd2a8fc",
          "name": "credentials_verify"
        },
        "response": {
          "id": "92b29239-3b68-422e-8c36-f0e9391dc9ef",
          "status": "OK",
          "code": 200,
          "responseTime": 738,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0befd68b-e6d2-4451-8ba9-75c63cd6cbfa",
        "cursor": {
          "ref": "2d53eb34-235d-49d4-9adc-e43253467dc0",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "da1684bc-d854-4272-97c8-0b4cee3c6afe"
        },
        "item": {
          "id": "0befd68b-e6d2-4451-8ba9-75c63cd6cbfa",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "e182c5f7-7dfe-483f-8bf2-87e5c3b5375c",
          "status": "OK",
          "code": 200,
          "responseTime": 763,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f476d257-4180-4292-86b7-18c0f4484c96",
        "cursor": {
          "ref": "ab418eb6-1c70-4b44-ab10-a91db1621e98",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "57551e58-0264-475b-bd4d-6eb7267f9cdc"
        },
        "item": {
          "id": "f476d257-4180-4292-86b7-18c0f4484c96",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d9ad98d5-6487-40af-bff5-b3fbc0fc310c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f476d257-4180-4292-86b7-18c0f4484c96",
        "cursor": {
          "ref": "ab418eb6-1c70-4b44-ab10-a91db1621e98",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "57551e58-0264-475b-bd4d-6eb7267f9cdc"
        },
        "item": {
          "id": "f476d257-4180-4292-86b7-18c0f4484c96",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d9ad98d5-6487-40af-bff5-b3fbc0fc310c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "588941d1-b329-4f9d-a514-c1ed970b519e",
        "cursor": {
          "ref": "910cccb4-ef38-4480-81f0-937a35a8fcf8",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "37558912-087e-4fb1-8b00-c5b57590cbaf"
        },
        "item": {
          "id": "588941d1-b329-4f9d-a514-c1ed970b519e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f11d17c8-60b0-429a-adb6-f2ab146f4896",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "936bf26b-fcc9-41d1-ab3f-c5e1ae3f73f4",
        "cursor": {
          "ref": "9b5febce-d1fe-445a-b6fe-8545f1a73872",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "8135f05c-a9cf-44c4-a15a-b6fc87e9eea1"
        },
        "item": {
          "id": "936bf26b-fcc9-41d1-ab3f-c5e1ae3f73f4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "fb4c99e6-448e-40dc-a016-b7c3074e06ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}