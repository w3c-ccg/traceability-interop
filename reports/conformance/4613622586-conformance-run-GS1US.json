{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "90e5821d-3426-43ee-907b-3505f51584c8",
        "name": "Clear Cache",
        "item": [
          {
            "id": "aa62829e-75a3-4321-84bb-1800301adbce",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "05ed33f8-3429-4df9-9ac5-8fe60d36af0d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "159bdb89-1cd7-4dd7-bef8-4c76daac85d4"
                }
              }
            ]
          },
          {
            "id": "7d733b9e-9800-400b-9e2d-b921f05a5818",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4ecff6d7-10ca-469c-bc55-3feb920af688",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "26b42714-2b71-4922-bc2a-953e47a9bb1a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "12dd03f4-e1a6-4e73-ba1d-99c8b122d1df",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "3fcc5d35-b5b3-4b18-8722-2be630dad055",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9154e71d-a553-429d-b6d2-6f3a5b1a20a8",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4acae447-3177-41bc-a6e2-6fc6499e5eff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "40d43d01-b76d-4c44-914e-928401b436eb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9cda65e5-732f-4eeb-a7f5-e399fd5f690c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1273fd8f-deeb-4b88-be7b-4ce637257460"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d906c51a-757e-4a0b-beba-f34e9799c572",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a6bad62f-e664-41f4-acff-12a49122e371"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "56f19fc3-0e45-45fd-8527-c06a799d0f53",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "7740a167-48dc-40f1-9e8f-26ef8f4500d5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "708604fd-b95b-4bce-93fd-5405c204d570",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d64309c9-c7c5-429d-a2cb-260b7dca36e7"
            }
          }
        ]
      },
      {
        "id": "a676399d-c44c-4e6b-a697-0a29c586ce37",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "69b381a9-2a12-4b50-bb09-e343d98decef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c9a1128e-fada-4de6-8ce8-b25b93157dab",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "acf8ba30-707b-4edc-8d4a-6bffcafa0044",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d201cd45-329c-47a8-9885-4532c851384f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "15f4d83a-d77b-4249-8328-ccc53bb77816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b94ed510-f938-4f47-b56a-89eb23c21abd",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11efc8e8-bb47-4402-b66c-0a9ba203748a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "772ba97c-8fd7-42ad-bd2b-4a0526f1a633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "628871dc-6dae-4348-9972-044427dd6ab1",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7820e4ea-64af-4022-8f5e-1e3ecc9b208d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "546f8010-4dc1-47d2-bd0b-52be593e802f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "23eaebbe-626b-495d-8cb2-618050d7b2c2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5dd80728-3c3a-4d30-9e18-5e119af98c35",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade572e8-96f1-4bf6-9f83-e6d7a457d040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e1594c0a-da21-49a9-abc0-d6d86158faf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9175ff06-1086-44fe-b2bc-31dc836ea0dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dacd27e1-0f6b-4721-980a-22e751791170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c01b7880-8111-489a-b02a-967425f19104",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1e0e10e-06cc-43a1-b3ce-465a3f67eea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "01b76b8b-3eb4-466e-9e1d-449dc18e7b5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c215f4f-658e-478b-b0c4-466693e04f4c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "1e0a4512-f21d-46eb-b820-12017c9f63f9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "391151e5-44ad-475e-be14-18b1b7c86eb3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "28d9f11e-26d0-44c4-980b-08fe373c2ffc",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "391907c8-bbc1-4d80-8feb-5a1c2c6dc4aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "15ea4d73-ca1d-4d16-a5fe-61218adfa6ed"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2a690eec-c31b-45ff-a45e-ea8ecdc49127",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "f69323a0-bead-4759-a8f2-bdf9d4f73757"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b0160caa-5c34-453b-990d-aa5ec435020c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1442edaf-cafa-46a0-b2a7-ee61212d345e"
            }
          }
        ]
      },
      {
        "id": "abbb033b-722c-40ff-80b8-8e176d060591",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "ce375b07-0755-411d-97ad-0500d4352c42",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d0ce551b-13e5-447f-b0ee-26b5eae523af",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "29f6c7fa-4103-4891-a14d-b9faae23621b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da0e5b8-9219-468c-be50-9cc65b74c53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcd90050-6426-4cb3-b067-b9acddfad28e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc8f694d-eb15-4794-9637-18ff25b7be02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6f4cea3-e0b7-4c8b-9e70-eb3cdb6330af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e761f62-781d-47df-a002-1adb838d09ab",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0229063d-338a-48b2-8dda-e9a8e44f7320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54106dce-6fe2-488f-949f-c45e1ba5d04d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb3db294-4ed3-4bcd-9ac1-3d93d37ed7a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f686a56-c70d-41b7-abd5-89542458fa52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22c838b4-7694-4582-a926-b319587d3633",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6544a86e-6236-4cf6-9569-342cef34c1ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eda820d6-e0bf-48a6-bf5a-9242dea99555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "330f694e-589d-4b9e-ab10-d9b6cd522045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29b69381-73ed-43ba-af2b-812fdb0ef2ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76079f40-d181-4853-bb8c-a3023ad7a06b",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3e9a34-e631-437c-9b00-e3c570a29077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff8dbf7f-c54c-46eb-bde2-45949dd9e3ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f4c5b06-7172-4425-9979-404c04c32251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fee86554-7845-48b0-b307-4fa808a4ff05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82239843-6f9c-4d28-af30-68c9ed6d4725",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7495040-6771-468f-9792-c3a1f4bf95fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dfd584f-db5e-4389-b21a-22c48c0cd21d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a6cf9d8-5b5f-433d-adbd-4a677c2faf08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e1dd71e5-f14f-4949-bd83-a955e84438a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ea07cb-cbcf-4fd4-a483-e7735f59a569",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f495c5e3-c394-469b-a552-846cab4ebc8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cabd46e9-c60c-4ef5-91b8-480947bd6cea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a4edd48-12ca-48fb-b005-fadb9abe5e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3002329-ae42-46fb-b878-d18571b24032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adf8f235-d71b-4311-aad3-3f0d0f73605f",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e50263-ef4e-4eab-adfb-3988a1b53bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e93b9039-b093-4aaa-a783-5d97bd0ebc0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c905423-df08-4026-ae65-8b548534b85a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "902eff59-cc54-4487-a18f-2def22914e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "309792e2-cc1b-4010-b230-471273af0b79",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc952281-3304-4f8f-bd7a-8fe199130307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77e61462-6d73-4e56-b98f-15cf52f313f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "440e5e6f-731b-46d4-9a80-8e5945d957aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f58f606c-3dc2-4d7d-a0f6-e8321d7a7fec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "439219b1-e9bc-4e50-9d94-c2a442722791",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61e358f8-73a3-446e-9154-12646a544db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39396a28-a06b-441f-8a18-eb640867f42e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc49db0-492d-48cf-93fa-d692893992c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a299f419-4ed0-4a2f-997e-bce5fa47bf4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494c4603-afc7-470c-9be5-e939e0af5e4c",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb6150f2-fe9e-47da-a9d9-20ff3aa24f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f54347ce-41fb-418d-8a6d-57dcd6b9cd89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49af2841-a453-42ef-b896-eea0ae8101e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "17db327f-0d01-4415-a7ba-ea17cfbe19a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17a6f33a-3e2d-439f-a6a1-440cf044f39b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c1b2003-a61f-40fc-8a66-812fe12f1e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4e8d506-b624-4438-8be3-b02b170d0b10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e73cf2d3-aa19-4a64-9ed4-b8f14ff0b02a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f3597230-4223-4597-92a4-b879356bfbe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f83224a4-94a4-4647-9396-beff7a20f481",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a0b6b12-7271-4978-a763-8b80a158193f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad27f683-205f-4f49-808e-78db77c2f3e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886969d7-f933-4094-9329-638942aa91c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3223f4ba-56cb-4e31-a33b-7f3f351e9f23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "459fe8a1-3757-4f49-9493-926e130b36ee",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16808b4c-6c93-43af-accc-a9272bbebc82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d5d76e0-5a76-413d-ae6a-d89f03d6de80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be0ef507-3fcb-4d14-ac3d-4bca7f36e842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "303ee40b-a17f-4436-b4e6-24347bae7811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c55dc7-55d6-4d9f-8b5c-ae86ff65a779",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e99d867f-2fe2-4cc0-8792-9da269f5e043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9be6910d-8254-40c0-817a-7236d6f79d00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34aa6746-94f2-4282-9301-9bb640dc9166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2fa4dcf-fdbb-44a5-abe4-c262d058a3ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e18a70a-3107-4233-9341-0a23f123ca94",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a46d29-69c4-47cf-89c4-3aa2b1c1b92b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2e42d5e-3aa6-4021-8198-e4be396933c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a6441bd-cadf-482a-a36c-8b757e6256fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4621b81-fa42-497f-ac25-900dd01ac821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da0c1e54-9c17-4016-ad6f-128e84496828",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c8de15-eea2-4170-b793-b501db20751b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b16f1b0d-442e-447d-bbdc-b59d9ae31aeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "934c3475-9e2a-4243-8e5a-cabefb290211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74454487-f180-4c41-bb5d-f2c4183ad66d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c98ff65-204d-47f7-9097-899d2dd7a5e9",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5125c966-470a-49ff-9897-b04741faa998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07d152ef-4f85-43f9-9aa5-72c5bab85148"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac4cbefa-3c88-4026-80b0-0a5c9e4b374f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54fc0fab-1928-461c-bfc2-cbdfafe8cc7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19d38de2-4549-43f2-8426-fbe534e0cf2e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63c8fe38-6c6c-4e8d-9fd4-fdc1f3de4ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41c4c4bd-7947-44f6-82c7-41fe4cbe57b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b63a27d-1070-40dd-8c4f-943edaaf2631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5293b81f-ae0e-43af-b665-b86171b2d1b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be03e983-37c7-42fa-9647-8ccda5bf9b33",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a127ba9c-0a59-49dd-9f28-96656d21894e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e150298f-4313-4e8a-9db2-dc93a813ca30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d762da6-489a-48d8-8458-9eab9e46198f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "94fc1a13-e6d2-4983-b91b-cd385b34460f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d19439b-451a-4127-a7c1-d96d4c5f65b5",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a9250f-ee22-4c0e-afab-99e228dea792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd9c238e-ee2a-4758-ad91-eef8074727be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07bf2cc0-f419-4b48-9d44-6b0a9fd37035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "766f5a09-8bba-4619-a747-0970e7c596f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23839294-ca1a-4f59-a632-038fc94d64e2",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b49909c-e12c-4290-819d-621bc76c1899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d3b7336-04a2-4eeb-b5d5-cb745d9e125d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f49a180-cf8e-4c62-bcc6-dada4c94da20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9c2a8e7-a584-45fd-a1ee-bb47be0c3187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "254eb943-7655-4dc4-8f84-1e4123bba19e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d6e66bb-2d74-474d-b840-a0557d1431a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0766a90b-55e5-4d52-b966-55185f9358bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "413f5935-2bb2-46c6-b321-cbd0b072124d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d5b0e0e-32c3-4ff1-b2fa-c80f70c316a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a946a3fe-8c6b-4543-a0e5-1d8624cff1c3",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d86435e-6a94-4aca-b321-e6d1f504dcdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7049e815-4298-4ab5-a6c7-b0f2a3e16dcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "245845da-c238-4f3c-9dc9-cc592aa9acd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3c07bef1-d0c6-4b56-93ad-fc1a8693a365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00fbb988-5d2c-409f-a2e4-cd272667ea0b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "068932b1-f558-4d6f-a290-d24eca88d9d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a5e4b16-2fa8-4302-9ee2-8d223d58ad30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "449b92bd-e351-407d-aec1-1c9ae2293913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "679552b8-dbec-4ffa-aac9-796f9336437a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d82606f-b0ef-4b0c-a828-f48e61d7f80e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f50414b3-5e15-4aaf-91ac-4d562f59703b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e863b134-73c6-4ea9-9dff-1a6674f95df4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64218e65-f9fb-4367-89ac-8893bd0c27b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1dd00ae4-ef69-4a7a-ad07-4a89952aef89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ddd6d4-3081-4b31-8030-c3488e5f6e53",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f394601-510f-46e2-838e-b8b07b84dc6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c901836e-5e2c-4f5c-aa44-72a3c57a3a8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f830357-192e-40f2-a619-739c75b70d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "edb58246-3f30-446f-a7bc-d5492d55b085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "123cbcd3-189d-4c88-86de-90baac60e4b4",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0832f11-3483-41c1-9ac3-925bb7d216ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96ef1b7c-6b8a-405c-9572-000c56d6e41e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a8eb4c-5e24-4478-a9c4-899a3229e70d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7cd76d01-88ff-46fe-bafa-d59492a76f73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64a5a5e7-b7b0-4ba7-87af-9bdc327812bc",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa22cab-1e09-40ff-9be5-b4647900b4c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb39df54-9f2d-4b17-a6d6-c7510ac8eddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10794aee-9765-41d3-8397-52391952ba0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ea91600-6053-4470-9a5e-e0bb35297abd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c84bb89-a8fc-44bb-8dfe-120e7e679587",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0deede11-8332-405b-b0fc-4783c9e8a3d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf1208dc-bc14-42be-87cd-abb951297d2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e5cce0a-0310-42c9-a47a-144ad632540a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "00f4c024-7f0f-4dbd-b3f2-29bc12de9d11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba7e24a1-168a-4694-8b88-10371359c113",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67f5a044-8488-4772-a51d-f7ba5ce51194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24700861-87d2-4c31-a2f1-72bd93f9bf44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb9d22d4-7c72-4ea2-8b7b-ffba05b60a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d1173d5-3d3b-4143-b39f-a4672d0e7db9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1336fea-04ff-4b0d-9c7b-2e1f4a95c169",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1325114-e1f7-4e42-bca0-ac2ec04c0a10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e53e2e16-78c1-4a40-834c-b79c044addac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e4aa2bc-27b2-4d8a-95d8-c20aa15208b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5ab2ab6-ba05-47b0-992e-bc82bd737da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc5906b-6817-48db-aac5-7077cadf1759",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79d37fff-edaf-4897-acff-de0739bda983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa4b9e98-9701-4569-8a61-2dbe79030203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adc6fa4b-7511-4339-8f68-40080eac02b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "932bf811-6b3e-4425-b9ba-6669a3ff3c13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "036b003e-8f2b-40ba-a565-b4c1fa3e5e46",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f519fd-7331-4804-837c-6d4fa646c920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92cfe7d0-1523-497a-8e45-3f5d8b36d0e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca9ec414-615b-4bac-b648-d8f2785da9f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "63706abd-7533-4474-9234-5a752337e926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb6d0698-588e-4c48-801e-c123176471fa",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b18ddc58-f36b-4023-9cd3-8cb307c6066a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7f9cbec-d9f4-470f-9d33-8f2b049d3e57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77582a0f-7c97-4010-b77c-8734c97985b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c1649e9-635d-47a5-8e7a-d619f5a1d738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8cd6239-d498-4a8c-86b6-72ac07ac3db8",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e2d110f-c070-4ff4-bd55-6c2aa0eab72e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d4553b6-3c86-4b97-8308-7bd926970eb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9149df65-4cbc-42b4-a75d-cdfc6b8590a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "353f91f9-ade4-4235-8323-2172ae93d231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "340acdbf-2caa-4cdd-ab14-656dbdd43c23",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "172b29ff-fc3d-4f9b-beee-f90171b78c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "305fe315-2213-4821-9ef1-8d4fae1a079a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "324483c2-da12-4690-aa88-39faa9a31402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3ba15426-13e0-4466-9671-199d794fd145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d314221-0be5-454f-81dc-1491be503919",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b482dbc8-4499-4b60-8519-411f47df1c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe9af65e-1d03-404c-9654-71af51c6f7d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd00d1d-3667-454c-85dd-3b10031d51b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e49fc487-1da6-4e08-b74a-db003cc73001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c216d80-5936-402f-b3fd-d2a666c1514b",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f033d8-a6bc-4f73-bf95-e7c1f53e6032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02bea7c6-976f-4dde-a238-1ccd4cf6aaf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66be9e13-4cf5-45a8-acc1-5f66053eb086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8968ae6c-313b-40aa-84ab-f2cc007f078d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc3d21ff-51f5-4795-ac95-0d48b4ff87df",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c991c958-50c9-441a-b7af-d64783ff2c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecd852a2-be31-4a7e-8ff8-4531a20f8a2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec47f109-8fcc-4017-8a50-1eead389a634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f153aea-42c9-4f90-a95a-e044e1e296a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d09ad4e7-2aee-4df4-ad2b-03ccd4eb9b0c",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f3b67b-787e-4c04-8a79-d1620018eb77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61f8cab7-9d15-4237-b2b1-0c5e8024f508"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eefbf02-c570-41bf-876f-d28851c73df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "731c7dc9-5e3e-44bf-8e96-336d80f0a780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db74481f-bac7-4461-8100-0c7a58157279",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa36fa86-7475-4a24-8599-2440d4649ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bf5fa10-4081-437b-8650-97d5cd2795e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92756e94-f029-44b3-b305-715af46c20d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "54348b87-f85d-4c57-910d-a247b3af40f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c33de09-e306-4557-a9db-3a0d5c1c0373",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfbb6a3e-ce9c-45c4-b449-08b52d047c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70df941d-6abb-43e1-beee-01a559973840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff17d2aa-043b-4c69-ac30-68a4c534189f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "fe3f8329-0e66-408a-b4e9-9f52f2352d20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d94d8d2-7e68-4ac8-aae8-716a045b8a60",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05b0a68-8433-4b1b-b9bd-0a89ff8adb9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99cff470-1dac-4d23-b8f9-d4bf06044c5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fb4b5ed-95eb-43bd-b2ed-153d17f40f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba5eb97b-1031-43e1-8f58-7c1c30073bc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86e2f305-995e-427d-8226-a06d725b38cd",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b84d64-cab7-4c1b-af8e-78f84e28a533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23358365-baef-4f31-956d-ba56821acc92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbf53d90-33ce-433c-8b78-437fa33fbc3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddb82480-119a-4504-a352-9ea6f96276a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3593ab59-cf98-43d4-bd99-f4a53d76e85f",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23249f65-1926-44af-89f1-5536ace589b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9d6cd90-c49b-4bf7-81b3-a8061120cd0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f37e9bc-98c3-49d8-bf22-4f82ffa2f1e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "20b8c0a5-31fc-44a3-927f-0365f8ee6e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40a9a8bf-10fc-4530-93e2-3d0df658eb7a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d30a017f-e5d8-4c20-bcd2-dabb900bdf5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96e12879-120a-467e-b3db-e9fe926a4c6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "743a775e-12e2-4a4a-822a-46d31d26301c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b2d45a2-5f6e-4c52-8064-4fefb006e7f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a889be2c-4d01-40b1-a4af-d693f3b34083",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f2eb795-29b3-4e29-a902-f270a95eb99a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e847bbf-eb03-4519-8ee2-2b1ae31675e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ab51cdc-b2ad-4170-94de-b4c6b180b151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a1a73a1-7a46-40d6-aeac-cf0440ab5fd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "608bf0d1-2b67-49f9-b63a-4a81265b4dbf",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "165846f8-b400-4c8e-9a3e-2ab2a9ab79b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a487c88-9207-427a-9dc6-f7b198ed07ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb9b2973-71af-4551-bfcb-61dea30a349d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ade487d-e8c4-43d6-a1e1-832c6dcf775c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa8f7deb-e2d8-45d5-9141-1d313a39e95d",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c482aba2-cde4-4afc-8a04-1c1750f80a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abf0925b-7c99-4faf-9c95-6521c9a69a80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750d8810-6bf0-4a89-8f40-3f9732df7c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a0b1734-d74f-4289-b469-bdca48aec416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d34cbd-991a-4668-ae0c-20b4754f41a6",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a34c8ef-17c9-4ab8-8cea-340ef8d3f036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5f4d48d-75e5-4400-bc1c-1a37b11ab2bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9064ec6e-4092-4677-ba85-cd54d93a459c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3cd0825c-9bc2-419d-8cd0-1b1880bc03e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d21140c-efb2-430c-8d74-2991b961bb8f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d1c9ecf-3e36-4ae9-a57e-04748074a9b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46364db8-89d0-4d57-8656-011ebfed91c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c5afac-1c11-4e66-84d2-8b33633a8dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5edbcc6-a33d-423d-bf49-b7c6dfcada81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "732fbe30-6c09-4f22-ad90-ee2d99a792de",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e20a2ec-fa7f-47bc-a59d-2f61f10b9d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77be1575-6825-4948-a132-1ded01486056"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "382f3dd4-86a4-4895-8fe0-4f348f098e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5969730d-3b32-4921-a4af-c06a74407065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "180b6603-9d6d-41ff-97ed-c1e4bc88e233",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf0fa2d6-7c41-439d-8e22-1dc7d7e05451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a08750bd-ea2c-494d-a6ac-4670ad28efb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d13c5a92-91f6-4fbd-89cc-bca3af85fc46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb960671-ab53-44be-8194-dd40d7733676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1e09f81-c279-4ac7-95ab-d6ddbca4637f",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3f220a4-477b-4492-8e89-8ea619ab4fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26914d91-8258-4da2-a165-a719acc840ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f2c760d-7393-4f2a-9e4c-d4fe683cab58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c150bc3-2c4e-4b1b-8f30-d560137b1f0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df7b6d18-89d1-44c1-88ea-adf309f878a7",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a190c9e3-d503-421d-960c-8b1eb22ace3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a9f48ea-6a1b-4a24-aae4-76f1f5674878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ac9b4e0-3bd9-4688-88be-5552cde434a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1813954c-101d-491a-8342-bc4f13964e52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a261cb9e-b22c-4eba-8d2c-67cf073f1bdb",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e811fe1-1d41-483f-b08c-3c531160c404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cc615f9-2c91-4ce9-8878-f33a2786fba5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8fabc47-3957-4cbc-b598-63402cfb4233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "036c4e0d-7a79-4fc3-be67-798282a228b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97161dbc-5b24-4139-a277-822e43f4bac6",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c19472f-1fae-4c6c-9b70-02e3335f9f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4569915-9837-40b2-be0b-abf756c28131"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1caea15-1420-4143-9e6f-c5f9b2b122bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "96d93d72-2852-4229-9358-dc3b63d8da68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b5ab1eb-8f7c-4fa1-ae3a-c1608ffb7836",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d0a694-b9be-44e8-8283-b63e20154cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb626362-e833-4bea-b7e7-fd56349ab93f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26c36c8f-b5b8-41b2-8971-346715958ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9394f5f6-ba1f-4b14-998f-97ea1fa6ac8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "957277b2-cb15-4228-88fb-70dd544b200e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca4a6563-9186-4269-a832-86b71b654310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92749fec-caf8-4818-bbfd-e31566f8e07a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e864eb5-b5c7-4373-8c26-a4f59b85f60a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "63a042c9-e031-4ffd-8e57-ce5587a6ba3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ec7067-1274-42c2-996f-cb85977090df",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c6be19-62f6-4d98-abe4-69670e915957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a7cdbc1-e62f-4618-ae88-8493e6f5e26c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7159ece2-83c1-4985-9de6-3fdafd9db0d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ea06dff-27fd-4890-b312-026394192610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c90347ff-4001-4f1c-8385-34b95473815b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb0c2c9-81fb-4c6f-afbc-356a6ad0e3e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50f2be0d-7992-4058-9453-0fafdee1c7a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "506bcafd-b48a-455e-bf89-32361fa72175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7d10e7f-e119-4441-a733-facfe934a6d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd38294b-55f2-40ee-b36b-ae764b0deac5",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "291c2cb1-8471-46cc-ba1d-b6ee8d766bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88ba7274-7228-4511-b035-51f1d3f9903d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b7c31f8-5f29-48e5-9465-ab84f80891b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6f6f34a-db59-4848-aadd-516c29ca1d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5baa65b-cc02-47fd-ba21-2a0a9b6c3b8b",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b94645d-41fd-4975-986d-b4d2bea604e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66f3cbcf-4ec5-4cc2-a9c6-3bb4efebf308"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd509460-5c29-4dfc-bf23-3ae32e0cf32c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "85c3dfa2-7d40-47e0-a1a3-8fd034ec5286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea00df91-dd65-4014-9465-3182dfd660de",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "107a2273-ac17-486e-9bb9-e91bbfbbe6cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51a5a0d3-6d15-4bc8-91e7-a10218e5bb4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "356a8150-ef36-4be9-a570-524ab60820e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebd252f2-0845-4650-ae73-1d845ced40f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1e07166-e351-4a13-b8fc-2947286f885c",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08eade09-a370-4db4-95b9-408aea299b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "924254d2-1a6d-4c10-b02a-d80f4a56386e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01464327-986b-48ef-999e-10ba8c9502cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f85e2d8-3aea-4d6a-af1d-9329ab0c7040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73627c6f-aae2-4181-b608-72500a630f9b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34a5c0e9-18b8-4d50-9767-b1f54bbdf9ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d71cfd2-2e08-4b73-9bc5-1770cef3856a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db51b07e-d8e2-41ed-b401-a61fa9db32ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "49c81d0c-8340-4d77-9290-f40a7f29b4e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2133b33-4d97-4fbf-a603-a82dc2d3795d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2afe30eb-8668-407c-a5a7-6c9b4ba6aaf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "246f5f0b-4ee0-4422-81de-61be0c58367e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d15dd3e9-16b4-4913-9b9c-84ae3f2b5ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1fe37ec0-6d82-45de-ad7d-1cd81036f25f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4e598ae-047a-42a2-9e18-c070fa76855b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d654911d-31d2-42b6-8432-c16180162f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6dddfd2-2d4e-43c0-831c-617c6ed472e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e340316-ea59-4d59-a863-3029e7dd6711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "aedbf559-77ad-46da-a5b0-00611f5bc912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00487fdf-bd48-4a27-81b2-c425a82ad0d8",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00c7f871-65be-4bdb-b415-a4e9235cdc53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1298271a-345a-46fb-b497-a53434c1038f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55c6fee0-332e-4cce-a443-11671c040260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfb62f1b-f48f-4387-9c30-7022f5c65047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1959654c-138d-4224-a159-cadbad8fd452",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcd0819e-0761-4d37-b80e-d258a780bd95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a89513d-2e65-4579-b58e-901f188f7e07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "effdd6c6-50c7-4362-8a02-2794e88d9b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "608b808f-57cc-46a9-b35b-328bb6e9f254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1c004a1-01e2-4d71-a795-1f576431d588",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4de9dd40-23e8-4018-9582-3f881d85f75f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c41bd8db-df00-4e95-a151-14d25c4fbb64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db496f7c-31e7-4a92-b535-a7063138a321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e76165e3-bf80-4614-b2bb-28852c3cdcb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9694be9b-eb18-412e-874d-7b86d53e8fee",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2019a6-236d-40d0-b062-55fc4f053252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f143a69-d0be-46d5-b4db-107c952eeb5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d65cd256-f180-47ef-a473-64d8a90a5d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "34feeabd-94d5-4df6-8c44-171c9b60721d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c21e363-6d2d-404b-82c4-4e74d5725e7d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d270fbd-b4e8-4659-8673-ad19bf800482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c739001-fc42-44a1-995d-6c8712d74775"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a36236a-fb35-4238-a1e0-f24b3ae6605a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ab78700-c8af-405a-976b-78be45eca02d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "415fb593-8048-4282-a43e-a31267042cd0",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e16f67-17ea-49ba-8756-32b67d37d1d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "861ae75d-2985-48ce-9c62-1735b5417058"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cda1414-3975-4d46-938f-5ea5663b1570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "421bdd00-6dba-44e9-b2d6-b3caf4152fbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12d944e8-adef-446a-89e2-2976fd90cf74",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa1cff86-7d67-4ce9-9dfd-082d85dda0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a20f3c44-b447-4ec0-b06c-8dfc70c319ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc98f8c-040a-4ba6-b061-f77d9ff7e028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f151c9f2-57aa-406c-b828-aab2e904d617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21bbb6f9-57d5-4ab7-9c7f-b2c3ebc8ec6f",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be77a604-a090-46b3-9c51-38a0a5c1ac57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70c7e2dd-4d40-43ad-b6d7-448be77cacec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "257300cc-250b-4b8c-9c61-a3b308d5dfc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fab206c3-6940-4b6f-a3da-6bafbac8a324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daf5cba1-3a08-4515-a057-73bae90fee85",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c9043bc-4799-4e05-91bd-6313de4e5e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe2a446e-6cf3-4e82-b0ba-61ec0472a11c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6389031c-f0e9-4706-9c82-484c69b5fadf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1747c5d0-da09-48a8-ac83-e9ae00b598f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "710f4841-17f3-4fce-a88a-deebd434c92c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec480e0-ab70-4425-a4d3-49ce29c1342a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "879b4ccf-b009-49f3-8649-4e70ac22e9bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b71cb15d-0f4d-4ac0-844f-74792619cf09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8357d64a-6f3b-4e6f-bc3a-3ae96d105cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9db7ee3-3d13-4956-ac3b-ea9ecef3a32f",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c3df9b9-9ce0-4526-a03a-2c9fcf51ae20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9139e1ad-bcc8-4aed-a6df-937e28412b9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a77a9b19-897e-4de7-927e-c374eea42045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0dca11b-a247-451c-849d-381f3552e1f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "129d8bf6-8427-413f-9588-69719a068bb6",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5936ca1f-8fbb-4cc6-af67-17272d0c10b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81b0b6fe-267b-4531-a2b0-82775c29ac9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7f11cc9-f605-48e0-9123-42401987011b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e69bbffd-44d9-4990-9500-0be9c4b0405a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46f2b58e-e851-4092-af3a-b7dcfe48be12",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d08d1d0-dcf0-4d58-bb10-86f16cfa532a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b9292fa-f6eb-4dbb-952b-1dc2969a77b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88a5a49d-4391-4dac-b001-4dd8621313f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3367fd91-d129-4f2f-a232-d8b12abbd617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "578843c1-18e0-4867-9f68-3dc257198473",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc71b55a-c0a8-4226-b25c-03f2e3533a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dffbbe8d-38bb-4b9b-bdd1-0d3cccd9e7bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a4f64f-14a0-4f5a-9c07-64287749c6dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "adab7e1e-b48b-426e-a25e-babee108278c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4468e6c1-d4d2-44b7-8883-41694aa25a99",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28cbd4b2-7ed2-4be4-a7a6-0dfb429030ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d3100c4-ac37-4942-99f5-14c3e9684c55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a371312-f9ec-42d7-96da-f968beb4fc22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e87a5c7d-b281-49a3-bf10-5d3e2054f2e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d6391ca-2085-4ef9-a3cb-1724ff1603d6",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33335f61-43b4-4eef-b96b-48f13dd65407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c05b53d-6916-4948-ae9e-203a90ec9361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f6e20a-d856-4dc8-a390-e98fa8a0012e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "77b67226-24b6-45a5-94ec-8f36138ccfdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9996b289-afc1-4e3e-8290-6cf4b2b06edd",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f59760-6b05-4e4d-a0b4-2ff3fe90357b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42ee1a76-02bf-4d64-a623-26ab79708e2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ffe25f9-1aab-4eb4-b673-0382f34c3423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "884e8b38-6263-4d37-9745-ed0186be80d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf9f5509-dddf-43ef-8755-cd4e8f653c79",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34396c55-1963-4f93-926e-ca0c135a6f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5564ad9-81b5-4b5c-a177-e883d7c55288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f46ccf1a-1802-4be5-a7f0-d71662402938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "40aa80ad-746f-4565-8b24-ab4908b2c911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e528152-cc7e-4851-aefb-2bfa8d8347a0",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ed8f376-be4f-4882-bbb5-764c466c6dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "414a6237-77f0-47ee-a5b7-b1f03e74b4f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cf053de-733f-4547-8fc1-2c11310cfad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3413d20-b1d9-4fbd-a33c-ae1ff873f32d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4df1462d-4b4b-4977-8d1e-91502923b102",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9146dfe1-9c0b-4022-b237-e093a2754c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a99b873-6df8-4f90-963c-92b40bde8193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd2ba56-6f63-43f2-a698-08f0b850dc84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f6eb59e-4fde-46d7-881e-dc2d74c968c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8518c809-602e-4e2b-be86-7d9271ebc975",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "855f7c69-8eaa-4e15-a3a3-115391f2ce3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f46fee8-58b0-4399-9e50-5b5a7d0743f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f53d9d-b372-4437-bfbd-989bec39c60d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0a6fbc6-8c30-4dae-b9eb-283c4fb6bbc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c16725-b27b-4fdf-bbad-a3a5ec1d53d1",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cae7f02-9ad2-480f-b8b9-8abc61d47ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e76e9d56-4b09-4d07-834a-7cc033cc9738"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9989335-6d08-41fa-8de9-89a9657c8b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a99f17c8-7a3d-43d9-8b09-cbd045242b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94c9ddc5-769f-481f-95d5-c00574b21859",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df737a1b-8be4-4047-9162-3ec81a49321e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e573bfe5-b52f-4611-824a-40a098468949"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dd83485-de4e-4579-aa35-b680d96dc1a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9fc5d9c8-1d3d-415c-8507-307b6b7da2fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90ec58a1-731f-4f75-ba3e-56676d0b08f2",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad1b2638-7750-42e2-86d4-1cdcc7cef823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e4c73222-31da-415b-a9d4-38b724673da1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa613df-d629-45fb-afc2-a2e4ecae686d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd398035-5fb0-45e6-b742-04d4f28c3501"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cf89d938-ecd6-4fbf-9181-6e239e86a3f7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c491244c-79c2-4961-9df5-988b5c3d886d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fe409b2-597e-49a2-b4cb-7c462a085a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a5cb6d4a-1db3-4ce3-8c05-b6579100ba9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65be07e0-a39a-47ad-a894-60fbbd025d5e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3314019c-66e0-46b4-956d-510a9fe181bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba2d7e07-b726-46ef-82af-f63ff5e02995",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f141a861-7561-4a1c-b833-facf1c47de13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c683e86e-9bbf-4115-a1e8-be28f99a5a80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e1d00c-ed14-487c-8dcf-cecac32d4427",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af21af8c-ea11-477e-83cf-8205f51d721a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58b21950-c5d8-4147-9ce3-be32e7a548ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a5f4b2a-518a-42cf-9658-168e469b0c48"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "24a3a5d0-4013-4bba-986c-94bc8550c62c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6d0f8589-dc40-48ac-928a-58ff6f065100"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "935a83b3-d979-4f63-9b58-c24a5ae8a5ca",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1a7a4e75-ec82-420a-99bf-8112843d2220"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ad046515-8733-4e24-b92c-59fb95aec1b5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7f4587f7-98fd-4df3-8066-40264f090c31"
                }
              }
            ]
          },
          {
            "id": "06c3282b-50c9-4955-8621-fcefa77e7c56",
            "name": "Positive Testing",
            "item": [
              {
                "id": "68a207a1-1107-4497-9b08-86fe6c9eaed7",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d87ceee-b92c-448c-9f57-0316b2e217cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c7724513-a7df-4fff-b86b-ff53b5c4dabf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ad2a88ca-41bc-4b15-bced-93ea4408710b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ffb80fcd-a5c2-4491-a8dd-c6a9f085b913"
                    }
                  }
                ]
              },
              {
                "id": "843b4317-bec0-4962-a24b-87d7f56ab06b",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "773ea86a-789d-4ab5-bff2-c2791ed5e5dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7f2692e1-ec9d-4dd9-adf6-462de267ab30"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba66e062-7568-42ee-8bb8-f478e6e6a423",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "958db135-2bb5-4ad4-a196-90658dbec36d"
                    }
                  }
                ]
              },
              {
                "id": "6f085400-3211-45b7-9ba4-d34108b48e7a",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d83753a7-a384-4aa7-ba93-f46f669e240f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5929435b-0c7d-4fc7-ac83-2c8281768214"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "72ab4437-0c1e-4d12-bb1d-173cfc72a489",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ef576d61-40e3-4b24-9cec-0cded56ceffa"
                    }
                  }
                ]
              },
              {
                "id": "efeb5f65-de21-4060-91f6-fa7ab1009aec",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ed7199f-e858-41a7-adf2-73f2319b554f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c4c71a4c-44c6-481a-a4ff-dac7222fc42f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c12f6653-12e7-4649-b1c7-432a7bf0c6ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "e0f031a6-84bb-4b89-9260-383ecc36a9ca"
                    }
                  }
                ]
              },
              {
                "id": "d095db9d-5bfc-4320-88c3-a95a123a6989",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b13c7322-62bc-42fb-9dc7-961a11b533f0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "78beaeaf-b3ef-40fd-9b8f-ee7d065f1f97"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc6821b1-a1a4-4644-a99b-8db772347beb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "9c7cdee2-0ca3-4503-8bd6-3cab607cc212"
                    }
                  }
                ]
              },
              {
                "id": "790bdfc0-b021-462d-9591-8a9e1b71891f",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "02b5bf60-d4d9-49f7-b77e-8e28f3848f72",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5df11e61-9b09-4420-b3f7-39e5969a8539"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33c6b1b6-e8ef-4aa9-8735-0c9c5bd8b54f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2cb19bd2-9fec-423b-929f-d75586f64563"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7feaa1fb-a676-4669-a8d6-41217526e029",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8c1f37e0-c493-475b-abcb-d16f5dfcf3c0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fe470025-b229-4679-bffa-d2fce9ed3f3d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7272b664-e2d9-44f3-a9ea-49d832cc6fe6"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f605bcb4-cf3a-4fc1-976d-39e15189ff05",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "f9582fe5-bdd9-46fe-a523-a8f3f43f173e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5cd5b494-8a63-48e6-8fc5-3b87d5178e1f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9e2a6ed6-3831-45d8-ba7b-21da1ccf3722"
            }
          }
        ]
      },
      {
        "id": "5aa31915-a5ed-44a6-988e-6a2ac0e6dbba",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "eaefa7e5-d7a6-49fc-9d63-b6656ddfd281",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d47bb993-d9ac-4588-95cf-b63e999e0e8b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d606d156-cb39-4c71-90f6-e0b30da96f60",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80dc0b45-bbee-4d6a-bf5e-9557a145216c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b40a25a-bd9e-40ac-926f-aa121e8d74ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f945a0b1-981b-4531-81ac-65b56ee44af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe2c4686-54c5-43df-8726-d02f705d68fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f628530c-b2ac-461d-b076-7ff1e02858ab",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ccabc20-e665-4c34-82df-bee9d8d9cae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af3ecde8-3ae7-4ffc-8c05-d36a67bbac9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8833725-dac8-46a3-afdb-d004bca4e976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fda4f845-d6fc-4030-bd44-3d4d0c7c39ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af31dfb4-833e-47d7-937c-d54ff7c843e5",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9c4d48d-95f4-4763-b6b6-f5a8ac8e1723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8d700e8-4d70-45ca-81bb-2b7eb17c0217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55456e3d-4195-4162-9069-407590fe14a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1af1ef02-1fa4-4623-88eb-5d3e87aabe0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b38df77-ebbf-44d2-8465-41996ca70518",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "821c2ede-054c-4e42-9d90-90b21978bed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73ad3164-a36d-4d12-9730-2d47d9e8dbfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2443788b-3079-4047-a443-474a985d1795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7cad724-1658-4820-b438-57fdc1ad26ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9c54f1-a1ed-484e-b66b-79bbfd2a74c6",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "305d4f54-c4a8-433c-9569-4bdc9460ae66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ddedc87-d90f-47f2-bc6c-52a2eb161fa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "190191d2-0d7c-48e6-82e4-1a7c73fdf6c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b720679-6ea4-4c97-9ebd-40ccf66baf79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f2408fc-1bfb-4d29-b6b4-4faf711db9b7",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4810f43-d4e6-4abe-9cd7-51d83475c78b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fed0e12-3994-450f-b80c-0a79d415fd62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7896856c-5990-4e5b-900e-9cc3a16376b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd5380a9-7bba-40e9-8fa8-83fb245a9c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e91eb3d0-08ae-494d-bfe4-0be593ee9870",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "254dd5b3-6d10-4e1d-8056-35b829b06711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ba0d544-d2ea-446d-9dd5-e9384448e541"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e1a53f6-1c7b-4c62-b135-c52bab46a62a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe84077d-4c31-4e41-926c-361a6b85334f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1389023b-12dd-48da-aeea-67d4dc22ef71",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c316de91-f84d-44da-ad54-998c1169017a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae0b5ae5-2401-43bc-aedb-5534ad19c262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a36a584-5047-4733-9449-80429079472d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e4b0903-740a-4323-af51-6a66ca44c09e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea2f6bbf-d520-42ab-9a68-2f2f8611255e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "183b2317-78cd-4e73-9fdc-a4a192474810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "274d5fda-ae09-4541-8c10-45b62b14c4ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "256e399a-1ae5-4d10-9b19-6b6d240221db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bba87dc2-eadd-4ebd-a4e2-83bdead9f153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4623288b-1d1e-430f-89b3-0e92a56aadda",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f433ca20-479b-43a4-857e-f6a5d6590257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "558252d1-d35a-4322-a40c-650fbaf7c5d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b1a5bd6-f372-4a40-8e3a-33c011fabfc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "efe2d51b-5339-463b-8b09-baea9930f2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b89f55f-8c08-4142-b820-c4697539759e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1864806c-f050-4116-87c3-8b928607663a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac080864-5100-4054-8efb-0cb41750f110"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bbb2b95-b503-4901-9636-3c75e6d9a7c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "083dbe20-9484-4282-8003-5bf6c4c26093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d596261d-6846-4c6f-9c8b-62feaafe4231",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "323ed674-93d6-4cb4-b584-fd7ba9c695a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35687878-02c1-427d-af22-363cdb82f112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ac6532-8c9a-4d24-872a-5e47fab4208b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ce387953-7946-4205-858e-44d99450d991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a2da02d-b938-4e02-ade1-ed7d4e1e3c4e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b01f347-88ed-466d-bc3b-f867ca6fccc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a21d74b0-9fec-4203-8be0-f7acec5c43e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "614658e3-8ea5-42f2-8935-9dd0dde8cbce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "04c2827b-2d9b-4493-8b78-44d30da86a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f57b98ec-1d4b-4a42-867d-ae8e1beb5f0d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1f28456-4e87-40a9-9687-67074401d6b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c12d1e00-c485-4aa4-b47c-4b88d906aa3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d59f431-7952-4f93-9e62-98113cc0cb0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c01a5bb-ad9f-4ed2-bb88-89f9040e10a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e46177fa-3704-40dc-a805-e72afc94f111",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1666beae-bdeb-4b8e-8e09-e53a714dba66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d18eb360-cd86-4a2d-a904-4f8c9e4ca343"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0180231-9b9a-4362-9a61-b6ac669f4ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "287ecf24-e67d-45f0-aac5-04abe796d954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17e1d5e-9ff5-477e-8f03-8501728a15b7",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "002b30f7-7d1b-4992-9431-021837fe380f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b069e065-1993-4642-b3d2-f3cd5641ad9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d422ded7-5830-4b3e-8f75-d79969c742fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b294a472-7a37-4b89-ab2f-117b03460341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20259198-d36e-45ac-9291-d634266977d2",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac06dd3-f60e-47eb-91d9-0f919502d5a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d872890-78ea-42ce-8c3b-f2502f7634db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1835faf4-8976-45da-b41b-5012b134027b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f63eda8a-f481-419f-96b7-32dc888da7da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62770b90-0523-4ba4-b27c-b3559acee7c2",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1796799a-7456-42fc-89b1-47bbebcca843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfb8e9f1-bea5-47b1-9fd7-ebdc9036b343"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8497d2ee-c98f-4521-ae2e-3b715d44422d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6886226-a7b8-4b48-9920-02fa109ece03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdee334b-4d58-43d5-aa05-4b1a75405b81",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eea90441-110b-45e7-ad3e-e53566ef355a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "022fc294-d255-4ed1-a697-90f2ce5bbe1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "590d4b7d-3a25-401a-8bef-b6272f08cddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "810503d8-2ae6-409f-960c-97744a837a71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe5c5de8-2b6c-4e85-b5ba-dd5c81df8832",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "339f59c5-0ee5-4fad-a166-83972a665a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79fcac4b-376e-4679-93aa-017490427208"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce8ff10-a909-4c7a-b1cb-0dde70ce0a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a939a02-1031-413e-be75-03f0841266fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34db3b59-4e43-48a9-8e31-b496e2193b75",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e0ad3d-18b6-4567-a1e1-eab0f242ceb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeb9c235-7ed8-49fa-a5da-63ac32de847b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a5d766-c7ac-43c2-9fa8-d53fb66683d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea7bafe3-38e0-4dc3-886e-10267834c7ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46bc0826-22b9-4ec6-8403-261ff0c7bd7b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2efd78c8-cbdc-4816-b88c-41694aff8666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "993eacec-5f37-4c16-b783-a05e38090aaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c386e9-a4aa-452f-a25d-893f18440e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "827af7e6-2ca7-4fc5-98f9-d93a19b3dfeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "778d681a-96d0-4f63-aed4-c79fdeaa05e8",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95783453-be16-40b5-bee7-735b7d54ccec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "160f2a16-5963-414d-969a-cfa2ffe1c391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b6de46-5223-4d12-879d-2499d1c71560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "349e3620-80e6-41f6-8909-aa5062c124f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c74e9349-2448-4485-88bc-254d0f27b043",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eec9607-0094-4e83-a1b2-f478bae253be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "157bdbad-b18c-4c21-9942-0db67eb5e10c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d07b47cb-560b-4bf6-9e5b-af8ea78dc498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "200524be-99e2-4304-9df3-4908179442d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4382f820-65fe-492d-9d04-81a2449afccb",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ca86a7-b50f-49e2-bd03-f6fedc3e6361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dfaa287-8e8b-48ea-8739-da0ac8327084"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79bbba2c-d8d1-4975-b89c-38aee6ea5370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa62fdde-9648-438b-97ad-d75ad7e1c583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0f51418-a52e-4a2b-87a6-f68c56c2a693",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "277385cd-057b-4a32-8858-fad85b64f9f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aa9995b-92a3-4364-9d09-8908995ea47d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8527fda4-b5d7-4941-b733-1e21576fbed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f329941c-38f6-476d-89be-62458278bef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8b4574d-a579-4ce7-abea-f8827b391799",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b7f1bd7-0b07-436a-a1f1-af9777ba8cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69fadd56-c8e1-4fcc-a24c-21cb3696a8c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89d89ee7-bd58-451d-8373-1d7dc01682ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58cf68c3-9b81-4741-8b33-fdf643471331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d3e2479-284f-4a16-98d3-85cee3c04e7f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8329deb-dd87-4cd9-a189-83ea09c847d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d62bf747-4085-491c-8643-346aa74f1859"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa779cb-c4a3-4c2f-b92c-aa51d273f648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64ef642a-471f-4f48-a937-4d57823871a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98a8876f-e00a-484c-a119-a43123aa13bf",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38967633-a95f-4b6a-8453-cca631e782ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f885dfe1-2802-4c02-a16f-b17ffcf2ddc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f893b392-7e28-4e78-8ee8-9fb14fc0f649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b6cfc5a-0f47-4fea-89da-13b96eeeb677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b872779d-e9a3-4123-b023-d4ad3e2831ef",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62bc6fe6-6da0-4a43-98b0-157c98114878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cbb4819-74a5-4fbf-8708-76a7a504ae2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "960c3cb2-71bf-4c8f-8d60-93ba22a4e824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b63b19f-4101-475b-b336-1108f5c1ff21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d12f377-94b3-40d7-b534-742ea309754f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7407c96-4207-4f8c-b775-307ed832d283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72ac3bb5-fdd1-42c0-b1f4-bd79df136ce3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9b42a0f-6985-4e69-a902-efafd1e7454a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b64f5871-48d4-42bf-9d77-a940afcdd1e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d32cc864-82e3-463f-abdf-0a593011590d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0df844b8-49e3-48da-92b3-ceee49b07a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6344a415-c292-43b2-b2aa-68a47dbe934c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d35917-9c31-4917-962b-7f069f137e07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1070590c-dacd-4c8a-a660-1a9b34e29d5c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "66fab35f-0ba2-40a8-a84e-51f65e2df8a3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b17bc71f-9631-4f8d-80b5-c68500fc2d35",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba355d2b-9077-4cb9-8508-5986b0737bdb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "92bd4a89-4dbc-4f3a-b571-769cac2e4cd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "528dc7cb-3977-416d-a26a-27744ddd8c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dd14da49-be23-483e-a8db-6192a27348d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d64e302-ac70-4c1e-88a2-e7c0489a8272",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ea4dd33-f8c4-4b57-a326-eba4240be0ef",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "3dc23f70-2b57-4744-8cc6-583ae883c8e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8fab0e3-50ac-430c-adf5-21a832ab173f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b04eb247-bfbc-499f-ba89-09778114d9ad"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63c6e6fa-e0da-4f08-afd4-7cd4fdf76c21",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "baf0c161-06d1-4048-8269-901130b0f925"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "87b7ffce-38dc-41af-8b38-3d4032967bfc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7cefe36-edc9-435f-ac0f-eed378210fad"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "98f6f760-2ca2-4357-b7a9-b5580defae3b",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "484f524e-bfbe-4203-9e53-c1cbb34e92c5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cacf5013-b591-4087-b584-c0d0ae2c2b41",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cfe0f195-eb50-4fbe-9391-2c671c3841be"
            }
          }
        ]
      },
      {
        "id": "fa85b265-5c57-4395-800a-7e74f8bdd53e",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ee0a6f16-31fd-4121-b833-989f58510efe",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f3330c6f-8c7d-4aed-9e07-8ddf0742db41",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "95098e03-a58c-4263-a4e0-9b98b9571fbb",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb946dd8-584b-4588-8f6b-c1d32cf43e92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbf53180-3fff-4128-aad6-82ccf5eb0db2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ab99d1-dd69-4fcb-8700-a09ad6ef38b6",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee458754-783e-4b77-9242-e7243a18407e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20f94a70-3465-4825-9576-8f094ab068f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41bee634-7b77-4ef5-b456-8c54b205f82a",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f6d2760-1d09-4a3e-9d3d-d802c36eacab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92606a6b-6561-46c4-a173-cd84d0546ba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1daf286-045a-4cb1-8937-2e02350beb5d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a0ed909-6023-4cb1-83de-7f4edc312460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fe0e1b2-517c-41b1-a407-d681fb86c79f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d23fcdfd-01d6-47ac-8841-2acc08d0556c",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "206615cb-36ab-4f19-8d8d-100da30d2791",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "762ac7c5-856a-44a1-924e-e45eaffd5784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c17854ae-955e-4a2f-a464-d361693f6d60",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6203c7d-a5ae-4fa7-9f8e-fa3c773829fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9d834aa-891c-47eb-8c09-796a5f39130c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "697e19e1-be7f-437d-8656-fbd17f43c8ca",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce1af619-a93b-4622-abca-243b4cc5bb23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e8c3cff-fc9a-4e4a-8ffb-26be628af66b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9b2d62a-30fb-4f2c-8dc3-1a38cd58f1de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8e42401-9791-4fc6-ba73-b71cca965be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd67eae0-085f-4bc4-89a3-2325ccecc220",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4294641c-cb4a-418f-bb80-6bcc2044448d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99049a1d-88ab-458a-9799-31c10e9f4fbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd97c640-c8c9-437c-b4d6-a2db8ed0bec6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b394c4f-bf0d-4ea1-b4ac-bc0f857b01db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4d9fefb-7332-4e9c-8056-49a3b26455ad",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f2d232c-c5a1-46ab-b3c1-869b17804cf3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e5233fc-301a-4ede-865e-9328f49ac5a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "deb2accc-cdd0-4464-973b-c604b2e46b2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be7035f8-2eae-44ce-8c70-ce75cc1f5f4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af62095d-b604-4f79-b6c4-76f6dfe4df41",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ff2685-f9a7-4484-945a-ad796af02a07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26e4a256-628b-42b0-967c-0ca86d10f546"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "effe607b-ef8e-4348-9f3b-79270d943397",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeae5b10-9bab-4658-8bdf-e3d6445800af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e1f05a9-334d-44df-bdb6-6b0a0a8074bd",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c12eab7b-b3d1-4900-a7aa-8fc97d730837",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d66de1c-5e58-4176-8d5b-9af4cb696d78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6c7583b-3291-49f8-a2b3-f510f7eaf8fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6acdede-17e0-47eb-80d3-9fce058b32d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a807b76-956c-4347-95d0-cccba677e8bd",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "854a887b-f8f5-4119-aa9f-0005daf45d1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06fb4335-b7fe-4907-b339-35a9cbc234fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12984e42-69e5-43b5-8968-34bbd5a2eb59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "584938ae-6530-470b-b7a6-b27c5ab3f532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb007687-b0d6-4e54-a85e-4b2dc1ff7eb9",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "571264c7-e0d9-4f86-b81c-a5af22568eaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf125e99-2f13-4801-a345-63787722bfeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "066b8141-6ffa-4633-bc9a-59ed064779f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b52f3a4d-c206-4707-98d4-4e78b6e04497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2d02770-9026-40bf-b920-b665e43b5ecd",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e4aa03e-9a49-4784-83ee-f87acb2198b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f77f9d59-ceb5-4cc9-b46e-24ae1f6ecc91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d9f56ad-9e19-4dc6-920f-44753ea4b928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee189e55-04d0-40ee-967f-e8d52464cf05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dabb90f-2acb-4c96-8751-c04f0969572a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c39bb27d-b79c-4dc3-a11b-fc14221c305c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "825caea8-8b1d-4804-ac0c-2747fb69d261"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "386fe535-cd65-4f73-a31e-7c0cf840952a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "360e171b-46c9-4fc5-84a2-60b7f925e0eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc27990-26f6-46e2-bef6-2e2d0464be1a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bdcc690-e378-479c-837c-7d63d9957dcf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3758298e-ca9f-4de4-8973-862d5a3408e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2111eabf-b32b-4927-a636-1284c725ad68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dc732cc-7b9a-4971-abf8-1ed1a4088340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aa2abd5-e18d-4b05-b774-245645670cae",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b95516d3-37cf-4bf5-8ba6-ec4cb1e04d2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d464132b-92cb-427d-816b-e00af9b725b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27196a1a-1f66-46de-baa9-e1cef47d19d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78e279cd-e9b7-43b3-8829-b09feff9daeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a557269-4e52-4d63-a9cc-b8d59ae30538",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db292a3d-c7cb-4998-80fb-532f93b27905",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cc8cbea-ddc8-497e-8a40-6a13a76735bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "507c7a72-0981-4216-ae43-c71ca2230e9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "652a619c-d6df-4f75-833b-d1a692c8875a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e532ce13-2352-4a76-820f-afd4fcd2fdbe",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "358d4fb7-7baf-432c-9ef5-2e4dac593dbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5acf888-8cb6-4f94-bbd0-c7bf55f4bdb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ffa92b3-dcc0-446b-8460-07e266001aee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6e877a4-b0b5-4c40-85ff-d02decba5da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22c94035-9aa3-4ddb-9cf6-7c0736b2696e",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15d4ba5-857b-418c-97d1-7669ba68bd4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31b24088-c6ba-47a1-9af1-43157d191a1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a7264a0-b516-4044-9eb4-67550e3c3b16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72fdcc77-22a2-4984-9404-b50241e9867d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dced7fdd-3ee2-499a-be52-0fbf66eb62aa",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c848588-6440-482c-b238-2bbf1202c932",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7838643e-3004-4ff8-a69e-e84c60d9a088"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a62db563-dbc8-4d20-9618-f21ea8b24eeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "956246f0-8186-4ee8-8d27-eb43d594599d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58436e31-25c2-4262-9f98-a3249c14e378",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccd27a5a-5554-4e5e-b511-0915bffd4bed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ac2b079-275e-4da8-9e18-300b23e6eff2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1802e9fb-ab62-4108-ac1b-54752203273a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c2b5e11-b9fc-4c30-87a0-df7af1c19dda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab675884-ec4a-4b7b-b9d2-30c2954ff76e",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "023c50f6-8959-44ff-ae0c-f62db0d89091",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "595cdc82-2670-4e2b-aa79-bf64597cd0ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "352c0433-4a09-4521-9592-982325a81f77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa5e1e48-395c-48ba-bc85-fa6640747942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0bea20e-87d5-41e7-a4c7-268f7be4d73c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d00c1fd1-211f-4b17-8574-6f6d44886e1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a982c3ed-c091-46cf-a8be-789a82187358"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df2e212f-fbf5-4944-ab87-5880a05ebc5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc87ba85-5d7a-4f56-a3f0-c1da70e02889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "479b0921-f604-4e2b-965f-2127a6bb59a8",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6386f269-9c86-4cdf-a568-68fffb10cb1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b272113-98d7-4b6f-b7ba-f437e702b473"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64152020-653c-48d7-b7b0-ba0114ed936b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa12e361-4083-489d-906a-0a2d98ab6ae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e9b1240-44ec-459a-a575-678b053073c6",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f45b125c-72b2-4b21-9e82-160e0e257a38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd67772b-1ead-4178-be93-92b60f47ce07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "419db92d-521e-4190-9fcb-c362006c062b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e81d18ee-2853-4212-a9f5-983cde93a21d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d60da6-6f10-4c17-95ec-59c9fb168967",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d50abeed-7c65-491e-8d78-e806c5678ef0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f773caf7-7f65-4bf3-888f-ae5875987460"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e8d305-66ff-4376-aeb9-016eb889c844",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5c6e261-ba17-49ce-9fa8-f3f09ef63092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "473091da-063d-4efe-9dec-cb8cf00dcd39",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7377341-f60a-41d9-9ed9-fd38a49dc00f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8564f89-b44d-432e-939a-da60d0ea964e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "676d8375-fd0a-442a-b11c-b8cc8e92763c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b02e1e7-5946-4e18-9063-867e4ad2543f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84dc8d6a-e89d-49d2-9f8d-20602dc34bd0",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df021e7d-45b6-491b-ac46-43956978df8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00c22cdd-91cb-432d-856a-2bd27f33f47e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c56a195c-0581-41e8-8488-a27d475763f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af978879-ca7e-47d5-9e98-1cc7e8d8451d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad1e6371-2a14-4a21-9ed5-5bf9c5207b78",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eb93ce3-42a8-42fa-a88c-11f7c8b5421c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdc7597f-653f-413e-9e6b-129b70ec9dc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7e01fc0-b0a5-48c5-9ef6-3d8b45162ec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3195c01b-be94-47db-a447-86b9faba7323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5f1d21f-b48d-4803-94ea-0dc2cc0a99cd",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18847437-b409-400c-995e-be7fecb8d2c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e8045cd-4182-4e2e-b01d-ebca218f8826"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76fcb81d-8f88-4583-b2fe-020985c3cd37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08093cdb-e24f-4881-82a6-2b0b531061e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b23bad2d-7118-427d-a8e3-b2b39d14f238",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd41ce6-a47a-4345-84d3-e49e356fe254",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc0c3192-0efe-4cb5-9912-84ac8efec7c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15aa3ee4-63b6-4241-80c1-3a506bb8bd84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91893eac-ff44-4661-a1e8-022df3d93d4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b18290-c800-483e-85a0-dbaf8fd6c08a",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36854c55-2910-4c1a-827c-e2b8af28d457",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b853009a-8d88-40a7-9ab8-44119637d88a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde947d9-cca0-4766-b671-c406771c7247",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "170c13db-555d-4cd0-8df1-9056c115a3af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c45ae5f-4939-4884-a144-85d807d9e061",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1319591e-d099-4116-9d3a-dabb108091e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1e5e2ce-5ad3-4552-a22f-c88ec4d46685"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90bc7582-f623-43f6-81ed-1c405e47093c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d86646d-d09d-4df8-8c9b-e1401a23e9b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ba10e7-4d5c-4301-913f-8758d7c2be62",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba485ed-e75d-47e8-a7f5-e9db51b7a971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a4b1ad9-c4d2-4a69-a3c0-d127bf0e90c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6455371e-f49b-44c7-a51b-76632a23f8ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8fddd5f-cb44-4670-baa1-5240affcb634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beae151b-f8e6-4ffa-9eff-40977d66c12e",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d86a4b-d957-4689-af81-d720663b5288",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f49e68b0-18e2-434e-80a8-82740d6f9e6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "906a005b-521f-4928-a629-1d2aa900818f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b12b0c08-b784-4305-a784-016a3180e092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdbe2f5e-b351-4ab1-96b9-3bcb270a236d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69de90e0-b55b-4130-8f04-7d98e160a4a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c42e2488-c60b-43ea-bed7-906d7dda882b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b50762-dcb9-43c6-b570-d40fd74df1d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2623e8f1-d5d2-4be0-8495-679c9df79592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e09fa31e-752d-4729-a5ef-de5aa4d8935a",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49ee4113-e47d-4e38-877b-45638b32dd5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5daeacae-ecd3-4451-a2ca-a0bc20507d53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f06ab78-0f76-4012-81e9-0f10397776a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b94a2182-c236-432e-be42-8f07db7715b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b20e05c3-3250-4db5-a48c-538c21434281",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7805e90d-60ce-4dd9-bdcb-7d7c38a4522f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4732ef7-319a-450d-aeba-fcd93486c3da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d798f2bd-9230-441b-a8bc-d439412dc89e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37e5d292-8f57-477d-a220-e008de8eea1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d764a4-4e4c-43eb-8c48-cea88034b12b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89d15417-b2d8-4340-b4f4-6e72f38ba956",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44d9cf87-4a42-4339-92a5-7f770c6f7dd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1405aa36-a360-41cf-890f-b41ef1924924",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a473bf4b-9111-454e-b324-54dae7b8b7b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea032489-7ac6-48d3-8fac-2c4b7085447c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca375b54-b806-46a7-b3a8-5bd56e28e7ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f1effdd-2d73-4f44-b45a-b686edd34433"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c58463e7-1499-4d9d-9cc6-0483ae2784b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c20063d-79f4-4bb4-89ab-7b79711fff81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f49271-486d-4af4-9744-aaa7e745b96d",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a39c879c-35b4-494e-bbe7-44f2199bd4be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9b35036-5e17-4627-9aed-af55d535140e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e55644e-d406-45dd-b865-143d5c713acd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c162af0c-0364-46c6-9972-ce4782524a5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc42b951-9a8e-4f81-bade-efc9741f8752",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8160f5-273c-47f0-ba79-d3f8d64176df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "383168f0-1eca-45ca-ad63-8df8e195c34d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb98a1d-eae2-4ba4-9029-9fcb945b5e4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f1a76c2-b2d4-4f5d-8057-974446434480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d248362b-c8fd-4aa1-a7fa-c6c8411e63e4",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d52adee2-e243-4922-b33b-85ab5adaa600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbbe34bb-25a3-466c-bcfb-1bd43eed5d68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b62e36a-6aab-426a-898d-03fc5ba06c86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c34960b-825f-4149-8dff-cd7eeb435908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06b5514c-e518-4eb0-9986-caafc58a8cb6",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f5573e-bdd1-478d-9907-2c74162b5338",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1d1bf53-bb54-45c2-a417-121e0edef668"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35f5a35a-7ca1-4186-a803-0f07153265a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11c07196-7f3c-4482-9950-814b9fdf36dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ab369b5-648d-4376-83d0-2418862fa222",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f016d2d-6f28-4eb0-b9d5-9bbb95be2463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01c88b5f-e49b-4ee9-9a0e-beaebad6debb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09aff341-9788-4f97-a8ef-49b6608ae475",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1674885d-ed74-406a-8cc9-109bc442dbdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df976dd-b075-46b7-ac07-85b003a15312",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27632bbd-3492-45b9-8188-84ceb7b4f495",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68c72b4d-726b-42de-ad84-ad06d7f36e67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a1af01-8b85-4de9-9f14-e1317b64c681",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "406a1ca9-44ef-4f51-a68c-53581653d13a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbfbf898-6c7b-4bb8-8adb-4aae2e62a4af",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64b6f01a-438f-4c7e-91c9-b137029c8b6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48ebda0e-71f8-4ae5-91cb-d7df598efd9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb576d85-527d-4e44-bc4d-57c73785af99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13c3fc73-dd59-49bc-97a0-53aacb412c8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0186ce7c-d70c-4b6d-920e-54d044f71244",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28645858-fd45-4354-b2ad-5c4eb5135dad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "168e8fb0-d128-4d53-9da3-c74cfbd15740"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15bceb2d-cdc4-4ce7-8e4d-025fc934d8e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04cb1983-4aff-4c03-99ef-f452d3f6ff9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c13ed2-9a82-4a13-a71b-aee02515d5e9",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40418dce-4b0f-4dc7-afa6-44987140ebf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8eb1141-571c-43b6-9de8-765fb54bf674"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "677d86cd-50d8-4fe1-859b-4c2573f4f540",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26d851ce-26a1-431b-97c4-5a193a7b4f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1756e86b-637f-48cc-90f9-4de3ea3fc00d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd68d1f0-2ba1-4198-a789-0b880f330a9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd1c3880-2c20-4731-ae9e-90cc374be6d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5d393a2-f4ac-4180-92e1-79cdf0cbc290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "977aea04-f516-4f97-ad7f-6ddbb4fbea4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7740c479-db0e-45aa-a168-6c9428d9dcff",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "771422f6-9119-4482-9ad8-99c30c9034c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "254b89eb-5abf-47f8-bdc2-4aa86d2e513e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1daf5a-7e6c-4026-8649-db083f7ead8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "671a8bab-791f-4060-8390-a685c1c5bbfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2734d59e-6957-4b2c-a11e-ee0d9c1aab70",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b38ac1a-c3f4-4cb2-b580-d6e8e7440d59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "922f0097-f555-4ec6-b859-8651081f4c67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b82a5ce-e617-4eb2-b7aa-8cfe43acd08b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "359c5489-f3dc-4fe0-b626-3f28ac8af7e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e139ff07-6d9c-4600-97d3-fde766de0a57",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f213350-49de-4167-9490-baccbd391f9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f66621da-414c-48be-af15-414055bef993"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e7fe8c-8983-4a05-9903-346ead3130ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7c93284-8712-413f-a98a-20dc72612e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "722241b9-522c-4c22-bf96-5bcaea33d53a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68dcc1a-0b5d-4d8c-b4c4-3c01225ede9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f54d5bf-d597-4c21-87f8-7746b4bf3945"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af035a1c-c57a-4439-8c0f-7a41bc318f3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93df7da0-fbf4-42ab-8133-1963a4052c9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a886e26-53af-4094-bbfe-dc1f5e3748df",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cfc5a87-e1c0-476d-b5cb-528487ff91c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67d8889d-0c2b-457f-8e02-a5ca98f6cf93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc855e6d-51cd-4778-9289-c84dec5a78da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b94ec6cb-5544-40d9-8cf7-5da3a9ee18ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1275b429-5a18-4b54-af48-2981f60868d8",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76b0f687-db49-46b0-b60c-b8ed3fcff910",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4240ca80-70b6-41f9-bae1-45c9d0a48310"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd47635f-fc03-4fc2-b3bf-01940b5feb1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b72960a8-3759-485b-a67b-6636170b83d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "174cd964-8ad3-42cb-bb46-e25193402816",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f377107a-0b08-4f4e-a127-ede56a706bc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16523042-942f-479f-9080-1925a6454b82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54cb33e9-0f69-41be-9b2b-f14f78cf997c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbbe6ef6-7f4e-41ad-b6cb-db536ce51d23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ad8873-a3be-4ca0-bbc5-bbf4ca4acbe3",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fddea7b-2dc0-4bfa-9d0c-09f742345067",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ba8f7d4-175a-4043-b838-fd64bb34986f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c02c1b0-d89f-46e7-a21a-1fccc28fa437",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf940c69-163b-45f7-9e46-44bc64bd971b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f1ef683-e094-43be-ae3e-d71db36b4e60",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebd96bfa-5168-4774-ad42-7906a6e20b48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7888f7dc-8bcf-4a3e-94f3-96a34674ddce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e08140-eca9-4a47-92a0-9e5d0556d06e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2b43581-d677-4770-b1bf-b955f8196a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6278e4bd-353e-4a96-9b86-c4ab7030a9c8",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ec4326-4c66-4c79-9e6e-539e42b965a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "470a92b3-5fbe-4aa2-8048-7c0e4641fa2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c1746d5-391a-40a7-9f79-51acc314eded",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "239bfc90-2675-407b-abeb-1967f0d389f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03bf3858-2e1e-4e6b-a97a-7b2aee2b8444",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58bc3817-5f65-4f31-a69f-43c40bebfc99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d5f8c7a-70fc-42db-a6ce-bd6111043d04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "461ec44b-6738-4df5-a31d-bc2ad267026a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cbbe806-195e-4d7a-b7fa-30b44bdb4a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15327522-6c3c-4893-a62a-f8977a3f07ca",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90a1a2a2-3e68-4089-8c35-d4bb4a4ed7b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5260fc9-59dc-46dc-8281-29ac66a7abc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0031036e-cd0e-44b1-bf80-35beb02a70ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e9127cf-5a14-4ee4-8df9-3470b2df9b25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed8e355-ea57-4cba-828e-5d975446d3fa",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2672307a-dbd1-4062-87dc-1e11d3beffab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "755bd7c4-3e61-4dc2-90c3-7618eb4d91cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff47dc7-c309-4f6f-94a8-84c29268a440",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6fc6333-835d-4200-b9d1-e546e95fce1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1da667-437a-4e49-9190-53c84f56c1ca",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae5b381-086e-4b2e-adcd-cfb2d3d28ea1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f1a7903-736b-4925-940f-a44d3d95ef11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "534e03cc-0ad8-48ad-b4e2-7ecc5779f61c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84edbc70-7454-452b-835b-517b9939a620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4c3a116-6b68-4a4a-a4a3-bc60a7825dd0",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28345fef-0121-498d-81b0-b27332003bac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8eecdb00-8742-4c49-8a02-f5522c2ccab8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f05497-f61c-4992-a0a7-ed08e81af4ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1f40661-4e95-409c-8176-8c9c299f94ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a5a298b-a17f-42e6-aaca-c7039bf9360d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec64e36-108b-44b4-91c9-2e4b3c865eba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "768ce68f-e266-49fd-95b0-1970e2f243c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f98ef55-8170-48fc-bcf7-e8f453fd4481",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d6cfa3e-7620-49e6-a22e-5be744ec3d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b33a6e-c463-42dc-82c8-8a05fa3d8f3b",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6206fbbd-ed96-4021-9f69-5aa76b2f5f14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45eabd51-0944-4689-83f3-2c520b215c37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2165b378-a1f8-4d66-a3ed-7406ec0a020e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48ada20b-8273-479f-bc85-7caa9881fe5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d5eaad-d588-49c7-831b-4e0308e737f5",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72850371-2cf5-422c-b46d-80c178bf6298",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54d2880a-8a7f-4a98-8187-f7a79117f6ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e06dd65f-6f1a-4ceb-85d8-73492aa34449",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a01eb48-bab6-4d6f-b238-3eb4b3249d12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df62ecf-331d-4c29-9568-5c47af212122",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2716c8d3-5c69-44ae-85bb-1f67bbaf9746",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5650d375-f03b-4ec2-9c7d-f4af9b84f9ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a2cabaf-5e98-462a-8683-9eaa601eddc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b8acaa9-c4e1-4b53-8754-ef2194c78cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a2d5b3a-392a-4908-b2b5-5ce58d083513",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f6329e4-ddd4-4e65-9612-7947b6de0a21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb030bc1-7594-4df9-93cb-ba59107b2fe9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "445a0038-a5b7-4ab4-a014-03263e7da7fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a57c9494-29d0-4439-a10e-5017021c7504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3591bb64-2a96-47d2-89b6-a0d93f1287f3",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e529126d-8e8e-4bd7-a167-b6fe9245f586",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea6ef735-c7c7-4f86-be2f-4d65d2653d4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74ee8d0a-2b3c-4029-978b-995fdaf1687b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2441aba8-c5a9-41b6-851e-c0847d704055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54e6fd0c-3d4d-4b14-aa05-483184512596",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bac1ad5-129d-4957-b028-de9dc8f10719",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d911f350-4d16-4ab7-a9af-d84c11d658e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edffea7a-c57c-4270-a229-50cf19d4756e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeb09d83-f0f5-4f63-8d22-35d03af8f39a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e40e224f-aa09-4413-9b16-6881a62382f7",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97af6e35-01c5-41c0-9a45-a688ef3ac852",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1261d82c-5c3f-480e-8c27-996c22e0d54b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9451b588-4549-4e29-bb55-2e05962d5e85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd5c2b51-e4ba-4cbf-9b60-0473830ffa19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79f8feb-9895-4086-9e14-f8651f45d85f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58eecd5b-9232-428a-9e68-8a2e3dbdac89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6385c06-3f62-4308-a5dc-088cfa373b8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b127687-19f8-4a9d-a181-efc10b5c1ea9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b3cb3d9-4378-4fbf-84a3-0c94047be0f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "378d5655-ecfd-4ef7-bc8d-e05b3084ba62",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b4dea4-3724-47a7-9d2f-a8fbab141774",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fa15609-6d92-43ea-a237-569061bd4561"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d1759a1-1a8d-4cba-a8db-171d9600c86f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a094359-1414-4c06-a563-fd65365a11ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e4f29ef-15c2-496c-9775-5ed89e34c45b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4204243c-8fa7-4827-8c40-0ec86d1b9891",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f50f9df8-8b29-479e-b5f2-fb9c3c8a95d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31d88848-b41b-4ba9-82e1-39cd79e94c92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33ff21fd-ff76-45c9-9165-f1f13a323d58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4578439-dcd6-4e32-923b-1d5a2f632927",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "686c476b-f6a1-4cda-8ca0-2321fa53b45a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1340a34f-fe98-4a40-9192-0d237eef2f8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1abd1f-1d78-4acf-babb-b344c213d71a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a17d700-f36a-42da-babd-de632f783498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3ffc373-1852-4a27-ac30-a1b87e63ea6f",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "addc8281-03fe-4976-824e-31005a780718",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5e4c2b0-f1a1-46ed-9054-c5ec22d8e029"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6333a572-b573-45fb-a22f-b180086b0cf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70c541e9-41a9-4284-a069-e77924a07deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a30e423b-2c8d-4a7a-a107-ff97499bb3d1",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c67f110c-dacb-4838-8a9e-046f17cdbd92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67292a1c-9c32-44d4-a201-b9728d5173ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf5e7ae2-9822-4857-afe9-194002a51323",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b0d301a-d4a3-4bbe-ba62-5068f8c08143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4429a7ad-3664-46ee-a3bb-cb9b879c3b2f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f5cb917-dbf4-468d-9ed5-e0f83d132934",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8133a91d-760d-4457-a819-bf4a136ba2ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f0afa5d-9f83-42f3-b36c-0658329c4b52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4f5f83c-573e-4278-9511-a844b1682cc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ab669b8-3fdb-4eb6-b17a-1fa615f1ea59",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f758f3-c28c-4f15-9d47-5b6420e51eca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f56bd90-2c94-4116-acc4-e95263c54549"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bbc9e20-334f-46c4-acd4-cf63d5c60f60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06bb4a27-87f0-4020-8b75-cf83e95ae0e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cde865d-c547-4d0f-b719-8399cddcfd88",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a905b8-e14b-4f3e-b6a9-18f9e0173e42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ef0fd76-5285-468e-9ce3-f95f67b08e34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02b94b17-4299-41b5-8cd7-66a558c7376a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "203a0ece-5da3-4239-84bd-94c7ad132e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce11473-6c5d-4cda-9ff2-10d73a1c6cc1",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8c022b5-bd55-4715-8735-8f32b6580b99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9df883b0-0ca2-45d6-af76-a3703f274395"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f26e5bc-139c-4938-8965-9be1073832c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "320e66e9-974d-4693-93f1-5173b98bd6a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85cf7944-1d2d-4e60-b0dc-32aa1374de6c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcfd6b8d-4496-4a1d-a9f5-9eb774f62b0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d99d61ef-cce3-402a-8369-23e244f400ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c4c788-7fd2-48e9-9e67-e8c82e969efd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "006da7e2-6a94-43b4-b7e3-a0fdbe0c6166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b64c2046-f89c-49a8-9376-bc9695110436",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1c7c2e-588e-429c-8615-7ea45ebb381f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1b32743-b1fa-4d61-b7fb-cb0dbf787ced"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d84f30cf-b3e1-4abd-bdd7-2a24926542ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "195f66b2-5be0-49a5-a38e-763ded1b4a24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "431d4c15-3613-4ac5-8e2b-d97aa221f434",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91fd92a8-4fb0-4c4c-9715-8b0d0c361d8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b97756c-032b-4c7e-bbce-43e42a0bdf2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c8eafd8-9b23-410d-8b41-630bf3a0b300",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3a88f8c-7baa-4f3a-b847-5c3a04599d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be706e1-c350-4868-b5fc-4f939e27a819",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac3ab351-8617-4e42-8785-ebd0fbd5b5d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57cce611-08e5-485b-82ca-6e76e0f883cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e5805a4-eef4-40c9-950c-79c89a463e2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7fc5410-c7e0-42e6-9c37-6577d944f3e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d15162-31c3-4631-98fb-7dd84c16e6db",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58e623c-3944-4f2b-82e1-4af9a3e07480",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe9d6307-54af-444d-bd44-8500231210bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0497c821-23d1-443b-9cf0-f8c70bc30e0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f64364e3-27b2-4a5b-94b7-f6c4ec398506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0464fa8-0b6e-48ad-8ac0-972c0c881473",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a75d0c-4db7-4223-af97-3eaba536315f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04f0380e-2412-4d8b-be6c-ab2019d80acb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d59e90a-1db6-4719-b468-009a0e8162e8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "654bb6d6-cf66-49b6-abb0-8539f4f4b9a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "112aec7f-846c-4c31-a248-c8f28afc15db",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ca6434-60c7-45c4-9285-45eb7c04085d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41ba291b-e4fb-4829-a9a9-ab109c45d9b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b991acd6-57bd-4678-9c2b-8b7c0c542479",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa31c647-226c-488e-9b1d-444a05c18886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6fb8709-5f9e-4698-b55e-455ff0f722eb",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2604c5c0-7dbf-4798-a934-0fb99a356e55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9248cee-b655-4de1-b044-cf66daa9195c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79aef59-09c0-4c04-b99a-1113762c1c99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f037eff6-839a-4707-8357-8a45925c4eb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaded2c2-1714-4a05-a831-0dfd72967c2d",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d8751ed-82e4-429b-859a-b2fa6b115332",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e307cce-6f48-4b7a-a6f7-3015c29a1a8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d162172-2868-41ac-a52e-99e720f81927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12c6184b-61f1-477b-a0d1-523075461855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2579be0a-40d6-440b-95ea-3698ecb7103c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "651af984-d987-4e74-a728-211f0390401a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "123ece80-0106-4bdc-94f4-47893d15f9b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e06301a3-32c6-4c78-8886-15da72682f48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daaeee15-ed31-4c91-b3ee-730572ceeb14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bea5888-0c85-44f7-826d-0b249dac04e2",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a96859fb-7f7e-4e1e-94dd-5b7ad40a9725",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33cd8008-a227-46ff-97f1-55563bc6452a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "389bc776-e30d-4034-81e6-e339c346dadc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af45c48c-2fc2-43a7-aea6-7b22166ea033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a5e5697-90b6-499f-86d3-96eae68105e4",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76295a0f-751b-4f01-be72-644743e2f1ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da0b838e-67f2-4f58-baa9-a02f9a9a82c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08505755-8e31-4a1c-9eda-57bac13e07ff",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb3640f-a32a-484b-8c4b-aa27f0c268a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eecf05c4-af16-4021-ab5e-197bb4f167d9",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5a79c4-1f78-4082-8523-c7b1bc97f010",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64056da9-d750-4227-b9fa-cf61c749f18d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb8c419-bdde-4609-b10e-9c81f61615bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3756b54b-7db6-43c9-b30c-a075274e630e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e83fb34f-0e55-4fca-8bd5-4cb08395e56a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ecc8ff5-230b-4f4e-adee-5bcb194de8ca"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4c2e3b16-11a4-4b73-b0c7-d0f3befee730",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "939a975f-3dc3-46e9-836e-65b1ff839cac"
                    }
                  }
                ]
              },
              {
                "id": "1bf01193-5890-4a30-9ab0-3f7cc6cd563f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6645b5f3-e1d6-4bdf-bc4c-2edd49377ec1",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ab225c-fd12-4d0b-b007-d8bb08ca9c02",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2cbc8c55-e43e-4f40-bc5b-6d682af025ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7089f73e-21bf-46c9-a211-4ff5694ba884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fef7a0cb-f37d-4a33-ab6a-cab5b37b2398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b9647b7-6f58-4be2-b031-794d7c6a4461",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be6a440-ea4a-401a-aad2-0586b4c92b54",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4b202af7-74dc-4f7e-83f2-c2ed3cb0e946"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d77f1a94-f50c-4681-b5fe-44b93d59a468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "39a4ca42-4b6f-4222-b86d-582842dd3166"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb4d441e-217b-407e-991e-766883733fc6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6bb6b4c5-31b7-4b7e-8547-fc028e163465"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "06c27561-13cb-4d62-a066-eff1f7a662d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3df62aa8-5fd3-4316-84ea-f5fcc9c8c65a"
                    }
                  }
                ]
              },
              {
                "id": "128815e5-bd93-48c0-aa75-5833c19805ba",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "53d0ea5c-78f2-4e69-85e6-f2fc6b3b9202",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e987be-fc6a-4282-92a2-87245883c24c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "9a6eceb6-206a-4c24-a8f2-87d9592cb111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "303f5b45-e6f4-496e-9226-d7e5084f85ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6fb84cc-c880-4d14-9bf0-d18447b489c4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d5c252c6-7fea-4236-8b96-c8e2712eea50",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d0883496-2ee4-45ee-9415-91c28f982cca",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7845e3a0-1149-49aa-968d-d0122d3b461e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "71baf209-0877-439f-a9de-6fed0ff9d2b3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff444603-54d8-42f0-a155-1ad77943aab7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8910d5cf-4172-4c21-9438-4a04c762f360"
                    }
                  }
                ]
              },
              {
                "id": "ed60fe38-1e56-4206-9584-5a7b130cafc7",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6050eeab-bb75-4186-8459-f9a39c3edeca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "33ca6429-0b1d-421c-ba31-682a9f21dc4c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "10aea68a-da10-49b1-a546-9c09a4da7adc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bf77e2e3-db34-461e-a60b-fb983ef9553e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2a3be909-fd5f-4a0a-bbbe-fe41e9fdb638",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "0ca19b6f-dea7-4e51-91ba-f58aaec90203"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6c416359-f7de-4a08-bdfe-16554b0c8c81",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "66c91b4f-4441-485e-844e-cedcad3e8e60"
            }
          }
        ]
      },
      {
        "id": "b2ef5a73-dc73-4a9d-b4ea-8d30f5dc1f8a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "8ca5d81c-a130-4ce2-bdd1-829d639117e0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e31a4adf-9384-4c39-a819-53cf8f0fdce5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a92a19b1-ef06-4b32-a9b7-d935622ed5a6",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a391b64-e33e-4edc-a5de-42de56cc12fd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "94ab6ae6-49a1-43cf-8a9c-276ebee6565a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63cac858-6f20-46a1-b7b4-f5959f43d1a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0de0811a-9e9e-4721-9280-329213899c54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "319d22bf-bf3b-4078-9f2e-c105cc75dec4",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ce8c5b9-73cf-4e73-b03c-6fe3bc5d4159",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5ead2353-37ed-412c-9a31-f11e12e0955a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b88bc42-9193-45cd-bd51-69ea8149d2ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2cf6f9cb-f5da-4950-afc7-819e93dacac9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5eaa9589-46bf-40bc-9966-5564bee16765",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "22860add-23ba-49c8-a0d5-c6aed75f1da7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c510d9fe-ac37-486d-9d5b-00127d5965f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ef5b640-85e2-4494-9129-77184acfb613"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "57941a00-30ec-4e31-b19f-856d96fe38a9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e68e3573-c9f5-4c20-b11d-7bc6dd0bea5e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f5ffb1a1-6e1e-4006-a960-3a66a27df0ac",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "85c7cdb4-145e-482c-abdf-d34176d96833"
            }
          }
        ]
      },
      {
        "id": "2dd04181-be02-4005-ad9e-cc42cb4847ec",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "3ce64d25-7ea3-4bdd-b29b-c859939ab6fb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a6d24bf4-8c34-4b00-8ecd-367302ef7bd2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d348387b-d094-4ef8-8958-dfda4c1f5daf",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4bc8b20-3e95-42ed-8994-0c42482dc40a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ace5d943-61a7-4825-aa96-e768ee59c6ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11db1c7c-b1c1-4ad2-88c9-0ca643f2d9b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "77772a2a-08f6-4011-b2c4-7a2382e5a068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08c3d099-73b5-4c18-85e0-e26c8022e546",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ddd8b6-d4fb-4ff8-ac93-4d0a352ce3fa",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e0064dfc-dbd1-42b2-9546-f762246ad6da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "064b34ce-98e2-4605-8572-5a5ab38a7cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e89f16f7-c4d6-45e5-a7c9-4e7c5035eacb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4771a91-bfac-4746-bf38-e2a5592e7e9e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8422feca-69da-44b2-948f-f271651e6884"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe754bb0-8459-4340-80d5-55aa97df338a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e309c57-ecef-4f3e-9fbc-f7e7d938123d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b37a7b43-6ea2-48fc-ba05-1f6f4ebaeea7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e277b1ab-2c92-424b-a3d9-adf38d355cf9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5b2d7ab8-3427-4cb0-83bf-c1f74bdb415c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "31df5fb4-ab6a-4cd6-9cd7-e46143138cd3"
            }
          }
        ]
      },
      {
        "id": "96c3daa7-b108-4635-87b3-943467886cbc",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d982b091-db27-4233-89e1-8df2c034dc14",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a179ded4-4e40-45e0-b226-bc57a78298d1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8ae6bb2d-e8f7-439b-bd5d-c00a8e58d4c3",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3443be33-2893-4d01-8649-ea3ff7c89ea1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce8cbafa-1fa3-423a-a0ca-ce74feb070a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9fa55aa-080c-4fce-b251-327e48c651af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1b13f4f2-0785-4fe9-8d35-f4e8991168e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95caaff5-82f0-440a-93db-094398c6a6b9",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63bceffc-fda0-45fa-be67-fd42d19e2fcb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c29328de-fa38-4dd7-ba0a-2480ddbab005"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2541e7b-5aaa-4617-bd49-1d0af32e39d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0b92b218-41aa-4a1a-aea1-263136e2c9b2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f1298eef-1da7-4e35-a129-cbbdec233658",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e3cfd3e-64b9-40cd-a986-152047445a4f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c3e74515-1b42-413b-a5b1-5ff1f5960f03",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c034bb3-b9c7-45d3-b0e9-9b50a24904fe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8999abff-edbb-4c25-a70b-537ca253bd24",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8bca7dda-af31-47a1-aec8-58fdd63060b3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "058e1692-fe90-4fe4-92e7-ebe9b3024188",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4a3d094c-ffc8-4524-9523-9468cbf7e13b"
            }
          }
        ]
      },
      {
        "id": "af3859b4-0e10-48bf-b983-47548802cd36",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c555e019-719f-45d2-842e-8e2a0f70599c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c2da006d-7322-4f8a-bf61-a71b4fb405e1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6de08cd5-93d9-4f48-9e0b-f9d22100fedf",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b8f8cf67-1ca2-48c9-a1ea-7784ca5cdaeb",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "361bbdcd-822a-468d-92f3-ee26705e5509",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 298.2846153846155,
      "responseMin": 6,
      "responseMax": 8322,
      "responseSd": 949.8412355968952,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1680654690678,
      "completed": 1680654779030
    },
    "executions": [
      {
        "id": "aa62829e-75a3-4321-84bb-1800301adbce",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "70d47aec-e07d-4896-a891-bd306a3f1f68",
          "httpRequestId": "5481bbdc-0f6a-4b22-ba64-04b5fc4c4010"
        },
        "item": {
          "id": "aa62829e-75a3-4321-84bb-1800301adbce",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "101a2372-18dc-4fc8-88db-a89253713cb4",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 0
        }
      },
      {
        "id": "7d733b9e-9800-400b-9e2d-b921f05a5818",
        "cursor": {
          "ref": "b71590f6-e7a2-437a-bb1e-80879c9c8442",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f6a9b8d6-1147-4ec6-99e9-f86a505495a7"
        },
        "item": {
          "id": "7d733b9e-9800-400b-9e2d-b921f05a5818",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "56c3b310-074b-45ea-a741-c873872b4fa1",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "9154e71d-a553-429d-b6d2-6f3a5b1a20a8",
        "cursor": {
          "ref": "11419d8e-c613-4548-8bfb-96d0225e79e7",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "39560414-e16b-4851-a439-54f4b03911c7"
        },
        "item": {
          "id": "9154e71d-a553-429d-b6d2-6f3a5b1a20a8",
          "name": "did_json"
        },
        "response": {
          "id": "eb0397ae-ca7d-4978-b4cd-08f323c3a9ac",
          "status": "OK",
          "code": 200,
          "responseTime": 249,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf8ba30-707b-4edc-8d4a-6bffcafa0044",
        "cursor": {
          "ref": "2e7012c4-b06d-445e-97b5-62e42aa73ae5",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7eadb224-fcf9-4034-9b4f-02017358f2c8"
        },
        "item": {
          "id": "acf8ba30-707b-4edc-8d4a-6bffcafa0044",
          "name": "did:invalid"
        },
        "response": {
          "id": "cb2bf457-0447-461a-b5b9-ccaa5cae03f5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1182,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "acf8ba30-707b-4edc-8d4a-6bffcafa0044",
        "cursor": {
          "ref": "2e7012c4-b06d-445e-97b5-62e42aa73ae5",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7eadb224-fcf9-4034-9b4f-02017358f2c8"
        },
        "item": {
          "id": "acf8ba30-707b-4edc-8d4a-6bffcafa0044",
          "name": "did:invalid"
        },
        "response": {
          "id": "cb2bf457-0447-461a-b5b9-ccaa5cae03f5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1182,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "b94ed510-f938-4f47-b56a-89eb23c21abd",
        "cursor": {
          "ref": "6274f241-226f-4411-acc1-e0e0dea7985a",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9fb610a6-e918-4f68-ad72-428060f6d19f"
        },
        "item": {
          "id": "b94ed510-f938-4f47-b56a-89eb23c21abd",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e109ad62-b10e-4ba6-8b14-2ccd96daca17",
          "status": "Not Found",
          "code": 404,
          "responseTime": 41,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "628871dc-6dae-4348-9972-044427dd6ab1",
        "cursor": {
          "ref": "518d5a2e-b008-4462-beb0-b1281e1e7261",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d01d7d24-96f4-4c1f-bd36-1f7f463eefd6"
        },
        "item": {
          "id": "628871dc-6dae-4348-9972-044427dd6ab1",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "f36a04b8-c06c-48a3-ba4c-6509a8e2285c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dd80728-3c3a-4d30-9e18-5e119af98c35",
        "cursor": {
          "ref": "0ef73cae-7979-4762-9fee-285f06748c2e",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "93589064-27a5-42ed-9dd0-7360dbacd1a6"
        },
        "item": {
          "id": "5dd80728-3c3a-4d30-9e18-5e119af98c35",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "6e50dabb-1d03-4c51-8d2d-ac7b53a51ae0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "c01b7880-8111-489a-b02a-967425f19104",
        "cursor": {
          "ref": "fd45f6d3-a033-407e-8dda-70e0fed2bae1",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cef46276-29f4-4f1e-8e91-67e72f81e9df"
        },
        "item": {
          "id": "c01b7880-8111-489a-b02a-967425f19104",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "42c5cda3-96ad-437d-ad47-2b1dbf310199",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "c01b7880-8111-489a-b02a-967425f19104",
        "cursor": {
          "ref": "fd45f6d3-a033-407e-8dda-70e0fed2bae1",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cef46276-29f4-4f1e-8e91-67e72f81e9df"
        },
        "item": {
          "id": "c01b7880-8111-489a-b02a-967425f19104",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "42c5cda3-96ad-437d-ad47-2b1dbf310199",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "28d9f11e-26d0-44c4-980b-08fe373c2ffc",
        "cursor": {
          "ref": "17779cef-63b2-473c-aea7-6fc81e44488d",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "92eb1963-0586-4beb-a68d-28aa34c47abd"
        },
        "item": {
          "id": "28d9f11e-26d0-44c4-980b-08fe373c2ffc",
          "name": "identifiers"
        },
        "response": {
          "id": "72ca276d-c6f5-45f9-8de5-5897a05e471b",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29f6c7fa-4103-4891-a14d-b9faae23621b",
        "cursor": {
          "ref": "2a6ab91e-ae86-4424-984d-ec8906a491d1",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e598e2d0-8910-48a2-9071-add9a8d456d3"
        },
        "item": {
          "id": "29f6c7fa-4103-4891-a14d-b9faae23621b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "bf00bd8f-775d-498a-bcdb-3f7bfcc66b3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29f6c7fa-4103-4891-a14d-b9faae23621b",
        "cursor": {
          "ref": "2a6ab91e-ae86-4424-984d-ec8906a491d1",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e598e2d0-8910-48a2-9071-add9a8d456d3"
        },
        "item": {
          "id": "29f6c7fa-4103-4891-a14d-b9faae23621b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "bf00bd8f-775d-498a-bcdb-3f7bfcc66b3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e761f62-781d-47df-a002-1adb838d09ab",
        "cursor": {
          "ref": "3ae8ae0e-7fa9-42cc-989b-cb5828dc629c",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a153d719-6869-430d-9002-b42ae244daab"
        },
        "item": {
          "id": "4e761f62-781d-47df-a002-1adb838d09ab",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "17fcf042-728f-4182-9396-cbaa8c74e9ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22c838b4-7694-4582-a926-b319587d3633",
        "cursor": {
          "ref": "ab4e73c4-5566-48f0-89b5-41bdea9d798f",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "60cf8d0c-f1cf-411d-bafa-43b5e01b7834"
        },
        "item": {
          "id": "22c838b4-7694-4582-a926-b319587d3633",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "05db3c3f-2d8d-4938-98f0-5a22fcf7ee86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76079f40-d181-4853-bb8c-a3023ad7a06b",
        "cursor": {
          "ref": "b553c8bf-f9f5-4eec-9c42-698a9f402bf5",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8e324914-bf88-4a70-bff2-0a4b60465a0b"
        },
        "item": {
          "id": "76079f40-d181-4853-bb8c-a3023ad7a06b",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ab9f1e95-0c5b-48ec-8d3f-0c3a129f318c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82239843-6f9c-4d28-af30-68c9ed6d4725",
        "cursor": {
          "ref": "55efc735-c93e-49fc-947d-a48093643aa6",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "17434878-ebe3-4515-9384-c33f266f4d88"
        },
        "item": {
          "id": "82239843-6f9c-4d28-af30-68c9ed6d4725",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "efc7d8a6-7554-411d-ab11-6f6a95ad6e59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5ea07cb-cbcf-4fd4-a483-e7735f59a569",
        "cursor": {
          "ref": "94da70e0-0d95-4561-8634-22e297c5cbe6",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "eaec3a57-d6dd-43cc-a78b-34c34670dcd8"
        },
        "item": {
          "id": "d5ea07cb-cbcf-4fd4-a483-e7735f59a569",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a23b2fa5-ef25-4dd0-bb92-86a447fe081b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adf8f235-d71b-4311-aad3-3f0d0f73605f",
        "cursor": {
          "ref": "548996a4-f250-4323-aee0-945cbf49b787",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "a1fa759e-2d10-4f26-aea5-7a9d6899da96"
        },
        "item": {
          "id": "adf8f235-d71b-4311-aad3-3f0d0f73605f",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ff6bd694-5597-472e-93a2-472fafe3fce8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "309792e2-cc1b-4010-b230-471273af0b79",
        "cursor": {
          "ref": "cad80463-5791-45c7-9166-d45d431333df",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "00a6d22f-ea63-416d-be1a-766234a81ac0"
        },
        "item": {
          "id": "309792e2-cc1b-4010-b230-471273af0b79",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "56dd3e99-9bb4-45f5-abf0-cc6ef2e43276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "439219b1-e9bc-4e50-9d94-c2a442722791",
        "cursor": {
          "ref": "f928c8db-01e9-4c73-bac3-94befd63fea0",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "7df1193e-522e-4386-9c05-850f4af4b2f9"
        },
        "item": {
          "id": "439219b1-e9bc-4e50-9d94-c2a442722791",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "d59d9ee8-9c60-4a32-98b5-d59d9564dc25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "494c4603-afc7-470c-9be5-e939e0af5e4c",
        "cursor": {
          "ref": "aaa70287-84d6-4732-96cb-fcdb420861cd",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "5cbf4143-07e4-4869-85f1-0edd9363a797"
        },
        "item": {
          "id": "494c4603-afc7-470c-9be5-e939e0af5e4c",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "c7d5c7d0-0ab7-4293-9260-86770acce979",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17a6f33a-3e2d-439f-a6a1-440cf044f39b",
        "cursor": {
          "ref": "a8391607-ca17-4042-87d0-36ee81a44e6d",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "658a1add-0d1d-49f5-a143-2d01e9c1d6be"
        },
        "item": {
          "id": "17a6f33a-3e2d-439f-a6a1-440cf044f39b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "f1273101-8a2d-4f0b-9e8b-6fa6638dba58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f83224a4-94a4-4647-9396-beff7a20f481",
        "cursor": {
          "ref": "0d0d4952-569f-4dd2-9b37-a8c0beb1c357",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d0105a40-eac4-41ff-a314-ee613e54c13e"
        },
        "item": {
          "id": "f83224a4-94a4-4647-9396-beff7a20f481",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "5e481c71-0c7d-4ed8-84e2-7e0e6f5a70d9",
          "status": "Created",
          "code": 201,
          "responseTime": 715,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "459fe8a1-3757-4f49-9493-926e130b36ee",
        "cursor": {
          "ref": "c30f447b-1044-4345-ac89-555e1d4f5764",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "348cb78e-2a78-4ec1-8994-b5370f58a44a"
        },
        "item": {
          "id": "459fe8a1-3757-4f49-9493-926e130b36ee",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "524cf02a-0c05-48d0-bffa-a8dae8c91016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c55dc7-55d6-4d9f-8b5c-ae86ff65a779",
        "cursor": {
          "ref": "30edd8d9-0950-4f14-9e63-5033dfe94603",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "323f18a8-ab77-40b1-8d9c-4e7f402c854d"
        },
        "item": {
          "id": "d5c55dc7-55d6-4d9f-8b5c-ae86ff65a779",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "02652fb2-3bc7-45cc-900d-9035ea44e97e",
          "status": "Created",
          "code": 201,
          "responseTime": 4689,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "8e18a70a-3107-4233-9341-0a23f123ca94",
        "cursor": {
          "ref": "8587fe52-9fb5-44d9-a384-578490faf4e0",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "9d02551c-6e13-48cf-9d89-eebe2d843372"
        },
        "item": {
          "id": "8e18a70a-3107-4233-9341-0a23f123ca94",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "76841808-9c5a-4df3-bb01-58addf07fcd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da0c1e54-9c17-4016-ad6f-128e84496828",
        "cursor": {
          "ref": "61d7046b-02b2-4f04-8fed-7dd34262fd93",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7ed35a2b-65d7-4651-826f-66856225f5e1"
        },
        "item": {
          "id": "da0c1e54-9c17-4016-ad6f-128e84496828",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b7bbe552-1fdb-4edc-bf05-73676cc34f76",
          "status": "Created",
          "code": 201,
          "responseTime": 3201,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "7c98ff65-204d-47f7-9097-899d2dd7a5e9",
        "cursor": {
          "ref": "d68450bf-07bb-4e48-99e7-e2a50e698d85",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d80b5fb1-fc60-4d5f-ba6a-5d60bad0d24b"
        },
        "item": {
          "id": "7c98ff65-204d-47f7-9097-899d2dd7a5e9",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "535c359d-a219-47ea-802f-d1b17a473b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19d38de2-4549-43f2-8426-fbe534e0cf2e",
        "cursor": {
          "ref": "6aa3e7ca-5f79-40e3-adf3-072489df0cb6",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "70a7529b-73bc-4903-a114-d23b3b2e3e65"
        },
        "item": {
          "id": "19d38de2-4549-43f2-8426-fbe534e0cf2e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5adb7ad7-d8fa-496e-8e4c-29e5e0bfc243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be03e983-37c7-42fa-9647-8ccda5bf9b33",
        "cursor": {
          "ref": "bd183a1a-8f88-4ae2-9290-cc50d3595ccc",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "effefaae-52e7-4deb-8796-ac57918bc997"
        },
        "item": {
          "id": "be03e983-37c7-42fa-9647-8ccda5bf9b33",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "02c69baa-7b27-4402-8716-bb7496cca0ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d19439b-451a-4127-a7c1-d96d4c5f65b5",
        "cursor": {
          "ref": "4bdc6817-8ae5-424a-8fce-3f689a02676e",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f6cc6e2c-9869-4331-8b83-4d02066b42d1"
        },
        "item": {
          "id": "0d19439b-451a-4127-a7c1-d96d4c5f65b5",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e08423b2-3fd7-40b1-a9b4-1e6eec5809ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23839294-ca1a-4f59-a632-038fc94d64e2",
        "cursor": {
          "ref": "b3add5e5-e010-4678-81bc-a3e79377a557",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b7339d78-9d25-4af0-a6e2-b52b5ed744fd"
        },
        "item": {
          "id": "23839294-ca1a-4f59-a632-038fc94d64e2",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "afd2ddf3-2376-40b9-9e9a-8385386ee7d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "254eb943-7655-4dc4-8f84-1e4123bba19e",
        "cursor": {
          "ref": "1229dc1b-cc40-42ff-8afd-d679b7b292f4",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "052e9a8c-20e8-448b-9bc4-34d6afce9afd"
        },
        "item": {
          "id": "254eb943-7655-4dc4-8f84-1e4123bba19e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7d5eac22-ec14-46a2-8693-84d98a81882e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a946a3fe-8c6b-4543-a0e5-1d8624cff1c3",
        "cursor": {
          "ref": "8839fa7e-880f-4b80-81d6-712f38219002",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "135a355b-095a-493a-ad8f-83e769f4ed2c"
        },
        "item": {
          "id": "a946a3fe-8c6b-4543-a0e5-1d8624cff1c3",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "fb543c47-02f7-4266-a40b-1ab9761094b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00fbb988-5d2c-409f-a2e4-cd272667ea0b",
        "cursor": {
          "ref": "1efb89c9-03bf-4f17-adbf-5a4bb444bbb9",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "38a58c94-c97e-4919-abb3-9138a947701f"
        },
        "item": {
          "id": "00fbb988-5d2c-409f-a2e4-cd272667ea0b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "d3306fe6-22f5-46a2-ae0f-18b97866e6b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d82606f-b0ef-4b0c-a828-f48e61d7f80e",
        "cursor": {
          "ref": "5fc4eb8d-ca04-49da-925f-d145c8ef7eb9",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "03a09b64-822b-4c08-b571-2b9c48b81fbb"
        },
        "item": {
          "id": "6d82606f-b0ef-4b0c-a828-f48e61d7f80e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d739b972-be65-4380-b726-30c43faf6bdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38ddd6d4-3081-4b31-8030-c3488e5f6e53",
        "cursor": {
          "ref": "fc1fd51e-cad3-49ec-bc02-ba4af38febed",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ed5dc0d5-cab5-48fe-9b06-fb4412773962"
        },
        "item": {
          "id": "38ddd6d4-3081-4b31-8030-c3488e5f6e53",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "eacba171-b795-4eb3-a0a6-0710a0dbc079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "123cbcd3-189d-4c88-86de-90baac60e4b4",
        "cursor": {
          "ref": "8e5b271f-3bc4-43af-8523-3bf9db3c03da",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d6e246d5-383e-46e7-8d22-d0a1bae573b4"
        },
        "item": {
          "id": "123cbcd3-189d-4c88-86de-90baac60e4b4",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "2edaf38d-f7da-4d8a-9867-2ac529da14c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64a5a5e7-b7b0-4ba7-87af-9bdc327812bc",
        "cursor": {
          "ref": "2fff033c-fdf1-40af-a1b4-b1b97a96e695",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f61e8cb4-ce6f-4fe1-9cb3-2298ebd3b5c0"
        },
        "item": {
          "id": "64a5a5e7-b7b0-4ba7-87af-9bdc327812bc",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "94afea32-c48e-4e81-9645-5096092c0176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c84bb89-a8fc-44bb-8dfe-120e7e679587",
        "cursor": {
          "ref": "6747cd8e-0a0f-4dc0-86cb-a8772409dc5f",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ec36b97e-5d49-41d3-b974-2bdbd06bcb0b"
        },
        "item": {
          "id": "5c84bb89-a8fc-44bb-8dfe-120e7e679587",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "05cb7847-5e8b-4a2d-a27e-e5f6758e44fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba7e24a1-168a-4694-8b88-10371359c113",
        "cursor": {
          "ref": "fb812419-15f4-435d-8fac-9b02bdb68168",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "66170284-9f8e-43e7-84d0-b68b44143bd2"
        },
        "item": {
          "id": "ba7e24a1-168a-4694-8b88-10371359c113",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "839a9724-21f6-4dd4-ab9b-898b5863f482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1336fea-04ff-4b0d-9c7b-2e1f4a95c169",
        "cursor": {
          "ref": "eeb8426f-9049-4cbc-a876-e0d36f06b4a8",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a2d69ed1-020a-4c54-b955-f194292c3e8e"
        },
        "item": {
          "id": "d1336fea-04ff-4b0d-9c7b-2e1f4a95c169",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "98b0ee09-605d-4b3d-aad7-00b767cc3103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc5906b-6817-48db-aac5-7077cadf1759",
        "cursor": {
          "ref": "ccf2d309-3994-4e0b-abe5-9ba4df80bb11",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f2fdfdcd-a37d-43e4-a46a-83de15140879"
        },
        "item": {
          "id": "bcc5906b-6817-48db-aac5-7077cadf1759",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "9de5f17a-e08d-45a9-92fa-facb2e8c8504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "036b003e-8f2b-40ba-a565-b4c1fa3e5e46",
        "cursor": {
          "ref": "47c43071-72b4-4453-a612-1cb68b1d1fac",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7c7c472f-f2f5-465f-b861-96fbe0d30896"
        },
        "item": {
          "id": "036b003e-8f2b-40ba-a565-b4c1fa3e5e46",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "8c1ae896-9fe6-4965-b4d5-3c9300e1f72c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb6d0698-588e-4c48-801e-c123176471fa",
        "cursor": {
          "ref": "76b54c0e-7957-48d1-af3d-2bc72d00665e",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "3cc74de4-6663-4792-83ae-ad87b83e5182"
        },
        "item": {
          "id": "fb6d0698-588e-4c48-801e-c123176471fa",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "da503f3a-5e63-45f7-86cd-f1f58a112952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8cd6239-d498-4a8c-86b6-72ac07ac3db8",
        "cursor": {
          "ref": "3c5fe4e8-c19d-44be-9f90-10ad6c1c753f",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "361c8177-8b47-456f-87da-f167303afacc"
        },
        "item": {
          "id": "a8cd6239-d498-4a8c-86b6-72ac07ac3db8",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "98d7f5ee-c000-4766-b69e-6303043ed2fc",
          "status": "Created",
          "code": 201,
          "responseTime": 2102,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "340acdbf-2caa-4cdd-ab14-656dbdd43c23",
        "cursor": {
          "ref": "d98ac133-b34e-47b6-84e1-4771e99f3461",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ee2ebf92-a162-42d1-b031-05eccb2ae5ce"
        },
        "item": {
          "id": "340acdbf-2caa-4cdd-ab14-656dbdd43c23",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "4404285b-b10d-4299-b4e3-06830b570005",
          "status": "Created",
          "code": 201,
          "responseTime": 2701,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "8d314221-0be5-454f-81dc-1491be503919",
        "cursor": {
          "ref": "8a4283c9-350f-4b51-abeb-dcdc356e8fe2",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "745d859c-7c7c-4f8f-b1fe-e8642ffebc81"
        },
        "item": {
          "id": "8d314221-0be5-454f-81dc-1491be503919",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "399394bd-38d4-4160-9985-69af688529bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c216d80-5936-402f-b3fd-d2a666c1514b",
        "cursor": {
          "ref": "03692480-a245-40f9-8d23-4fb8c06312ed",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "4f67f98d-7bda-491d-af3f-33e731de703a"
        },
        "item": {
          "id": "7c216d80-5936-402f-b3fd-d2a666c1514b",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "d210fc14-2a5b-4964-8b77-b9e0aca735f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc3d21ff-51f5-4795-ac95-0d48b4ff87df",
        "cursor": {
          "ref": "b7fbdddf-6eb8-4347-8069-3e80bd9a03a9",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "eb31de70-f5aa-481e-8e31-949c2bc3d42a"
        },
        "item": {
          "id": "fc3d21ff-51f5-4795-ac95-0d48b4ff87df",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1170aa0d-b1a3-4248-af20-2bfc181a583d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d09ad4e7-2aee-4df4-ad2b-03ccd4eb9b0c",
        "cursor": {
          "ref": "d3c1072c-0e60-40fd-aa3c-183dcff2151c",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "0b10e97e-2a9b-4b0c-a5e8-c9989f8933e4"
        },
        "item": {
          "id": "d09ad4e7-2aee-4df4-ad2b-03ccd4eb9b0c",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a1b9c340-ef77-4962-9025-06c25208fc4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db74481f-bac7-4461-8100-0c7a58157279",
        "cursor": {
          "ref": "178a54d0-4116-4f7c-b7d0-2751dbaef5c8",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e340fd77-5620-4b53-918d-b03d3648cd38"
        },
        "item": {
          "id": "db74481f-bac7-4461-8100-0c7a58157279",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "959e5344-6f81-4089-b5a7-2e51884544a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c33de09-e306-4557-a9db-3a0d5c1c0373",
        "cursor": {
          "ref": "64542264-100a-4d8e-9078-c797250208a2",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e2ebff68-e1ec-45aa-9214-bf0873f833d3"
        },
        "item": {
          "id": "6c33de09-e306-4557-a9db-3a0d5c1c0373",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "dc8c8891-1046-4d47-a5ad-0c0636946f34",
          "status": "Created",
          "code": 201,
          "responseTime": 4156,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "9d94d8d2-7e68-4ac8-aae8-716a045b8a60",
        "cursor": {
          "ref": "e0ab49e0-3552-4727-bb1f-27e74ee95335",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "01362dc2-1e5b-4493-a9d1-ef353c56a997"
        },
        "item": {
          "id": "9d94d8d2-7e68-4ac8-aae8-716a045b8a60",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "720c914e-2f7b-4858-9740-abe809edb75e",
          "status": "Created",
          "code": 201,
          "responseTime": 2598,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "86e2f305-995e-427d-8226-a06d725b38cd",
        "cursor": {
          "ref": "c2809954-f7f0-455b-990a-fc3b5e44c2d7",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b1dfc8b8-e8b7-413c-8cbe-baab3d6cbdbd"
        },
        "item": {
          "id": "86e2f305-995e-427d-8226-a06d725b38cd",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d5e8215a-83d2-4d02-b03e-172b92d1394f",
          "status": "Created",
          "code": 201,
          "responseTime": 3955,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "3593ab59-cf98-43d4-bd99-f4a53d76e85f",
        "cursor": {
          "ref": "7b82e788-2d31-4a8e-a185-50569e4d3744",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "f70842a4-6f95-41d5-bbe3-b88be8e83502"
        },
        "item": {
          "id": "3593ab59-cf98-43d4-bd99-f4a53d76e85f",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "1e82876f-8a48-4fca-8b9c-5f204a6b84c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40a9a8bf-10fc-4530-93e2-3d0df658eb7a",
        "cursor": {
          "ref": "33b3d1f0-7880-43a3-b1b5-e966bd4472f3",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "716cf36c-f7d7-4aa8-ab77-308caa99073a"
        },
        "item": {
          "id": "40a9a8bf-10fc-4530-93e2-3d0df658eb7a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "f8bf0d6e-dc0b-438e-a02f-2a3dbd055c95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a889be2c-4d01-40b1-a4af-d693f3b34083",
        "cursor": {
          "ref": "b1d5a671-838b-4155-ac8d-ac389fb0f557",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3a775c60-38a6-4e80-acdf-dc958743a3bb"
        },
        "item": {
          "id": "a889be2c-4d01-40b1-a4af-d693f3b34083",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "12b90028-ed1a-4af7-ba40-39cf5864d81a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "608bf0d1-2b67-49f9-b63a-4a81265b4dbf",
        "cursor": {
          "ref": "997515f8-916f-4fb9-b292-05b242d1e5f2",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "03960aa8-1960-4104-8c5b-dda01b96141a"
        },
        "item": {
          "id": "608bf0d1-2b67-49f9-b63a-4a81265b4dbf",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "aa9060ff-8261-4399-929c-00d6f4e06ad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa8f7deb-e2d8-45d5-9141-1d313a39e95d",
        "cursor": {
          "ref": "0c1a7479-7bbb-4f52-b082-cd0bcc15a363",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d6c3eb06-6469-49cb-88b1-c392b8b613c8"
        },
        "item": {
          "id": "aa8f7deb-e2d8-45d5-9141-1d313a39e95d",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "4a881569-3eb3-4fdb-b75e-6880164c8f68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d34cbd-991a-4668-ae0c-20b4754f41a6",
        "cursor": {
          "ref": "a2ec74b3-0707-4c6f-b30d-a89469aa4bb5",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6a7b5d41-3efc-48c7-bec5-cb38b9f79e52"
        },
        "item": {
          "id": "c1d34cbd-991a-4668-ae0c-20b4754f41a6",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a332e065-c7b4-44aa-9b45-8bf9a0d07f1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d21140c-efb2-430c-8d74-2991b961bb8f",
        "cursor": {
          "ref": "74aebf87-9526-4914-bf47-51a40685b082",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "879493af-1b7c-432e-bc6f-8d877939e7ba"
        },
        "item": {
          "id": "8d21140c-efb2-430c-8d74-2991b961bb8f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2464b8af-e99c-469a-9956-6330105e8374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "732fbe30-6c09-4f22-ad90-ee2d99a792de",
        "cursor": {
          "ref": "6e1cbe90-6d98-4578-ac45-d893cde7dbb9",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "d0f265aa-6b29-4d23-8a0c-304d55deaf43"
        },
        "item": {
          "id": "732fbe30-6c09-4f22-ad90-ee2d99a792de",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "1191179c-8008-4541-99c3-0ca258ffe282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "180b6603-9d6d-41ff-97ed-c1e4bc88e233",
        "cursor": {
          "ref": "0618c404-d5f5-4b7d-aa36-2a6537ed1189",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "44a860bc-8082-47a6-a3b0-e927ab7e051b"
        },
        "item": {
          "id": "180b6603-9d6d-41ff-97ed-c1e4bc88e233",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "0a24958e-2d30-4dd3-8a52-4078506f5106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1e09f81-c279-4ac7-95ab-d6ddbca4637f",
        "cursor": {
          "ref": "bcf17549-150f-4119-89cd-3c70a4219e54",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "cfaf450d-cd56-41df-9448-e396951046bd"
        },
        "item": {
          "id": "d1e09f81-c279-4ac7-95ab-d6ddbca4637f",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "38db974b-131b-40a4-9d48-6b865626b58a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df7b6d18-89d1-44c1-88ea-adf309f878a7",
        "cursor": {
          "ref": "c87ade3c-b382-455a-accc-14325e306f10",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a6238e88-51d0-4a05-a78f-63f39ddafe59"
        },
        "item": {
          "id": "df7b6d18-89d1-44c1-88ea-adf309f878a7",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "db5fbc1e-bcb1-416d-8645-885ef09c01aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a261cb9e-b22c-4eba-8d2c-67cf073f1bdb",
        "cursor": {
          "ref": "08fbb263-4474-4fcc-92ca-049216ad043b",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "79b1dd55-3680-43bd-9c9c-34fc7fabd044"
        },
        "item": {
          "id": "a261cb9e-b22c-4eba-8d2c-67cf073f1bdb",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "4982e694-9814-4859-8cc7-c8a066962c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97161dbc-5b24-4139-a277-822e43f4bac6",
        "cursor": {
          "ref": "49939f63-d316-42d8-8935-eb45e796f62b",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "95d8e991-cf21-4cbc-b108-6277162e674c"
        },
        "item": {
          "id": "97161dbc-5b24-4139-a277-822e43f4bac6",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "ca69609a-8544-4675-a42a-dfa8bdc2668a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b5ab1eb-8f7c-4fa1-ae3a-c1608ffb7836",
        "cursor": {
          "ref": "9386e4be-00a0-4828-98fa-a3dee05cc6f0",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "b273e68e-5107-446e-8fec-d24a088ed5d2"
        },
        "item": {
          "id": "2b5ab1eb-8f7c-4fa1-ae3a-c1608ffb7836",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d2f0cf1d-24ec-497a-b63f-731bb6f14713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "957277b2-cb15-4228-88fb-70dd544b200e",
        "cursor": {
          "ref": "142076e0-dd96-4370-99da-99abe2915ffd",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "3457389f-d6d5-4380-bb63-c40edf48a2d1"
        },
        "item": {
          "id": "957277b2-cb15-4228-88fb-70dd544b200e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "cea57278-b0c1-45a8-9024-13866584a8f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ec7067-1274-42c2-996f-cb85977090df",
        "cursor": {
          "ref": "65f97203-d511-44e2-800d-913ba60087c2",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "cca58a1c-2aee-44a3-b418-17b54b5f2d2c"
        },
        "item": {
          "id": "73ec7067-1274-42c2-996f-cb85977090df",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "fe685c3c-f463-4781-a03e-e95d6f4ece17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c90347ff-4001-4f1c-8385-34b95473815b",
        "cursor": {
          "ref": "82c5897c-e1ac-4901-932c-e51ab7da8bed",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "9b00e953-23c6-43f5-9175-53d3e54174bc"
        },
        "item": {
          "id": "c90347ff-4001-4f1c-8385-34b95473815b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "0f3a3b7b-343b-44da-ab38-dd869d9dae65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 295,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd38294b-55f2-40ee-b36b-ae764b0deac5",
        "cursor": {
          "ref": "524a3fe0-b19e-4751-8d55-89ae75ffc619",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e4c2be2f-ed44-47b9-9c98-43d7972309b9"
        },
        "item": {
          "id": "cd38294b-55f2-40ee-b36b-ae764b0deac5",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "35754f93-41b1-46cb-b6e1-c2bb50d51b34",
          "status": "Created",
          "code": 201,
          "responseTime": 2743,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "f5baa65b-cc02-47fd-ba21-2a0a9b6c3b8b",
        "cursor": {
          "ref": "4e262f25-79f9-4571-b81e-2b6d810e01b0",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "76207ac9-bb2d-4b35-8aa7-50af81f64068"
        },
        "item": {
          "id": "f5baa65b-cc02-47fd-ba21-2a0a9b6c3b8b",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "898ca590-ec50-4a23-8d7e-640efb1d39c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea00df91-dd65-4014-9465-3182dfd660de",
        "cursor": {
          "ref": "f7b40517-dbfd-43ae-a7cd-5c6b4a587ef9",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "baa0ef2e-4bf0-421f-9888-4425a3a46490"
        },
        "item": {
          "id": "ea00df91-dd65-4014-9465-3182dfd660de",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d032a649-a2ef-43ad-8aac-5a8da4992354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1e07166-e351-4a13-b8fc-2947286f885c",
        "cursor": {
          "ref": "72ef1b39-80e8-4339-907b-70f1619476ee",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9c8d1522-3384-48c6-9421-a332623f7894"
        },
        "item": {
          "id": "c1e07166-e351-4a13-b8fc-2947286f885c",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "adc90aac-c236-4a8b-8eaf-7f19682cd381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73627c6f-aae2-4181-b608-72500a630f9b",
        "cursor": {
          "ref": "fe45f44f-5be7-4c43-ad93-8c52e69be1ab",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "71ca3037-e6a3-4587-819f-e7d479410940"
        },
        "item": {
          "id": "73627c6f-aae2-4181-b608-72500a630f9b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "76e41f96-18b7-43f9-97ea-c92d15aa080a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2133b33-4d97-4fbf-a603-a82dc2d3795d",
        "cursor": {
          "ref": "c6ad8262-eb73-440d-a40d-b31dc1df6903",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "bdd28584-afc7-4438-aad3-695e4469c440"
        },
        "item": {
          "id": "a2133b33-4d97-4fbf-a603-a82dc2d3795d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "8b70381c-75bb-4d85-96c2-efd231e9c989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4e598ae-047a-42a2-9e18-c070fa76855b",
        "cursor": {
          "ref": "71cf2660-b2ea-48dc-9e51-184e0ba03e88",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "eebc9d9f-3b65-4608-a293-fb07c8e26893"
        },
        "item": {
          "id": "e4e598ae-047a-42a2-9e18-c070fa76855b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b783a635-3b9a-4e92-a623-03adf515f523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00487fdf-bd48-4a27-81b2-c425a82ad0d8",
        "cursor": {
          "ref": "90614ca0-408c-499f-b81e-bcfd41ab44cb",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b49fd43f-0b4e-4c6c-9ad1-65556d7cc7dc"
        },
        "item": {
          "id": "00487fdf-bd48-4a27-81b2-c425a82ad0d8",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "89d4f9f4-41cf-4e04-9449-493097b294a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1959654c-138d-4224-a159-cadbad8fd452",
        "cursor": {
          "ref": "a43406a9-c273-411d-8d28-e0fe3a10fd48",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "4b6c1da3-7ed6-4128-a1e5-ef603a7080a0"
        },
        "item": {
          "id": "1959654c-138d-4224-a159-cadbad8fd452",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "478a3ce0-3554-49be-af45-07871b3b062c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1c004a1-01e2-4d71-a795-1f576431d588",
        "cursor": {
          "ref": "0cff2822-b52e-46e3-8fe7-d72e0cfe1236",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "67896242-7fb3-4282-a92d-74f7086fe3e2"
        },
        "item": {
          "id": "f1c004a1-01e2-4d71-a795-1f576431d588",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f1b20bfb-51a1-42fb-9336-7b2c22707879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9694be9b-eb18-412e-874d-7b86d53e8fee",
        "cursor": {
          "ref": "487f2077-2435-4775-adbd-1f751387354a",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f55c7819-2034-4aa3-86b6-5c42b662e4ac"
        },
        "item": {
          "id": "9694be9b-eb18-412e-874d-7b86d53e8fee",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "1d5b25c9-8c75-4582-84bc-313aa8bce727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c21e363-6d2d-404b-82c4-4e74d5725e7d",
        "cursor": {
          "ref": "698dcdd8-acc6-421a-a8c9-cecc54b746ab",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "917fdca4-0c07-4b56-8428-337374ba34e6"
        },
        "item": {
          "id": "7c21e363-6d2d-404b-82c4-4e74d5725e7d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "5e538dd3-0237-4627-bfdb-6974f2fcb89d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "415fb593-8048-4282-a43e-a31267042cd0",
        "cursor": {
          "ref": "08a7f9b3-aae7-448b-be31-dea7d1d5460f",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "d2801d52-27d1-44f8-83bb-11633e634b09"
        },
        "item": {
          "id": "415fb593-8048-4282-a43e-a31267042cd0",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "da7032b9-0cad-4a55-9b4c-96f971e9ab50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12d944e8-adef-446a-89e2-2976fd90cf74",
        "cursor": {
          "ref": "c495bea8-77f7-4be9-ba3c-a9277f148b9a",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "86f4e635-73a3-47be-9129-161bd39775d2"
        },
        "item": {
          "id": "12d944e8-adef-446a-89e2-2976fd90cf74",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "cf639034-5e32-4a4f-b5f4-437fb9884e83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21bbb6f9-57d5-4ab7-9c7f-b2c3ebc8ec6f",
        "cursor": {
          "ref": "707d1464-c69d-429c-80b9-c766d17c7b74",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "83a066a4-6410-4a3a-a593-4e0ec40cb251"
        },
        "item": {
          "id": "21bbb6f9-57d5-4ab7-9c7f-b2c3ebc8ec6f",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "8ecb21bc-9a61-4846-9621-403cd3ffa56d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daf5cba1-3a08-4515-a057-73bae90fee85",
        "cursor": {
          "ref": "3f570364-da96-42db-ab4b-2e58d554c549",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5aedd4f9-bc06-40c8-937a-04b4c4b9bf89"
        },
        "item": {
          "id": "daf5cba1-3a08-4515-a057-73bae90fee85",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e2ccce66-7b47-4b58-95f6-4a200e39ac8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "710f4841-17f3-4fce-a88a-deebd434c92c",
        "cursor": {
          "ref": "ad338145-0d15-4f28-9261-a877246eb3ad",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c0567795-64e7-4c9d-a9d3-ee528b32c0d0"
        },
        "item": {
          "id": "710f4841-17f3-4fce-a88a-deebd434c92c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "cc025117-4a97-4e04-8813-e21f9981daa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9db7ee3-3d13-4956-ac3b-ea9ecef3a32f",
        "cursor": {
          "ref": "d90fa414-e41f-418f-8773-dbb1c2aeef51",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f4ff32b9-6164-4bc1-af1f-e1a8cf2cd317"
        },
        "item": {
          "id": "c9db7ee3-3d13-4956-ac3b-ea9ecef3a32f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "784a5f09-04e0-4321-9849-2e2a66b4a1ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "129d8bf6-8427-413f-9588-69719a068bb6",
        "cursor": {
          "ref": "b444b733-0072-429a-aa5c-a0fae82c27e5",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "31661a57-685d-4b9e-bacc-f61082f0ad70"
        },
        "item": {
          "id": "129d8bf6-8427-413f-9588-69719a068bb6",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "1b811f0d-59a6-4fd5-9979-7fd7138ef342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46f2b58e-e851-4092-af3a-b7dcfe48be12",
        "cursor": {
          "ref": "35ce4192-ad6f-439b-ad18-7742a2acacab",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7fe14366-4b4d-4b00-8ebb-b8a5d671a859"
        },
        "item": {
          "id": "46f2b58e-e851-4092-af3a-b7dcfe48be12",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "38b8376f-de06-4b1e-8caa-e43c3fad8d28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "578843c1-18e0-4867-9f68-3dc257198473",
        "cursor": {
          "ref": "001e86ab-76c4-4ce7-9775-d48829c54a67",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a034e9d6-7958-440c-96a8-e3308dd95484"
        },
        "item": {
          "id": "578843c1-18e0-4867-9f68-3dc257198473",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4c5a6f9d-bc51-441e-a23d-d1b85f3aef84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4468e6c1-d4d2-44b7-8883-41694aa25a99",
        "cursor": {
          "ref": "9247a354-5843-4052-9b17-08e17ef33c62",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f24ef969-c676-43d7-9198-5abe3258f79b"
        },
        "item": {
          "id": "4468e6c1-d4d2-44b7-8883-41694aa25a99",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b60d33b4-c89c-4181-aa15-073fc11035f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d6391ca-2085-4ef9-a3cb-1724ff1603d6",
        "cursor": {
          "ref": "36d1890b-4801-428d-b386-380d74a534ee",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "46a1cb13-8edc-4e25-810b-02e6dd4cf4f9"
        },
        "item": {
          "id": "7d6391ca-2085-4ef9-a3cb-1724ff1603d6",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b844b588-18e3-46ab-91da-0718bad77c85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9996b289-afc1-4e3e-8290-6cf4b2b06edd",
        "cursor": {
          "ref": "cfe0d4c7-5be5-4ac1-869c-9ceffadceb90",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3b058378-edb6-4b80-af4b-3f0967c6287b"
        },
        "item": {
          "id": "9996b289-afc1-4e3e-8290-6cf4b2b06edd",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "5a5d438d-aee2-4835-adfe-74c7cc93a40d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf9f5509-dddf-43ef-8755-cd4e8f653c79",
        "cursor": {
          "ref": "946d3873-fa1c-4409-85a1-4b9625d92791",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "e477b45f-381a-41c1-bb60-20818844e98f"
        },
        "item": {
          "id": "bf9f5509-dddf-43ef-8755-cd4e8f653c79",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ccceb7b4-9d68-4e47-8012-8a4381d87c09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e528152-cc7e-4851-aefb-2bfa8d8347a0",
        "cursor": {
          "ref": "0e46b641-0b0f-4cf2-874e-0de90f0f82ed",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "4b9c6af8-440c-4a68-9372-4b97c4651a10"
        },
        "item": {
          "id": "2e528152-cc7e-4851-aefb-2bfa8d8347a0",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "55462b7b-1a91-4a98-830b-5ef8988640be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df1462d-4b4b-4977-8d1e-91502923b102",
        "cursor": {
          "ref": "0bd7597b-d106-4255-a907-45342031b28f",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "57492af4-7fb0-4c01-8a04-4f6576afae79"
        },
        "item": {
          "id": "4df1462d-4b4b-4977-8d1e-91502923b102",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ac06727e-123f-4cb0-86da-a53568b533db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8518c809-602e-4e2b-be86-7d9271ebc975",
        "cursor": {
          "ref": "0af03dff-e22b-4cf1-8dcb-d3809a0bbe70",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "bcd84d6f-d9a2-42a8-8605-d6b03870e048"
        },
        "item": {
          "id": "8518c809-602e-4e2b-be86-7d9271ebc975",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "0a85ce9d-719e-4d69-bd32-c23eb5ad230c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59c16725-b27b-4fdf-bbad-a3a5ec1d53d1",
        "cursor": {
          "ref": "f55ad8ff-b444-4596-82d3-79c34d59cc2d",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "bd585724-fc9f-483f-a4de-a814b9616c19"
        },
        "item": {
          "id": "59c16725-b27b-4fdf-bbad-a3a5ec1d53d1",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "35f1c26f-479a-4337-b2a2-5e1e7581693c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94c9ddc5-769f-481f-95d5-c00574b21859",
        "cursor": {
          "ref": "1e13d1ab-2141-4be5-9d96-23cd9619cc3e",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "898874b7-c0e6-48c7-8294-c1e5b4a1ff17"
        },
        "item": {
          "id": "94c9ddc5-769f-481f-95d5-c00574b21859",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f4738619-2454-4e82-be12-d6e113a87dbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90ec58a1-731f-4f75-ba3e-56676d0b08f2",
        "cursor": {
          "ref": "fd714204-96c7-4432-9b24-3ff3b0ba246e",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e17b814e-547d-4e55-b88e-d61ff33f8b68"
        },
        "item": {
          "id": "90ec58a1-731f-4f75-ba3e-56676d0b08f2",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ca3cc381-fc5b-438a-a2ce-0fa667b70a1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c491244c-79c2-4961-9df5-988b5c3d886d",
        "cursor": {
          "ref": "3be0230c-55ae-4c8d-ab65-94b841e0fd7f",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "84b6a7d3-3393-4ad0-a9c3-961c38b9cca7"
        },
        "item": {
          "id": "c491244c-79c2-4961-9df5-988b5c3d886d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "9fd990a0-d630-4154-8a57-8a1273919772",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "ba2d7e07-b726-46ef-82af-f63ff5e02995",
        "cursor": {
          "ref": "3226a4fc-58cf-46b0-aa3a-db99f5fc41a2",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "1617834b-0955-4d77-8a48-d21e9d72ae5b"
        },
        "item": {
          "id": "ba2d7e07-b726-46ef-82af-f63ff5e02995",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "eebae263-03d7-4756-849a-c0c5b50e167b",
          "status": "Created",
          "code": 201,
          "responseTime": 6555,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "68a207a1-1107-4497-9b08-86fe6c9eaed7",
        "cursor": {
          "ref": "9ebec190-47c8-4ff4-95cf-f987cd3f6b32",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "16380644-1c11-42aa-ab15-a8605a0a86e4"
        },
        "item": {
          "id": "68a207a1-1107-4497-9b08-86fe6c9eaed7",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d53b5c33-366d-40a3-aedd-d1ae77ed5769",
          "status": "Created",
          "code": 201,
          "responseTime": 8322,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "843b4317-bec0-4962-a24b-87d7f56ab06b",
        "cursor": {
          "ref": "b7226084-3b9f-4d5c-96d2-c09d15716854",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "6e687b4b-72b1-4659-bbb9-6cc348cd223d"
        },
        "item": {
          "id": "843b4317-bec0-4962-a24b-87d7f56ab06b",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "4526d985-ef90-4e57-a4e9-c90b98f7d23a",
          "status": "Created",
          "code": 201,
          "responseTime": 2713,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f085400-3211-45b7-9ba4-d34108b48e7a",
        "cursor": {
          "ref": "65ed3b22-a1d2-466c-a587-81d14311ceb1",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f87f3646-1345-47a3-8795-c655529f24e7"
        },
        "item": {
          "id": "6f085400-3211-45b7-9ba4-d34108b48e7a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "96c3c570-8ace-41f4-9198-2e4c2a24e397",
          "status": "Created",
          "code": 201,
          "responseTime": 2591,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "efeb5f65-de21-4060-91f6-fa7ab1009aec",
        "cursor": {
          "ref": "95893ee8-e34f-4726-ac56-80b4e997677d",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "bb7790cb-68b0-4c45-b132-816777ee2fe6"
        },
        "item": {
          "id": "efeb5f65-de21-4060-91f6-fa7ab1009aec",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "2ac24cd9-8d45-499d-b01a-2f91c108201f",
          "status": "Created",
          "code": 201,
          "responseTime": 2513,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d095db9d-5bfc-4320-88c3-a95a123a6989",
        "cursor": {
          "ref": "0d8dedea-c542-4e6e-a71f-aa136c53fe12",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "398859a8-1982-4bd3-8952-51bc090422b7"
        },
        "item": {
          "id": "d095db9d-5bfc-4320-88c3-a95a123a6989",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "928fc392-df9e-440e-8ace-b9ef1d6f3b1b",
          "status": "Created",
          "code": 201,
          "responseTime": 2564,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-04-05T00:32:35Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-04-05T00:32:35Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "790bdfc0-b021-462d-9591-8a9e1b71891f",
        "cursor": {
          "ref": "ac8a9902-4ac4-40c1-9d6c-b590c81b5940",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "83a028e6-2eba-4efc-9c18-c4c109530ded"
        },
        "item": {
          "id": "790bdfc0-b021-462d-9591-8a9e1b71891f",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "07ed6f9a-cc47-4882-9a85-455e2b21b30c",
          "status": "Created",
          "code": 201,
          "responseTime": 2369,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d606d156-cb39-4c71-90f6-e0b30da96f60",
        "cursor": {
          "ref": "84cd586a-e84a-4aa2-98d1-7a9eb498891f",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f2a06e56-82cd-4c19-8b2c-79048b35037c"
        },
        "item": {
          "id": "d606d156-cb39-4c71-90f6-e0b30da96f60",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b53eccce-978a-48d0-9079-9e60e7b52ae4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d606d156-cb39-4c71-90f6-e0b30da96f60",
        "cursor": {
          "ref": "84cd586a-e84a-4aa2-98d1-7a9eb498891f",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f2a06e56-82cd-4c19-8b2c-79048b35037c"
        },
        "item": {
          "id": "d606d156-cb39-4c71-90f6-e0b30da96f60",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b53eccce-978a-48d0-9079-9e60e7b52ae4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f628530c-b2ac-461d-b076-7ff1e02858ab",
        "cursor": {
          "ref": "1d9fffd3-e4b9-47f7-8165-6e992eed0127",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "bc1306ad-8cb4-4ef0-8d74-3b4d4c280a97"
        },
        "item": {
          "id": "f628530c-b2ac-461d-b076-7ff1e02858ab",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "08cd5e40-ca29-48d8-b0a4-2332b316fc22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af31dfb4-833e-47d7-937c-d54ff7c843e5",
        "cursor": {
          "ref": "0d51d36f-20ce-4738-abd4-2a6c49b6c4d4",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "6e9e2c73-65be-4293-91b1-573867df7636"
        },
        "item": {
          "id": "af31dfb4-833e-47d7-937c-d54ff7c843e5",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b0c408e3-c092-47a7-b526-100ea2efda3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b38df77-ebbf-44d2-8465-41996ca70518",
        "cursor": {
          "ref": "9fb73b7c-1b0a-4066-a638-3732c19485a1",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "8428784f-9a82-4560-bf3c-d94ef474549c"
        },
        "item": {
          "id": "8b38df77-ebbf-44d2-8465-41996ca70518",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ab3ac4a3-6884-4bf9-8555-33bb375a7779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f9c54f1-a1ed-484e-b66b-79bbfd2a74c6",
        "cursor": {
          "ref": "21eff7dc-5060-478c-b071-e27600ce0bd2",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "d986f6b2-1b3f-414c-932e-aaf6f82dc6e5"
        },
        "item": {
          "id": "4f9c54f1-a1ed-484e-b66b-79bbfd2a74c6",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "66c12663-3172-4dd5-8236-23dc42b630a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f2408fc-1bfb-4d29-b6b4-4faf711db9b7",
        "cursor": {
          "ref": "39aa8080-f536-4801-b100-56a706b73f41",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "14ec962d-7630-4649-815e-e60b4b5e0451"
        },
        "item": {
          "id": "6f2408fc-1bfb-4d29-b6b4-4faf711db9b7",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ce9b79f2-8153-4a92-a730-0ffabe391bb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e91eb3d0-08ae-494d-bfe4-0be593ee9870",
        "cursor": {
          "ref": "268c9900-d22b-4aee-8525-9e54b6b09bd9",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "cb40d42d-a5b1-4811-9b99-e35fc9875e3e"
        },
        "item": {
          "id": "e91eb3d0-08ae-494d-bfe4-0be593ee9870",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5ef12056-a7b1-443e-9a2f-4816769dc0b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1389023b-12dd-48da-aeea-67d4dc22ef71",
        "cursor": {
          "ref": "49e8989b-c9d2-4ec1-bc49-57a1ee9767f6",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "346f5c67-9b5b-453e-b787-fe59b1707557"
        },
        "item": {
          "id": "1389023b-12dd-48da-aeea-67d4dc22ef71",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "60bca805-8cd0-475e-84a9-8e742dce8f85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea2f6bbf-d520-42ab-9a68-2f2f8611255e",
        "cursor": {
          "ref": "c219580c-ff83-497e-85d2-bf0e049e6219",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "97596507-1355-4457-9615-79a12ec8654e"
        },
        "item": {
          "id": "ea2f6bbf-d520-42ab-9a68-2f2f8611255e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "bf72f2d0-1aff-46da-8038-d26670b10476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4623288b-1d1e-430f-89b3-0e92a56aadda",
        "cursor": {
          "ref": "c4d7c907-7886-4d46-be79-31185ef990a8",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "1bb278b6-14af-4f5b-83a0-fcaf8ec1f87a"
        },
        "item": {
          "id": "4623288b-1d1e-430f-89b3-0e92a56aadda",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "01616134-44e6-4eae-97cc-788ac3d73904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b89f55f-8c08-4142-b820-c4697539759e",
        "cursor": {
          "ref": "c5dbef77-9bb2-44a6-9a2a-2d072e290560",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "4b6f7a0a-241e-43c0-a9a6-859f4ee6f22b"
        },
        "item": {
          "id": "5b89f55f-8c08-4142-b820-c4697539759e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1100f45e-625a-4472-ad50-9affc0bfaf87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d596261d-6846-4c6f-9c8b-62feaafe4231",
        "cursor": {
          "ref": "4cf851a7-94f1-4ef3-8fbf-bea3fb558f6c",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "ce67a10c-58c6-4717-bdd5-2c06887ce863"
        },
        "item": {
          "id": "d596261d-6846-4c6f-9c8b-62feaafe4231",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "41abde5b-b17a-4c18-8f8d-dddd1b8f378f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a2da02d-b938-4e02-ade1-ed7d4e1e3c4e",
        "cursor": {
          "ref": "ca500ce5-76c2-494c-b5e2-538b1cb05ce6",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "72eecb9e-016f-486f-a5fe-e8fb63e880a5"
        },
        "item": {
          "id": "4a2da02d-b938-4e02-ade1-ed7d4e1e3c4e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "79492d4b-3f06-48d8-87a4-433fddda1ff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f57b98ec-1d4b-4a42-867d-ae8e1beb5f0d",
        "cursor": {
          "ref": "50dd0b9c-b8c9-4616-9622-3d18e5602ead",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ea60c210-1257-4ab2-b98b-0f37f13632e8"
        },
        "item": {
          "id": "f57b98ec-1d4b-4a42-867d-ae8e1beb5f0d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "be9a3c7b-a19f-4678-b6a9-edbbc2ea725a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e46177fa-3704-40dc-a805-e72afc94f111",
        "cursor": {
          "ref": "be717906-7c14-48f6-96f9-49734dbde208",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "0630a327-017f-4cdc-a5bb-b2d432ab0d1c"
        },
        "item": {
          "id": "e46177fa-3704-40dc-a805-e72afc94f111",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b4e41a34-6005-43ca-845c-48c715fc4e5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17e1d5e-9ff5-477e-8f03-8501728a15b7",
        "cursor": {
          "ref": "82721250-5157-4a1e-a21c-97fd23a95e9a",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "52ad0fcf-f6c0-4f92-a636-94aef7c203c5"
        },
        "item": {
          "id": "a17e1d5e-9ff5-477e-8f03-8501728a15b7",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "43af9c4b-f5e9-423e-b60d-efed35335518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20259198-d36e-45ac-9291-d634266977d2",
        "cursor": {
          "ref": "442edd14-7528-4225-b2d5-33f09e5ed32a",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "bd670a5e-a6ea-4de9-891b-b3e534771859"
        },
        "item": {
          "id": "20259198-d36e-45ac-9291-d634266977d2",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f0f035c7-9516-4ae4-afd3-f7166c2ecdf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62770b90-0523-4ba4-b27c-b3559acee7c2",
        "cursor": {
          "ref": "71bd40e7-259c-416e-b9c2-a210b144df9a",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "9f2a212c-4743-4b49-9e69-76db4de8d764"
        },
        "item": {
          "id": "62770b90-0523-4ba4-b27c-b3559acee7c2",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a4e19b59-80c6-4454-802f-3cf01e43ea9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdee334b-4d58-43d5-aa05-4b1a75405b81",
        "cursor": {
          "ref": "84a3781c-723c-433d-acd1-6f8981eb336a",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "3b60e662-7108-4267-ad8f-664a9dd10b23"
        },
        "item": {
          "id": "bdee334b-4d58-43d5-aa05-4b1a75405b81",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "cf2e5d01-11c3-42d8-b70d-5dc4fd8044cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe5c5de8-2b6c-4e85-b5ba-dd5c81df8832",
        "cursor": {
          "ref": "819da611-c5bb-40e3-920f-51e33eefe84a",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "78a3f79e-592c-41ec-b968-86414e26d835"
        },
        "item": {
          "id": "fe5c5de8-2b6c-4e85-b5ba-dd5c81df8832",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "27c9c181-0ee9-4424-b910-1792d81905de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34db3b59-4e43-48a9-8e31-b496e2193b75",
        "cursor": {
          "ref": "a30b8dad-c94d-4b25-aa2a-ace59ca7834d",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "526c5255-ad1c-4351-96d1-6d237b7c30b0"
        },
        "item": {
          "id": "34db3b59-4e43-48a9-8e31-b496e2193b75",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b8c17265-f3f6-407e-9be8-5ecb49c2b012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46bc0826-22b9-4ec6-8403-261ff0c7bd7b",
        "cursor": {
          "ref": "effac050-1161-43b5-a1e4-1e116fe316e2",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "9269defd-b1b1-44f4-a4d1-c87fa6777186"
        },
        "item": {
          "id": "46bc0826-22b9-4ec6-8403-261ff0c7bd7b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1526775c-547d-4308-8c02-df088de8c3d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "778d681a-96d0-4f63-aed4-c79fdeaa05e8",
        "cursor": {
          "ref": "55e65022-e15f-4e5a-ada0-9c954c2adfe3",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e94fcd9a-4abb-4b09-80ad-227a0cdf6a47"
        },
        "item": {
          "id": "778d681a-96d0-4f63-aed4-c79fdeaa05e8",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ff3b8c9d-af58-457a-96c3-c1318e8f87a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c74e9349-2448-4485-88bc-254d0f27b043",
        "cursor": {
          "ref": "81e9de75-dc6a-4779-a2ad-5ddb4ae4d2d4",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "2f706e69-490d-4a45-b77b-60e103f2f3a1"
        },
        "item": {
          "id": "c74e9349-2448-4485-88bc-254d0f27b043",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "810173d2-0e8c-4b41-9c4a-51cf1609bf70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4382f820-65fe-492d-9d04-81a2449afccb",
        "cursor": {
          "ref": "ea80a1d9-7e5d-489f-ae11-b40f86dfb75d",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "24326e3a-9779-4756-8002-f4d72768ed88"
        },
        "item": {
          "id": "4382f820-65fe-492d-9d04-81a2449afccb",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ce621743-998c-4610-aaf7-45f4cbc03c88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0f51418-a52e-4a2b-87a6-f68c56c2a693",
        "cursor": {
          "ref": "a441b8a6-b4b7-4b16-b5ca-269382c3bcd5",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "03767f7c-5c3f-4696-b321-21adeec924af"
        },
        "item": {
          "id": "a0f51418-a52e-4a2b-87a6-f68c56c2a693",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b726bd0c-623e-4005-88bb-2de04f33f764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8b4574d-a579-4ce7-abea-f8827b391799",
        "cursor": {
          "ref": "69bd67d3-43d1-4059-b9ca-475d19e27e89",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "5e879e43-e450-48da-8502-90d7e059f051"
        },
        "item": {
          "id": "a8b4574d-a579-4ce7-abea-f8827b391799",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c3dfd8b4-a903-40c3-b525-a1c9465c3e34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d3e2479-284f-4a16-98d3-85cee3c04e7f",
        "cursor": {
          "ref": "6bd41136-4ac3-449d-8bdb-a865aa93f5e8",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e611b6a8-8dce-45a8-8850-8ca9e677abbc"
        },
        "item": {
          "id": "2d3e2479-284f-4a16-98d3-85cee3c04e7f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "581123be-bc64-463b-a3b8-d0b606f78c23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98a8876f-e00a-484c-a119-a43123aa13bf",
        "cursor": {
          "ref": "4d50c849-cc42-434d-a517-a574c7d18ae1",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "314023af-57d3-48a3-9af2-46702ec48ded"
        },
        "item": {
          "id": "98a8876f-e00a-484c-a119-a43123aa13bf",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1951c6a4-17f7-4ba2-b33d-ec97e9b954da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b872779d-e9a3-4123-b023-d4ad3e2831ef",
        "cursor": {
          "ref": "e6b1df7a-8b27-4c57-897d-54df37e6c9c6",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "2664d8f2-3f2f-459f-84a4-3fb52f28ba46"
        },
        "item": {
          "id": "b872779d-e9a3-4123-b023-d4ad3e2831ef",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "988f0a48-f717-456c-b59e-4bbc6fa9fcb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d12f377-94b3-40d7-b534-742ea309754f",
        "cursor": {
          "ref": "42f99561-b246-48c2-aec0-67b6c401dc12",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "5e3fe87a-36f8-4401-bac4-46a69a12a600"
        },
        "item": {
          "id": "8d12f377-94b3-40d7-b534-742ea309754f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f797e09c-9be0-4173-a5fe-116b31a32f91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d32cc864-82e3-463f-abdf-0a593011590d",
        "cursor": {
          "ref": "7b677515-adfe-4ebd-b41c-0689e2877b13",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "14f8182d-9506-44f5-bd36-4553a18642fb"
        },
        "item": {
          "id": "d32cc864-82e3-463f-abdf-0a593011590d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "e19ff87f-4489-4e4d-9104-1f0a8d7a8e85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b17bc71f-9631-4f8d-80b5-c68500fc2d35",
        "cursor": {
          "ref": "25b65b12-78b2-4bee-b982-39db685c2ba3",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "39e67b95-e738-4e78-ad3e-e6e5b7bebbd7"
        },
        "item": {
          "id": "b17bc71f-9631-4f8d-80b5-c68500fc2d35",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "328e0c46-153d-418f-a683-009a08efe4ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "0d64e302-ac70-4c1e-88a2-e7c0489a8272",
        "cursor": {
          "ref": "90f624a4-bf0b-4d93-bf30-042c825090d1",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "437cb45e-4efa-49a8-97d3-2e9644936092"
        },
        "item": {
          "id": "0d64e302-ac70-4c1e-88a2-e7c0489a8272",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "16cc9935-5502-4117-a4bc-d953b56bb65d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "95098e03-a58c-4263-a4e0-9b98b9571fbb",
        "cursor": {
          "ref": "f3ac5aa0-ef01-402c-8453-6d8f4ca7b22d",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ed0385b1-9cdc-4cea-aefe-2635ae9f9be1"
        },
        "item": {
          "id": "95098e03-a58c-4263-a4e0-9b98b9571fbb",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a6dc0df0-35ed-438b-875a-1c0b90649ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95098e03-a58c-4263-a4e0-9b98b9571fbb",
        "cursor": {
          "ref": "f3ac5aa0-ef01-402c-8453-6d8f4ca7b22d",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ed0385b1-9cdc-4cea-aefe-2635ae9f9be1"
        },
        "item": {
          "id": "95098e03-a58c-4263-a4e0-9b98b9571fbb",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a6dc0df0-35ed-438b-875a-1c0b90649ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97ab99d1-dd69-4fcb-8700-a09ad6ef38b6",
        "cursor": {
          "ref": "6a0837e6-355b-44b1-b129-6f58908a40e3",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3770235e-d0b0-4532-afe4-b59dedd62375"
        },
        "item": {
          "id": "97ab99d1-dd69-4fcb-8700-a09ad6ef38b6",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "7f2e9f78-e17d-4559-a9cd-e07d28a40ef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41bee634-7b77-4ef5-b456-8c54b205f82a",
        "cursor": {
          "ref": "50ddba00-10e1-420f-b39c-7994e8ab6669",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d26acf71-48d9-483a-bb79-8ff91259f5a7"
        },
        "item": {
          "id": "41bee634-7b77-4ef5-b456-8c54b205f82a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e64839bb-2665-4b2f-8d83-daf4fe61c166",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1daf286-045a-4cb1-8937-2e02350beb5d",
        "cursor": {
          "ref": "fa427937-759e-4806-a05d-853adcb72ac1",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b40c8f0a-9b67-422b-a7db-c1b458504824"
        },
        "item": {
          "id": "b1daf286-045a-4cb1-8937-2e02350beb5d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "490b61ca-452a-4d55-9afa-ee599e2a16ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d23fcdfd-01d6-47ac-8841-2acc08d0556c",
        "cursor": {
          "ref": "07abaf7d-5a95-4d89-8475-52f9b09d6342",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "3cd14b27-2e15-4c13-aa78-070af53a25ad"
        },
        "item": {
          "id": "d23fcdfd-01d6-47ac-8841-2acc08d0556c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ded45556-2647-4912-8640-47fde32c5ff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c17854ae-955e-4a2f-a464-d361693f6d60",
        "cursor": {
          "ref": "5e01654c-22a6-4716-8015-19cfd5879eeb",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "78b59936-bd91-4f73-ae89-91eb964492b4"
        },
        "item": {
          "id": "c17854ae-955e-4a2f-a464-d361693f6d60",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "0b20de0f-bbb4-424e-8655-90c5d0bd24ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "697e19e1-be7f-437d-8656-fbd17f43c8ca",
        "cursor": {
          "ref": "399962c1-df86-4ffa-b72a-a1f3b05000e2",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "49783d8c-918f-49cb-b97c-15ad59c6d86e"
        },
        "item": {
          "id": "697e19e1-be7f-437d-8656-fbd17f43c8ca",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "98d41c0b-bb4c-4f7d-95b5-5fa3d28c965d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd67eae0-085f-4bc4-89a3-2325ccecc220",
        "cursor": {
          "ref": "1cfdb0cc-b5ae-42b4-bca2-74d50f68e1d4",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "e16eb4ba-883e-4d34-bde9-518684e28047"
        },
        "item": {
          "id": "fd67eae0-085f-4bc4-89a3-2325ccecc220",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "0bcefb69-0b74-4a1e-9631-25a33b2826cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4d9fefb-7332-4e9c-8056-49a3b26455ad",
        "cursor": {
          "ref": "edcef1b5-bbd6-4a05-979d-13a3aa7f2c62",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "72dbd7de-4fed-44a1-9960-5fc22994409e"
        },
        "item": {
          "id": "a4d9fefb-7332-4e9c-8056-49a3b26455ad",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "527d6ffd-b829-4cac-9aec-d6595bdf8a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af62095d-b604-4f79-b6c4-76f6dfe4df41",
        "cursor": {
          "ref": "5228c4d8-1b58-4051-9b83-c6b5baebddd9",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "8f866faa-74f3-4915-9590-b68a2cc9de83"
        },
        "item": {
          "id": "af62095d-b604-4f79-b6c4-76f6dfe4df41",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "709efc04-2e7b-491a-990f-c87a2c213e44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e1f05a9-334d-44df-bdb6-6b0a0a8074bd",
        "cursor": {
          "ref": "5aa51b61-aa49-40a0-a727-658b0b5e7c2b",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "0fda9a56-5f27-4672-b4f3-8a885209fbdc"
        },
        "item": {
          "id": "7e1f05a9-334d-44df-bdb6-6b0a0a8074bd",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "45988b0a-7e12-4424-bcb9-cc88c4420de0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a807b76-956c-4347-95d0-cccba677e8bd",
        "cursor": {
          "ref": "78e13753-141a-4ccb-bcd4-0f0b372d57aa",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ae1f6c16-0e7c-4062-9931-4eb08a800d31"
        },
        "item": {
          "id": "3a807b76-956c-4347-95d0-cccba677e8bd",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "4842488c-c351-452c-9d56-e8c65cda7e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb007687-b0d6-4e54-a85e-4b2dc1ff7eb9",
        "cursor": {
          "ref": "d963fd3e-d741-4927-abee-c43216689b3a",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "7d510972-af57-4984-b948-5108d946f807"
        },
        "item": {
          "id": "eb007687-b0d6-4e54-a85e-4b2dc1ff7eb9",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "addfb126-d2ca-4289-adc7-56693096b104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2d02770-9026-40bf-b920-b665e43b5ecd",
        "cursor": {
          "ref": "a7c39848-dc5d-4d30-9dea-3014ecc5b2c8",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "ba63bd67-8be3-44df-9355-b7f7cd398463"
        },
        "item": {
          "id": "d2d02770-9026-40bf-b920-b665e43b5ecd",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7384d549-1320-4189-afe4-fb417910a69f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dabb90f-2acb-4c96-8751-c04f0969572a",
        "cursor": {
          "ref": "12abae3b-9df3-4a2e-b64b-ae66b942fc9f",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b869ada1-47c1-4416-b702-75ee8b68c623"
        },
        "item": {
          "id": "7dabb90f-2acb-4c96-8751-c04f0969572a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "6907034a-fb91-4693-8666-ac63537e51d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc27990-26f6-46e2-bef6-2e2d0464be1a",
        "cursor": {
          "ref": "d34e86b6-544e-49b8-985f-8f0f4232a8c6",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e3755869-3533-450a-a3e0-57a231b4d717"
        },
        "item": {
          "id": "9cc27990-26f6-46e2-bef6-2e2d0464be1a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "983d1cf7-3f1f-41cc-9b59-e452b7e8d603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aa2abd5-e18d-4b05-b774-245645670cae",
        "cursor": {
          "ref": "41709634-7105-4e7c-a7de-1580c457194b",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "9c74676f-76bd-4a6e-99c4-9e743cfd96a2"
        },
        "item": {
          "id": "8aa2abd5-e18d-4b05-b774-245645670cae",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "4240e2d2-f3ab-43c9-9d1e-88ad5252e014",
          "status": "OK",
          "code": 200,
          "responseTime": 256,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "5a557269-4e52-4d63-a9cc-b8d59ae30538",
        "cursor": {
          "ref": "5cd03ed4-5d6b-451a-ada5-ec0bbd112e6f",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b675ad0f-a8e0-4995-a498-465475e5d085"
        },
        "item": {
          "id": "5a557269-4e52-4d63-a9cc-b8d59ae30538",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "e3501f84-250b-47a2-aa44-69d5d743bc6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e532ce13-2352-4a76-820f-afd4fcd2fdbe",
        "cursor": {
          "ref": "c48a1571-76db-4a60-81fe-552464c01929",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "598cbb18-6e0a-490f-b918-2a20285d3e1b"
        },
        "item": {
          "id": "e532ce13-2352-4a76-820f-afd4fcd2fdbe",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2355c0c4-850b-489f-9f94-c1c95fde944a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 624,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22c94035-9aa3-4ddb-9cf6-7c0736b2696e",
        "cursor": {
          "ref": "693e0c44-be95-4b89-8991-3f835e29b2be",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8ffc86d4-8b7e-4372-9eb8-f9c5a6a609b8"
        },
        "item": {
          "id": "22c94035-9aa3-4ddb-9cf6-7c0736b2696e",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ac462d1e-7a2d-4704-8d70-d82c0d87a218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dced7fdd-3ee2-499a-be52-0fbf66eb62aa",
        "cursor": {
          "ref": "d1516d3b-d7af-4b67-a510-1c20c883fa3a",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "586e82ce-9a35-4881-8820-b3ca28970ce0"
        },
        "item": {
          "id": "dced7fdd-3ee2-499a-be52-0fbf66eb62aa",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "ed9f4b0a-9267-40d7-bf4c-62e739b548a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58436e31-25c2-4262-9f98-a3249c14e378",
        "cursor": {
          "ref": "f2d3ac48-f576-4a70-8ddf-1be159687d74",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "5255cdf2-b65b-45b0-8347-610ff816f7f0"
        },
        "item": {
          "id": "58436e31-25c2-4262-9f98-a3249c14e378",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "52ac2d8a-fed8-4a0b-b522-50a59de0cc1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab675884-ec4a-4b7b-b9d2-30c2954ff76e",
        "cursor": {
          "ref": "205ad692-dc11-4243-8eac-63676c68d4bb",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "346874df-0cdb-4248-82e8-ee79bf893427"
        },
        "item": {
          "id": "ab675884-ec4a-4b7b-b9d2-30c2954ff76e",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "2caec244-490c-4934-b5fb-173f19b815c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0bea20e-87d5-41e7-a4c7-268f7be4d73c",
        "cursor": {
          "ref": "26be48c7-226b-47a9-8d37-9ee4b713d1b0",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "20eaa036-7dd6-40d3-ba10-805610792f02"
        },
        "item": {
          "id": "b0bea20e-87d5-41e7-a4c7-268f7be4d73c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "1c68c688-79ec-441d-ad1a-d2089d951969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "479b0921-f604-4e2b-965f-2127a6bb59a8",
        "cursor": {
          "ref": "4409a4db-3671-4a8e-9250-2cfbcf4c3eeb",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "91049178-45f8-4083-a8f8-c2855374bded"
        },
        "item": {
          "id": "479b0921-f604-4e2b-965f-2127a6bb59a8",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "7eca7c37-6ecf-403d-b8fe-402c5a37cc35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e9b1240-44ec-459a-a575-678b053073c6",
        "cursor": {
          "ref": "735d5c8c-2210-4f2b-b912-e2f011554f77",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "85e1eb9f-1123-4331-8c22-391f274e1175"
        },
        "item": {
          "id": "9e9b1240-44ec-459a-a575-678b053073c6",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "a7927702-f65f-475f-8dc3-f8d74a57a108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33d60da6-6f10-4c17-95ec-59c9fb168967",
        "cursor": {
          "ref": "f8866936-ed97-430c-adcd-063be704f99b",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "65997e88-1908-449d-9aeb-e9c87b2589b5"
        },
        "item": {
          "id": "33d60da6-6f10-4c17-95ec-59c9fb168967",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f11fed33-e5d7-4cd2-9943-d680e26dfab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "473091da-063d-4efe-9dec-cb8cf00dcd39",
        "cursor": {
          "ref": "1662c34e-ddb7-4a00-8d7e-012c24eff9bf",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b03a51dd-903c-49f6-8f57-ecb666c7803a"
        },
        "item": {
          "id": "473091da-063d-4efe-9dec-cb8cf00dcd39",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "034d011e-070c-461e-b10b-890d7e3896a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84dc8d6a-e89d-49d2-9f8d-20602dc34bd0",
        "cursor": {
          "ref": "8960adff-a2e7-4146-b986-1b7d522c1d6a",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b52efeea-ffcd-4747-b09c-52b1a294ee4c"
        },
        "item": {
          "id": "84dc8d6a-e89d-49d2-9f8d-20602dc34bd0",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "31b11fbf-f2ce-46d7-801c-dba8a5f37bed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad1e6371-2a14-4a21-9ed5-5bf9c5207b78",
        "cursor": {
          "ref": "49668791-f405-49a8-85b1-8d44ab899b51",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "45ffa12a-9893-4c47-9b3a-b0ce1f6fc96f"
        },
        "item": {
          "id": "ad1e6371-2a14-4a21-9ed5-5bf9c5207b78",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "50e54745-7d15-4e03-be56-883c2303d16f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5f1d21f-b48d-4803-94ea-0dc2cc0a99cd",
        "cursor": {
          "ref": "1dc55323-de31-42ca-8b38-8dcbf5edebe8",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "0caf9061-c65c-4764-b3f0-0dc7370f8284"
        },
        "item": {
          "id": "c5f1d21f-b48d-4803-94ea-0dc2cc0a99cd",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "2d86f8ce-a02c-4933-b3cb-8916e61a1594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b23bad2d-7118-427d-a8e3-b2b39d14f238",
        "cursor": {
          "ref": "a1716106-c63d-4fa6-b67e-773f1e3f81f6",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "c06dfa3b-7020-4b4d-8005-2aa55e9ff2f8"
        },
        "item": {
          "id": "b23bad2d-7118-427d-a8e3-b2b39d14f238",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "d5e92118-5261-4839-8017-300ddc70c503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71b18290-c800-483e-85a0-dbaf8fd6c08a",
        "cursor": {
          "ref": "f09be122-6d56-40e0-b962-2147bcd24b9e",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e1543987-a706-4544-b889-ac346b5596f1"
        },
        "item": {
          "id": "71b18290-c800-483e-85a0-dbaf8fd6c08a",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "ecbac8ec-8e24-4dbc-a08e-389c4f036cd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c45ae5f-4939-4884-a144-85d807d9e061",
        "cursor": {
          "ref": "11d1d1fd-cf5b-4ba2-aba0-3047d30e1edd",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e0e6d4e5-9dee-4ce3-a7c5-f7211b4fd983"
        },
        "item": {
          "id": "8c45ae5f-4939-4884-a144-85d807d9e061",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "eb483d8b-567c-4787-870c-60c0ef4907bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ba10e7-4d5c-4301-913f-8758d7c2be62",
        "cursor": {
          "ref": "5113850a-c2b1-4b43-9f04-a74379e167bf",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b48117b7-38c5-478a-b7ed-183499cb594c"
        },
        "item": {
          "id": "67ba10e7-4d5c-4301-913f-8758d7c2be62",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "8e88bd05-d912-4428-9f4e-bceab8744b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beae151b-f8e6-4ffa-9eff-40977d66c12e",
        "cursor": {
          "ref": "f8c3cb60-9e16-4dd6-bbaf-f708474c7cca",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "97cb4c19-d2b3-41c8-b2dc-959026b52674"
        },
        "item": {
          "id": "beae151b-f8e6-4ffa-9eff-40977d66c12e",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "7ca43047-8c7b-4282-9e43-28bed364cba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdbe2f5e-b351-4ab1-96b9-3bcb270a236d",
        "cursor": {
          "ref": "24377769-729b-4155-aa1a-8d3edc1d3783",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "8c479a56-cd41-4e83-9a44-607d050cbe6d"
        },
        "item": {
          "id": "fdbe2f5e-b351-4ab1-96b9-3bcb270a236d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "10c0f512-0f83-4f29-b85d-b76e43590a1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e09fa31e-752d-4729-a5ef-de5aa4d8935a",
        "cursor": {
          "ref": "4650e4af-f536-44e4-87ce-96f302cf6b55",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "cb07260b-9635-4478-ba98-0b70e7862154"
        },
        "item": {
          "id": "e09fa31e-752d-4729-a5ef-de5aa4d8935a",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "bfc9b524-a501-41f1-9c80-7663feb4258c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b20e05c3-3250-4db5-a48c-538c21434281",
        "cursor": {
          "ref": "ec04fffd-16d7-41f8-a8e3-fd7bc2e09555",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "d7f933f0-9eaa-43ff-b657-c3357f522ec3"
        },
        "item": {
          "id": "b20e05c3-3250-4db5-a48c-538c21434281",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "11ddf206-e6c6-46b3-9925-d50a3c5b7652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d764a4-4e4c-43eb-8c48-cea88034b12b",
        "cursor": {
          "ref": "7db25044-398e-4dba-9667-ce21fa690766",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "7ae33691-9467-423a-8a2e-abef2a92f651"
        },
        "item": {
          "id": "26d764a4-4e4c-43eb-8c48-cea88034b12b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "4e0df1bf-f929-473d-9f64-a6af0ccaa5c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea032489-7ac6-48d3-8fac-2c4b7085447c",
        "cursor": {
          "ref": "b70843e0-d209-4795-8c09-342b8bc72942",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ecd0c190-49b9-418a-bf1e-156d3512a78f"
        },
        "item": {
          "id": "ea032489-7ac6-48d3-8fac-2c4b7085447c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "0b74d41e-0f5a-4a90-b22f-9150a6cbe867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74f49271-486d-4af4-9744-aaa7e745b96d",
        "cursor": {
          "ref": "a53e48f2-442d-4797-8ff3-81d94e616d78",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "0be3a7a2-0243-4009-9125-8a637484edbc"
        },
        "item": {
          "id": "74f49271-486d-4af4-9744-aaa7e745b96d",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "88e96636-5497-4ec8-ae37-9256c76d8757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc42b951-9a8e-4f81-bade-efc9741f8752",
        "cursor": {
          "ref": "49b517ca-bf04-4808-b867-c43e15009821",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "f8597fe6-488f-496d-a2d0-fdcc110c5650"
        },
        "item": {
          "id": "bc42b951-9a8e-4f81-bade-efc9741f8752",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "75540e3d-c3af-47d0-8ea5-1bd53fe56375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d248362b-c8fd-4aa1-a7fa-c6c8411e63e4",
        "cursor": {
          "ref": "4e485625-9cd6-4af5-9536-04222892b321",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "42c611cc-288f-483a-8c59-64c808bfb88f"
        },
        "item": {
          "id": "d248362b-c8fd-4aa1-a7fa-c6c8411e63e4",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "578c6fdb-4f07-4148-bb4e-c0de77cc3f9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b5514c-e518-4eb0-9986-caafc58a8cb6",
        "cursor": {
          "ref": "ed0064e5-1560-428f-b928-ad646014463c",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "4d26378e-80f2-4b7d-bba2-0176ae357c75"
        },
        "item": {
          "id": "06b5514c-e518-4eb0-9986-caafc58a8cb6",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "54c66dce-71b0-4743-915a-c349f4547ecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ab369b5-648d-4376-83d0-2418862fa222",
        "cursor": {
          "ref": "5187cd08-26dd-4a01-95ce-7ef25abc7cb0",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "28f21c05-14d1-4f91-b8ce-3dc754c915ab"
        },
        "item": {
          "id": "8ab369b5-648d-4376-83d0-2418862fa222",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "d882e9fe-9901-494d-b434-896b8f645194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df976dd-b075-46b7-ac07-85b003a15312",
        "cursor": {
          "ref": "30f7129c-5d75-4ff0-8d37-cf029608f69e",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a4b12984-1130-44e3-a22d-86fc24eaedf6"
        },
        "item": {
          "id": "8df976dd-b075-46b7-ac07-85b003a15312",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "935fc5c2-1cef-479a-9370-834c57c1a760",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbfbf898-6c7b-4bb8-8adb-4aae2e62a4af",
        "cursor": {
          "ref": "8c739ae4-f3c0-431a-bf97-3b525ae1c0e4",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a68f24b6-f280-4522-b2c7-0dcc7f5a1e17"
        },
        "item": {
          "id": "cbfbf898-6c7b-4bb8-8adb-4aae2e62a4af",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "33b78fa0-0c1a-446f-9c6e-bcf9427d1c2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0186ce7c-d70c-4b6d-920e-54d044f71244",
        "cursor": {
          "ref": "e07f35db-65a8-4af0-887d-5880343f1784",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d4705a61-548f-4705-8fa8-536c6b5e0717"
        },
        "item": {
          "id": "0186ce7c-d70c-4b6d-920e-54d044f71244",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d090beef-392b-4919-8923-22b567f9a278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7c13ed2-9a82-4a13-a71b-aee02515d5e9",
        "cursor": {
          "ref": "60418511-a093-4974-a5b7-9f9d083ed2d5",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "94bec05f-a26a-4f4f-9f14-0f52f5331e79"
        },
        "item": {
          "id": "c7c13ed2-9a82-4a13-a71b-aee02515d5e9",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "80a9988d-adab-4f5b-a509-5362ea438940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1756e86b-637f-48cc-90f9-4de3ea3fc00d",
        "cursor": {
          "ref": "c78cf324-551e-4604-b98b-e95a9ef6cbee",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "e5df85f0-8e95-4bd1-a789-9dbf9c6ba8ec"
        },
        "item": {
          "id": "1756e86b-637f-48cc-90f9-4de3ea3fc00d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4215bc20-51eb-47c9-b746-55969e2fbf17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7740c479-db0e-45aa-a168-6c9428d9dcff",
        "cursor": {
          "ref": "c8dfdd6f-1a65-4fee-aee1-8872ec0260fa",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "d3793bac-1dbf-47aa-b3ea-3a30c406e681"
        },
        "item": {
          "id": "7740c479-db0e-45aa-a168-6c9428d9dcff",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "9cde074f-5c1d-4562-b3c4-205e4521a888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2734d59e-6957-4b2c-a11e-ee0d9c1aab70",
        "cursor": {
          "ref": "139069bc-1075-4a37-a929-3a3293d10299",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "8eca4da6-e3e7-4a82-bf4e-488026ba8cee"
        },
        "item": {
          "id": "2734d59e-6957-4b2c-a11e-ee0d9c1aab70",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "cf81747c-00a8-4191-a1e4-a81a401e86d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e139ff07-6d9c-4600-97d3-fde766de0a57",
        "cursor": {
          "ref": "eba98877-a49f-4edf-979c-e50a8ae84039",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "0f5668b7-cf98-4be3-bfac-31dd0d637db6"
        },
        "item": {
          "id": "e139ff07-6d9c-4600-97d3-fde766de0a57",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "48fe0d2e-7c11-4647-bcfe-aacd6d21fcb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "722241b9-522c-4c22-bf96-5bcaea33d53a",
        "cursor": {
          "ref": "cbe9d7e0-8c0f-42ad-b295-51955b553cd8",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "9c3fda33-49ad-42b7-a76d-cc697df9ae96"
        },
        "item": {
          "id": "722241b9-522c-4c22-bf96-5bcaea33d53a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "478e6505-5039-43e2-9e12-2c9169fa127f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a886e26-53af-4094-bbfe-dc1f5e3748df",
        "cursor": {
          "ref": "ff884e44-3c62-4335-ad2b-2ffdd46ff179",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "58f2eba7-cb5e-4e29-b27b-9d3dad6843aa"
        },
        "item": {
          "id": "9a886e26-53af-4094-bbfe-dc1f5e3748df",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "7ac1853e-b644-4c64-9663-5ab93613a096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1275b429-5a18-4b54-af48-2981f60868d8",
        "cursor": {
          "ref": "e16a1faa-fc09-41e7-864b-0c7e2572690b",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "fdc8c514-b649-4d2d-ba2d-26b1267254a0"
        },
        "item": {
          "id": "1275b429-5a18-4b54-af48-2981f60868d8",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "83e393f8-fa4a-46c6-aa7a-d9f8f9af9360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "174cd964-8ad3-42cb-bb46-e25193402816",
        "cursor": {
          "ref": "576d585e-42d2-41d0-896f-6d6faa8ef7e9",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ad63b02f-9838-4218-bc82-3b6a75cce141"
        },
        "item": {
          "id": "174cd964-8ad3-42cb-bb46-e25193402816",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "6afe16c1-2fcb-4a54-bb72-495736a02934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45ad8873-a3be-4ca0-bbc5-bbf4ca4acbe3",
        "cursor": {
          "ref": "19c683fb-8c85-448a-ba11-8e8954357ef0",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e9dda51f-de54-4d32-a756-220021cb0d6d"
        },
        "item": {
          "id": "45ad8873-a3be-4ca0-bbc5-bbf4ca4acbe3",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "72f932bf-e651-47a5-be94-c11591afdc7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 907,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f1ef683-e094-43be-ae3e-d71db36b4e60",
        "cursor": {
          "ref": "4226da89-274c-4f6d-b5a9-b6d8bef6c1c8",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "18bccf99-472d-4ae6-8f45-d5d0e766e8c9"
        },
        "item": {
          "id": "8f1ef683-e094-43be-ae3e-d71db36b4e60",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "ffe82d21-d2c0-4c33-8e3e-0c7dd6b80e5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6278e4bd-353e-4a96-9b86-c4ab7030a9c8",
        "cursor": {
          "ref": "3217dd14-a9d2-49d9-88f7-1e3daf0cb283",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "9a877dd5-1cc8-4bc2-9ae4-6fb2c7289dec"
        },
        "item": {
          "id": "6278e4bd-353e-4a96-9b86-c4ab7030a9c8",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "febcde41-cd5a-40c1-85b7-47032d6eb2b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03bf3858-2e1e-4e6b-a97a-7b2aee2b8444",
        "cursor": {
          "ref": "77ecf166-4ae0-4104-93dc-9e8d6c96c5f7",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "5d034b05-d9b8-49d3-85cd-d98fc34d0d48"
        },
        "item": {
          "id": "03bf3858-2e1e-4e6b-a97a-7b2aee2b8444",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "2d22ae41-9d82-4645-a31c-a331a1847786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15327522-6c3c-4893-a62a-f8977a3f07ca",
        "cursor": {
          "ref": "a6fa70e6-d1fb-4211-8575-8553d310d7f9",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "51d20a2b-bcc5-49e3-a170-ff5979175796"
        },
        "item": {
          "id": "15327522-6c3c-4893-a62a-f8977a3f07ca",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "a52a6c7a-3b70-471a-9902-c8ad618ab271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed8e355-ea57-4cba-828e-5d975446d3fa",
        "cursor": {
          "ref": "36c8be93-ee9c-4c3d-88bb-9f9926ace7cc",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "708e9275-130f-4451-836d-366512f0c78a"
        },
        "item": {
          "id": "0ed8e355-ea57-4cba-828e-5d975446d3fa",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "5415a4f3-468b-4799-be05-52215dbf86a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1da667-437a-4e49-9190-53c84f56c1ca",
        "cursor": {
          "ref": "47bae83f-be44-4ca1-99cc-d372cb7b7bb2",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "1528c8b4-8c7e-4322-914f-1a2349065b49"
        },
        "item": {
          "id": "fc1da667-437a-4e49-9190-53c84f56c1ca",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "9c6e2514-f4cf-4985-b468-8c374e47dfe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4c3a116-6b68-4a4a-a4a3-bc60a7825dd0",
        "cursor": {
          "ref": "5aa10f50-f79f-4471-b30a-6a5e4587e575",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "41140cdb-1d60-4d91-a368-7b201424ee82"
        },
        "item": {
          "id": "c4c3a116-6b68-4a4a-a4a3-bc60a7825dd0",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f170875e-c857-4c0c-92d7-47d93734d445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a5a298b-a17f-42e6-aaca-c7039bf9360d",
        "cursor": {
          "ref": "1c8b0fe4-ab21-459e-b7ff-e6832cd5f1bf",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e17dbef0-50f5-43a7-911e-43b6b29c92c0"
        },
        "item": {
          "id": "2a5a298b-a17f-42e6-aaca-c7039bf9360d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "24d10dac-8edb-48a8-9e8f-1626c2898e8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b33a6e-c463-42dc-82c8-8a05fa3d8f3b",
        "cursor": {
          "ref": "ae9ec7ef-33aa-4d92-92b9-34033c879322",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "7cbfe1f3-29e1-4323-9480-95e741b40cb8"
        },
        "item": {
          "id": "c6b33a6e-c463-42dc-82c8-8a05fa3d8f3b",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "765de013-4a42-48bd-abd5-76596224e064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67d5eaad-d588-49c7-831b-4e0308e737f5",
        "cursor": {
          "ref": "9665c0ec-0268-4997-b9b5-527606a34825",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e5c75fd9-934d-4244-b56d-52cd9482556b"
        },
        "item": {
          "id": "67d5eaad-d588-49c7-831b-4e0308e737f5",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b554c49c-3728-4380-a58d-cc01f15d868e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0df62ecf-331d-4c29-9568-5c47af212122",
        "cursor": {
          "ref": "97e63461-ec84-4e94-a3e4-12dc774cbfef",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "7f90d2bc-2cc4-4bfd-bc16-c09c7cec950f"
        },
        "item": {
          "id": "0df62ecf-331d-4c29-9568-5c47af212122",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d19574be-dcec-465d-ba32-0657c32d5f38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a2d5b3a-392a-4908-b2b5-5ce58d083513",
        "cursor": {
          "ref": "7b5f15d2-ba25-4ae0-8092-1a328c9143e1",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "3105bf97-97f0-4c87-8999-561ce159cf07"
        },
        "item": {
          "id": "1a2d5b3a-392a-4908-b2b5-5ce58d083513",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0dca572f-e8c2-4851-849a-4f21e3b7d8cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3591bb64-2a96-47d2-89b6-a0d93f1287f3",
        "cursor": {
          "ref": "79fa75f5-3d43-417c-adef-aff7574a8a1f",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d1e2349a-dc8f-42df-982c-1e00a2d42227"
        },
        "item": {
          "id": "3591bb64-2a96-47d2-89b6-a0d93f1287f3",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7116899d-122b-40cc-b419-415325870c57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54e6fd0c-3d4d-4b14-aa05-483184512596",
        "cursor": {
          "ref": "b25dac65-45aa-4bbc-b44e-3588dd57d5e2",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "4e6ceb07-eda5-4210-8539-501f7645e3a8"
        },
        "item": {
          "id": "54e6fd0c-3d4d-4b14-aa05-483184512596",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "775676fa-e1e4-4972-932b-5873abe0a73a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e40e224f-aa09-4413-9b16-6881a62382f7",
        "cursor": {
          "ref": "a2d936bf-60dc-456a-9bfb-f0f79e977524",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "da13b730-63b5-4050-b2c1-307c87cc8ecb"
        },
        "item": {
          "id": "e40e224f-aa09-4413-9b16-6881a62382f7",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e6a7d61b-c6e9-4d54-82b8-4e33b237df9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f79f8feb-9895-4086-9e14-f8651f45d85f",
        "cursor": {
          "ref": "54e9e664-471f-4b25-8f5f-19eef1e43d35",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "803334bf-81c5-4bf9-91b4-70892160ae5b"
        },
        "item": {
          "id": "f79f8feb-9895-4086-9e14-f8651f45d85f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "1f8f802a-3be1-4d8c-8112-3e0fea6fb670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "378d5655-ecfd-4ef7-bc8d-e05b3084ba62",
        "cursor": {
          "ref": "0bb100fc-0f9c-4bd4-af89-f9efd960f2ec",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "556822cf-ed55-4355-a5f9-6f1c78880aef"
        },
        "item": {
          "id": "378d5655-ecfd-4ef7-bc8d-e05b3084ba62",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3cfc4fab-35cb-4cd6-84ee-de7d4116a2b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e4f29ef-15c2-496c-9775-5ed89e34c45b",
        "cursor": {
          "ref": "a0d6a1b7-c50f-4949-80c8-c927ef3526d1",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "a32b4882-1176-4ece-adc6-8327d9971441"
        },
        "item": {
          "id": "0e4f29ef-15c2-496c-9775-5ed89e34c45b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c0debe2d-abbf-4f01-9923-f9b010456e7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4578439-dcd6-4e32-923b-1d5a2f632927",
        "cursor": {
          "ref": "d331104c-3df3-4134-8831-00d0e611ff20",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "c0d984a3-ded2-4324-869a-fbafbee61be6"
        },
        "item": {
          "id": "c4578439-dcd6-4e32-923b-1d5a2f632927",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ee135c10-e7f1-4525-ac6a-251de24dcd7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3ffc373-1852-4a27-ac30-a1b87e63ea6f",
        "cursor": {
          "ref": "e67effb3-a687-4d15-8225-695a1d084e33",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "65af3cd1-ad8f-454d-b1ac-4f41f1926199"
        },
        "item": {
          "id": "a3ffc373-1852-4a27-ac30-a1b87e63ea6f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "91f8c97a-66b0-4e9b-b4b1-be7ca254aeec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a30e423b-2c8d-4a7a-a107-ff97499bb3d1",
        "cursor": {
          "ref": "6c0727ac-3199-49bf-9f58-f550d22415b5",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "0a586b02-037a-4eb9-acc3-8152fda8a108"
        },
        "item": {
          "id": "a30e423b-2c8d-4a7a-a107-ff97499bb3d1",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "49035564-6537-413d-9603-cec81da67bab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4429a7ad-3664-46ee-a3bb-cb9b879c3b2f",
        "cursor": {
          "ref": "ac75d688-a284-444f-9614-13f16c807ac2",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "edd51a49-b7b2-4f65-ae68-0014aa3b8c2d"
        },
        "item": {
          "id": "4429a7ad-3664-46ee-a3bb-cb9b879c3b2f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1308bfdd-426d-4a0e-b959-4604ab84ec85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ab669b8-3fdb-4eb6-b17a-1fa615f1ea59",
        "cursor": {
          "ref": "32e1d4da-6451-4e60-ba9c-82f5788055f0",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "5ee03d06-1977-468b-ab34-248f97ce01d1"
        },
        "item": {
          "id": "9ab669b8-3fdb-4eb6-b17a-1fa615f1ea59",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c1c7579b-0b82-49ea-a8c4-8d7b6122328c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cde865d-c547-4d0f-b719-8399cddcfd88",
        "cursor": {
          "ref": "3546222c-7feb-4051-a2f7-c6712d4f8124",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "8351dd0d-41b6-4497-a3ac-55b9c35b36a9"
        },
        "item": {
          "id": "3cde865d-c547-4d0f-b719-8399cddcfd88",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "0c86da08-ee6e-4017-a0a9-0a35f9c6a6d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ce11473-6c5d-4cda-9ff2-10d73a1c6cc1",
        "cursor": {
          "ref": "36d54b0c-3565-4c32-bfcb-9283cec98d8a",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "0d167f05-57c3-4fe2-8531-6a27d42a1d88"
        },
        "item": {
          "id": "6ce11473-6c5d-4cda-9ff2-10d73a1c6cc1",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "64c8d6e9-2212-4037-9f4a-b690484058f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85cf7944-1d2d-4e60-b0dc-32aa1374de6c",
        "cursor": {
          "ref": "2a2e2dab-b115-4a5d-93b2-8430f4d69fa3",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "819e8d1e-c72d-4eb5-af6c-59c8958b2432"
        },
        "item": {
          "id": "85cf7944-1d2d-4e60-b0dc-32aa1374de6c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "3a35debe-f6d4-4a1b-ad16-e531cf1812b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b64c2046-f89c-49a8-9376-bc9695110436",
        "cursor": {
          "ref": "8891a919-1c04-4874-b2c0-4e52bf723598",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "32a0ab1d-2be8-425b-93f9-86273cacb543"
        },
        "item": {
          "id": "b64c2046-f89c-49a8-9376-bc9695110436",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "3fd5e2b3-c46d-4487-93ac-9d5cfb1066ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "431d4c15-3613-4ac5-8e2b-d97aa221f434",
        "cursor": {
          "ref": "cfc4e6c1-7f90-488e-a19c-6a994db0976f",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "298d2fea-747d-4ac2-8cc4-864e2b08a72b"
        },
        "item": {
          "id": "431d4c15-3613-4ac5-8e2b-d97aa221f434",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "31ca38d1-2c36-4f57-b18e-d9d0be7f27e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9be706e1-c350-4868-b5fc-4f939e27a819",
        "cursor": {
          "ref": "d6de5222-eff2-4401-bccd-b21ad2b26d93",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "e147a75c-8f0d-454c-8b60-4c50e1a7a14e"
        },
        "item": {
          "id": "9be706e1-c350-4868-b5fc-4f939e27a819",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "fe2742f0-b957-4de2-9afe-dbbbe9843a42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05d15162-31c3-4631-98fb-7dd84c16e6db",
        "cursor": {
          "ref": "4a985c1e-1a75-4813-a2a0-de47fbb35024",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "c9f6b5b2-7a6a-42b4-b1a7-74d39d339aa7"
        },
        "item": {
          "id": "05d15162-31c3-4631-98fb-7dd84c16e6db",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "1e684d17-8ec9-4047-be69-aaf42032a141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0464fa8-0b6e-48ad-8ac0-972c0c881473",
        "cursor": {
          "ref": "f2906c7f-1607-43cd-a9d9-4a72277a3208",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "470a39f0-2174-4cbb-97d7-008e940cdac8"
        },
        "item": {
          "id": "d0464fa8-0b6e-48ad-8ac0-972c0c881473",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "6edf997a-cfd5-42bb-ae7b-1cfe6933905b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "112aec7f-846c-4c31-a248-c8f28afc15db",
        "cursor": {
          "ref": "12c4c3eb-3caa-43ab-8e51-4f6c0f7192a8",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8847ee34-c2da-4d9a-ad43-dabde026540e"
        },
        "item": {
          "id": "112aec7f-846c-4c31-a248-c8f28afc15db",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "d526e1ec-bccc-4cca-a6e9-abd37c414cb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6fb8709-5f9e-4698-b55e-455ff0f722eb",
        "cursor": {
          "ref": "92cc8064-9ead-4286-a809-beaf8a79db76",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "6a4f41eb-7443-4977-9f6b-7b61afbcf5d4"
        },
        "item": {
          "id": "e6fb8709-5f9e-4698-b55e-455ff0f722eb",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c196cba6-cb6a-4f08-a190-32eee2a0e096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaded2c2-1714-4a05-a831-0dfd72967c2d",
        "cursor": {
          "ref": "0c576e4a-14b2-429f-8b31-2f3899fda380",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a6f689f4-cfdc-4e5b-927f-e6b3c38bf4d3"
        },
        "item": {
          "id": "eaded2c2-1714-4a05-a831-0dfd72967c2d",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "31de902c-9b6a-4a6e-8375-c0dfb05e9a43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2579be0a-40d6-440b-95ea-3698ecb7103c",
        "cursor": {
          "ref": "a7250d65-0298-41a0-9bca-d905c13a2d6d",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "985cb930-d4f5-4699-98f6-78040fdf6bad"
        },
        "item": {
          "id": "2579be0a-40d6-440b-95ea-3698ecb7103c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e614d2b0-4fe8-47a6-b900-27463bd616a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 734,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bea5888-0c85-44f7-826d-0b249dac04e2",
        "cursor": {
          "ref": "67860013-02dd-4c4c-8331-6ef5b35480d6",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "2c771b21-7753-4a28-83bd-314bbe9a8c06"
        },
        "item": {
          "id": "2bea5888-0c85-44f7-826d-0b249dac04e2",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "47c09dbe-8ec9-4a75-a3e5-c12798aa6ddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a5e5697-90b6-499f-86d3-96eae68105e4",
        "cursor": {
          "ref": "c689ec3e-8d10-440c-a919-6e3ab1523b9a",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "6ebd02c3-8c9d-418c-9fd6-fc72d76ada78"
        },
        "item": {
          "id": "9a5e5697-90b6-499f-86d3-96eae68105e4",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "cdad4b5e-a7d0-4e9a-982a-9583e5fdb8d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eecf05c4-af16-4021-ab5e-197bb4f167d9",
        "cursor": {
          "ref": "f4f15eaa-8e19-476d-9953-1fef995584d1",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "1bb0afc4-10f4-4adf-95dd-2fc99abb721e"
        },
        "item": {
          "id": "eecf05c4-af16-4021-ab5e-197bb4f167d9",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "a414b450-abb7-4ee6-b5a9-34438bade2ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6645b5f3-e1d6-4bdf-bc4c-2edd49377ec1",
        "cursor": {
          "ref": "b47406ef-fdaf-4236-b724-b62b94110ee3",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a109c1f4-7284-4500-86f4-f5f7f882a90c"
        },
        "item": {
          "id": "6645b5f3-e1d6-4bdf-bc4c-2edd49377ec1",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "5dd9bcc9-ec0e-4c9a-bf5c-08a8d7546f04",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "1b9647b7-6f58-4be2-b031-794d7c6a4461",
        "cursor": {
          "ref": "3f20039d-bec0-4ba1-abec-9ec18ab7d65e",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5b755377-a4cd-49c9-a549-0afe83d7d4f6"
        },
        "item": {
          "id": "1b9647b7-6f58-4be2-b031-794d7c6a4461",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "610715ff-9da7-41b1-a704-a23504b9ca60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "53d0ea5c-78f2-4e69-85e6-f2fc6b3b9202",
        "cursor": {
          "ref": "276532d0-4d22-4131-a050-d08f054cc40c",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d88be84c-4e7f-410b-9c75-d56e36b630f5"
        },
        "item": {
          "id": "53d0ea5c-78f2-4e69-85e6-f2fc6b3b9202",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "f76f092d-eac0-43bc-aaae-c3cb0f120bbc",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0883496-2ee4-45ee-9415-91c28f982cca",
        "cursor": {
          "ref": "f287c4f5-2f62-42c4-96fe-4c5b9cca9a96",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "3b144540-8e5d-4876-b51b-a4040ee2c471"
        },
        "item": {
          "id": "d0883496-2ee4-45ee-9415-91c28f982cca",
          "name": "credentials_verify"
        },
        "response": {
          "id": "665c8a20-4379-4797-80d7-95d0fcc64b5f",
          "status": "OK",
          "code": 200,
          "responseTime": 1697,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed60fe38-1e56-4206-9584-5a7b130cafc7",
        "cursor": {
          "ref": "a70179cf-b68e-4151-b67e-956fee58a904",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "c652c3a0-827e-42da-8f4a-ddb405626577"
        },
        "item": {
          "id": "ed60fe38-1e56-4206-9584-5a7b130cafc7",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "a34d75ac-1eab-4f06-8336-150ed936b552",
          "status": "OK",
          "code": 200,
          "responseTime": 2535,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a92a19b1-ef06-4b32-a9b7-d935622ed5a6",
        "cursor": {
          "ref": "5f4a74c0-5074-4f5f-9b0d-c80063515e6f",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e6d63e4e-b9de-41c1-ae2b-407ba9f7821c"
        },
        "item": {
          "id": "a92a19b1-ef06-4b32-a9b7-d935622ed5a6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "02bc7fa2-cde8-453c-89d1-6a5a484010c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "a92a19b1-ef06-4b32-a9b7-d935622ed5a6",
        "cursor": {
          "ref": "5f4a74c0-5074-4f5f-9b0d-c80063515e6f",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e6d63e4e-b9de-41c1-ae2b-407ba9f7821c"
        },
        "item": {
          "id": "a92a19b1-ef06-4b32-a9b7-d935622ed5a6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "02bc7fa2-cde8-453c-89d1-6a5a484010c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "a92a19b1-ef06-4b32-a9b7-d935622ed5a6",
        "cursor": {
          "ref": "5f4a74c0-5074-4f5f-9b0d-c80063515e6f",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e6d63e4e-b9de-41c1-ae2b-407ba9f7821c"
        },
        "item": {
          "id": "a92a19b1-ef06-4b32-a9b7-d935622ed5a6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "02bc7fa2-cde8-453c-89d1-6a5a484010c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "319d22bf-bf3b-4078-9f2e-c105cc75dec4",
        "cursor": {
          "ref": "2e88df8f-7c14-438b-a23e-d68c8058837a",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ab511929-b78d-492f-a454-55f32d8f2ff3"
        },
        "item": {
          "id": "319d22bf-bf3b-4078-9f2e-c105cc75dec4",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "d4c768e9-390e-417c-8333-a937d92c6b69",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "d348387b-d094-4ef8-8958-dfda4c1f5daf",
        "cursor": {
          "ref": "bf5b1c17-6311-4dd0-88a8-6f46f62229b8",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "3581fb96-416d-4945-b2ca-389a65a567fe"
        },
        "item": {
          "id": "d348387b-d094-4ef8-8958-dfda4c1f5daf",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "dc746b18-964f-49cc-b290-df0d83bcf9dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "d348387b-d094-4ef8-8958-dfda4c1f5daf",
        "cursor": {
          "ref": "bf5b1c17-6311-4dd0-88a8-6f46f62229b8",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "3581fb96-416d-4945-b2ca-389a65a567fe"
        },
        "item": {
          "id": "d348387b-d094-4ef8-8958-dfda4c1f5daf",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "dc746b18-964f-49cc-b290-df0d83bcf9dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "08c3d099-73b5-4c18-85e0-e26c8022e546",
        "cursor": {
          "ref": "1cf709ac-d0e3-4999-9971-87be428b2e10",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "4e5337f0-5a44-4c68-b47b-91c0b0dd7c73"
        },
        "item": {
          "id": "08c3d099-73b5-4c18-85e0-e26c8022e546",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "4f26ba0c-8fb3-4421-a834-6a7d54e7f156",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 118,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "8ae6bb2d-e8f7-439b-bd5d-c00a8e58d4c3",
        "cursor": {
          "ref": "50de4620-5d93-4a1d-9c77-6e794ff26612",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "fb22a20f-ebdd-48e7-99f0-3a5f66d03a50"
        },
        "item": {
          "id": "8ae6bb2d-e8f7-439b-bd5d-c00a8e58d4c3",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "16fedf13-d49a-4566-bfae-c9550c9b86ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "8ae6bb2d-e8f7-439b-bd5d-c00a8e58d4c3",
        "cursor": {
          "ref": "50de4620-5d93-4a1d-9c77-6e794ff26612",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "fb22a20f-ebdd-48e7-99f0-3a5f66d03a50"
        },
        "item": {
          "id": "8ae6bb2d-e8f7-439b-bd5d-c00a8e58d4c3",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "16fedf13-d49a-4566-bfae-c9550c9b86ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "95caaff5-82f0-440a-93db-094398c6a6b9",
        "cursor": {
          "ref": "e77974e1-3282-4ac0-8127-53d39c1ba7fe",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "c44a403f-79b3-4395-b20c-789e00e64d68"
        },
        "item": {
          "id": "95caaff5-82f0-440a-93db-094398c6a6b9",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "3e56244d-0aa7-4acc-8678-524ffcf4c09f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}