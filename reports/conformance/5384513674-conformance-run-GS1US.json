{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ff42e58b-fd90-47c7-b8d7-78c2f4e8253f",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3f9f2e50-2a42-4745-9aab-6074a4e9c4a9",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6c495e2d-1215-4c4a-bdad-accbc4bc10f9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "75551a1a-655e-44d1-ba03-2293a2a98888"
                }
              }
            ]
          },
          {
            "id": "2a42a0df-7e4c-4edf-8170-314221cf227c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "521bb06a-dd18-492b-ba19-304b2da9c422",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "31d47e46-56d5-490f-834b-e75ec693f570"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "7f5fd59c-4bed-4f38-bfe6-2eb80afb4da2",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "70fb2558-a742-4a13-a87d-b88279d68a08",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0f826cc8-d8c8-4ca5-962f-c214e34e7964",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0251a4b-9a5a-44d2-af5d-f2f0add9dba0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0d721a96-fd76-451a-9933-7caa9eddf37e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ede366b3-8368-4bfb-9174-03d4988310d9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "401fca87-4c05-4e2c-ace6-af6e99548c16"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "eda79794-3c70-493a-9936-d79ea93b054d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e0a80548-a18f-4234-a558-aab805afb7a7"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8b51c96f-c57f-4f4f-ba69-46e60846034f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "317f5da3-ce24-4cac-8685-1ea000440a8f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "49f32dfc-a5a5-4d83-adfa-a6e63d100a65",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2227043d-c53a-48b7-8bbe-e3d66f485d6d"
            }
          }
        ]
      },
      {
        "id": "0aafa180-ac52-4cbc-b7f5-4562720a4286",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "7dd40929-4eb0-4def-ac49-32be16bda5ab",
            "name": "Negative Testing",
            "item": [
              {
                "id": "135ce17b-17bf-4ae3-badf-36b723b94443",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a9d3cf1a-e9e8-48cb-8af8-78c3d2763629",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f09e2c-366b-448d-a010-e19ca2ff90db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "432a5e00-999c-4623-8218-9a0377a838fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d2e9681-9006-4802-aa49-642019a7d974",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "859b44b7-f7e4-4f35-8fff-3923636d89ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69801c5c-e657-43c9-aff9-948597497066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d889d111-e260-400a-a9f8-90e2c20e8c84",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3950c8e6-dd12-4f7d-9908-3c6d09e2de24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28b81bd9-51d3-4991-bd4e-27218e3fcd75"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4b8c4b16-b940-4499-ad50-cf9693bd1f86",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e94dcf2b-c0d3-4de9-b8e0-6215685e074a",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83e7fb76-5f6e-4854-ad19-44e67d25514e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7cbcde7a-2823-4f89-8f4d-aaed70ceb404"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fefae88e-4c3d-41d3-a66c-6aed1df661c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c97789ef-6e58-43f6-952e-0e2e9e10b705"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9127c2c4-0d9a-4e74-b585-9fa11fed222e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "747f6d95-eb5d-4aeb-b153-76906fa988d9",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2106606c-1cfe-4e71-8269-55e2d17c44d0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "61d075ee-54fb-4d83-ae7e-7449c623399a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fadd7b78-2252-4a1d-9de0-1ab928b14bc8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "233b0604-6e5d-4c78-a466-95dd0311fd67"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a9d27acb-aa04-417c-9021-205a20ae95c1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "99e9d3dc-447b-4bfa-8452-df32d965bd27"
            }
          }
        ]
      },
      {
        "id": "af02edf2-5abc-46c1-b991-f7a6fff20c70",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "83d228ee-6008-4e5e-a4d1-c2444cdc141f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "34a73f96-dfc1-476f-a975-3e1f878dbaf3",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "4cd00903-78d4-49e9-9581-dc69768ae955",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34726523-4b7d-4eac-bc8c-035db39ede28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adea20bc-53b3-4a71-906f-6d7f943105c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "803a5dd8-0ed6-4cff-9e8a-b3fa0d367c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "704834b1-59d6-446a-b21f-087534a6ec97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35f9bd6d-4a1f-47c5-973b-321156384120",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9932f75-ad90-4975-b273-4a912d2b57c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "675ade6a-ff4f-481b-8a51-3d42da556233"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f4c5085-0447-4ce4-88ef-24c7f1a4f607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e4da741-5e30-45b5-a60d-0a447174d962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3abd3e0-92f6-4354-be34-58eb9d0dbf6c",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b1b16f-e45c-43fa-a6a8-924dc37b0102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e045d6a4-cbf1-407c-9d56-745296dbdaf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e79f817-73ec-4e3d-b329-09f7bcbb9b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46fa0d5d-2673-431a-adcd-14946ed2d65f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8527d153-9cba-4255-9293-a1727b7fbdd1",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "748942b5-c258-4cd8-abc7-86558228bedd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba094a66-9ef8-4c56-b254-eb6456c56695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb7a8924-9416-4f31-aff4-60876aa0c78c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84035c8b-0d34-482d-b397-e774ff061e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70554e7c-f1e0-4f35-83f5-d1442dfd562a",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c09aa038-38b1-4804-aed7-d15bce797b38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "346a48fc-5866-4c7e-86ef-39f798a70524"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb9ee89-d45b-4289-8292-1c6ffe68a8f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d1f3d8f-2bc9-4931-9812-ff8bc07aedce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d31da458-3a77-468b-b15a-cf6a347401c4",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "452ca3c2-7b04-4645-937c-fe320fda9bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f75e85e-312a-4b49-b8c0-70cf36998f5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87925c7a-b9ae-4f16-8369-7c9a4be31327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48c8f21e-5ff5-40be-a9db-b19cafd3507e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67858fd0-4910-483b-8027-fd188a6e3035",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22693fd5-9a37-4404-964f-471124099645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab73719b-1ea1-4412-aafe-4568694aef63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "634449a8-d1ea-4645-b0b0-baa077e4ac3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da64480c-ac72-40f7-9b30-5333ab3b99b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3cfc78e-3283-443a-9ecb-259464817209",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af193e8-b7a6-465e-ae71-42fc56d81e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68c2474e-2a45-4479-8d1e-51d2f14380e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f205c3cc-404f-4688-b621-a2d0e5f2ee8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3cfea7db-a33c-4292-8f7e-cb96bb488354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2235c25d-63b6-4fb1-976d-254a1f26d1cb",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9703df1-bdc5-4c85-b95c-b5f44e97a13b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca16fbae-81c9-435b-b5a8-d8f712edf4b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89c388a3-9ca9-43bf-b3a7-257c84ab4a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb3525e0-cbc8-4be1-948a-1fffdbcd4835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c26edac3-bc6b-4add-b5b3-c512d7350f8f",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7257a6a9-6da1-46ec-9647-0802ab0db9e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8c84242-3ead-445a-9228-721298279753"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bac6c2f-3603-487c-b71b-287ad5a0ff8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "083d6a19-01ac-41f1-bbaf-72bab5d4e612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d27b7107-4a79-4a65-8659-0ab21ebb7324",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d5ca9c7-3bc6-413d-b806-f570a841a03a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e4b0d22-abd8-45fe-bf55-f06115035a9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c43b0e-0c8e-4444-ac3a-59e7eb62f3bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6a89a14b-684a-4c91-904b-fb3d69adfe0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b73c7b51-aa32-43cf-a332-95dd914cd531",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd5866e-5902-4fae-940f-0233a9e660a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5512e084-308a-4aa5-b836-53dd63377cd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8531377c-55ff-4353-b5fb-5312e066f637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98912466-303a-4113-ae6e-28b3bc8b29a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67592316-5521-4665-9daf-588d738a0421",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43872218-ca7b-46b2-8634-1ed6a55671cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fcb9165-9416-4ecd-866c-c901c20e2fa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "691e212f-2964-4238-b367-ba9e214fa5bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3cde93c6-cb2b-46b7-bf63-a44a97701140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "967b73b1-cf9d-476c-b71a-2350d85b5867",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c36283e-00cf-4a2c-82f5-43cc84ef1aa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b91b2e8-3aed-4578-b25a-1f9dcd8ddcb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77dacf42-a01d-48b4-aa39-95d37af3ff8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c197fa0-cb55-4655-9108-49817a1e1d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6df33534-6ff5-412c-a34f-35c88c7cd241",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb8a070-e116-436d-9d20-ab4497a2ba42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9ce6e1a-4992-435b-9823-1a87928a4559"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7550aeeb-268b-493a-9c93-2b96321dbab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8798addc-2153-4cb8-8e21-7ec9790037f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6138a40c-4cec-49b8-b2ea-8c13e6f73e5d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "855480e3-5537-44d5-96ed-9518bd6a2be0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfd0f65d-b405-433e-80db-a6e0d8376e6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bff973b-d2a3-498a-9a5a-ec1ed76379cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e41ac8d-b7c2-420c-afec-b6257c3426a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a2bb2be-a578-4693-981c-18a3874c4854",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ee78ca5-744b-4bed-a293-b4c9e58298ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33c0e153-38e2-42b8-9780-82bbefa7f964"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d88fe958-63fa-4b58-9268-1575048c633b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4055ae67-3084-4e2c-8271-b603e68e0c1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b395ccdf-6a03-4d1d-9248-31dd4e28eb26",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d2c6802-897a-47a4-b766-f35004c37c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03a1a024-648f-4350-a7b0-0046a66c028c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d48412fb-6a3b-460f-9af8-55a9248fa84f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e023a3a-ec3d-4f18-9dc3-1a8829a4698f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b280e850-2330-4d3c-9b4e-124d49b4de0e",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a7fa3e-db92-4b73-a881-3371f370f397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddbe72f4-b8e5-4e95-b1fd-e059ca56a932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dccd073b-5a89-4015-ada8-d11460d27544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f56f42af-b595-425d-8cf0-8e0fae20e1ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe2ad114-4f56-4354-ab78-7c80b904a805",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f5e0c5-4d35-4779-84d6-54c3f3d0506a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29163cd2-542c-4de2-804f-524fd99109ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a78d3fe4-aa1d-44d0-a37a-aad64a4b4489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f97d0de-4d1e-435c-83f0-4c176cb256aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f76ae13-0cb6-4439-9b54-6688492684d5",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e9540e2-b4f3-403a-939a-90cdf4c49679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1d39716-749f-4ad6-af9f-6c1fb324ad3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc626e9b-ddbe-4981-9ce9-1892ac86a02b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c439b7e4-377a-4163-bdf6-041c621d1446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe183092-6d30-4316-b678-d99aca749ede",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38fc6fbe-88ee-4390-b34f-2968f5e975c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcbf60c6-e058-4f71-ab2f-0fbdc4ec28de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12bcf8f6-6cb4-4958-8df7-8cd5cea93e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "88e66a0d-e11a-489a-be28-aaeb065c8a18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "572ec52c-b90b-45a4-9858-5bac92f5dffa",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46b880e9-6642-4184-8db6-b590a05914fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c2ce67d-a870-4f4e-a3b6-d12376387857"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77eb6761-d020-4a64-b34e-322f832041d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7a0ede0e-ec6e-4260-a96e-b0b67b5529ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0166b7d0-4b57-48f0-9ae8-61be8da674c0",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "440ceee0-3e30-4777-b9b4-b9b375dbc61e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50086e35-7731-4249-bbd6-1ae14bce182f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0b27216-1dae-4c6e-b3ce-7404b3427030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa43172b-054b-4d57-840c-c68292052f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1917887e-1b32-47ea-a043-d2064b6114dd",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85ec1fb2-944c-47af-8ddb-6378b51decb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3df44b3-825d-4c6d-a356-a49417676791"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eddf1d20-e407-4632-a04a-0cadcc322925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0569ff3-3d0c-4acb-b86a-88dd6337bf18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c50c556-967f-4cb6-8335-bd780a94778e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a4c675e-ae7d-4cd1-9171-9fb7f959854a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32a466b4-9639-402a-bb09-54813ec225ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef04b24-67d1-443a-a29e-0644e956406e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "729c27b1-84a5-4e34-97af-c611cff3f50c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9e1e4e0-ae8d-402f-9ebe-5327723262dd",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a66c494-77f7-4de0-8fa6-8cdb114f0c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60683157-aeef-4666-9206-8ee60392e853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25b164dd-4b5d-4b40-b65c-c9cff9349b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2ccf3b9-d795-459b-9575-db3c27736dfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9865909-d586-4481-8012-99e6abab03c9",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92423f46-e0d8-42e9-9b42-148a3a3bc0aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b253c2a-e6df-48c6-83a1-dddd14113416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "317de7df-57e0-415f-b3fb-8551566fe214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "87774e8e-fe04-4fab-9fe7-a6d6117984dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "482ae4fa-1752-4f68-b205-551a0d7bf93c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f243f71e-8bfd-405c-bf8f-18b2f47dd8af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc4ec1cb-f151-4240-a876-bba734bc31c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec59d4fe-fe07-473b-9254-923d51162001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "039d1b40-667d-4abf-899f-1da24bcd9057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2519c87-67bd-44ba-990c-e9fe64ed5aa7",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "007146d4-a9e1-4c1d-ab2a-4cbf1e009c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d66a1f2-dc35-49fb-bf9f-56a912f773e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c04fb0-cc51-43a2-93dc-ce13cc80c265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "71526858-2349-4baa-a223-7e1015b192cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fd18ade-823a-4fad-995f-32e920872a97",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2a0420-6303-4ba1-ac21-aba8006417ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2e1ee52-96c5-4ab6-b31f-047558e6448f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "061b7228-88d0-4135-8dd9-b76e7f9bedf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "99c8fc84-33c3-44dc-9d2f-1bacc1ebd408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5fe1db1-0e51-4c5d-9cc1-8600d9ce4847",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c57d647-f5f4-4e75-a632-f0ec832b6074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1657ecc0-2ce8-4462-8410-267b41a0b8f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c79edc7-2a0c-4630-a2fd-718a6d27a5fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab710b28-0b42-4006-8c4a-58cddaca4d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78ce9116-b7b9-413d-b413-731dd7dbc62a",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84732e0d-e6ae-43aa-93fa-58fafb1259b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12664e05-047d-4385-9ab3-ff8dd748edc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82217859-16cf-41ab-b42c-00aa17abeded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "369f78c5-9da3-4416-ae21-6e2c00cddcae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c761188b-a24b-45fc-bd77-74ba04bbae49",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b96b611f-d54c-4af1-abc1-1be41956d886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7dbd79a-c041-49d0-ae16-34be315620b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f8a759-d886-4234-b028-03fc05835aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f985f7d-6021-47ac-8372-64819d5b08f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b909f47-a723-493a-b2ec-221017732cda",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c0acda7-5fb7-4e48-b0be-718a7894a862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c43631a-d4fe-4dac-87af-6a4681b01329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d73e4ed1-93be-4ede-9f46-1e9a8610dbb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c3caf7a3-07a1-46b0-9077-b41cef920f89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aac92ec6-387a-4c99-8e3e-9967c3cdedf2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e260dc-22cd-43b4-a896-d88bfe9180d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a20f2b4a-a11a-41cb-9d87-1d928cec6ed2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2e17048-6b28-4a8d-a16b-b65b7896dd57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c27e7628-d12f-4496-9f57-c5e91959ebed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84b58c75-f6fd-412a-8151-31e1266c94d7",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f443694c-77af-4cb9-b314-8fa6ba181a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "791e9c0e-fcd9-4ce4-bcf9-134d79727ec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c256a3-d4ec-48df-b620-2bbe56480aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "11b7af75-bba4-4f36-9b2a-6c0aaf6761b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2088872-fde0-4f61-b98d-8c082e171c6c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c9e09c2-15a8-498f-aac0-fe727aa155a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6f86313-f1d8-4d62-b961-44afa009ebbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c12b63-648a-48e3-ba3a-d2797efb3fc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a56ab178-1ef6-480a-9b0a-2e82e5415bb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde30a74-2ea4-4ae0-94e1-aacb309f3c89",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d0c4d56-95e5-465d-b57d-6b4870de4b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11f8030b-8970-48bd-9e33-6e93d19d263c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c019a46-06dc-40c9-bc12-094edc34c42c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9060a6d-ba8a-4082-a5bb-1417c8124b5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14f0bbce-44c8-4453-96b4-75be59117ffb",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11d21400-9de8-423b-b39a-f1895b4e3850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4bdd57b-68be-4ec8-9167-53815b36d772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1829c271-2395-42dc-808e-2fcc7c209a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "51453b9a-155e-4a2a-a487-e3faa793a6b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40c6576b-5e80-4a58-bc5a-78ef44921e40",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a38fb622-a914-4b3b-aa77-aad4c784a291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f9b2028-de47-441c-988d-e5a806cd00de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf4d45e-735b-40b3-8d2a-7804f6682825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "128382eb-936b-4461-9311-236b8eef2c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29d4e14f-d686-433a-af74-5df35575d16f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b799cfa8-ef08-4190-8c4a-cd8a5721db19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfd719ec-e571-43f7-8c3e-e8e17f5b510f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10c560f9-dd39-4481-96d2-4b77f5ecdb8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "47b51cfa-d4dc-41ec-867e-bad6f6603523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc5af6b-11b4-493d-ae5f-4466206e8424",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c5bf93-cbac-4468-befd-3c3cf89ee400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5372bd96-dc7e-45af-8e8d-2f71860908a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf38ab1d-fca2-4066-b465-916299ce354e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5a46f6b-f8c3-4b1c-a9a2-a5dce23f6d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5212d399-1c6f-4632-84c0-d81c81580191",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ea644fa-9552-4f94-94b1-e5b88cec9e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3523868a-58a3-4f5a-b95c-4b9285797c7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "867f6861-f6b8-4c64-8424-ba4f9377f966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "97e71113-d050-4dca-885f-5154857fb168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "698f9001-ed8a-4d60-889c-245e52dfa4aa",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84935e68-bc80-47f6-b79a-3663629c819c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eaf60ec-9340-4e0e-aa1d-3da5c5f344f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7bc3df7-2c4a-427e-9366-0f1e480894de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1d3abdc-2dfe-4abe-bf76-365ad1242718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb254fb6-be87-40ab-8016-1a1a55e55c34",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b99dd3f7-2315-4c7c-8a61-8a0b447c7804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56a48f76-d939-470e-8ad4-d70d61658514"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d62f84-5fbb-4eff-805e-7936ca679ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d706525-b71f-472f-8bfb-46fb54768bf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c68b2a0-ace1-4f90-b34f-b91831f2ff4f",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b5678c6-d333-47dc-9a83-335e5a0d0d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b945062-6552-460f-8396-9966d58b80b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecad10dc-706a-4e50-881c-85ac8bedd9e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "10ceedab-e942-4de0-99da-ca1aa0805372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9eeda0e-9a2b-4034-8287-fb69c46cd0c7",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcf08010-5a40-49c5-b450-572d00b64949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b405e6c0-c3c7-4339-a631-34f3e7af540c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "039c2d7b-5555-452c-9990-ddf0fa996073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "06a884ea-59c6-4b7d-beae-ee9a0830ead6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76812c3e-5989-40cd-bab3-90430d715d7d",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a62e36-06e6-4eb6-b551-ff8e06a6711a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfebe622-7a04-43ee-9000-4e94565ec8f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62cbe70-d5be-4f55-ab16-9353ab89b3de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7d5375c-a173-459b-b7ae-17e23eae981b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eb7f16c-9ecc-4ddf-a960-cfd5873fd40a",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "642f7265-f588-4b4e-9f85-ee0eea41e40f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38ae69c9-7da6-45fe-ab9f-b40ec2d2a983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdef56ea-9a67-4e5e-bd53-c5e7545455a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3409b14a-4986-475a-9418-a005261c2a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ba1bd9-ed0d-43dc-b92a-0619b67517f7",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c31b946-add2-4fbb-a291-4e5c08c5c157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "021d15b7-c2d9-4cf7-b51f-5617a5872440"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bdbda76-d13c-4a1a-925f-ff354b378c3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8bad6b2-b5c9-46e6-a286-b81a67bc7c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bb01244-bb84-4d9a-a243-2fe197c9a06f",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaef3e28-56e8-4fea-8d40-aaa458401b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f849de54-7e5c-4999-bf11-111d06b8bcda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d29deba-a333-459f-8287-3b977c7ddf61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "804e0714-d4f8-4e8b-961f-4353bb0b3621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b61fd44-aabf-4f0c-bcef-3406a71f1e07",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6243b32-ea56-44ea-b73f-cbbd9005c1f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dadfc61-1c65-4d7e-a78a-9f0e5aebbc3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09cbe990-ddfd-4653-a216-ceb03977057f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b75eb681-b9eb-415f-a1cb-d12e560602a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84080fac-ad19-46df-89f1-02d7df0198e4",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cb7bf40-73fe-45cb-81a2-4a554bb90530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3be4a8a-1ada-499f-bc44-55bb27f17398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c8bd48-0312-4f3e-8037-9a2d039fdfff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0bc814b-eb32-45c7-b030-aaa02453e805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf07c041-b700-4a41-a2a5-9f6a036e1181",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60762bbc-e4a5-42d6-b96a-912b910dcae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a39ac91-c69c-4743-9426-3b59bb9b2930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a4c17c-a57f-432c-9947-7b914e743c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2aa1f32b-b386-48f3-8475-7cfa846d98a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e006a32-3318-43a6-97ca-6ebcfd5956d7",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42846082-9b4c-4dd1-954f-486f402d5e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0aa4e5d-715a-49c7-9e82-1e961fc1246e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ac428d9-e465-467f-b8ae-0ea0693e5084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5d13f50c-377a-412b-a3c0-90fbecb10f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fead7e4-1373-44e5-ae2b-0a06caa1e537",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eeb4879-b6f2-4085-8122-baca5d7236ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff4f7b55-9760-4722-9978-50246f344534"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa56628-3e27-4360-bd74-a592f3b00e89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "89f82f8e-b686-4e31-ae07-c6cfde934e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd6dafb-1c22-41a1-bb74-bf6bf8cf4e02",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d1d8b04-dc8b-451d-8f08-145d901c2062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c36a3ee4-48f7-41b5-b2c0-6fc4efa4d0e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45eb119c-7ac5-4875-92a8-b43a0ffbe5d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a0d0c0b-2ac8-4be4-a8f2-7eb08f8f9306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3aa4106-a93e-4698-afb9-ce678cf8419a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d15978-ad5a-469f-9bf7-d4ead20cc9b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc0dba03-7ea3-40a5-9066-2eb3cfbf5dea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0704a59-4854-4de6-a939-61d8cc4a3147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6da810d3-afad-4f93-8399-9657ec3db590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd78150-c5f1-4251-b04a-ce5bad866df1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5942af26-752c-491a-83f3-889871be3bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dc87f91-24f8-42ca-9dd7-ac2bfa134380"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d067fa2c-71d8-4f81-99ea-18ee84afe653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5c5837c-1566-41b5-b50f-9a7708f5494e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04ffba12-f538-4145-a005-e1331db37ce3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c90cf4cd-7d09-492d-a735-80cf8e86ce77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2f3df47-ba76-4bdc-b8ce-8db57d70f8dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac3d17f5-6c2c-4285-9e49-b648b094577f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5c50bb0-6c7a-4a88-8423-42a512ef014c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "036be6e1-424d-4ed3-b0d8-afc50a3b24ce",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c74aa3-6d2a-4e25-b7f1-c51749cbb141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a15fcf7-4947-492c-a457-0d34260278f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59b8b034-91ff-466d-b9a7-c81e14fffaf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5721262-9d4c-48b6-bac3-2819fef21708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f98a6f2d-f0d0-480b-ad0e-d1bb46d0488a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e9e6273-284d-4007-90d3-eddd69d4d2d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4e9a05d-c79e-4455-bd2d-207774a7734a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "224c7428-6739-419b-8545-eaaccc33f9d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f14ec4c-7003-4691-85f1-d5685c6f9b3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1747d364-eaf7-45aa-a529-98a02d4e1b70",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47ac1858-9a7a-4d99-b830-2d86bee0af30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad3d4d9e-f569-4f47-9431-c4e88c107214"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d667083-0561-470e-9fc1-347c98b241a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "78d476cc-1a49-4f0d-ab78-0655a530b238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d5a713c-1747-40d3-b305-6cddb7f10cbd",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f286bf2e-c923-4c47-bd64-5f19cd072f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "001689c4-722b-47f0-9a3f-9b639689f23c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31958a48-4ec3-4bd2-89f7-6e49d58fe2e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b425f68-9caa-4d94-bfe9-e4c230522555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90ffff95-b9be-4033-bd57-770e05ff0692",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2820b0bc-f227-4037-88d1-8d7346160d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3513814-2f7e-4b7c-aefb-38588c4a16b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a59d2ed0-7401-4dbf-b581-b75ddeeefe8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "30a85d4f-fe84-4e69-ac18-c49c7db9dc43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb9e3b52-d46f-4fff-b81a-c01d6286bc95",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1346c444-e93d-43e9-b6c0-5fda4cf41e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb8f31c3-f45d-4e2e-ab71-09bd6fd44678"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cab2e9bd-c272-483c-9839-c5b94d21494e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "77842da0-c819-455a-a44f-00b00fc10a53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a68f9096-d83a-43cf-af4d-16f7065b142c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa851bd-f1cf-4c9b-b3cf-e22d9ed38ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dd5e3fd-c0c3-41ab-8d00-5a24f1bfffb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61b9f835-71df-4bb3-9182-947d530e8d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ca70bd7-21bf-4492-afbe-8c64a4fc29dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a43e57-0c65-4494-8d96-34398510a071",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca41294b-07a9-45f1-8773-83ef61aa8da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6570e90d-928a-45a4-bf2a-57435bfd5f5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad0f27e0-aaf8-4744-a850-e9eed883f362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "272a39f0-ccd2-49b5-b493-e528511aab15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e36ddbf-6fa4-46f5-a220-594e1811ab92",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f541bb54-1021-4f12-98c4-f0d6f5ac15a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3247182e-b617-40cc-8017-4466570e93ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e679f95c-ad8f-4d41-b947-478cad9675f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5a67e31-0e41-43e8-85aa-b1bb57aa0fb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b87f7a5-3d93-481b-8f2d-0f71ca07db78",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1686cef3-d65a-44d8-9727-02b3c3cdc1d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8ea5085-3404-40b9-b36e-6fb69a154f77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe275f6-ab3e-4107-999f-374901e2f3e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cf3277d-13f2-46d2-aac4-c89613ae7fd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ea09ef0-97f4-4c12-aab3-1f5fa97ea0cf",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "567b0ba9-4daa-4238-a6e7-19204e322e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0addb79f-03aa-4142-8877-ce08c7e26962"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2888387d-ad3f-490b-b4b5-0f49a2964c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "306e59c3-a395-4667-9088-288311beb8b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ba9ef1-32fd-4e70-b8fc-e4db6de5c87b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cc61a14-2ccb-42c2-8de3-626d6451255e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66cdde1d-4a9b-4f47-85a8-c7b1e2c6736d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "227d3a89-5789-43a4-8815-f3778ef3ea2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ecebff31-167a-47d7-b505-e17849df07b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a961ff9-109f-4fdd-8f04-bcdf7550649f",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9a3eab1-29d2-4078-aecf-90e6aa1626b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd661002-a9aa-4113-b34f-2007b3a87ba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "711acb8b-80c2-4a10-baaf-a53cb8be108e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0f8c2e2b-c84e-4e6b-a9a1-daf44b565d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58847fbb-4a81-44c2-bbb6-6e77332e61ff",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3580a840-03c3-4768-8703-d0ef9e1e9a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4d6ec4a-202f-46cb-95cb-a0550f9bd107"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "962c60c4-60d6-4886-af3e-977d055cc52e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1abadcdd-d13a-4598-af0d-6ffab6cf4f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31629c4b-828c-4e9f-bf08-161fb8141fdf",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd8fcc1c-cea7-4bb5-933a-aa87d44ff993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "940e12b3-ee09-4dd6-a793-c321baccade4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2fd3e56-2944-41e7-a344-d302888b6f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f684b1a-538b-44ce-9df2-79a3e51e1773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a108b03-a105-4151-aa2c-ec3611e408ad",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "484e39c8-d936-4afe-b3e1-2f53d8f8e356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a68d76f-d892-4d23-a5e7-2b330ea3dd7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa79bb6-bf7e-408c-b60f-87bd2ef07d70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d18dade7-d04a-4cb1-956c-4851f385ce31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d6f9a44-6b43-4186-9388-ce66bf474ddc",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2495e60-4f8b-4ec1-9ea2-f87579613455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "499eb942-1595-4727-906a-d6d380898f50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09d02cd-a7e9-4d13-96f0-98420de32a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "69e1f5b1-b416-4781-ac13-cb2fdbd07dfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25957765-5fdf-4cbc-9db8-621793be277a",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d2277c5-42c2-45ac-9053-85ff2fad539e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8a6ca8b-e136-4e0e-bd18-940270d77467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2414e475-9b8c-4a3e-8f33-0405b1d3bee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "86454b9b-1e5c-4787-ad6a-658d5de8ff48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d167b2a-26fb-4bdb-beea-530c369dda83",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6da8566-1173-4ea5-8a71-f834192b43bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d37d64c1-819b-4a23-af59-b8bcc15886b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b223a0f-46fd-4f6b-9c19-7e0450ca59db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aae71625-6e63-48a5-bd70-9a4ff187cb4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a8a7112-af07-4f02-a02a-745383bb7013",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59380537-1773-487e-89dd-284eca2c2906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "402fd89d-5566-4dda-b941-9258feab4d86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "166c8594-c060-41af-9cad-4f7f74558c3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "46eb7024-f1bd-42f4-97b7-43c1594f5a42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7486ca8a-af39-4935-a5e2-15f39ac59fb1",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "699dcf8e-5bbf-452c-be85-2b907ce8001a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21d56374-fa2c-4171-a1ac-5926f68de64e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29c9112-3513-40bb-a294-83312a54946c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "919b59a6-c28b-441d-ab84-f743b1069450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed51bb7-4973-4f5c-b79a-9ce62cb9f740",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f9cfed6-f790-47c7-abbb-b2fa58a3248b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ded9845a-5606-4ff3-9fe6-fedc3e527270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a8c9a6a-2ef4-4539-b552-d62ad33664b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e0b512a-7bd8-4bff-87f1-f8e3f20dc85a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bde739fc-8ad5-41cd-9668-ea10d91f024e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ddf752e-ae86-462f-a6c6-c2b1e6bc68af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41f0ad41-efa2-4e48-ae5e-27955b9833d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83cc9042-40be-4552-adc1-0358280581dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a24c2208-3b43-4c31-af2f-9a1bfab96f94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "445d15ec-57fb-4371-9c14-00847f906742",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "606973f5-d441-47ab-9f54-d117cc7c722d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0561370d-aa78-47c5-ac67-d7e6afffd308"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "890ec368-7f0c-45d9-8cf0-0456b6c4c436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "da597ce6-7797-4622-bb7d-1457b5ef9a80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5264e7b6-b776-4c90-8c05-a781f05b30b4",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bbe9758-59ea-4d24-81b2-64266ba7a6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea545561-6a30-4830-950e-98e9ec4f94a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ea51ea-2a40-4b99-9de7-bd8445efd375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7dba96a4-e058-4ec4-bdf5-a6f3329b37f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de11801f-2430-4ea4-9177-cce9f03b36b5",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "578f2c35-3014-4f12-826d-5375793d11dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a826a2f2-94a6-422d-8dd2-5fb592fb2cec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0425e42-3593-4968-8b31-880eb9f61c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "468c3209-33bd-48b8-a313-d4cc579e5ab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "316546c1-22a3-462f-8707-2b76ea3728ad",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75fd34ef-dd21-4b2b-8c5e-c015b1a40bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "731ac03b-20d1-4835-af13-5612260cca9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae6d756c-4697-4256-8812-93165b5e1871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f5259a1-d64f-44b4-9316-ae8e94f1f43c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d192ed8c-fcde-4c9e-891c-c08682a9a515",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e965f57-285b-4a0a-bc33-8da07febb38f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2bf807d-56de-48a6-89d7-c733e5ac0efa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bdcf7f4-4dd3-4ae0-83f9-d39b366932f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3f8fff5-c0fe-4329-ac32-21be57a1a3f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17c86ee2-4c42-428e-a593-24b570abe781",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c13e345f-4ecd-4316-92ac-760bebda154d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de83a2a7-7b0a-4f1e-965f-46d225c46255"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340eb276-a790-4f04-be95-26e66ac9fb50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b266401e-471e-4cac-b30c-53d728387085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3218f05-4620-47c6-9a44-8744363c60ef",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8e984e-db88-4177-ad8c-0899cd20bece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ea079e9-50f1-44ef-92fc-7fb8e4046b75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f754f47-2305-4a27-85d0-be32487934f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "85643674-abab-46c8-b72d-9989888afc4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "498ece95-b035-4f64-9630-b9da75c02e83",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85228a7b-ce8e-4ddd-96de-744a71d3c2e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ef206009-27a9-4613-95c7-17642f346373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1228a8d-e666-4078-9223-90ae1c220467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f828910-0f5e-489a-ba1f-a7b94d57203f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "afe22408-3f8c-46eb-87c1-478a0609823e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6d7a083f-ffcb-440a-923c-9f9fe27cef74",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96807cf3-de67-4c2e-9f27-fb116dd4f108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc6ac13c-b7b2-4ca0-9415-772486b169e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ab4c01-1389-413d-9a3b-2bb23fcd0dcc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc080383-766d-4f7f-aebb-84dfc48247fd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "42be162c-4083-4392-99f6-96cd96041ed8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4bbb49f-59b0-4af6-9b8c-ea523588d6a7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6a65f20-a001-4985-8139-1ac125b6bb56",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e71461a-6571-490d-97db-314055653b11"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "172bbe09-b9a6-4889-bdde-56d9126db6ba",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "746d50dc-a928-411e-8dd6-c53003f38309"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1e287365-1d59-4017-bd48-0c7152891329",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1acec6e6-5676-477d-8414-ded410f9d22c"
                }
              }
            ]
          },
          {
            "id": "d7d37402-195f-4915-9edd-47f00b6d1f19",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8395f6af-009f-40f3-bb04-8f3a53f94755",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2745d49-3baa-42e3-b63e-b04af3bd2f62",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "96eccce0-26ee-4323-b4ed-e655e4994888"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5965e21f-cc03-4a52-9cad-ce9e4006696b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3a6d089d-1400-44e9-82d4-c137cbed926b"
                    }
                  }
                ]
              },
              {
                "id": "011934d4-80d2-42cf-8655-4aedbc0ee79b",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1e3ca05-6ab6-46b0-b210-a05348622bde",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "953c4e62-93eb-4b50-8c47-e3a6cc8ccf33"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a0621dd-3aa5-44f9-a935-74250db5cf46",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "11c65058-49a3-4308-b2df-61e14152c21b"
                    }
                  }
                ]
              },
              {
                "id": "aab73725-6ab3-491a-80b1-b94d7b718247",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "59c0bc1e-0a8f-4a56-ba96-e33b3bfab6a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1bd7e63e-749e-4e8c-bff2-1ed28d163de9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4b1a4e9-b505-4f29-92c0-382226e5f285",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0413e123-8cfb-4849-87ee-593ff41bcd18"
                    }
                  }
                ]
              },
              {
                "id": "5a8728fa-ec20-46cd-9fe5-643540f946b0",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a383511e-e503-47ea-86f7-695bfed6a4ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d14bcc47-0ff3-4af6-8bce-84ec85ce11df"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "734ac6f6-28b3-4942-a818-88e8a50c35b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "64938e38-e2f9-4794-80c3-29a65f422ffa"
                    }
                  }
                ]
              },
              {
                "id": "3bcd46d7-b43d-4b20-b76a-651712c1f6c2",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4886074f-1c05-40a4-a0c7-f2b5473ca42f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2e544c14-647d-4ee9-882e-f309a2e653e4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fef65de6-e5ce-4afd-9305-50b748534049",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "69795357-58dd-45ff-a00e-983cdff92eb4"
                    }
                  }
                ]
              },
              {
                "id": "2e8d942f-b67e-4148-83ad-1fa8a0c94c98",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0921093-296a-47f3-a87f-40ba4d3277fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "112d9a7b-d721-4b1d-acc9-40ee0c28476f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06c1f2d3-3aaf-4fdf-9c76-d8ca150b7cf3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d0de32fe-6c65-4eec-a170-09d7b0dbc38c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e23cf0c6-d5a4-400d-8f4d-0c8c931631d4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4be5640e-3c1a-42e3-8c29-9d775647c5bd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b188a67a-0aa4-4e93-a31d-64e12c57a473",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "89f7619e-0b57-46a9-8859-5b96e1e93df7"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a50f1f8-2321-43cc-8934-3837d486f68e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "4cffd4a3-9216-4688-b96c-971d64c267c1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9e50eade-cb0a-45ca-8bac-5f648812ea71",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "be1caf2a-a3a4-4e14-9425-62428a90207e"
            }
          }
        ]
      },
      {
        "id": "fa3915c2-33c5-4512-aa0e-02a7d18f1728",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "743cfcb8-48b8-4c48-bb25-cde107aca41e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1ea9f8c9-afd0-4da2-95cb-297590b28a7e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "573929f5-9b61-4a45-a4ac-64921d6fee7f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e4792a0-b239-43ce-8552-7fb37606d851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d79d5e14-f69e-47df-9024-eca06c5ab35b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "539176b8-b2f9-4c03-a2a0-6a76dbaee9da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "72118d35-e027-4ab9-a31c-8e954d3ef1ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc9453d7-2c90-4103-b946-94e225fefca9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c7503cf-9de8-4855-94b7-1fdbc8d1e909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1531038-24b4-4f25-8a04-1fbb94bf4a75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac84a7c-29c5-4620-9c16-eae36927d91b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3ec8baf-d6c3-48bb-992c-5a0e8107b838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26b92189-7ca9-4ee2-aec8-e1fe39ccf628",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac1cf61-23fe-448d-903d-fec09d8f898d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8c1e946-b321-45e8-859e-32b80ba1f179"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c2e295-bef2-4304-89c6-115efed4fa26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a843cf5b-6df6-4f0b-b4d5-e67ca4407b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb035d9-4905-42c3-a796-f7f902ecb107",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b78ea3e2-36c8-4b39-bbfa-d8afb5ce3cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7189f4c-879b-432e-81d3-45f71e045865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f874fc4e-cf30-4e59-a3df-fa4847eaeed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8c3674a-ea44-4570-8862-ab2e5a115e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c037351-a5f0-4d6f-aae3-248775edfa2f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d777ca59-dd4b-43e9-a8f2-3aff9b26c0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "facddde8-3286-4f1e-8ca6-3fa3c9728774"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b543c62-a12e-4430-a155-bba06aaad7fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f95c663-a079-4633-94d5-72663e3327ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c7ae895-d5e5-47db-a278-02498341cdf2",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fabbe699-b24c-43b4-a81c-097e3376060f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2643ccf2-1049-47e3-8437-b1d85d0bd03b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c136fce-09ef-4ba8-9af4-67f51f1d8b50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d59712d0-ed56-434c-832f-2a3085056152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53b84ef2-7f00-4c73-b079-ccfbb998404b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ebee3f-ce77-4700-94c9-ac9815342fb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "485f4962-018e-45c2-917c-790e2444594c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb942451-fd67-4a64-8672-94470378afc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8a23f78-16fd-4d3e-ad05-01ec280fdaa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60ce2db4-4c5d-478a-9e50-525dcc687d9b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db09bbab-c5ee-420f-935b-7b6343dffc7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89888583-59dd-4b27-86ef-16510f9759e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c89eaafe-acef-4ef6-a3b2-cc2abec2209c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3dc7ae7d-0e4b-42ab-af71-8d711dcf8945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9adad464-4238-4356-b470-a62486b4ea40",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d9bcabc-9d6b-4182-8289-c5c1b7efac33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8565ff82-194b-44a8-95fb-daf86e451ceb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe7b7ca2-9201-40fe-afe5-38aa5d5bdc24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fda7db3-42f1-4e79-b106-419d3ab73f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cdaed6c-9bab-4ba4-9358-30f94515105f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "585a944d-0333-4cde-9ea0-8a15d561bd3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "490c0fd3-87fc-487c-92f9-4c76d40bf71c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e456ce9c-86d3-40c2-be5d-71e5d207eae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "875a4a6b-8a83-401e-8b0c-383a1ae33092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c236b9ad-0539-4726-8b7f-99b818849009",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "675348bc-d19e-4550-9386-8e0f1ca759b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a1296ab-4b63-433b-9d3a-8901fe7ad77b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e1b9b34-5bdd-4685-ab67-76fc173cb020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2007f833-1535-46c4-8d53-7a73ba67e7a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d2df233-a6e6-45ba-8f15-9702e018ee30",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c83b3ebd-fc23-41a8-9031-5c4407c787f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e29838f6-2f35-4743-8dc4-7b729a1c1fc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0472cc39-15ca-43ee-b0b7-263db468c8d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c3acfda5-1410-4c71-accc-96c96327f41f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed43eb5-1d9f-41ff-9875-40a7b4a6e1f1",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4261493b-9f7a-4753-b88b-1295dd30825a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac05e78d-8c5b-48a2-a354-5053e0434c41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3feec743-5db0-40ec-bd89-d094d5d642be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "87edefeb-8c43-437e-8f47-1ac27c323319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0da8af59-be45-4fcf-940c-dfe9bedadbca",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbfda7e5-7885-46a8-ba12-f7b48110ce70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a821b18-6932-4fab-9b70-e38b77dbcfc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f74cce1-11bd-4e6b-ac57-bd1f076e515a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "333908b4-d2d0-4349-99b3-56ae3425b92c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b457f02-755c-4d8a-b7e2-2592acf86fdb",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5b92e6a-8036-4825-974e-8b9ac057a29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20f3839c-5f72-405f-aba3-7f4a11807247"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7595f8df-511f-444f-b6e0-aeaa57a8b6af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "efb5edb9-0eab-4503-82f9-ba7eb1a4bedf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d348295-3676-4f97-bb2e-972de6c11ba7",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f1e133-7082-4569-961e-9836f743a8a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54078ab9-acd0-4f12-9257-194d0cd2afb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af3664df-5574-415e-b230-d6e86cbdb06f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "560daf49-c658-424f-8643-09c0c7deb1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f1a224e-56c8-461f-a8e7-ad9c2ea0407a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44ac1369-ca53-4277-89f8-5699ef7820b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "292a0cfd-84d7-45c7-b73b-c7cc7fda09e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f54eb2a-2af2-430f-970e-13110a315c85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "350579f3-254d-4cb8-a211-8a34759b13b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c44d17d-04a2-464e-b66e-d15862c9d130",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "828b2f73-75a0-40f8-b8a7-3b7cc395d64d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac87f77f-3784-46f6-a82f-4182cdab28dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97849f06-414e-4b06-994e-30934d1b1ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "057d3512-66e7-4c05-bf4b-225d97918d22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "275a7306-3f83-4ae7-a3b6-dc2d0633d391",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8a24ae5-6171-475e-b977-0341ad537da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc660cf1-d5f5-46d0-8068-4d38027093f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c69333a8-21e4-439c-867a-31d2343e8f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e8f3a3b-f7da-4fd9-a14b-d37c15600db1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f583b70-dfa7-4a4d-8b38-d6f3271f64dd",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "298785b7-5cea-405a-80b6-bc8fc97d18f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee2122de-3222-444b-899d-cb6945751bac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "485a92eb-7093-4f5f-b551-f963c677a8c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47af9dea-fe3a-4ebc-94cc-476082953d0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d52d79-2ba8-40dd-8f57-4f558f87d848",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b40eeb0-7bbd-4078-b4a9-75d2904f2013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "845283d8-693c-4751-9e5f-8e4a10289550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7150181-c416-457e-988c-0db5632b0614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4dd2b3c8-a6db-4106-b88e-91a8a251dbe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9ab0274-f981-4756-947d-a5baaf71585b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a2bb65a-3451-4640-ae68-27c8205df6a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "494b23db-2131-4a9f-ad46-2812038256fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e74e30d9-cb2f-4d49-be38-16925a6caa8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2dbff4dd-aaaf-4c0c-928a-8f660a8d6b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42fa0260-e3e4-4713-ab92-ead27f705ab8",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc0764e0-bfc4-4273-9889-17af5c6ade8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8b6af3b-fad6-45a9-9632-97b6d72c4354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "328b006a-f415-4ddf-93e8-67667171ab4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fb3abca-ec63-4dbd-8984-f3121f99486e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b11a5d01-e78c-4ed6-ab98-b86991ea205e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c40dae69-b954-4862-9e13-0d74d1cf83e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99be485e-fb44-4668-9def-4f9d8c448606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e66b2e-1a56-4ebe-b950-d6ce52ee5b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "487d71e9-84cc-4759-81e0-4aa8e0a4e3cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78599398-762e-4161-ba7d-f2d2f30275c4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d1c41f6-d122-4d83-b115-5be8bf5d6ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e9dde26-9294-4c2d-8c61-89e12562d421"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "943d44bb-9157-455c-a71b-fed56e191f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1137640-168a-476a-b1ab-ab191bf39b94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee690d07-1156-4c60-953d-4b531004ce57",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dccfc78-de65-4ddd-b272-30e316c1532b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "636deb79-f6d8-4189-8d64-8f0463e0c5a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b78fc9ec-7f9d-46f4-96eb-5c8ae7f40608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4455e0d-1dd2-4118-b928-cf62dfd81bed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a64c413-6f7c-41b6-84d2-f004c77517aa",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa1b3c31-dea4-49ad-bf60-3d3fd7bc8d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f408bd8f-8e21-4d7a-beeb-a9a3026f12f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e765843-b198-4029-b42a-1aceb32e6d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c5b50fb-fbe9-4729-8942-dadc291fd3b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "303a8908-ebe1-4b6a-a26c-a7a0edc86238",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fe27698-1d82-4b1b-bc7e-d30bcc34b527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce7a11f2-7b16-4150-90b0-93ab2c5ac27f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d97c097d-5c3b-41c2-9e58-a64384f6e0ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a7933d4-b0a3-4288-afad-f5d87cedd009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c39dd4-55a8-41a0-bdb6-fdca4afe642c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf8c6cae-dc50-4e8a-a2d7-4f73d6f3e66f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f3ce9a8-edd2-46ee-836d-86fd262f98b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36df42f1-ea46-4bc0-bcc7-427121bca939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eff57d66-89ce-49a9-b7a0-f3a7d46a0b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7105b017-ab40-44e0-bad0-7ef64e362354",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b4001c-a7bf-486c-bca2-941bf43c777e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9ca1a8c-78a5-4f2a-8ce5-413c890227f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e2f32e-44fa-4338-8705-320e147436b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73b09ccb-9f97-4283-ab3a-6306a3947795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64b641e9-edc2-4811-bbc7-eab228a5beba",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69087bc3-74e4-4095-b347-5cc2f3c1c16b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c101318c-171e-4393-be8a-e74addbf9e6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0437fab-715a-49e1-b36a-5e5260257914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15df3bb4-8908-42e6-a3d5-46a0055f3ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94a893b6-4d38-487f-bc2d-b43d64a0c705",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62d16e8e-fdb7-4500-a023-eb660aa646b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a2b4fd9-d365-4f24-8d28-754ee9adbe38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac9144fd-2f44-4979-9301-5b19cc107a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc5c7bec-eb31-4fe7-b643-054703319588"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "53decbe6-8d12-4265-b47e-c0e6dafdfa49",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c2aaeb9b-b9ba-49bd-9af6-efeacf6ea5dc",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bed3c9f0-9311-4ddd-bb9b-f1613c7546cf",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "05b205eb-26bf-4b89-9a5c-9402b2226756"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f03021a-f3a5-488b-8c6d-4838b623614a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae210543-657e-4752-a590-5468e78ccd3b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6f97a7d-3f01-4f79-8994-de9223b2544c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d44c9de-ce66-4131-b5e7-fef9a3e5f3ea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "64045ef8-8e3c-4672-a4d9-8f0f397b0f11",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e50b650-bec6-4d1e-96fb-a101236f12a8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dc4efbbd-f351-4ceb-b611-ca3e66fd0da9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "abde469e-455e-4d3c-9ab6-46a9f40b4020"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "07bf417b-d311-4042-937c-b32f35223a24",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e725e20b-f856-47a1-b645-e0dc06db65d4"
            }
          }
        ]
      },
      {
        "id": "e666ec79-bce1-418a-a00e-3d39997ecdb2",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "e7175f21-b8bd-4a43-aeb9-680f2b381e1b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "93d30986-da58-41ac-88b7-4d601b2f0a79",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5991626a-e1df-43e6-9ebe-45388eb1c271",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ffe8be7-5ff4-453d-a303-289dbdef4c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23257cca-8d55-4fa3-8958-775c3aa07ae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37e8140d-670f-4e9b-b93b-f8884951755c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f7bdb71-a215-41ca-941f-0ed7f808730b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d4ef3a-9914-498b-93f0-e46c5cc45bef",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc790fb3-8dd4-4724-96af-4287eee73db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edc9cec7-cd6c-4cb4-8e23-aaa17d068590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8cbef0f-781f-4203-9e74-ddfb59c3252b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "532d84aa-3409-4199-9a34-ed3e27d8fd3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c1fc282-4a63-45fe-a19b-47c4c37f4195",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45bb4452-a300-4c3a-bd18-833a3fc0d459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c1efa97-e898-4df1-a54e-ce75638381e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72f2d9e2-e749-4226-b2a3-d943e9742045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4373a90d-a705-4031-b219-7ccf35315162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f5feb9c-7191-479e-ba7d-7567c27975a5",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a9d462a-ab35-412a-b2ed-8d19279138f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11ba4b27-3efc-491c-8e13-6784a8f353aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdad4731-d8a5-475e-8cc6-9c42cdcced41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "77cc4fbf-6d7a-4108-9167-bbb9c39c6b96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bceda4ec-6640-4e39-a86c-14ab42b93eb9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35d8f66-686b-4fbc-8dbc-487fee5e2611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9181f3e8-6083-45c9-8134-26cabc824a10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ff13a2-e249-46a8-bdd7-2d7d12fd57e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0718faad-b6bd-41bd-b598-64936c6ba09e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "192a8dec-2232-42d1-bfa1-f0406a66cb92",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6118677-18af-4e08-aa61-f3ba6fcc7958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5bb740f-1f77-4e2d-9ca7-d81d4916c3e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e3572b-77bc-4cd4-ae43-0206e07ea05b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2db9085-19ac-4101-9dc3-ac9f4d6b90ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa19303d-0875-4afe-b081-766a3424c17b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4cd6876-e70f-45fb-bf9a-96667650dcba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1422b64c-f84a-4d6e-900e-2fb4389dca62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffef14e0-dad7-4417-a29e-48f67259d07c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc040dda-5b6d-461e-8e9a-d7de0d52dfba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8529cc75-2f64-4bb0-bc74-8e53c5c541b6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab7c4b4c-ed7f-4ade-9c1a-552ad00aadc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a55ea074-2c63-47af-bd4f-ce47e3757c0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98baaac8-1cb6-419c-84c2-1999ebc4b980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "94976dfc-0681-40c1-8a8e-16f13170a403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df441411-fd34-41c7-9d9a-200cd2c483e9",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7788c2-2f48-4510-9c6a-fd298eaf7013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ec547ed-21a8-4ca3-ac10-91e4489dc917"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96f3a5b9-2b29-4e47-a31b-6fe2fd6caee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe7274d5-5e53-458e-87b2-045f77ba87e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33df88f9-574d-450e-b940-6937dd7bfe3f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c92241-d20a-4e04-bd5c-ed07126ee217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d40e56e2-1483-4fce-8706-1271fc2f9ccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "941898a6-5930-4734-ac2d-6575769b95e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a0bc0cf-c246-451a-a6c3-62d1e5dc8720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b55dba7b-2940-4881-8c27-de5ff94c389f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da63c1a6-bb39-4448-b54e-a311e4c2b3d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90f87d9d-c0f1-418e-8740-49d9130c9ffa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "895775af-71f5-4022-bb03-d097f402386d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8175258c-96d0-4409-819e-5c56fbc2cd86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1075a2b4-cf89-4701-9877-82ea33d0b220",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3614af2-6dc5-4cc6-8808-2705a5daeaef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f6125f9-d9b5-4e7f-852b-4cf43e33fdca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae879c27-e6e0-4b4b-8505-db5d8de81e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5159d0db-80ee-4754-b9e4-349c0086720b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "341a80e8-99ce-4ff6-8246-6fbf4896692f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ef8422-4c42-423b-ac96-a4f4936710b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d1a377e-9ebc-411c-87ec-e9b392ab7928"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a6d2237-e619-447c-b410-e81854233d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "774c030c-2042-4ec8-a9bd-a6d0745890bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed592dbb-5edb-419b-8a28-c39b8796a332",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc0a9814-673e-49d5-8826-ac3f3ef76a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "281032e9-23ed-49ed-8e79-6024f0b24d5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18d3f5a-293e-4e76-9031-31e7977e9c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "745c7457-9860-4919-9c13-8fd007ff14d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41aa1471-c1df-4465-ab4b-bc2b64f0a1d6",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c8636a-869e-440d-af9a-ea156d439260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4be4b6ba-c5d5-40b2-9579-c645878eb976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dffb6f7-c902-4b2e-96f8-1b666a2b1b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bf077c8-f20f-4323-9afc-a446feeecb68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "475224ad-eaa8-4b38-8305-1fe895bba873",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "035a0b19-5200-410b-aadb-c61620be6769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afd14c15-21ee-459f-a61c-0a5914fce448"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ab70f9-5f2b-417b-9cf0-0f2ae00de167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "272a9c9e-f1d8-4e45-aae0-3914a06b0bd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44373bed-c56d-4554-95cb-b0882c786c3a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e4b4a2-edb0-433c-ab4f-5266d8c90868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "812d9bd4-5f22-4958-ad87-2ee42b7d0a77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b3489b-7ef7-4745-869c-920248145584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "02fef4c8-c67b-4852-aa01-47e8047d5677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65dc198f-0a43-4bd2-8ab2-7ef1ba42ed0d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac7c84f-d514-409f-b114-2ca0063cfb62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00bab2f6-6e57-4a37-94ac-987e21819802"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79fecdf9-dad0-41f3-9573-eb8f9d3872f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8c9edc6-e5d4-4036-805d-141ead306a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "181cebce-b7ae-438e-8159-fe8d4d19eff0",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e164367f-358c-4e67-9467-8efadb5c511f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05f18692-55e9-415d-8219-4a8143905198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f946e83c-85fe-49bd-92a7-c068f128c725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3f9325a-3fa2-4912-b470-9522752b788c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf213496-8c21-4235-9af7-874632e40b3c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "025f7062-74ec-4bbb-b5b2-7f1fe6fce797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48e66023-5aca-4f88-8fa0-548f41850d47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fc1a1e5-45b3-44bb-8faa-a06fa78ec6b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7596e26-f7af-49df-a931-59fd8e26fd70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e13c4df4-8e29-457c-aafb-2fce6e303581",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "964d4343-16a9-4b93-b19a-552d17b02513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21c0a50d-d407-4961-8d92-0f34af1bb99e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968626bb-2dff-4c1d-b3ec-5075a8a9156a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24005a9a-258d-46b2-b932-2a701215acee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "493cf61a-7acb-4cfe-a575-75308eb78129",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e85f640d-c2e1-4cb6-a2d4-1907aa8c5e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c60fcf5-1a6c-4cd6-9853-9d714f511588"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95048a65-d35a-4192-9acc-f7d64c600880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56fd6371-2c8f-41ac-bbf6-1a9d2c9d0ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77e66148-c06d-4181-9689-7599a2a94412",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43bf91ae-7cf6-44b2-97f0-7af6c190947c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39e68227-23fd-4089-abd7-1bba311f5499"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af80ec9c-fa75-49d9-9b0c-df4f4d2d3ba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "295a8ca0-2652-4418-95a1-33657da3750d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e5089f-dd68-4d63-a2b2-4704c2c2670e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "079f2aad-a375-419b-ba6a-521151842cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51954ea3-a5a3-40a2-9a90-119918b6eadc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90710474-c69d-4482-b1a1-90297897b6d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a0ffaa5-1b54-4ad0-ad01-4c4d77dfb673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53ec052d-41ba-49f7-a562-c4d8abc4c01e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd705be-8997-4f8c-963b-3ffebd255934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7929e52b-4da7-4b6a-bca3-73aaa55a0d30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "476a7eb5-cf7d-4e7f-889d-0a476e8bf458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de11e7ce-ea91-40a4-841a-76c99c2d4aa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2942f1f1-6a56-4fc6-a2d3-ef77174c51c1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b07876-4a49-4511-9da0-c8f65c4b1664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bc27942-058c-4b11-ba01-4107f46f0f81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d08fb1d7-3a85-4c2f-8714-41c5055512f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af4ed5bd-7a73-4a91-aa44-94f56611cfaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10019f2f-37e7-43ec-8e66-05fd3086e0de",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a496476d-82b1-4e6f-b48f-c5bc2498f0eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34018888-7b6e-4032-b669-a958934c266d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a390edfc-0358-4b32-bbbe-cadab1f9b877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9f9bdd5-b892-4edb-9f75-a3835aa198f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e2ff81-ec85-41a7-88e4-5ef5f56fdeed",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c2650b6-82f8-4ea9-aade-c3565f635d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1301463c-739d-4fed-942b-cec71de89ceb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f648781-dffc-4252-8499-72a033207bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdb76482-2232-4762-b7f3-7a0131e7788b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45642a12-3512-41f6-a407-1b1fbf5b945c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e22721-8366-4ece-a591-e0cb408d223a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3891c454-d9fd-40ac-b655-52eb3b5c0aeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be462e4e-ceb9-4564-91fb-7071dbd0fce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1106a079-1f89-4573-ac98-e526288aa0fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd30834-e5ae-431c-b40e-d3ff96cd3bbb",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f92376-5441-4ee9-94e5-185be93151e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6246593-526e-4ca3-acba-d82c7af3b984"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a5b90a-eefa-4861-8ca0-2f767ebd7a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20da267e-cdd8-439a-aa4d-a4b1b5e01e83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01625a3b-de6c-4e0f-8d2d-3b58eb342536",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "640e09f2-77f6-4380-97df-da5bdbea14c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fb41798-ef57-45d3-b2ab-950a03497a0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e9506c-7ebf-46c7-a69a-aaf55f45c40f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57c2c1cd-3b17-41b8-8d1f-866d3e64011c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "986dee43-2df0-4ccb-8f9d-ee77ed89c287",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3744b78-b461-416d-ad05-a16eb4489981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ffd9f4b-3df7-457b-87c5-1cac247683ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a362858-dcd0-4878-8c66-15ffd07a0336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57952f69-1e3a-4ec1-ab60-3842cb0c8693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f023eeb-d567-4d50-84c9-f8160452bafc",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb28d08c-97b7-496d-ab6c-0ba416f9f43d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e6bbcce-51a5-4290-b027-4c4a384bf881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a95a79c-2afe-476f-b39e-ac074189ff5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66913725-059f-4d97-a84d-042f45339419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a77ecd-3847-4bc2-a4a8-4eefd723ed22",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b61dfd-80aa-4115-97ef-46227667bbe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "523bc594-d3fd-497d-b99c-6a4ea8a6f442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32b3b174-4095-4206-b7f1-fa228c3f6395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7da3e95-7b75-46c7-8ecb-912d01463949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfde76f6-2d37-4cb0-a0ac-70b3793805b8",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b75fbe98-b604-4010-89c3-4cd3a3486422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56b4aed0-63ac-49d0-b80d-ccd0aca05560"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d51ffa-8b22-4d70-832d-24c988e5b5a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "194564b6-ff93-4bc5-8cc7-64f99c475fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5c9b35f-b83b-4fb8-83b5-f4a39810c154",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f603c10-be5c-4d9a-b987-da025f390769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f62a8f86-2cfa-42a3-aa68-f3f44d026713"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "630ab33e-37a3-45e0-b8a2-eede10b3bddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c95e75e-8814-4da2-bb9d-039bd5a89ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af22ae4d-0674-4074-b9b8-f5441ce5813c",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14eec30e-74f0-4d8f-acaa-dd7da457ee78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fed5535-7c5a-42c6-94b9-8c768936a8d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1206d568-86a7-4bea-9887-cdb0def074a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58e9b11e-ea1d-4fdb-b6f8-8afa87db03db"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "750b3b72-2f34-488f-8ba7-5dabe3c0ab57",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "82d41a5f-1808-406c-a883-e70049fef6d2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc549d69-455b-4c83-b9b7-c2238ebbfc70",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "337d2d2d-3c1b-4d1a-a1b0-f7690ba13112"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a79f2bd0-95c5-4074-a679-18a626f2f006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28952774-d1ef-431d-a1c2-753d6c28083c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "582647ee-1f58-4136-a0b0-a91ba867a865",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7fd7fcac-0953-4001-81b1-86ca42bc13b2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "755ac5f3-ff3c-4a72-9e1d-29b2a3fee80d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0bec8a4c-5d31-4d18-bd82-f596cbf4b7ad"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bd269fa5-977e-4cff-9d3d-3a8c03ff45b6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2dbddc88-bc59-4141-a1db-5dc7b9d9e6d5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cec3a839-a1cf-4b55-aea7-5564afbc3dc6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c68ed6b3-3fbf-42b3-9280-2257b85d26da"
            }
          }
        ]
      },
      {
        "id": "3fe7ae50-7bf2-40a5-9826-be346264a87b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "16789f20-26ee-4a97-8b5f-cd1337b4d2ed",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1f08c070-7c31-4aef-b4d4-c31a9053b0d1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b90a9c65-0ed2-4310-a798-8f9875e89fda",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "378fe5c7-efe7-4e08-b1b0-86b8be82c385",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd6911ec-265f-42bd-8d55-97fd20282b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e9e2150-710f-4489-8376-d972c98d1270",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5afd176a-f076-41e9-85b0-43adadcfe669",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af3fff85-b6d7-44e4-93fb-15d25f9a6ebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ba279f1-8968-4950-b82b-d106b9f6e1b8",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10d620db-1176-465a-bfa4-6c30adc96db5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "142f171e-78b9-4631-aa90-31ec3a1acaaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e7c3ea-c999-48d3-85b5-6fe9e9ee3a6b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef6c979-0665-4051-a795-dc384bf427b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28838591-f8c0-49e2-ab2f-262dd83db0ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c51a65a7-f3ab-4832-ac63-072c73e02ffc",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38650735-c0f8-4dca-aab8-18f1b8f5798e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "106a3658-5848-4400-a65b-b7244804cd60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f6c2c76-ea1a-4c0d-a2f7-17c7bf2f0db1",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde45237-c326-46f4-885e-db3832b90975",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab5098a9-af6f-4944-b65a-50ad16f79b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "103bfd38-7da3-4b20-b1f9-c70130d540a8",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9019a548-939f-47ab-bbe3-0071a44a3065",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ca6a23f-7d4b-4908-b7ea-e95d044210cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81fe398f-ec09-46ce-93d1-e1b520ddff24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22b713eb-6b51-42c7-8e44-7539c8f2a156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e1aa50-218f-4d86-b9bc-a210a26b137e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "864f60bb-e3f6-474c-88c7-248c1e0c078a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c2eb378-ac0c-42b7-a735-7e03dd6bcb1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "544fadcd-e05a-4f33-bdf2-c60a0fa43c7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2efce03b-decf-4a9d-8069-eb774bfb037e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5692288f-acb7-4c5a-b379-ad6a9737b23c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b473e4f-8f0f-429d-a72e-2ce6825a4b5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89e33a18-54a7-415f-ba4b-36dcc64cdeeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2a4b3e3-9295-448f-b3f2-44743c95124f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fd95149-a7a7-4269-8e92-a9284c41081f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "324f1ebc-43b4-4704-ad8e-896d808d9d1d",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11d65d1e-aae3-41de-a913-81ab7d52b9fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1e150cc-0d95-4ce1-9b70-01b3c31b36a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3595e862-6512-4b60-93c5-6c7b9b7451b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad0ac6e1-1e54-405e-872f-563151eae3eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c8d26ec-53ed-4f4d-8a05-05614d8b52c8",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddb6e8f1-4884-4277-8b01-dfcb0dfb7a2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "351d90c9-98bc-444b-8eba-0371f1b31585"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d802308-6411-43a4-af92-e109d1fae149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b18673d6-e727-4a16-95be-9feb650b9316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "188825aa-3ace-4924-871d-cf98523ae894",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2769871-00ac-4659-a4ca-1a86854e7b7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aca87648-b4a3-4ec3-820f-3c1e5899b60a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ea9940-c823-4b0a-aca1-0d9abdd108cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76f40b6d-f4b6-431e-ba4d-0b0cdfa4994b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87b31c55-d150-4b2a-a91c-f384d81f6af6",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88169047-e1c5-4f9a-aadd-599660cfcf7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00e152e6-a382-4c9c-9bd2-aa1205423d52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ffbcc37-9830-4d3e-b561-6a0201b53fbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82804d3e-3133-4e69-8910-66228044615f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed473aaf-e684-41ba-bc3a-e99e45046bea",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12af81ac-1981-4bd9-89d9-313755c44b4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d2d07bd-ef11-4bf5-a6e0-42bc58e1a0e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56882de4-21e9-47c3-bc31-d90746a5a886",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bd9ec7a-3b1f-43d5-a9df-928bcd25fdce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bed90246-4e45-4caf-a993-d261e8743015",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8056571-c482-47ee-873d-74acba94c17a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65c3391a-960a-4647-b00f-431461b7b203"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caf243ca-9898-4eea-b8e4-b45b8e73af6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "164a6660-a19a-463c-851a-4bc892c639f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a0e3c2d-81b0-4f60-b91f-7f99b91bd33f",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac91c4e-0d67-4d92-a04d-095b4d042480",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e898f21c-3c25-402d-a0d1-cf3448422e6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fe1dbd6-70ac-4fbc-966d-a476278c2325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cf02f57-65bb-4b99-adb6-b595def8f6e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f429a7fa-d521-4eb6-90f4-13744ff1e42f",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c511868-2fc3-44eb-8fc7-b96a8928a0a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6130d79d-d9d3-4bea-8014-1e7226830931"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e66d0f9d-b04b-4b65-921e-70c1316e00c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3274411-2b92-4926-8744-c9cc27be67e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27a3e60e-8e1d-4779-abea-898b5ae5be84",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811ecf4f-b4df-435e-bfa2-49e0338b446f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54f22b47-38ef-402a-90b1-622995b17247"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e11d9fa4-3912-49f3-81d1-3f803e9b28e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3721467c-3f57-4c68-a71a-d05b59ef7863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7bc01e8-e934-47db-8cf1-7bc0907764df",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a51f14-1303-4553-a53e-874a8c90bfda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae419a4b-5166-4a40-9757-2578bbfec4b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c887f4a-1cd0-477e-8405-3e0b5c464488",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1138106b-9d89-4930-8eaf-c906e1c0d9d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad76d4c-1d0b-4a93-b5b8-5ec1c52f75f7",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8916af8-3205-404e-915e-aab2b60b544b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d0f98ea-82a2-48f4-a7f8-4933f80fba2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f8135a7-4913-4102-85ac-fe99900f1236",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a43facb-e80f-4fb6-8e0c-c4117b27230f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b190d36-0b60-4d70-8340-d461ef56523b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa482a5-ccb1-4446-93d1-6cea771a6c80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19c4cdbb-33bd-4d67-b628-6518a80635f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d3cafbb-3d71-4111-a618-d3311445edef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88b51564-29f7-42c7-9556-cc414d16cddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02cb37a4-63af-4ee5-82ad-a751d11a38eb",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "226af237-bdff-4926-9cb5-c4b79277edc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ea68741-8ce5-4df2-bfd6-175d4af32608"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bbb18d5-b5f4-4f19-a098-0e5ee51f6552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b423e47f-b276-4ea5-98b4-9b7ee0274ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2075d77-9e39-4327-9ff4-bb046cfdb252",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b68bda7-e997-4bf9-a812-35ca8e18c644",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0759e3c4-4bb9-4a8a-ab6a-c89fdf5db3da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2337c6db-3d11-4cdb-8ea9-41e58c7a7641",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89372cec-3481-48f3-8ffc-5275221ce1ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72b29683-b05c-44f6-8cc4-9f6ec7fce918",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "142daff3-ffd6-4baf-bcd3-8190ce67cd31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f638598-f9e0-4ee3-85f3-cf6f511a4348"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b38e4a8-8831-4fae-9d63-df8d8827dfb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1cfa249-2997-4141-bb4a-acccb87d4b27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f128625-52ae-4b62-9648-6d395e7380ca",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31bd5434-76d7-4339-8856-7a2c962e91bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c36e965a-07ec-4462-8afa-faa6ebf3b9ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae83859f-a959-4dc6-962c-010f7ed009ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ced5bb2a-0c84-43ea-acee-63cab5f50dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b715103b-aa8d-4d79-8401-08aa1f6d703e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5dd810-1777-4a68-a082-863cac8efc2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a5496df-f1c5-4316-818a-fbd7a3011926"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8712449-aeed-416f-af63-40c0b871ef6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3be462c-2332-4d25-998a-396aa2c0fe9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2388e233-7ad9-42be-844a-db641431244e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "280225af-4da8-4ce4-8bd1-2d9f5ed32940",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e23db59-fee3-4ab5-9812-c3d0d21df7dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f0b100e-15fd-4847-8262-9b966e965516",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c64e3f40-b36f-4b09-9e8f-27488774ad8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dfc34d1-eaed-473e-bca1-028a20f03dd8",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "202fa458-04b1-422f-87c2-baa91aa3376d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b86aa562-5809-4656-bd19-bfbe555f23ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bac554e-90cc-4ae4-b6cf-8016a7bf8c19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f52a316-3003-4c9c-aaae-9fd6d75fdc86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71468193-70c3-4f37-96f9-fac4fc2dc517",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf94915b-227b-45a1-bb80-8f4d28656227",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d7778c6-eb66-4c1d-9453-c0647239f53e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7b004a1-5da8-4d44-8b8d-b377470bdacb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ce2696e-bcea-4a0b-ae8f-7b529744aabc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b0db87a-d9b0-447b-9fa8-f25d126e77c1",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e65aef0b-8f5d-444b-b364-efbff58539a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2051813-d5a4-433c-8cfd-fa9cd25d5729"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62588b3a-250e-4980-9622-a2c12f3cfbce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3d14b21-dfa3-4fea-b03f-ff116629b60b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9acf922-7890-4d73-af61-54638847fcaa",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "746c10db-0f1d-44a8-bbbb-50408b332284",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bead127-dec8-416a-a73d-bec265cfa18c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0ae466-a2b5-4bf4-a229-819dc4bef9cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22c4ea1d-e359-4e52-a52f-d388cb9456f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1695cf9-ec22-4704-adb1-de24a6aaa83a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3155495-4859-4d95-82e8-c63065a614b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb15bf82-064e-4ea2-93cb-e46bfc006c18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9916202-d327-4d14-af0b-72ed436f3f5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb3d90c4-35c9-4a23-93c9-eac62d181b66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df42abb-30b1-43ba-9cd5-5507e2bbfe57",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50fb391b-49a3-46cf-8380-f97d24372003",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8aa302e6-93e2-46e0-911c-3c6829e8ab20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faf16137-f01e-42ef-a2a7-a75a62967137",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4204a150-75db-4139-b005-cf2addb50d42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "909f04d2-488c-4b93-ac0a-05a057659e23",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d00b3f52-7e92-4b2f-9881-4403383c2082",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "334ef06d-5adb-4414-adcb-450a0dd9c3ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19980e18-40fb-4f1f-8ad2-123a081f5f3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b6db96a-a870-44c4-9ca2-73e82252ab1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc16e60-1acd-4124-bfc0-0bfc34d89599",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcca3977-f200-4545-9932-4711dc45da96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df4ddc8a-4582-46e4-a724-ea3ffc24e982"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a543853-22dd-4609-96f8-caf28632e531",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff9dcbcb-4629-4bf0-b5c2-de869f8e8087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a9cedc7-3565-4820-a7a9-17747eaaee60",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d5f60ba-032b-4530-857d-413e18d325ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bef1ead-df40-42f5-8d67-44744f91ca89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fcf9561-2dea-4975-aedc-dc7986f99961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ee0135e-0f34-43c7-9e51-cffbf917c8a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "746b64be-3ac1-4fed-a26c-a4eb9d108034",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1620906d-abf3-42ce-9b21-58dcd2088ecb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4337e1db-80e6-4d3a-abcd-440b0dfdc208"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85663e18-527c-4810-84ac-f16c2d268626",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0e5b802-fc47-4e0f-8b11-c40fc15fdf69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e611a1b1-c69c-443e-a76a-ad95ef734311",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "405e07f5-e495-413e-b66e-4aaad4be390b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "338a324d-0ce5-4b13-9e1d-7b0768f44472"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f89663d-a113-491a-a5c8-a226a0de0e72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb3095a5-2104-49cc-b122-1c254aec14cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "128e995d-798e-4f43-894f-610e87e75139",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d9b228-9641-4270-a5ec-a6bbf08ea5cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70288960-b2ac-4fdf-8943-1f185e21eb6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83e15484-53d3-4043-9daf-266a08b5b8aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6fd7549-ca08-45b0-8c35-4df5f98621db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e9a959-393e-48b7-aecc-fced7781b6b2",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76748618-c533-4766-a263-c854c2f86b6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38c0f5cb-7985-4af4-a6e0-064e7a38bd7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26560953-1c60-4ec1-97c0-ed7429c90703",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88bc59ea-75cc-4151-8042-76f2a7cdfe82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "785d12d7-8dc2-4727-a31d-47f821e14b0f",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51a5fe63-72c2-4771-b7a0-24a795675097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df034ea0-2db2-4bc0-a625-b681be6cb476"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d5fc7bc-56c3-4124-b208-40f3d6f7965e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "580b26b2-70ff-4787-8285-2b27ecf2c23a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae0a8d8-21e1-457a-a038-6f793e41fe13",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c31355-5a43-4f29-aaf9-250ecba2f012",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab2f00d6-a067-4ba7-8b65-2369cff87b8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a170ee-bc95-425b-aa25-02c84ebe8fa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ec47130-15be-463b-9712-91b156ffbdfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b9fa60-c27e-46a2-bb2f-28ea095f0706",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8f9a4ec-8024-4f8c-8ead-ead8c730d6e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d024600c-b1f6-49b9-833b-4cde1875499c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f66c13e7-607d-4802-8fb3-15a3a81029c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41858b77-51eb-4bc9-86b7-453df04ea936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17a46501-70a6-4811-a74b-1833632cdf2d",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a90d1bc9-3815-4fc7-815b-c648fe169b53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a01bf2d1-aecf-4ac6-86df-6ffd70593897"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "670c8cd4-2b2c-4a8c-81ad-110d38879a04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4368ec68-f9bc-43ca-b461-46eb71bae042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c61a6a7-5116-4cde-a310-ac3ceb792019",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad3216c8-d424-43c2-b1d5-cf2ca97502e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16ff4324-356a-4a97-9434-e812d27a2954"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48de4c02-526d-4f55-9af8-4a165ec30859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "787daba4-c9af-415b-8189-00b38f2e3edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccab66a1-a245-4401-b2a9-bc7e59593ae8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "088f4a66-aaed-417d-abb1-bdc0e67f0d04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b95c454d-0c3d-4045-aec8-b819db056ee9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "993fa41b-9e36-4218-b2f2-8005db016950",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fe47313-508c-452b-913f-47d40286c928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a928e71-c7d6-4c3c-b03e-d91ab7039c8b",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a936605-d786-4bd5-9ee8-536eb646df72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4891b418-d788-438b-a307-5123af8da854"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d5ad14-5e2b-4e24-a0df-ce19279e3f27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "255cf2a1-e27e-44a4-85d3-dd563159c029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d2dad3-5bd4-4bb0-a9a1-d7485aaad52a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "878f4d85-d5e2-43d2-8c12-4589299af1a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9185e123-4615-4584-8fe4-b24b04c7709c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e78488-11d5-4f8f-a7a9-bb61a20d0490",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c9c7c1d-4c53-4c49-9949-ba24f7cc1d38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3f22bf2-34a4-4ba7-a84a-4e205ccd198f",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3200319-9284-45d4-bf3c-829656a7a538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c02c35c-e6ff-4c58-b99e-4de14f2203c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dd99e7d-3717-4ae3-95ab-c18d192454c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8051c9e-9371-40bd-b405-2852f970e575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c0df662-60e1-487f-8e84-6cae37f0595d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7686edf-a503-4670-8634-46be6031db52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eaba3a2-1df0-495e-ad8d-3edd05cc87f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e76b2fb-e0b8-4e8e-9fa3-3232b0fe7508",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12be84aa-6e19-4669-9032-88d5ea0b1573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db7cd29c-7245-4da6-915a-3c6a1f8a31d7",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e687fc-044b-4c58-9ba4-7818bf8dfcd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b5152c9-5e20-4713-ba6b-a9083936abbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b08f6049-24d1-4b12-b19e-84f54aecffa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbfcf53d-29d5-4137-a5d0-93d0dc2fab8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85e17bca-ab7f-4063-9490-84ce50b03f08",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d657a026-33ea-4f13-bc66-b73af710ff7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5125bc7d-0fc3-4f0f-90bc-e5232c73ff89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "234c2a3e-a480-4f91-a4a9-b96e955864c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2532ca6c-ad6f-43e9-ad43-5185abab395f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d1f1c9f-b39b-4577-8180-1cc3faa7b2f4",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55ebdfb6-fa66-405d-b6b0-da01f7d18049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1f46c56-ed07-4d18-b8bb-03fc3d6f2fee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b879ec07-e5f7-4a6e-af64-0c60fe046a0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90fed988-48ac-4cfc-8773-07f9f56c2e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d980e4c2-28ab-4be4-8802-13b85c19caa1",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dcbe118-ffb6-4fc8-b5bf-eff30b081c55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fb58efe-7022-4d8c-a60c-18aff17eeada"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75a57484-f259-4195-837b-e49151c7033e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65178f04-b4f1-4960-8d94-8448c7889783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20f5d1b7-f8b8-475f-a76d-856daa33685f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "223f438e-d049-4de0-af18-819b7d886a63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad043ca6-96a5-44ce-be9c-b30d59b79526"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bfd39eb-ad01-435e-8a85-6b381d1325e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0bfbc11-1a84-4abf-834b-3dc81feac515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "339968f6-7b84-4e0c-bfe9-0c0ab85659ca",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74f66173-23ce-4092-a66f-11abcf2e0e06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb0a97c5-d562-4f19-96f0-c75213bb7ae0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab244004-a161-4f5a-bf75-64f1283a54b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "792384ad-8617-469e-980b-0bf218142276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a96b8f67-3eed-4d6b-a8a9-1e389e142dc3",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb90fb8c-aa21-439c-9872-cde2ad1b7dc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67e87c21-316b-4011-8abf-f820b32556e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d69a0fe-ef95-4135-9be5-10ccaa25a69e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "172056f3-1d7e-4992-b8b2-cf2ffe2f0415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f11686ec-108a-4357-8643-71ce52d04448",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a82661a-c582-43cc-93a4-0c1be5783a4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a5126ce-db85-4029-be26-34f07c0c448f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d75ec4aa-8562-4a88-a807-b3402d1f9103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "204777bf-c32f-435f-9de9-50c69e76d85e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e246e058-04cc-4840-b32b-891e2280c699",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd155ea7-a569-48fa-a74a-11286c6e596d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fee8592-fa12-4569-b043-f7efe9949483"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38ee2c75-59b2-4c4e-a91c-ecca8c1f8090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddcce0fa-ff91-4c06-b16f-853c3f274739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79fb1ae3-f364-4784-abba-0bca6851f320",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f74af6-bf14-4e72-9029-47849e914c4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c743f2e-abb2-4de9-98bf-e71156853c3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aef2b5af-1bfc-42b9-9edb-6d7f25b3e75c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9386ae86-8f2d-4fd2-84b7-690de700382a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f4f2571-5b62-4564-a002-582cc5487630",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd3c6412-6c86-4eee-a274-d50d1d218e0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e78547e3-1e25-4c3b-9513-654212dcb47a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da99c2ca-e5dd-49fc-a570-1bcac7903416",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d6d9cae-bb71-42ce-a862-cc1f9fbbc189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3727dc44-6749-4189-a0eb-66f98131b57b",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a41f0987-cd93-412a-9dc5-a159e3fc1aa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ae27ae3-f609-4fcc-ac00-aade4f46d7b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f328a748-523a-4db3-878e-aeba0d402173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d1c33c9-fba9-41bb-86ca-4c64fd22d32a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67006b94-2c13-4121-8c40-fd843706a2f8",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf45d27f-cf1a-4f78-87c6-21c56691af46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e50b281-3e67-4baa-b4ea-a0c35e2c728a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5740214f-72d0-45e0-9ac9-ae562b98de77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "257f5f7e-8ff2-49f5-a602-c6de139a7825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a306660-f3b5-4075-84cb-340e2da00e83",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b60dbd2-dcf2-47b9-8a90-4f83229b83ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5d1387e-4d63-4739-9aa9-1b3b796a49df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aee3490-0ecf-446b-9be1-11bf9751330c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9339fc2-8046-461b-b340-8f998d784763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0a08800-3e0a-4642-bd09-5f283615cfc1",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64cebb67-45ca-46f3-b11e-a35aa3703f0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98f90a28-fe24-4ba8-9be1-5a7ae67c1033"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca919c6-e5af-4172-bceb-6c6d899fb67f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "322fda62-8f73-49f4-8c7f-303c624d47c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff014e89-51e9-4cf8-9653-7696f1e5ee70",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c032d0-9480-4660-9deb-fc2efd4cda2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bf0b6fe-6828-4fb0-9781-45cc2ff69717"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05db4df3-af2d-4748-a58e-850f97e8ce38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39debc21-a21c-4351-9845-689bf8992e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40119e05-e956-45bc-a0fd-c8253117cdfb",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9daf0a58-4bba-4945-94d4-a6af645696c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f46cefe-25f5-4169-aed7-b77b9edbaad0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3ea55e6-33ec-4b41-bea3-7a0fce1666fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf7e9269-da3f-4ce4-8a34-a2fd591935a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f43c245-9a3a-4fe8-955e-0b58a403f362",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca3eb0f-80c4-4817-af6d-459a4fdc79b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05c2ceb8-4b7f-4a40-9001-338dc4bd824f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae776f25-92b9-4aa5-82da-8b1c9f7db191",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b69455b-38fd-4711-9d10-29c617570bf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e15962-3ed8-413c-b5fa-07d828cf78ad",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d464e86d-6d8c-477d-9884-d64285535f83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96157b73-4659-416b-adde-0167f7af627c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "250c54ae-073f-4633-b56b-896aa4c4184e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "737adbd2-231d-4ab8-8948-bf852a3c2656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad88e777-17fb-4195-97f5-43ebda0ed594",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1099b1a-e3d6-4121-953a-f28e4297be26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64b086a7-44fc-421a-b289-568e92be6fef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb7666d-d18f-41c0-9f43-035d06335f92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "175aaad4-c5df-4953-a100-1476c8207ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5cb580e-cf34-4147-aa93-b4c3586bbc51",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179f82b0-a5e1-42f8-86b3-fa0ea1eec316",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0731ba02-b97d-41b4-9c9a-785e1d840634"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f1681f6-7a37-4cd6-a3e2-2e814933fe57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4742568e-22fe-464c-b77f-540cadf2ff60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c1dbaf5-ba2f-4aaf-8779-c46eb5beae81",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b155e889-0507-47a9-a165-a231139ed428",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "033acace-2a61-4c8a-900c-d140eab0df43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8adc6137-3072-446f-99d1-99433ede1c1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43615895-693b-4b62-a7c3-f246a4e0648a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56405409-ba87-42b6-84d5-1cb2983460d6",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "848075a8-238f-4d61-ab6f-569a25470e1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbe77db8-1a2e-431f-99fa-491ceac09d0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "380a173f-0f7a-4822-a457-6df71e4dd6ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04fa2573-6f29-4f7f-bee4-4078887c9d17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1eb8120-4683-40d8-a40e-569be36beaae",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b726b8-5ac9-4928-a653-83c03c4611ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17db7dec-4611-4358-9aea-42360bbe6f0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b0e2b7-1f03-423a-a1c9-53481794061d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da58546a-43b2-425a-9e87-10832962a2b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ab52d37-d464-41bd-a890-c32b3c3aae01",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fd35920-ddbc-4340-ad93-a8355e78155a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "252aa6d5-e047-4b1f-8bb7-c91c6268648f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b86db6d-7f33-4870-b0f3-8ef2ef896197",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31a8b396-4209-47eb-8183-216551a7536a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84134acf-fc7c-4ad9-94da-1b451ea6d687",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fa17a0a-a607-4441-b18e-e47c4cb886ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79f9d17b-856d-4b40-8603-14b81f8633d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "544cc156-77a7-4614-b99d-f51378763edb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eacfbf8-6b2f-467c-84ca-a578eb8c6cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2926048-7b19-47c4-8aab-f949355a700f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e57854e6-344c-411c-b2c2-6077b01da71c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8639f4bf-ab68-4318-801b-b17d8d6323d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2df3282-e57e-4494-8404-b179f1b2b839",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b8b8575-d92d-4d04-bd15-85c03b870915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dc7c715-1fb1-40e0-9fd5-322bfe7a12ac",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa3a7965-e8b6-4b4a-a200-c60925115f84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98e49473-caf8-40dd-affe-2735db4a44ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c20757a-0cc6-4964-b22b-2f04a94f6fad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49d7a669-7231-4f6a-b307-60ccfe816768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d2b043a-463a-4a6c-8355-50779afaed8b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "594b9e0b-9784-4d74-b922-9a52cccadc1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9f5c947-900c-46e3-baac-07478ee01104"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de425a5f-71ce-48b2-817a-82d6ae101abb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f1e2a61-14cc-4594-84cb-2b0b2c09ac29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d10d6163-26fc-4a79-97fe-6366105012f6",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a57e595-e761-4258-81fa-a32e1043c838",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfd02d92-22e9-469b-a5fd-91763395776b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "843b83f1-1848-4cab-bcdf-f6b80f0e5217",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b854701-ddf3-445b-9668-32fcd027b6f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3dd318d-1a48-49ff-943c-aec2d198a414",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8828215f-db7a-48d0-88a5-a46ca3283fe0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42716faf-546a-4d7f-a9c8-38fee807d6fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd4cdae5-24ed-4541-9e70-e52790544aef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bf3181f-57db-4477-b5d7-6890c1fd6cd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c20031-aeb7-4f5b-b3ee-2f6de3061355",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0866f032-7355-42ff-9dca-27eac633f279",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c48d0745-bb0e-4355-8387-f0b5cc47347c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c391fa3-7bd3-43a8-b2f6-b02bfb48f326",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1d00509-1322-421f-8e3d-0370fa65a41e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e113ae-a45a-4661-90ab-01688e785992",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f832e7-0f35-4883-9db6-80d36615710b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12c8b90e-62f0-49f8-a07b-9f783191dc91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "703e126d-1386-4b5d-97fa-b44757c7f261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cd2c41f-1f91-4a55-8639-2599dcfa5d6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad2f271-3854-49e8-a32e-a017722a2b68",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7930c42-dcb6-4ae8-b69f-dfb52ae7794c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "747fb79d-7434-4223-b0d9-454d5e450f37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "394390de-710b-463b-a23e-2083a6b73f9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f16ba652-2263-457d-81ab-3e2a0541b2ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96749f82-cb23-41e9-8dcc-9448fe39fa52",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bab5643-e745-461e-b342-c81f62540014",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80b5405b-b563-421d-9737-6b220e42e621"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "325e925c-52cc-469c-a555-15954c671622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "521a79fb-612d-48d9-8459-bd0b17ae2adb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc89e833-a20f-46df-8676-ff031aafa439",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459fc36b-b383-4c53-8407-573c791e7cab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9a1412e-3ea3-4d56-a108-77da194ba042"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6671f99b-e97f-4988-bda0-43d819fc8c2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ab133ed-de06-43c3-a279-9eb35406d557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f5f8227-a7c0-4ebd-872a-c21833ee216d",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d93a01-c955-4beb-8a1c-c1642ec25d10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6bb7a2c-3380-4076-92cc-7269e97a95bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8611dc8-a9c6-4fc6-a115-3cd84b71423c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f3ab45a-fa42-453a-8d7c-8fc89d375191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb6c749-0737-45a3-ba4a-ba7332d4142a",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d65be053-1981-40d7-8fe3-9df4fe148c0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63e4710b-761e-401e-acba-2fab987a174a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eddebdfa-2bd1-4bbf-a6b3-0d572dfa007b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0070d8c9-97e9-4b39-a3dd-c7a7bc14fd77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dbd574d-7e42-4a51-956b-85c30267bbfd",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b13f8f84-656d-40d4-8ec5-3208b22efe00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7c2743c-e84e-4dfd-9d56-99b893a0b146"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbab2f2e-0d9d-44b5-97c8-1e9069c2dddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30469728-1714-4da6-8eba-d20eeae43815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62836669-ee0a-4ff0-b919-d69e34fe740e",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3622d72c-6387-4017-ad09-e9da0c573f75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a86300e3-bef5-4ff7-b777-50a518bd5f7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27103dee-904b-4412-974d-c39d31f8d362",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a5d5e4c-a957-4159-8758-7fa0a1012e4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1159d0ec-fd44-4a0c-a3a6-37567a80e1a8",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e6354f1-585a-44ff-ae0f-29df3302265b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab70ee33-ca25-4059-8da1-feaf439e8e68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "053ff7b4-f49b-410e-9edf-61ceb08ada8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f3a7843-c10e-4304-beb4-220355508e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0232acd1-3712-44d1-bfc5-fab37690f8c2",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d3c8c9-12bb-4046-acf4-f3aebc15a732",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef20b188-95c5-432e-a233-72b1432fb911"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a659c8a7-3d77-4af8-97d1-c8941a3520c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eafcafa9-d39b-4b71-a122-ba881718d92d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1efd68e-a235-444f-bfc3-6ab5e4229cc1",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b80f8a12-6341-4f59-966e-9228bb5274ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5efa7471-7fa1-46f0-8926-3129eba72233"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0602400b-61ad-457a-913c-a6fedb173595",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "693d839c-8887-49dd-a2c0-584f5d13bed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03d068da-9802-46e0-a226-892b840009c7",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05cb3bee-91e7-4bfc-b58c-d0ee6a6af966",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "298a0315-4ffd-4011-bf53-ce680d1a0cb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad874018-c44b-4281-8da2-f74cef4c79a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa06ebc8-66ee-4ef2-aba7-ab26fb346832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e98cfc7-3bc4-4d1c-935c-d392d57b4453",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afa81236-1e8b-4644-9ac2-79877e21d1d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7279f52-bd31-4351-b40a-dbc4125c2854"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "248b5918-0813-402d-bc3f-f21b23d73dcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63551950-1a1e-410e-b927-97d291c8bff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b331bc-1cbe-4d26-8090-549cbd5ed02f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6c12de4-7ec5-4c49-be13-5f8d3dda59d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae5ee810-d211-460f-848c-5887a902a1d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf54aa86-3fcd-492f-9e5a-c59167d81289",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c17aa23c-3b5a-4fb5-bd86-4a7b44178389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b49d603-dd1e-4cb8-bff1-9beccab0acb5",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b5f524c-42d1-4b7c-bf60-d065903d49c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae1c8e18-d2e0-426c-b191-dfbf3034b397"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0337aea5-3769-4369-897f-d18cba7250d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18e35111-a817-48f8-8ad8-b6d62a64d4df"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "396fd31d-f765-4ce9-908e-9261ca992ff5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1563ef23-9f2f-47ff-8135-ce12f4e4b457"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "70fb7600-5928-4bc6-8d81-22465a939090",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fa5bf8f7-5c35-43ea-8549-62830d53449b"
                    }
                  }
                ]
              },
              {
                "id": "8e0c552a-1227-47c2-9af4-2e94982f71e7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ef15894a-637d-45f6-826f-853a25d3409c",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96644fbf-0a1e-41e5-adf4-2077ebf9d5a8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ba83057d-c6ff-4c13-a529-73f3c2f292fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9b198f1-e9ef-4612-965e-13bf1067aa01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e4001a31-6b25-4284-8f02-f41f421e1b08"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9938dc80-1905-4ddb-a2e7-31d9316f20f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79d1265c-4d88-4baa-b8ab-b7d53c37dd2b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d91d4418-be8e-47d4-bff5-b4b82e31ee3c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5e35771-32ea-4a04-9feb-663b70f6066a"
                    }
                  }
                ]
              },
              {
                "id": "9fe3f644-6c18-4082-8955-7868f0de9142",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "7acc7c15-c249-4667-b8e4-3b62ab8bea03",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7508044-5a26-46c3-be90-019c6d628089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "9fc3747b-c8bb-4331-8109-a7633a968578"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "512acbc2-fcc7-4596-ab7f-6cc872f07027",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ada2a3f5-98e4-4aac-b331-4c96e84978e7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b90181f3-945e-46b5-8e00-b13c6718365d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c135e8e9-4c94-4e81-a1fd-cbf1661654b5",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "824c1793-394f-4e43-91ae-ca8c2d73819b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3545e637-5234-4726-8212-3be4fe200739"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96391289-e8e0-4d66-b4bd-4896c2bf88f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6fe97f67-0282-4921-9f81-ab3ed2ea43e3"
                    }
                  }
                ]
              },
              {
                "id": "597edeab-636b-46e4-86bf-cf61a48a857d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "25ec1c44-a39b-43d0-bd0f-cb23f1da2340",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f3982e76-2969-463a-9129-6fb016fd12c8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "972796a1-7f11-4fad-a00b-ee48d03cc75d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7fb096f2-5a7c-4f36-bbbd-a8e8fed38651"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d6dcdb36-5a3d-4fa1-afa0-8fd661a2e594",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "0c40a147-2ba2-4403-8376-9c5145d92e4f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ba568629-2f21-4584-b531-b1b3a6e1d416",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "645e77a3-9d06-4d0c-9176-953fe3085df9"
            }
          }
        ]
      },
      {
        "id": "fac7e37e-4eae-4c89-a48a-643df3ea1b47",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "3b1151ce-c1cf-4e60-b2af-c377e8a1c103",
            "name": "Negative Testing",
            "item": [
              {
                "id": "49c73ffe-17dc-4c72-9765-082bb8274add",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7ddf5f61-9fa9-4b7e-8e22-6141d26b5c36",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7952502e-3468-4043-a0b9-be4e16155442",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "13e58c37-d2a6-4707-9f2e-d983bfedecad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc265fa-6cd1-429b-8b1b-dfb26523b8d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "73544cd9-7f8c-4061-81dd-d5d138bb5279"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f9dca05-a24d-41a0-9d3c-c46ccc54e3bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "07644786-aafb-40d0-8f22-ec68b65189e2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "44967dda-d5ce-4b87-8202-0d0af3a907c6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1efe08bf-182c-41c9-bc7a-51a1039f5d2a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c9926dc2-2d2b-444f-ad93-45b06a8b9868",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e51c2c64-4c63-40c3-9630-7c15861a5d36"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e12065fb-4673-406c-b5ec-a83ce58a6dc6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9965e000-f736-4a01-b4a7-dd5abb313a04"
            }
          }
        ]
      },
      {
        "id": "f46eec7a-e4c7-449d-930a-b2cb5b0901cf",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "40a63926-87fb-4cdf-b5de-a40105a8442f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5001c273-9e28-442c-a28c-b55f335a4739",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d464acb4-d58a-492a-8092-cd3347d47cef",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8122ad0b-c378-41b3-90a3-41f111611bf3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5a936fb-bcb1-410a-9ce9-655349773c4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aada6c3-3d9d-4fbf-818b-e6e5bccf01d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "964c7369-24eb-487e-b755-9ba4555c3467"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "69e183f5-b3f8-4061-9b06-10d3542ea59e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cfb4901a-3d8e-4d81-bbe6-00371daec3d8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "42d3ea93-9e6e-4916-a10f-1d07253fa091",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c06c8528-abdf-448c-803c-2ec49b180720"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "55ab15a2-b1f4-4adc-9e52-8dd26f4d9780",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8b6199e2-731e-4bc5-9de3-535d568a3d3b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bdc74c59-4f34-4ed1-b024-5be6fe8b3650",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c17327e5-2709-4316-976a-70a0dae69efd"
            }
          }
        ]
      },
      {
        "id": "34194c73-519c-4418-8918-052315dd2cf9",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "51102c33-487f-478e-9d79-fc96b75746cf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c1c57359-b79e-4f3a-9123-e5d5de3afbcb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8783a211-2b1a-4c77-8029-e5be9b2e85eb",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef80cf1-9424-402d-9292-75b182652585",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4578d413-8f69-4e44-b92a-413e2a06a31e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d165d445-ea33-4a9a-9e9a-0a69e81b4893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c99f75f9-525b-4d03-b389-c8c4deb4dc07"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e9219a56-b8df-4c4e-ab07-4c397accd2f4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56600638-7bd3-4af0-b0ec-d2acf5deae05"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "82d401cc-2fa2-4e5d-af74-e2b323b030e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "104bc530-e193-4277-b95b-ddfec82dd7cf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bfa01840-de5c-43b1-96c7-073e21f1ce0f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5e4cd9fc-89f9-483b-a2f9-15ab583d46a4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b0d48148-04b0-4e81-a4bb-b4ec2a44de50",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9303595f-c1ff-4e39-9748-fe88eba93c3e"
            }
          }
        ]
      },
      {
        "id": "84b4f60c-29df-4634-9804-e6f9d6e59b6d",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "764900f0-7cb8-4984-9f53-d3755bd6968b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7e67391b-6d2f-4bfb-9509-a2f5933f61d4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c16243cb-dbf2-477f-a1dc-2583f851219d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e6046d0a-320d-4bf7-84cf-25afee707212",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "efc25a42-08c4-4184-8336-77a36bddfab2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 33
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 270.46478873239425,
      "responseMin": 7,
      "responseMax": 13080,
      "responseSd": 979.495739495451,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1687826826351,
      "completed": 1687826918666
    },
    "executions": [
      {
        "id": "3f9f2e50-2a42-4745-9aab-6074a4e9c4a9",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c52130bf-6b37-4dcb-ab22-68f34b51e9dc",
          "httpRequestId": "01162cc6-0c34-44c9-913a-6bf696bb2bfc"
        },
        "item": {
          "id": "3f9f2e50-2a42-4745-9aab-6074a4e9c4a9",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "79cda47a-1af7-40fb-8eac-28b1aee4f3c9",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 0
        }
      },
      {
        "id": "2a42a0df-7e4c-4edf-8170-314221cf227c",
        "cursor": {
          "ref": "f38433f2-0d54-4380-94aa-0963d2959978",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "1f454452-62de-42ba-af50-1080d49f59b8"
        },
        "item": {
          "id": "2a42a0df-7e4c-4edf-8170-314221cf227c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "06adb285-2637-4640-a8f6-db75285d5f30",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "0f826cc8-d8c8-4ca5-962f-c214e34e7964",
        "cursor": {
          "ref": "3bdc0315-1af9-470b-b8e6-8d10c44bd1f2",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d7d386e4-44af-4aa0-9945-2ca1badf7507"
        },
        "item": {
          "id": "0f826cc8-d8c8-4ca5-962f-c214e34e7964",
          "name": "did_json"
        },
        "response": {
          "id": "2da0b873-a0d1-481a-a98f-da6a0ed5d084",
          "status": "OK",
          "code": 200,
          "responseTime": 495,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d3cf1a-e9e8-48cb-8af8-78c3d2763629",
        "cursor": {
          "ref": "2f734c4c-533e-4d01-b0a5-00b13393592b",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b17ea32b-fd32-4c53-a042-809f0bfe16d4"
        },
        "item": {
          "id": "a9d3cf1a-e9e8-48cb-8af8-78c3d2763629",
          "name": "did:invalid"
        },
        "response": {
          "id": "df9c7d93-c741-459b-89b9-a1e868cbe813",
          "status": "Not Found",
          "code": 404,
          "responseTime": 832,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "a9d3cf1a-e9e8-48cb-8af8-78c3d2763629",
        "cursor": {
          "ref": "2f734c4c-533e-4d01-b0a5-00b13393592b",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b17ea32b-fd32-4c53-a042-809f0bfe16d4"
        },
        "item": {
          "id": "a9d3cf1a-e9e8-48cb-8af8-78c3d2763629",
          "name": "did:invalid"
        },
        "response": {
          "id": "df9c7d93-c741-459b-89b9-a1e868cbe813",
          "status": "Not Found",
          "code": 404,
          "responseTime": 832,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "0d2e9681-9006-4802-aa49-642019a7d974",
        "cursor": {
          "ref": "624cc4c4-9152-4c88-ac0e-d408ef02f683",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "eda02f48-d1c0-44a5-9f9f-f72908265620"
        },
        "item": {
          "id": "0d2e9681-9006-4802-aa49-642019a7d974",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "0ab90d5e-4b53-4f6b-9e55-d148b71e5086",
          "status": "Not Found",
          "code": 404,
          "responseTime": 61,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d889d111-e260-400a-a9f8-90e2c20e8c84",
        "cursor": {
          "ref": "83ed315a-2dc9-44be-a610-f6439fe8234c",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4f8cdfdb-a4bf-43ee-bf67-4e137457477b"
        },
        "item": {
          "id": "d889d111-e260-400a-a9f8-90e2c20e8c84",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "89d411c1-f801-4904-bf72-ed2ead57d202",
          "status": "Not Found",
          "code": 404,
          "responseTime": 62,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e94dcf2b-c0d3-4de9-b8e0-6215685e074a",
        "cursor": {
          "ref": "955bb875-37f5-439d-83a4-2439a7a938d4",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "42ca49f8-9217-45ae-aa1a-9b3f555b8fca"
        },
        "item": {
          "id": "e94dcf2b-c0d3-4de9-b8e0-6215685e074a",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "fa9bfb83-7991-40c9-bbc8-5035db8bb213",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "747f6d95-eb5d-4aeb-b153-76906fa988d9",
        "cursor": {
          "ref": "00668f33-c441-43bf-88e9-372262180e9c",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0999bd7d-51f1-43c7-9e43-980b1e3121c9"
        },
        "item": {
          "id": "747f6d95-eb5d-4aeb-b153-76906fa988d9",
          "name": "identifiers"
        },
        "response": {
          "id": "de09152a-da4d-4c95-8615-e7a225bf846a",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd00903-78d4-49e9-9581-dc69768ae955",
        "cursor": {
          "ref": "0dacc8fe-a1a6-4a88-a1b1-e0f54fbf8077",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0f682765-e438-4e7f-b25b-cf23c17cc3ab"
        },
        "item": {
          "id": "4cd00903-78d4-49e9-9581-dc69768ae955",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "fbc8c389-179b-405a-bae9-295d2871bcf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35f9bd6d-4a1f-47c5-973b-321156384120",
        "cursor": {
          "ref": "bf70a48e-e44c-4eb2-b3fc-b24ee3d557e7",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2225bee4-cdd0-4991-b47c-707b73482a80"
        },
        "item": {
          "id": "35f9bd6d-4a1f-47c5-973b-321156384120",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "153efe3f-cd1d-4d2c-b4cd-a2d41a24ecdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3abd3e0-92f6-4354-be34-58eb9d0dbf6c",
        "cursor": {
          "ref": "4ae94c3a-45a5-4412-9045-bd3296e0b3e5",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4d6b17fe-9c80-4454-a534-7d2a18b8507d"
        },
        "item": {
          "id": "c3abd3e0-92f6-4354-be34-58eb9d0dbf6c",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "69dc5ae6-4739-456e-a347-ced076fce0b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8527d153-9cba-4255-9293-a1727b7fbdd1",
        "cursor": {
          "ref": "1527b8d7-fe1f-40f7-9844-eb18fc75ed7a",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "42653fb5-bc12-45ed-ba00-9a86ab0b0050"
        },
        "item": {
          "id": "8527d153-9cba-4255-9293-a1727b7fbdd1",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "f5e69bef-f0b4-4c84-ad61-42b539858c5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70554e7c-f1e0-4f35-83f5-d1442dfd562a",
        "cursor": {
          "ref": "9e531f83-d122-4ef0-89b7-9a364e27a720",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "41986060-dfe9-4fcf-ad8f-ecc800f47420"
        },
        "item": {
          "id": "70554e7c-f1e0-4f35-83f5-d1442dfd562a",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "b5adfc79-7d4f-4a02-b62b-b882fcc6353d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d31da458-3a77-468b-b15a-cf6a347401c4",
        "cursor": {
          "ref": "b7f8afd8-1a06-4576-afee-96c46db26c5b",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a88a5865-0976-405a-9c04-9eeead87ba98"
        },
        "item": {
          "id": "d31da458-3a77-468b-b15a-cf6a347401c4",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "157259b0-6cb4-4498-97cf-d92ddf04cc4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67858fd0-4910-483b-8027-fd188a6e3035",
        "cursor": {
          "ref": "28380990-dce0-40a4-8526-265a4895cedc",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d4ba3009-dd37-449d-a4cb-4b13def573f3"
        },
        "item": {
          "id": "67858fd0-4910-483b-8027-fd188a6e3035",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c7b9fad7-eef3-45cd-bde3-f2ce784bf8fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3cfc78e-3283-443a-9ecb-259464817209",
        "cursor": {
          "ref": "3640499a-9702-4f50-9794-740b933a3f39",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3c8dd908-f857-48d5-9d05-e0b0d3fedc54"
        },
        "item": {
          "id": "d3cfc78e-3283-443a-9ecb-259464817209",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "dc8e4ded-0ff2-412f-9fc9-f8eb9d48cec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 330,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2235c25d-63b6-4fb1-976d-254a1f26d1cb",
        "cursor": {
          "ref": "5de1e020-572b-43f1-b47f-3a6b124fe70f",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "89d43b40-51aa-444f-9fb0-efbf1704ada4"
        },
        "item": {
          "id": "2235c25d-63b6-4fb1-976d-254a1f26d1cb",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e780a960-d39b-4571-a91c-f840319ad670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c26edac3-bc6b-4add-b5b3-c512d7350f8f",
        "cursor": {
          "ref": "00071a5a-0867-46ae-9b6c-cd617824ffdc",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "45dc8dac-b1ae-443c-aa1c-9cce5f54ed17"
        },
        "item": {
          "id": "c26edac3-bc6b-4add-b5b3-c512d7350f8f",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "ce86859a-23ec-44f7-bb6c-c2cd46b81a59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d27b7107-4a79-4a65-8659-0ab21ebb7324",
        "cursor": {
          "ref": "97102a85-b39c-48e0-9aeb-15f1c5472a26",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "459db8d3-69c5-4769-a969-dee34660a2bf"
        },
        "item": {
          "id": "d27b7107-4a79-4a65-8659-0ab21ebb7324",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "39c32729-62f1-48cc-a706-868b1b1a70a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b73c7b51-aa32-43cf-a332-95dd914cd531",
        "cursor": {
          "ref": "4784fd31-ad25-4ccb-8603-7b12df428128",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "10d29635-e464-476b-93ed-3e68cbd4ce0f"
        },
        "item": {
          "id": "b73c7b51-aa32-43cf-a332-95dd914cd531",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "de606c2a-c2c9-4625-becb-3592b66b95d8",
          "status": "Created",
          "code": 201,
          "responseTime": 3714,
          "responseSize": 979
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "67592316-5521-4665-9daf-588d738a0421",
        "cursor": {
          "ref": "ec843329-e5e2-4d59-8065-2d395eb27a91",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "5cc2b858-a0d5-4bac-98aa-1fd22c43506e"
        },
        "item": {
          "id": "67592316-5521-4665-9daf-588d738a0421",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "765da58a-f293-425d-9e61-35209247a335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 149,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "967b73b1-cf9d-476c-b71a-2350d85b5867",
        "cursor": {
          "ref": "1d5151bd-b8ad-4b4a-991f-4fba0225b22d",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "0c435379-5aa7-4c73-8b99-763ed0542981"
        },
        "item": {
          "id": "967b73b1-cf9d-476c-b71a-2350d85b5867",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "1abad760-795f-4545-adf0-b46281c5a94e",
          "status": "Created",
          "code": 201,
          "responseTime": 13080,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "6df33534-6ff5-412c-a34f-35c88c7cd241",
        "cursor": {
          "ref": "a6a35b03-e37a-4bca-9bed-6844ca75d990",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "1ee73644-41e1-4e02-849b-037c83994996"
        },
        "item": {
          "id": "6df33534-6ff5-412c-a34f-35c88c7cd241",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "a69c1f1f-e03b-4c9a-9b40-ed1ba47e5f1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6138a40c-4cec-49b8-b2ea-8c13e6f73e5d",
        "cursor": {
          "ref": "d75aa538-d181-4349-a344-36c9ae8158b0",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "b3946b66-04b8-4f67-85fb-f69eb18f1aac"
        },
        "item": {
          "id": "6138a40c-4cec-49b8-b2ea-8c13e6f73e5d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "8c8ee8a4-7b2d-4ac9-b924-b26d54723d64",
          "status": "Created",
          "code": 201,
          "responseTime": 4113,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "3a2bb2be-a578-4693-981c-18a3874c4854",
        "cursor": {
          "ref": "623aae1d-0031-44a7-94f5-37e99a170d87",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e4ff236f-ca4b-4adf-b6d7-b0307a3f9e86"
        },
        "item": {
          "id": "3a2bb2be-a578-4693-981c-18a3874c4854",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "63365997-f83e-4924-9c79-48d8179c2dec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b395ccdf-6a03-4d1d-9248-31dd4e28eb26",
        "cursor": {
          "ref": "001fa2e5-0381-421f-8754-775b0365ba90",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "73aaf1c3-7d63-4744-bcdd-18f9ba594d01"
        },
        "item": {
          "id": "b395ccdf-6a03-4d1d-9248-31dd4e28eb26",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a23ddbfd-7c9f-481f-8465-9845031c3f16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b280e850-2330-4d3c-9b4e-124d49b4de0e",
        "cursor": {
          "ref": "76df5e5a-ea7c-4c9e-9610-e027f0816f4c",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8f610acb-28f5-41c5-aee8-ba3bd946c8f8"
        },
        "item": {
          "id": "b280e850-2330-4d3c-9b4e-124d49b4de0e",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "5601b78c-24a2-48f3-883b-a358ad6122fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe2ad114-4f56-4354-ab78-7c80b904a805",
        "cursor": {
          "ref": "90e79e2a-b0c8-44d1-8189-6e75d35c4ef6",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "575d707a-3f34-4bac-bb34-675ae4b43d79"
        },
        "item": {
          "id": "fe2ad114-4f56-4354-ab78-7c80b904a805",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "74f5c12a-3ca5-4fae-8fbd-a622303c4993",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f76ae13-0cb6-4439-9b54-6688492684d5",
        "cursor": {
          "ref": "df74c366-31c4-409b-aec2-25527acce886",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "922e676a-d490-45ae-8558-52a0a798e7d2"
        },
        "item": {
          "id": "7f76ae13-0cb6-4439-9b54-6688492684d5",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "d70101eb-ffa8-4169-ab12-7b02e6979a42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe183092-6d30-4316-b678-d99aca749ede",
        "cursor": {
          "ref": "9716068e-8db0-4d59-910e-9f3165a1e600",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "85ad6703-dfa0-498e-ac9e-7b55da330dd3"
        },
        "item": {
          "id": "fe183092-6d30-4316-b678-d99aca749ede",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "caeb7aab-6d4a-472b-ada2-c4e514eb181d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "572ec52c-b90b-45a4-9858-5bac92f5dffa",
        "cursor": {
          "ref": "5d915ba7-393c-44d8-89c4-e2cd71c60073",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "e80d6149-1b75-47f3-b78b-9eb78db2342b"
        },
        "item": {
          "id": "572ec52c-b90b-45a4-9858-5bac92f5dffa",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "292e2088-d2f7-4596-a96d-432538800d92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0166b7d0-4b57-48f0-9ae8-61be8da674c0",
        "cursor": {
          "ref": "c2fa50c9-cc9a-483c-87ff-15b8618e108f",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7b91f661-8b31-4b86-ac1c-54aacff7cf26"
        },
        "item": {
          "id": "0166b7d0-4b57-48f0-9ae8-61be8da674c0",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "ceb460fc-df30-4d0d-9146-91d70d60796f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1917887e-1b32-47ea-a043-d2064b6114dd",
        "cursor": {
          "ref": "f61bc9ea-0d92-4d67-a69d-018dceaa6d24",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d3026fd4-9f27-40d1-9cc7-d99ce4feef69"
        },
        "item": {
          "id": "1917887e-1b32-47ea-a043-d2064b6114dd",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "46705268-ac1c-42f4-8b3c-fbdfc6c5897d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c50c556-967f-4cb6-8335-bd780a94778e",
        "cursor": {
          "ref": "778a142a-80ac-4a2d-af87-fff9a1cb5ccd",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "bc7a4d3e-0191-4126-9fcc-10fc1ef5a042"
        },
        "item": {
          "id": "3c50c556-967f-4cb6-8335-bd780a94778e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "26d85bec-3cb3-4514-96d7-d2ce545c192f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9e1e4e0-ae8d-402f-9ebe-5327723262dd",
        "cursor": {
          "ref": "37ea9aee-9ba3-4b5f-a9f3-d8da4cf90965",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "cc036079-aa54-45ca-b414-7aef3834b368"
        },
        "item": {
          "id": "e9e1e4e0-ae8d-402f-9ebe-5327723262dd",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "2ac31cde-c33e-45a9-827b-6e4bbfc4bd81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9865909-d586-4481-8012-99e6abab03c9",
        "cursor": {
          "ref": "b319dad1-1569-44ad-ba6d-c1963ae429d1",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "916ede09-4278-4533-8a18-008578853257"
        },
        "item": {
          "id": "c9865909-d586-4481-8012-99e6abab03c9",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ebae8fef-d02f-475f-9deb-825822be8ee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "482ae4fa-1752-4f68-b205-551a0d7bf93c",
        "cursor": {
          "ref": "453882a6-f630-4870-8894-7c49880e900b",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "64c083f3-4536-4a67-9298-e09850fcf28d"
        },
        "item": {
          "id": "482ae4fa-1752-4f68-b205-551a0d7bf93c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "6728a013-c5e8-4dbd-9905-8a421048bd03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2519c87-67bd-44ba-990c-e9fe64ed5aa7",
        "cursor": {
          "ref": "c5d86e73-ac03-47b4-8ef2-d8156d028caf",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "dc72d814-0026-443a-a737-7829137928ed"
        },
        "item": {
          "id": "b2519c87-67bd-44ba-990c-e9fe64ed5aa7",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "66c4ec00-39f9-4eb9-8f24-bddede81e0a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fd18ade-823a-4fad-995f-32e920872a97",
        "cursor": {
          "ref": "d5ea6e8a-f819-49aa-8fc3-7f5be80f4889",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "fe8db11d-96f3-4d87-ba35-6c0b25686ed6"
        },
        "item": {
          "id": "7fd18ade-823a-4fad-995f-32e920872a97",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b1bb2908-23a2-4918-b8b2-8c6a07f714cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5fe1db1-0e51-4c5d-9cc1-8600d9ce4847",
        "cursor": {
          "ref": "ce153377-6a92-44a3-bcd7-33d29e1c1899",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4e4beb6e-f0d1-4679-9503-6d352058797b"
        },
        "item": {
          "id": "f5fe1db1-0e51-4c5d-9cc1-8600d9ce4847",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "397d0d9f-30d2-4569-ba50-b83a46353ba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78ce9116-b7b9-413d-b413-731dd7dbc62a",
        "cursor": {
          "ref": "b80ae0a9-4a9d-4e81-a7ae-9dd33309d9ca",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "4cfa187d-5811-4b62-9596-ccf38fa160f6"
        },
        "item": {
          "id": "78ce9116-b7b9-413d-b413-731dd7dbc62a",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "5e1bf94c-5a12-452d-97ec-2f3533ebb9bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c761188b-a24b-45fc-bd77-74ba04bbae49",
        "cursor": {
          "ref": "965a4fd4-ba6e-42cb-93d2-d653f7288ee2",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5beab033-0925-42b8-b741-226c6ef6243d"
        },
        "item": {
          "id": "c761188b-a24b-45fc-bd77-74ba04bbae49",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "1671b75c-9a06-468f-92b4-608cd9448b1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b909f47-a723-493a-b2ec-221017732cda",
        "cursor": {
          "ref": "d2eadfd4-9f36-479c-9422-9c6557c258f8",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d4460fe3-0cd1-4ada-a380-db1c097c344d"
        },
        "item": {
          "id": "4b909f47-a723-493a-b2ec-221017732cda",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d2bc2d57-89ec-4103-b969-e83f79f340c9",
          "status": "Created",
          "code": 201,
          "responseTime": 2686,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "aac92ec6-387a-4c99-8e3e-9967c3cdedf2",
        "cursor": {
          "ref": "49a83ff9-9a92-40d2-96c0-4354b54a2c67",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "78a0f3b7-44dd-4b25-ade8-ddaaa297bbc0"
        },
        "item": {
          "id": "aac92ec6-387a-4c99-8e3e-9967c3cdedf2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "78208779-e57c-4fe9-8a44-b0f7a9437140",
          "status": "Created",
          "code": 201,
          "responseTime": 2677,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "84b58c75-f6fd-412a-8151-31e1266c94d7",
        "cursor": {
          "ref": "0de723f0-97d9-4f66-b80e-fda0519bb719",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "4bda66e0-5f82-45b2-b6c4-678a2e892315"
        },
        "item": {
          "id": "84b58c75-f6fd-412a-8151-31e1266c94d7",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "02cd8f96-9f22-4fd8-a21f-54410d26307a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2088872-fde0-4f61-b98d-8c082e171c6c",
        "cursor": {
          "ref": "f50747ef-3447-45af-90dd-8b636242d4fb",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "df8437cb-48de-493c-8cca-08b6448c4da9"
        },
        "item": {
          "id": "b2088872-fde0-4f61-b98d-8c082e171c6c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a0c1931a-d528-41a7-9dc6-f51c9a896503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde30a74-2ea4-4ae0-94e1-aacb309f3c89",
        "cursor": {
          "ref": "83b8493b-c91e-4b8c-8184-9508d450ce3d",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "54aed9f4-0e61-466d-afd9-a3f8dae51aed"
        },
        "item": {
          "id": "dde30a74-2ea4-4ae0-94e1-aacb309f3c89",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "88219fa4-2588-499e-b330-360e4efee7a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14f0bbce-44c8-4453-96b4-75be59117ffb",
        "cursor": {
          "ref": "9b646c5e-0496-4123-981d-9d7475ce49ed",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3000a064-3780-4670-9e90-23b237689444"
        },
        "item": {
          "id": "14f0bbce-44c8-4453-96b4-75be59117ffb",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "2dd5a757-71b2-4c67-85e2-f2c2bf68294b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40c6576b-5e80-4a58-bc5a-78ef44921e40",
        "cursor": {
          "ref": "c80ff0df-8d8e-4d2e-8b4e-3500701b8ba6",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "1f1d8ab9-753c-4e00-a9b8-16271fa8efdb"
        },
        "item": {
          "id": "40c6576b-5e80-4a58-bc5a-78ef44921e40",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "7e61cef0-3e38-49b9-a719-bce66bbb3dc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29d4e14f-d686-433a-af74-5df35575d16f",
        "cursor": {
          "ref": "3e8d9a25-d2b2-464b-bdbd-96280a93ee63",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e2ac5c0a-b166-4dda-8065-7010d7a9eaa9"
        },
        "item": {
          "id": "29d4e14f-d686-433a-af74-5df35575d16f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "8fd0b83b-f0f3-4569-98b6-db0ecb773a91",
          "status": "Created",
          "code": 201,
          "responseTime": 2924,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "0dc5af6b-11b4-493d-ae5f-4466206e8424",
        "cursor": {
          "ref": "432596fc-39cb-43e9-9d94-0988737f2453",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "26c47cc6-8d39-41f6-9137-73c8ce859203"
        },
        "item": {
          "id": "0dc5af6b-11b4-493d-ae5f-4466206e8424",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "cf28f0ab-cc86-4dcd-868c-28aa4d4e076f",
          "status": "Created",
          "code": 201,
          "responseTime": 2666,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "5212d399-1c6f-4632-84c0-d81c81580191",
        "cursor": {
          "ref": "e712f374-6a89-45cb-9eaa-9b4ae58a9f5c",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d2f1823a-60b3-4072-882e-ad9f686f5691"
        },
        "item": {
          "id": "5212d399-1c6f-4632-84c0-d81c81580191",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "82bcb97a-d126-47f1-9cc7-fbb9fba7f603",
          "status": "Created",
          "code": 201,
          "responseTime": 3186,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "698f9001-ed8a-4d60-889c-245e52dfa4aa",
        "cursor": {
          "ref": "f5dbaac1-0223-4639-88be-be777bbac429",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "54585b4d-de1d-4e59-96b4-b5238526116f"
        },
        "item": {
          "id": "698f9001-ed8a-4d60-889c-245e52dfa4aa",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "108d373b-4295-4fa2-9920-6dd0594b55bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb254fb6-be87-40ab-8016-1a1a55e55c34",
        "cursor": {
          "ref": "026b8ca0-3407-40bf-9423-9af5ed02050a",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e241e6db-1d25-48ec-be61-df003107e235"
        },
        "item": {
          "id": "eb254fb6-be87-40ab-8016-1a1a55e55c34",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "de0ea867-722d-4cd8-add6-98fed3d7f30c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c68b2a0-ace1-4f90-b34f-b91831f2ff4f",
        "cursor": {
          "ref": "e9c7f626-fb6d-43b6-9632-da72f26a11b9",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1e796857-87ab-4779-b16c-05a06601dde1"
        },
        "item": {
          "id": "4c68b2a0-ace1-4f90-b34f-b91831f2ff4f",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c00fce78-1c60-4ba0-bddb-5b30bec3dd9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9eeda0e-9a2b-4034-8287-fb69c46cd0c7",
        "cursor": {
          "ref": "b85b903b-1d74-47db-8d14-a1a712bfd9a9",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "c51b498e-2e0d-4dbf-999f-2992eb8e51b7"
        },
        "item": {
          "id": "d9eeda0e-9a2b-4034-8287-fb69c46cd0c7",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a5b19b21-c171-4d1e-9657-6a35670d1523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76812c3e-5989-40cd-bab3-90430d715d7d",
        "cursor": {
          "ref": "8c0f00c7-3a63-4f1d-a643-ef3c6562d206",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "9d5462e6-67fa-4274-b6ac-432676f64d5e"
        },
        "item": {
          "id": "76812c3e-5989-40cd-bab3-90430d715d7d",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "29981ee5-cdf0-41ac-b7f0-d2d0a5aff167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eb7f16c-9ecc-4ddf-a960-cfd5873fd40a",
        "cursor": {
          "ref": "1f07e5a2-128b-4244-aba2-5391a9760872",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "cd9a0d6f-d382-44dd-8ff2-e12f5884371a"
        },
        "item": {
          "id": "6eb7f16c-9ecc-4ddf-a960-cfd5873fd40a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "1a5832f2-9cd9-4a11-bcdf-89b13f35c80f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71ba1bd9-ed0d-43dc-b92a-0619b67517f7",
        "cursor": {
          "ref": "bd509d37-b694-4634-a3ef-925fca6b2cf2",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "15c5919b-fa10-4c44-bc01-ba8c3b9164c0"
        },
        "item": {
          "id": "71ba1bd9-ed0d-43dc-b92a-0619b67517f7",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "54a80c55-1d3a-488f-ada4-079355e88acb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bb01244-bb84-4d9a-a243-2fe197c9a06f",
        "cursor": {
          "ref": "01b8d097-fba0-4f6c-b3ba-7a199d122bc8",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "3e35d7b8-16cc-43b4-b133-26a8b7a9e3ac"
        },
        "item": {
          "id": "6bb01244-bb84-4d9a-a243-2fe197c9a06f",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a3ff1786-14d3-4f9a-89ed-e3afb2f2545f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b61fd44-aabf-4f0c-bcef-3406a71f1e07",
        "cursor": {
          "ref": "d8d42f7a-8e81-4f98-9b3f-b5f2f347c8e6",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1f67a6f6-3e45-4c07-b242-4588630817f8"
        },
        "item": {
          "id": "6b61fd44-aabf-4f0c-bcef-3406a71f1e07",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "af7cecc8-bd80-4b0d-9a34-3fa37d6ba08c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84080fac-ad19-46df-89f1-02d7df0198e4",
        "cursor": {
          "ref": "074992d4-ce8a-40d4-b8e9-5cd2b5569b8b",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "cd948f0a-a77c-4595-839d-a2bb52a17bc5"
        },
        "item": {
          "id": "84080fac-ad19-46df-89f1-02d7df0198e4",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "586a0c58-a247-415f-a5e8-3d99c971279f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf07c041-b700-4a41-a2a5-9f6a036e1181",
        "cursor": {
          "ref": "fcffd86e-35f0-4918-9abc-f8f405f26706",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c16b05b7-15c3-4d6d-8a2e-5edb1d9dc5a5"
        },
        "item": {
          "id": "bf07c041-b700-4a41-a2a5-9f6a036e1181",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "683a1a80-5186-490a-8295-c0f3dcb9ecb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e006a32-3318-43a6-97ca-6ebcfd5956d7",
        "cursor": {
          "ref": "afcf823b-984e-408c-b70e-bf76b38ab124",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "79ecda79-fc47-4f15-aaba-56c8ae90e56b"
        },
        "item": {
          "id": "9e006a32-3318-43a6-97ca-6ebcfd5956d7",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "02054184-0abf-4131-b00b-d1076b68f4a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fead7e4-1373-44e5-ae2b-0a06caa1e537",
        "cursor": {
          "ref": "a4872958-ab5f-4343-a5d3-c8dc51a56f42",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "5b39884d-3324-41ae-b87a-d277c0acee31"
        },
        "item": {
          "id": "9fead7e4-1373-44e5-ae2b-0a06caa1e537",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "b22ab050-306e-4ff3-8261-8a3b0bf27461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edd6dafb-1c22-41a1-bb74-bf6bf8cf4e02",
        "cursor": {
          "ref": "af938de7-aafd-497d-a6b5-d30d77320494",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "429b9a03-42f4-4899-8c26-853d6ea0cbfa"
        },
        "item": {
          "id": "edd6dafb-1c22-41a1-bb74-bf6bf8cf4e02",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "3f8cd3a6-238a-419b-89e0-762facb38e87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3aa4106-a93e-4698-afb9-ce678cf8419a",
        "cursor": {
          "ref": "e107a8aa-133a-4888-a3b5-2891d6ec8c1c",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "923ffb57-e26d-4ff5-a981-f3e685ed4dce"
        },
        "item": {
          "id": "b3aa4106-a93e-4698-afb9-ce678cf8419a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "cf9f13db-d52e-4b99-8762-f211eda20a5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd78150-c5f1-4251-b04a-ce5bad866df1",
        "cursor": {
          "ref": "7439ec90-3454-4588-a4db-0669a6ce4791",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "3b2224cc-76d4-482b-914c-fda0d7ce1e46"
        },
        "item": {
          "id": "cdd78150-c5f1-4251-b04a-ce5bad866df1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "da115b79-f575-4b1a-b926-d373087d6af6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04ffba12-f538-4145-a005-e1331db37ce3",
        "cursor": {
          "ref": "d1324093-4a05-4fb0-b45c-dee29f4d0f5e",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f308251f-5c17-4077-8afe-0058e78da115"
        },
        "item": {
          "id": "04ffba12-f538-4145-a005-e1331db37ce3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a6b29078-50ba-42ec-8b36-ad8ab3632fb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "036be6e1-424d-4ed3-b0d8-afc50a3b24ce",
        "cursor": {
          "ref": "ab81e123-d265-43d5-b625-30423337d5dc",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "4b5b3526-d6f9-46b0-abb6-bf4a46a165c9"
        },
        "item": {
          "id": "036be6e1-424d-4ed3-b0d8-afc50a3b24ce",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "fdaebff8-f056-465e-adbc-d6e5c5f5ba34",
          "status": "Created",
          "code": 201,
          "responseTime": 2420,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "f98a6f2d-f0d0-480b-ad0e-d1bb46d0488a",
        "cursor": {
          "ref": "caa7aa7d-5913-43f9-ba50-7d1aac6f58aa",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "abcf8c43-b606-4eea-b51a-f38e37ba3a49"
        },
        "item": {
          "id": "f98a6f2d-f0d0-480b-ad0e-d1bb46d0488a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "219ba742-7d8a-492b-b72c-5281886402aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1747d364-eaf7-45aa-a529-98a02d4e1b70",
        "cursor": {
          "ref": "be52fb37-1282-4120-bc29-85800bdb2760",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "51637406-c3ce-47eb-855b-d33b2ff620f1"
        },
        "item": {
          "id": "1747d364-eaf7-45aa-a529-98a02d4e1b70",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "c38d58ff-e506-4e99-b777-619e03935af0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d5a713c-1747-40d3-b305-6cddb7f10cbd",
        "cursor": {
          "ref": "e19d6e0d-de53-4fa9-bea9-ba07dc3285d7",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b4e4168a-20f4-4bc8-9ff8-81ffd3049b23"
        },
        "item": {
          "id": "0d5a713c-1747-40d3-b305-6cddb7f10cbd",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "54ff3e1a-2e10-4fdf-ad42-2e603b28baab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90ffff95-b9be-4033-bd57-770e05ff0692",
        "cursor": {
          "ref": "3b507ff3-d777-4eca-a686-89f4b78d05bd",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "356d5381-2173-43c5-99fd-92ea26fbb41e"
        },
        "item": {
          "id": "90ffff95-b9be-4033-bd57-770e05ff0692",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "df9c0fc6-d08f-49ae-8267-baa0e4a28441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb9e3b52-d46f-4fff-b81a-c01d6286bc95",
        "cursor": {
          "ref": "0837e767-3635-4272-a094-0486e5e1fef5",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "86a3b768-08f2-47c6-b46e-5e4cc0bbcffe"
        },
        "item": {
          "id": "fb9e3b52-d46f-4fff-b81a-c01d6286bc95",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "317e7873-7c80-4f73-9ff9-ff1948c46edf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a68f9096-d83a-43cf-af4d-16f7065b142c",
        "cursor": {
          "ref": "5364820e-7fbe-4ef8-8731-a066eff1895b",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2e47f62c-7df3-4390-b32a-3f57c3e7aaee"
        },
        "item": {
          "id": "a68f9096-d83a-43cf-af4d-16f7065b142c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "be8acfe9-3687-450c-aa19-aacbaab42333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19a43e57-0c65-4494-8d96-34398510a071",
        "cursor": {
          "ref": "2b608544-0e9b-4a80-ba4f-8a993b714cc2",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "26f2f0aa-d96d-41e6-8f56-205457e1b40a"
        },
        "item": {
          "id": "19a43e57-0c65-4494-8d96-34398510a071",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "fdf70255-51f3-48af-b9b7-a3bebd496221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e36ddbf-6fa4-46f5-a220-594e1811ab92",
        "cursor": {
          "ref": "f0069375-3cc5-402e-9c10-88b551a73b23",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3d1284e8-2057-4bed-9eae-12c9650e8003"
        },
        "item": {
          "id": "3e36ddbf-6fa4-46f5-a220-594e1811ab92",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b9f3c7a9-edc6-4541-ac73-b2a103ee6d7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b87f7a5-3d93-481b-8f2d-0f71ca07db78",
        "cursor": {
          "ref": "fb409901-2884-4651-a513-511e0c798eb2",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "917782dd-a3b5-4338-a6c5-11ba043d2670"
        },
        "item": {
          "id": "6b87f7a5-3d93-481b-8f2d-0f71ca07db78",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "eb3efad0-16c5-4545-a4e8-46b685fcf8e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ea09ef0-97f4-4c12-aab3-1f5fa97ea0cf",
        "cursor": {
          "ref": "0d65ebad-ff1d-4b9a-8276-883409fb38c1",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d3ca5780-ab9f-49bb-b17e-e26e7a3efbb8"
        },
        "item": {
          "id": "3ea09ef0-97f4-4c12-aab3-1f5fa97ea0cf",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "64276045-4a21-458c-bc05-58d237348404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71ba9ef1-32fd-4e70-b8fc-e4db6de5c87b",
        "cursor": {
          "ref": "56219967-c811-4ee5-8fbd-de11b8818a63",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "90e5b07d-4b17-4e28-9650-dc7e1d1637a9"
        },
        "item": {
          "id": "71ba9ef1-32fd-4e70-b8fc-e4db6de5c87b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "49087f1e-f6e0-4230-90af-544e5e331806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a961ff9-109f-4fdd-8f04-bcdf7550649f",
        "cursor": {
          "ref": "8f71436a-f27b-46ab-8575-85467f5b368b",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "68757f73-db66-4c7a-9f98-c21d0783500f"
        },
        "item": {
          "id": "6a961ff9-109f-4fdd-8f04-bcdf7550649f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8afef007-984b-43a0-b554-f97f42c65d70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58847fbb-4a81-44c2-bbb6-6e77332e61ff",
        "cursor": {
          "ref": "68e99d13-513a-43f0-a834-4cc3d520134b",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "2985ec8e-8c30-451a-8fdc-5b2ac4ae08c5"
        },
        "item": {
          "id": "58847fbb-4a81-44c2-bbb6-6e77332e61ff",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "009eb923-80ed-4828-a92b-4af979e21a00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31629c4b-828c-4e9f-bf08-161fb8141fdf",
        "cursor": {
          "ref": "a47564ec-5479-46ad-bf0f-634733822b6a",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "6ee010ed-110b-496a-8207-01926dc26100"
        },
        "item": {
          "id": "31629c4b-828c-4e9f-bf08-161fb8141fdf",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "8c570f0a-2824-4de0-bce6-1fb118f94197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a108b03-a105-4151-aa2c-ec3611e408ad",
        "cursor": {
          "ref": "669c2eeb-1c53-4f80-ab2b-d8bec68fbcea",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "386d0551-dbda-4b09-9e81-9fcc37ac54c9"
        },
        "item": {
          "id": "4a108b03-a105-4151-aa2c-ec3611e408ad",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "b13ac97e-ac4a-4f2b-a527-398b4855df3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d6f9a44-6b43-4186-9388-ce66bf474ddc",
        "cursor": {
          "ref": "4b2d0c38-3b1b-45da-9fca-9eb37e1ed43c",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "80702cb1-5f9d-4612-97e6-3a3565077a27"
        },
        "item": {
          "id": "7d6f9a44-6b43-4186-9388-ce66bf474ddc",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "de89158c-c89f-4bdc-871f-7c512f01953b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25957765-5fdf-4cbc-9db8-621793be277a",
        "cursor": {
          "ref": "c59a69b0-e60b-46cb-ac8f-053e40cc14dc",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c3464f3a-92c2-4ea8-8a2f-3497613fa4c3"
        },
        "item": {
          "id": "25957765-5fdf-4cbc-9db8-621793be277a",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "642f2384-0027-4d45-a2de-c2807829fd4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d167b2a-26fb-4bdb-beea-530c369dda83",
        "cursor": {
          "ref": "949b0a42-c515-4e2b-b08b-b8baf3634db0",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "5c8ff8af-ab13-45c4-8981-067f79336dbf"
        },
        "item": {
          "id": "5d167b2a-26fb-4bdb-beea-530c369dda83",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "640811e2-1983-4819-b447-bd44325d7d41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a8a7112-af07-4f02-a02a-745383bb7013",
        "cursor": {
          "ref": "feced7b0-3853-4cc1-8ec8-fcd96f75ba3e",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "4835a6a0-7cb7-4eb2-a091-c98e1b917bea"
        },
        "item": {
          "id": "0a8a7112-af07-4f02-a02a-745383bb7013",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ebbbd03e-7530-497c-ad11-592e3d4d5552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7486ca8a-af39-4935-a5e2-15f39ac59fb1",
        "cursor": {
          "ref": "ddc86445-7715-46d8-b1ca-76778c37c9fc",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "f738b37f-e21a-4d62-be55-bc8ffce28c80"
        },
        "item": {
          "id": "7486ca8a-af39-4935-a5e2-15f39ac59fb1",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e5e1b604-8c94-410b-9878-b55228296f24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ed51bb7-4973-4f5c-b79a-9ce62cb9f740",
        "cursor": {
          "ref": "bd19ea13-0be6-4ec6-aa5a-dd04d9622f40",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "8d85b50f-38c0-473d-b379-c5bb92c5a010"
        },
        "item": {
          "id": "7ed51bb7-4973-4f5c-b79a-9ce62cb9f740",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6e70f949-d0c8-4df8-9b17-9c57eca6d6a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bde739fc-8ad5-41cd-9668-ea10d91f024e",
        "cursor": {
          "ref": "30316e41-23e3-4b2e-94b9-d8b33d4aa9c8",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c0c928cf-6bb8-4c5b-9685-bdf0533151be"
        },
        "item": {
          "id": "bde739fc-8ad5-41cd-9668-ea10d91f024e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a6514f8b-b27a-4af0-8352-dbfb0a83f253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "445d15ec-57fb-4371-9c14-00847f906742",
        "cursor": {
          "ref": "a19b1495-f5a8-49fb-853b-d94a3cbc142a",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0ff26433-4e51-487d-ade8-897fba86d8fb"
        },
        "item": {
          "id": "445d15ec-57fb-4371-9c14-00847f906742",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9ac23dd8-5d12-4ad1-bfa5-effb886ac4a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5264e7b6-b776-4c90-8c05-a781f05b30b4",
        "cursor": {
          "ref": "f89a5776-04ac-4d26-ac8c-83095d18e2f4",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ed2ffeda-5c52-4b01-91ee-761e0886d1de"
        },
        "item": {
          "id": "5264e7b6-b776-4c90-8c05-a781f05b30b4",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a3f10351-16ec-4eb5-a8bf-5f5987987530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de11801f-2430-4ea4-9177-cce9f03b36b5",
        "cursor": {
          "ref": "b859ba46-533e-406f-8de6-3b313e4cf548",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "ba5dee9c-b3d1-4be0-82ad-495dd54f235e"
        },
        "item": {
          "id": "de11801f-2430-4ea4-9177-cce9f03b36b5",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3a760657-9cbe-4a79-b473-5fe840a496f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "316546c1-22a3-462f-8707-2b76ea3728ad",
        "cursor": {
          "ref": "fa126af0-c6a7-4dda-a344-39f410a0211c",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "7c2cab0e-63fc-4d23-80fb-d2716f25a425"
        },
        "item": {
          "id": "316546c1-22a3-462f-8707-2b76ea3728ad",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b51c4b20-1337-4b8e-b90b-13b30734fa04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d192ed8c-fcde-4c9e-891c-c08682a9a515",
        "cursor": {
          "ref": "57a59342-223f-4d30-be5d-57053ebc7897",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "01a13efb-2bb4-4595-84f5-5d44f584994d"
        },
        "item": {
          "id": "d192ed8c-fcde-4c9e-891c-c08682a9a515",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "7d913e94-8b4e-4aa2-a726-16b84a4b86b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17c86ee2-4c42-428e-a593-24b570abe781",
        "cursor": {
          "ref": "7edbbc1f-b40c-4ad7-ab4d-1b0724f6a41a",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "0a8712aa-8c98-4d25-9c08-3f3daf2462e1"
        },
        "item": {
          "id": "17c86ee2-4c42-428e-a593-24b570abe781",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "3588774a-8caf-422f-9fa7-5d25179efc7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3218f05-4620-47c6-9a44-8744363c60ef",
        "cursor": {
          "ref": "888f5217-8a06-4237-ab77-65f216ed058d",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a930e6e9-860a-4bcf-8897-8931a479e719"
        },
        "item": {
          "id": "e3218f05-4620-47c6-9a44-8744363c60ef",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "c862d87d-145a-4b64-b71b-70c5a07aa9ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "498ece95-b035-4f64-9630-b9da75c02e83",
        "cursor": {
          "ref": "7ac734c8-ae8e-4617-a9a0-6c4172f43eb6",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "6d924d46-904d-419b-9137-eb5e5e69cc21"
        },
        "item": {
          "id": "498ece95-b035-4f64-9630-b9da75c02e83",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f5f7c353-275f-44b1-a42f-d436c41232f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d7a083f-ffcb-440a-923c-9f9fe27cef74",
        "cursor": {
          "ref": "85c22b8b-a584-4986-8e88-6480e2c4eb0d",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "9f5ace96-286e-45fe-bf88-1f45c26e0c6e"
        },
        "item": {
          "id": "6d7a083f-ffcb-440a-923c-9f9fe27cef74",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "901d1b0d-5a86-4c52-9d38-1a8812f4a95f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "8395f6af-009f-40f3-bb04-8f3a53f94755",
        "cursor": {
          "ref": "53e2961c-4701-4b9d-8245-34083a531cff",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "fda3f59f-4942-4081-8a0b-b6f8d1873113"
        },
        "item": {
          "id": "8395f6af-009f-40f3-bb04-8f3a53f94755",
          "name": "credentials_issue"
        },
        "response": {
          "id": "fbbf8b70-fa92-4efc-ac31-c1a39e531e0c",
          "status": "Created",
          "code": 201,
          "responseTime": 2000,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "011934d4-80d2-42cf-8655-4aedbc0ee79b",
        "cursor": {
          "ref": "61695465-14d1-42a8-913e-bdeb4dc9f371",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "788188af-930b-4920-bd16-537f3819a9ff"
        },
        "item": {
          "id": "011934d4-80d2-42cf-8655-4aedbc0ee79b",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "b2133d2a-466b-4dc3-8431-16bd045ed720",
          "status": "Created",
          "code": 201,
          "responseTime": 2527,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "aab73725-6ab3-491a-80b1-b94d7b718247",
        "cursor": {
          "ref": "a4f03d0c-545a-42d7-af68-fb84e02c07d6",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e093da36-850f-4e1b-935c-3fd1a3347a56"
        },
        "item": {
          "id": "aab73725-6ab3-491a-80b1-b94d7b718247",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "73ffc7fd-2f57-4cdb-ba24-6c80546b8f23",
          "status": "Created",
          "code": 201,
          "responseTime": 2442,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a8728fa-ec20-46cd-9fe5-643540f946b0",
        "cursor": {
          "ref": "fd131f45-9e8f-4ffd-978f-cc9b847e2b37",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "3b5cd569-683e-4582-a1ca-68a1b1611efe"
        },
        "item": {
          "id": "5a8728fa-ec20-46cd-9fe5-643540f946b0",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d4fde115-01a0-49c9-a109-ba9bc05e9342",
          "status": "Created",
          "code": 201,
          "responseTime": 2565,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bcd46d7-b43d-4b20-b76a-651712c1f6c2",
        "cursor": {
          "ref": "4a2996b3-f53b-437c-ba16-de4c0c20a904",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "e5db843b-3271-4b93-a870-7830f7b8591b"
        },
        "item": {
          "id": "3bcd46d7-b43d-4b20-b76a-651712c1f6c2",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "69517597-3f2d-4da2-964e-6e17fc167fb7",
          "status": "Created",
          "code": 201,
          "responseTime": 2366,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-06-27T00:48:10Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-06-27T00:48:10Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "2e8d942f-b67e-4148-83ad-1fa8a0c94c98",
        "cursor": {
          "ref": "d66578c2-ae51-4ef7-a1da-8ca8ef8515d1",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "fbb80244-c999-40d0-857f-e18863ae5907"
        },
        "item": {
          "id": "2e8d942f-b67e-4148-83ad-1fa8a0c94c98",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "46e34cb1-6ad3-4a97-9995-3773181c86b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "573929f5-9b61-4a45-a4ac-64921d6fee7f",
        "cursor": {
          "ref": "aa81148f-0320-48ce-9103-ce0b40478647",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "90796e1a-1579-4f52-851c-ef8aaced06f7"
        },
        "item": {
          "id": "573929f5-9b61-4a45-a4ac-64921d6fee7f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "bee6882f-abda-41f8-8259-6dc57c4a5466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc9453d7-2c90-4103-b946-94e225fefca9",
        "cursor": {
          "ref": "a38b6979-df10-438b-9ecf-00f0d284c02c",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "1c617a5b-0043-4269-9e9e-e695287dff46"
        },
        "item": {
          "id": "fc9453d7-2c90-4103-b946-94e225fefca9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "67126f06-4484-4d19-868d-695cb1f06d86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26b92189-7ca9-4ee2-aec8-e1fe39ccf628",
        "cursor": {
          "ref": "e055422f-2f69-417b-9137-a6d1340ce5a1",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "601baae3-2c93-42c3-b4c1-607a39d9ec8d"
        },
        "item": {
          "id": "26b92189-7ca9-4ee2-aec8-e1fe39ccf628",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "dcc29543-6bed-40ae-9a46-607be4d9260e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb035d9-4905-42c3-a796-f7f902ecb107",
        "cursor": {
          "ref": "2767b670-aae6-453f-bf20-ebe84f4860d4",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "86990c11-df9b-4925-92e1-f46cb4051e8b"
        },
        "item": {
          "id": "8fb035d9-4905-42c3-a796-f7f902ecb107",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ef628910-445d-4c93-bc32-0f57e1d8b9ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c037351-a5f0-4d6f-aae3-248775edfa2f",
        "cursor": {
          "ref": "ec37e471-8459-4192-af7b-9f217d442e46",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "452b9ff2-12f7-46a6-b6a7-1ba580d491b5"
        },
        "item": {
          "id": "7c037351-a5f0-4d6f-aae3-248775edfa2f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "51a5e4d5-5eb4-49bd-8e13-8f994a1df03c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c7ae895-d5e5-47db-a278-02498341cdf2",
        "cursor": {
          "ref": "882d0829-c20c-414d-923c-5172f198d568",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "94446465-cdb9-4f6e-8b1b-09cfcd506ccd"
        },
        "item": {
          "id": "4c7ae895-d5e5-47db-a278-02498341cdf2",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "50dac953-af7c-43e0-9439-29df88fed409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53b84ef2-7f00-4c73-b079-ccfbb998404b",
        "cursor": {
          "ref": "aacee4be-0315-424f-a0ff-a906d04ff286",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "e2248927-7afb-4c06-af2c-f574d448ee4f"
        },
        "item": {
          "id": "53b84ef2-7f00-4c73-b079-ccfbb998404b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e73b75b7-ef33-4bfd-8436-fd038688bc67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60ce2db4-4c5d-478a-9e50-525dcc687d9b",
        "cursor": {
          "ref": "df06593f-527d-4157-b32e-a4e6bd001b23",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b7dc49f3-02ef-434d-a943-717777a30733"
        },
        "item": {
          "id": "60ce2db4-4c5d-478a-9e50-525dcc687d9b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2709efe8-4a9c-40ae-a6d5-14c63e5d541b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9adad464-4238-4356-b470-a62486b4ea40",
        "cursor": {
          "ref": "bc4bfb6f-f33d-4263-b640-907988236937",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "cad7d233-9f5b-4dfa-9dd7-a9c78c2e7da3"
        },
        "item": {
          "id": "9adad464-4238-4356-b470-a62486b4ea40",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "151d22b5-1a74-4458-b550-ca63a3cca9f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cdaed6c-9bab-4ba4-9358-30f94515105f",
        "cursor": {
          "ref": "546451c2-bee3-4bc2-824d-3281586aa69a",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "bfc4973a-c136-4c45-9482-006639ca091d"
        },
        "item": {
          "id": "0cdaed6c-9bab-4ba4-9358-30f94515105f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "19330071-233a-425f-8f6a-1b8bebb6d147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c236b9ad-0539-4726-8b7f-99b818849009",
        "cursor": {
          "ref": "67eac8b4-e1fd-495c-93eb-529189a6f7dc",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1ac37225-31ab-477a-99d7-0b27195ec980"
        },
        "item": {
          "id": "c236b9ad-0539-4726-8b7f-99b818849009",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1e902e45-95d9-4ead-a08b-24b3a48295bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d2df233-a6e6-45ba-8f15-9702e018ee30",
        "cursor": {
          "ref": "c007674e-3971-4c8e-ad9a-52b51476fef3",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "3985ecf0-7a70-43e6-853d-e1424a4278e6"
        },
        "item": {
          "id": "2d2df233-a6e6-45ba-8f15-9702e018ee30",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3b8be0c5-e16f-4c62-b5c7-3b712ffb2337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ed43eb5-1d9f-41ff-9875-40a7b4a6e1f1",
        "cursor": {
          "ref": "eab4ed23-8836-4615-802e-8e1bf96cfa6f",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "7144abd9-aa71-49a5-818b-b7ab150b5168"
        },
        "item": {
          "id": "8ed43eb5-1d9f-41ff-9875-40a7b4a6e1f1",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "fd9092fb-da5a-47b8-8620-9be989f9ca34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0da8af59-be45-4fcf-940c-dfe9bedadbca",
        "cursor": {
          "ref": "a557afb1-84fe-4a98-8989-a3d9a6c8ab5e",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "afd473f7-6d65-4866-9580-5161aa939085"
        },
        "item": {
          "id": "0da8af59-be45-4fcf-940c-dfe9bedadbca",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9e1bef4c-1188-4072-86a3-30f7ae674f41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b457f02-755c-4d8a-b7e2-2592acf86fdb",
        "cursor": {
          "ref": "108e5e06-dd72-4a00-a9b6-17d4f5a7539b",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "d994b7c0-9f94-4a0e-958d-d7b9f1b0c1ff"
        },
        "item": {
          "id": "2b457f02-755c-4d8a-b7e2-2592acf86fdb",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5f7583af-4a9e-4098-a265-9b05c30f5d25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d348295-3676-4f97-bb2e-972de6c11ba7",
        "cursor": {
          "ref": "71553aad-7e4b-4586-b131-149bdbdbb5d6",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "0b3c6305-21aa-4364-83eb-38e633680b6b"
        },
        "item": {
          "id": "5d348295-3676-4f97-bb2e-972de6c11ba7",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1e7ab44f-584e-4b69-94a9-ebe3e44b09f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f1a224e-56c8-461f-a8e7-ad9c2ea0407a",
        "cursor": {
          "ref": "76e59915-9bcf-4755-bfec-78ca59e0d550",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "05046570-1ad0-49e3-a4aa-05c85b4c22a7"
        },
        "item": {
          "id": "9f1a224e-56c8-461f-a8e7-ad9c2ea0407a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6b4ef78d-e435-4182-a39f-0d07dc15a9ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c44d17d-04a2-464e-b66e-d15862c9d130",
        "cursor": {
          "ref": "9644c048-40c9-4e2a-a5b5-45f85c4bfa39",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "4a2325a8-8da2-4414-9e9d-4d18b5799237"
        },
        "item": {
          "id": "0c44d17d-04a2-464e-b66e-d15862c9d130",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7f682d36-d6b9-45c8-b905-2ef5d4b4e47d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "275a7306-3f83-4ae7-a3b6-dc2d0633d391",
        "cursor": {
          "ref": "0bf07723-b1a0-4796-b2db-34516dc49eec",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "a7273bd5-16e2-47bb-ad59-4483eac8c243"
        },
        "item": {
          "id": "275a7306-3f83-4ae7-a3b6-dc2d0633d391",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2afc5cba-7707-4f78-a21e-c3a78eb4a9b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f583b70-dfa7-4a4d-8b38-d6f3271f64dd",
        "cursor": {
          "ref": "26b7a160-773b-4b7c-a499-6d458c095301",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7f9c4d69-3929-45f5-968d-ab7fbd4d8dfe"
        },
        "item": {
          "id": "8f583b70-dfa7-4a4d-8b38-d6f3271f64dd",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "dcf245d2-5e7b-4b44-a664-2f69b119e366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d52d79-2ba8-40dd-8f57-4f558f87d848",
        "cursor": {
          "ref": "4118c701-1fa1-4341-994e-02216fd10f3d",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "96206ba1-f06e-4a55-8b57-127d15192cfa"
        },
        "item": {
          "id": "94d52d79-2ba8-40dd-8f57-4f558f87d848",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "de3c14d5-7c35-4210-9623-a819a1643c70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9ab0274-f981-4756-947d-a5baaf71585b",
        "cursor": {
          "ref": "5ebdf37b-b1f4-428c-8d51-525cbd60526e",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0b12090e-c854-47df-a03b-93eef84445f7"
        },
        "item": {
          "id": "d9ab0274-f981-4756-947d-a5baaf71585b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4d2b7636-0e3c-477c-b885-07a4756f2ad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42fa0260-e3e4-4713-ab92-ead27f705ab8",
        "cursor": {
          "ref": "e228ce59-06e4-4971-a62c-804ffd8f6327",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "4a13e751-94f1-4ec0-b5e3-65c93febf69d"
        },
        "item": {
          "id": "42fa0260-e3e4-4713-ab92-ead27f705ab8",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "fc49597a-0559-4c2e-b210-efa06c0ec17b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b11a5d01-e78c-4ed6-ab98-b86991ea205e",
        "cursor": {
          "ref": "bced503e-3784-4038-a612-d07ade35a566",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "8ad09060-440c-4c9e-9345-17b9dea00dc9"
        },
        "item": {
          "id": "b11a5d01-e78c-4ed6-ab98-b86991ea205e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1d54b3f4-3853-480b-9d8b-a289e44984dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78599398-762e-4161-ba7d-f2d2f30275c4",
        "cursor": {
          "ref": "4518b411-5112-4cce-b0cf-7c0a4e6ea61e",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "cbb048be-c095-471b-b86c-b7a008b0dfef"
        },
        "item": {
          "id": "78599398-762e-4161-ba7d-f2d2f30275c4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "264ec8c1-e9da-49a8-93ad-4884013f9d87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee690d07-1156-4c60-953d-4b531004ce57",
        "cursor": {
          "ref": "b09d6487-d874-4c31-a8a7-930145b1602b",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "383ded80-c931-443c-a7f1-cfe093781a9e"
        },
        "item": {
          "id": "ee690d07-1156-4c60-953d-4b531004ce57",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "21ad9f86-0c4a-4386-965e-4d32e83e87d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a64c413-6f7c-41b6-84d2-f004c77517aa",
        "cursor": {
          "ref": "15faa394-e9df-4363-933f-0c79d9b27926",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "9fd47c9e-7f6d-44a5-8078-328ebec292ec"
        },
        "item": {
          "id": "8a64c413-6f7c-41b6-84d2-f004c77517aa",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9887916a-49aa-4bab-a61a-0ef6f7ffa3b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "303a8908-ebe1-4b6a-a26c-a7a0edc86238",
        "cursor": {
          "ref": "c34c49e9-25f7-447e-bff9-bd912d75ea4f",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "66ccab5f-7f8f-40ab-b068-e28e3ba17e75"
        },
        "item": {
          "id": "303a8908-ebe1-4b6a-a26c-a7a0edc86238",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "21f811da-b354-4252-9607-626fc34a4a93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59c39dd4-55a8-41a0-bdb6-fdca4afe642c",
        "cursor": {
          "ref": "9d1df0a2-f68f-44ab-89af-219ef3118496",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "87f4d5cf-8eee-46c1-8331-ef8d261269f8"
        },
        "item": {
          "id": "59c39dd4-55a8-41a0-bdb6-fdca4afe642c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "01029569-17db-4568-84ad-579ddfacf358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7105b017-ab40-44e0-bad0-7ef64e362354",
        "cursor": {
          "ref": "2b2cd8d7-2fb3-4179-b0f3-3336a32d8e7a",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "646dfa35-0956-450d-9591-ea5d1d74b9f8"
        },
        "item": {
          "id": "7105b017-ab40-44e0-bad0-7ef64e362354",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a9916d3d-1aee-4cfa-b2cc-6408c41ad840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64b641e9-edc2-4811-bbc7-eab228a5beba",
        "cursor": {
          "ref": "7b230737-482e-4549-955f-0c2708c180fc",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "3d0bf900-3c5e-447a-979c-ba3bb8ca0f7e"
        },
        "item": {
          "id": "64b641e9-edc2-4811-bbc7-eab228a5beba",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9240d9f0-37c0-4030-bd9d-8e23c20a3ecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94a893b6-4d38-487f-bc2d-b43d64a0c705",
        "cursor": {
          "ref": "e56c8c4a-5ff9-4c33-b6e2-2d9e8b4f5e0a",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ebe53640-f84b-4e7e-8e37-bbb8afbc590c"
        },
        "item": {
          "id": "94a893b6-4d38-487f-bc2d-b43d64a0c705",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "7907f40a-22d9-40e9-a2f6-8cb213321312",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2aaeb9b-b9ba-49bd-9af6-efeacf6ea5dc",
        "cursor": {
          "ref": "4ebd6814-56e1-4b95-83c1-e13b4135009e",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a56c59a4-3a22-4280-bc12-4c0781ddc459"
        },
        "item": {
          "id": "c2aaeb9b-b9ba-49bd-9af6-efeacf6ea5dc",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "41f94bcd-13aa-4f96-990e-f9e53c80bdd4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "5991626a-e1df-43e6-9ebe-45388eb1c271",
        "cursor": {
          "ref": "4b258d7c-0b32-4804-af05-f2651fb450b2",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ee329bde-e2fa-4966-8e8d-1479e1315060"
        },
        "item": {
          "id": "5991626a-e1df-43e6-9ebe-45388eb1c271",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "beef11f4-4af2-40ef-9964-7903a8f37e1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91d4ef3a-9914-498b-93f0-e46c5cc45bef",
        "cursor": {
          "ref": "175ce508-f8b2-456f-8cc1-0d414df1d2cf",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f1db0758-b896-4752-88a7-9b44efdfb4e8"
        },
        "item": {
          "id": "91d4ef3a-9914-498b-93f0-e46c5cc45bef",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d3c9f1e7-81b0-4ed4-82a9-ef0df3fdc3cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c1fc282-4a63-45fe-a19b-47c4c37f4195",
        "cursor": {
          "ref": "0cc3af1c-13bf-43f0-81f8-b0703518323f",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "9cabe071-d8cc-4f95-b88b-00e08b358149"
        },
        "item": {
          "id": "1c1fc282-4a63-45fe-a19b-47c4c37f4195",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f5e98545-adac-4dd1-90c3-435cd1b4a371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f5feb9c-7191-479e-ba7d-7567c27975a5",
        "cursor": {
          "ref": "4bb05375-ff1c-49db-9609-7e9a33a32012",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "57feb1d6-bee7-4003-a053-f27b2d534273"
        },
        "item": {
          "id": "1f5feb9c-7191-479e-ba7d-7567c27975a5",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ce2aab93-ccb0-4ebf-b0a6-03d8ea95f9cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 130,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bceda4ec-6640-4e39-a86c-14ab42b93eb9",
        "cursor": {
          "ref": "8b745c39-ff77-4834-8161-2234f2d8bc5c",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a07e5403-2330-4295-8700-4488bf003891"
        },
        "item": {
          "id": "bceda4ec-6640-4e39-a86c-14ab42b93eb9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6f3720e1-8061-4c5f-b224-d5d010422a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "192a8dec-2232-42d1-bfa1-f0406a66cb92",
        "cursor": {
          "ref": "98e664af-043c-4b50-8104-858501247d9f",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "fa0c7938-f82c-4704-8e61-38c232de9e5a"
        },
        "item": {
          "id": "192a8dec-2232-42d1-bfa1-f0406a66cb92",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "78a8df9e-c093-478c-b90a-52f4e0d367af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa19303d-0875-4afe-b081-766a3424c17b",
        "cursor": {
          "ref": "830d6911-37ca-44e5-812e-d1a5af88be70",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "748e0836-2d20-4835-952c-0bc878e0b753"
        },
        "item": {
          "id": "aa19303d-0875-4afe-b081-766a3424c17b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1211914e-1bda-4a87-b31d-5483505e40dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8529cc75-2f64-4bb0-bc74-8e53c5c541b6",
        "cursor": {
          "ref": "28c50470-427e-474a-8646-46da915aab4b",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "31dc9e29-08f4-46fc-b825-7ccf54bb054f"
        },
        "item": {
          "id": "8529cc75-2f64-4bb0-bc74-8e53c5c541b6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "80e4fede-3ee0-4208-89ff-d0ad1201bd4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df441411-fd34-41c7-9d9a-200cd2c483e9",
        "cursor": {
          "ref": "dd95f6c4-fe45-4ad5-bf1e-6c47feae0f5e",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "4e92ade5-4157-4dc1-9f24-be749a7cd745"
        },
        "item": {
          "id": "df441411-fd34-41c7-9d9a-200cd2c483e9",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3af864a9-c2e3-419f-904f-4406c05a8ef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33df88f9-574d-450e-b940-6937dd7bfe3f",
        "cursor": {
          "ref": "a4cc2a38-6b4a-4e3a-804a-982a919ff69e",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b084d342-9db6-489c-917c-f2bff3617848"
        },
        "item": {
          "id": "33df88f9-574d-450e-b940-6937dd7bfe3f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5c0bebf3-5447-4fc5-bc8a-345acf353fcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b55dba7b-2940-4881-8c27-de5ff94c389f",
        "cursor": {
          "ref": "02febf4d-5d7a-45c4-b1d2-0c62585d80dd",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b4d11c0e-300d-4403-af7e-ca299c4ec054"
        },
        "item": {
          "id": "b55dba7b-2940-4881-8c27-de5ff94c389f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f27ca199-256b-4032-a159-06ff4f4bed17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1075a2b4-cf89-4701-9877-82ea33d0b220",
        "cursor": {
          "ref": "87647fb0-c895-481b-b48a-11ed043d5f34",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "cb6fb28f-9757-481d-9964-91b1fa28ad14"
        },
        "item": {
          "id": "1075a2b4-cf89-4701-9877-82ea33d0b220",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "518d921a-d953-4f25-b30c-cd2edef5e8f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "341a80e8-99ce-4ff6-8246-6fbf4896692f",
        "cursor": {
          "ref": "782b7247-9674-4a13-8cd2-18672145f440",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "6248bad5-9a29-4619-8ec8-a2f071841d67"
        },
        "item": {
          "id": "341a80e8-99ce-4ff6-8246-6fbf4896692f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "74bccdb7-6aac-481c-b902-3f9386608b52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed592dbb-5edb-419b-8a28-c39b8796a332",
        "cursor": {
          "ref": "09ffef82-813b-4c9b-b565-ed8da83e7662",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "7828efc5-9e99-41cd-a783-6eb830556d3e"
        },
        "item": {
          "id": "ed592dbb-5edb-419b-8a28-c39b8796a332",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b68138b4-1636-412e-81b9-cb53395bc705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41aa1471-c1df-4465-ab4b-bc2b64f0a1d6",
        "cursor": {
          "ref": "9dcfff38-80d7-4216-a366-27d0dcf628e0",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "d66beaa1-5d4d-468f-9f06-c5bd135444e7"
        },
        "item": {
          "id": "41aa1471-c1df-4465-ab4b-bc2b64f0a1d6",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f536ac5f-83e2-4f6e-aed9-0076a2c78436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "475224ad-eaa8-4b38-8305-1fe895bba873",
        "cursor": {
          "ref": "dc395521-69d8-4d0b-89b2-70e5580f6908",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "1041e626-b082-419d-aae1-ccd02c5450fc"
        },
        "item": {
          "id": "475224ad-eaa8-4b38-8305-1fe895bba873",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ad596014-e0cf-457f-bee3-235a72da446f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44373bed-c56d-4554-95cb-b0882c786c3a",
        "cursor": {
          "ref": "77810e0e-b19e-4aff-a3c0-8a401ab14794",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "bb21405b-68e6-411b-a4a4-39581652814e"
        },
        "item": {
          "id": "44373bed-c56d-4554-95cb-b0882c786c3a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0bdf64c7-3c83-44c4-888a-24336fdae905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65dc198f-0a43-4bd2-8ab2-7ef1ba42ed0d",
        "cursor": {
          "ref": "d24db155-ef85-4a38-a69e-d5c847115d92",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8973f5e4-6ccb-4bd5-a8b4-b4b00b54238e"
        },
        "item": {
          "id": "65dc198f-0a43-4bd2-8ab2-7ef1ba42ed0d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "87a18670-95c4-43a5-9287-c45f2cad009d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "181cebce-b7ae-438e-8159-fe8d4d19eff0",
        "cursor": {
          "ref": "981b0181-796a-4fae-9075-6f20a70a4b2c",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "7ea6dd9b-f548-4b20-a051-33dea150874e"
        },
        "item": {
          "id": "181cebce-b7ae-438e-8159-fe8d4d19eff0",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "15b522e3-1550-43f2-aede-629340f1bccd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf213496-8c21-4235-9af7-874632e40b3c",
        "cursor": {
          "ref": "462f945a-2324-4545-88fa-bbb43776b34e",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "3fdfc68f-7c24-4283-8b0a-7bcf754e879e"
        },
        "item": {
          "id": "bf213496-8c21-4235-9af7-874632e40b3c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8b1dad28-8d65-4e17-80f6-1f214a15cf01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e13c4df4-8e29-457c-aafb-2fce6e303581",
        "cursor": {
          "ref": "5eede6e5-0295-4ca0-8382-d41625790ad6",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5df696bc-74cd-4e4d-8d81-a2e27ced72f1"
        },
        "item": {
          "id": "e13c4df4-8e29-457c-aafb-2fce6e303581",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "94ac71c8-3d43-4c12-b20c-cddb43a983a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "493cf61a-7acb-4cfe-a575-75308eb78129",
        "cursor": {
          "ref": "1531ae07-9dd3-4f6d-8f51-c1939b459c8f",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "ad08a70a-57d7-4a84-bb70-bc8709a751dd"
        },
        "item": {
          "id": "493cf61a-7acb-4cfe-a575-75308eb78129",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "046e6637-6b24-40c7-b34c-a2efdad7d5d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77e66148-c06d-4181-9689-7599a2a94412",
        "cursor": {
          "ref": "e798d96d-015a-4374-bb94-547e52ae8240",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "23ab1022-0ffc-4db0-8a05-6210761f59e9"
        },
        "item": {
          "id": "77e66148-c06d-4181-9689-7599a2a94412",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "458786d1-4c97-4c89-9850-1e9245b6342c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e5089f-dd68-4d63-a2b2-4704c2c2670e",
        "cursor": {
          "ref": "f8252f2a-7afd-442e-9542-38578f8f12ec",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "3d9a6846-971e-48c0-9ebb-22a4454074e7"
        },
        "item": {
          "id": "a7e5089f-dd68-4d63-a2b2-4704c2c2670e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "0cbd7436-9b14-484a-9a5a-8bc32515ea75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53ec052d-41ba-49f7-a562-c4d8abc4c01e",
        "cursor": {
          "ref": "05f55f32-31cd-478c-93f8-58f5c040cbea",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "6669965b-cf76-4a4b-9187-2e9d906924d4"
        },
        "item": {
          "id": "53ec052d-41ba-49f7-a562-c4d8abc4c01e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d2a556e6-04a7-4569-86af-1aaada5194b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2942f1f1-6a56-4fc6-a2d3-ef77174c51c1",
        "cursor": {
          "ref": "2876ae0e-2cc5-4a2a-b2ac-72d5f69ce559",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "e04eddc5-e738-4c61-ad11-d553b43434f2"
        },
        "item": {
          "id": "2942f1f1-6a56-4fc6-a2d3-ef77174c51c1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ce6acf92-7362-435c-8cce-67df0b8f88b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10019f2f-37e7-43ec-8e66-05fd3086e0de",
        "cursor": {
          "ref": "28887785-7252-41ab-8dad-3a2494396d0c",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "593553bc-4b54-4f65-8635-c6e666069a4e"
        },
        "item": {
          "id": "10019f2f-37e7-43ec-8e66-05fd3086e0de",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a8896781-e6b5-47bd-b6b9-7000517c9fc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e2ff81-ec85-41a7-88e4-5ef5f56fdeed",
        "cursor": {
          "ref": "de3a1de1-8a1f-4ff3-82f7-744ece712ab3",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "6943aba9-72c0-46f0-8050-b2f354367d47"
        },
        "item": {
          "id": "a2e2ff81-ec85-41a7-88e4-5ef5f56fdeed",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "09485c71-fe88-40a4-ba1d-b54156030d35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45642a12-3512-41f6-a407-1b1fbf5b945c",
        "cursor": {
          "ref": "5a98276f-6374-4793-92e1-a37b7ca64af5",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "7eadbc8d-3c82-4e21-9cb1-367fa9ab3cab"
        },
        "item": {
          "id": "45642a12-3512-41f6-a407-1b1fbf5b945c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "0a27670f-7a77-404e-a84c-f51537e18ede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd30834-e5ae-431c-b40e-d3ff96cd3bbb",
        "cursor": {
          "ref": "32844cfb-05e8-438f-b841-83ca348eda99",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f9fa2239-c1c3-481f-8e32-6509ccd76627"
        },
        "item": {
          "id": "9dd30834-e5ae-431c-b40e-d3ff96cd3bbb",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "baa4c289-60b4-45f2-b10b-ef82dfdcf35b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01625a3b-de6c-4e0f-8d2d-3b58eb342536",
        "cursor": {
          "ref": "2ab0ccea-5880-4ca3-bf8a-435d8c43ad89",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "6b4110f9-70ff-423b-8fc6-55ebca1e6728"
        },
        "item": {
          "id": "01625a3b-de6c-4e0f-8d2d-3b58eb342536",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9550d399-e208-459a-a5d4-14da95e86585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "986dee43-2df0-4ccb-8f9d-ee77ed89c287",
        "cursor": {
          "ref": "21e8d60f-e104-4d40-8702-1abd075f5355",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "6732528a-1506-4351-9ed5-fb01ed5ec757"
        },
        "item": {
          "id": "986dee43-2df0-4ccb-8f9d-ee77ed89c287",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "ca6388a3-429f-410c-a5e4-67231b201719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f023eeb-d567-4d50-84c9-f8160452bafc",
        "cursor": {
          "ref": "6bb43332-b544-48ac-9e43-8f4b60b1c68c",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "ec73e149-36e3-4ac9-b64a-83de94c5f6fa"
        },
        "item": {
          "id": "4f023eeb-d567-4d50-84c9-f8160452bafc",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "14864b8d-314b-4b9b-85e3-17edb2e71f20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06a77ecd-3847-4bc2-a4a8-4eefd723ed22",
        "cursor": {
          "ref": "fd17e69e-b6ee-46c0-8ae6-3941378fb332",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a71a62b9-2eee-42ec-bc43-4c6c095204bd"
        },
        "item": {
          "id": "06a77ecd-3847-4bc2-a4a8-4eefd723ed22",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "297952eb-56f6-4108-b8a5-9b43bfabb2f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfde76f6-2d37-4cb0-a0ac-70b3793805b8",
        "cursor": {
          "ref": "ee87b4a2-e861-493f-8799-0983feccbc57",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "33711184-8609-434d-9b5e-845f99c295b9"
        },
        "item": {
          "id": "cfde76f6-2d37-4cb0-a0ac-70b3793805b8",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "19d4ebf9-1875-4dfd-a60c-d493e851e13a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5c9b35f-b83b-4fb8-83b5-f4a39810c154",
        "cursor": {
          "ref": "a8adae5b-d550-4621-afa0-cc282d4f6183",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "24f09aa5-e092-4a85-859d-6e66f56e0027"
        },
        "item": {
          "id": "e5c9b35f-b83b-4fb8-83b5-f4a39810c154",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "153cacba-3c1f-4a66-8569-012153aeb892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af22ae4d-0674-4074-b9b8-f5441ce5813c",
        "cursor": {
          "ref": "5cf1873e-0ca4-4b4e-aba4-75ee32ba1076",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "706c8352-9ccc-4169-83c5-270a7d5fffd2"
        },
        "item": {
          "id": "af22ae4d-0674-4074-b9b8-f5441ce5813c",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "4985ccb9-c1ca-4399-bdfa-6eca8b9e6116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82d41a5f-1808-406c-a883-e70049fef6d2",
        "cursor": {
          "ref": "23cfb6e3-4f8f-4e86-9242-a0a64fc6eb35",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "aaaac32d-4d27-4e60-a830-0fce3be1cda2"
        },
        "item": {
          "id": "82d41a5f-1808-406c-a883-e70049fef6d2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d4d32537-2e90-42a6-874e-e5bf81d28c7f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "b90a9c65-0ed2-4310-a798-8f9875e89fda",
        "cursor": {
          "ref": "199c3028-e523-464d-b275-c2fc29fe22bf",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "c67165bf-ad76-4fd0-95d4-6a4e8c2cb7ea"
        },
        "item": {
          "id": "b90a9c65-0ed2-4310-a798-8f9875e89fda",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9cfa047d-31f7-4b3a-ba0b-f85aa2b3a113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e9e2150-710f-4489-8376-d972c98d1270",
        "cursor": {
          "ref": "6d860e74-0413-4e9d-9e8c-b5b7f16a44cb",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b756e2ae-745c-459b-aef4-a1c7d2bb3054"
        },
        "item": {
          "id": "7e9e2150-710f-4489-8376-d972c98d1270",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "316cac04-2361-4392-bf30-81de637c3bd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ba279f1-8968-4950-b82b-d106b9f6e1b8",
        "cursor": {
          "ref": "aa3ebf65-e3d2-451c-bcd7-c31f0b928a09",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "4afce599-f447-4606-b484-88a3ad78b6e7"
        },
        "item": {
          "id": "2ba279f1-8968-4950-b82b-d106b9f6e1b8",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ac140fb3-984c-4d10-89de-7e5e5465beda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e7c3ea-c999-48d3-85b5-6fe9e9ee3a6b",
        "cursor": {
          "ref": "3f03b221-eaac-43cb-a365-5135ec99b92c",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "556d0da8-bfd3-4082-a254-31d7cc62411c"
        },
        "item": {
          "id": "c8e7c3ea-c999-48d3-85b5-6fe9e9ee3a6b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "437475fd-47ab-4dfd-a8a2-6cbe58f3c151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c51a65a7-f3ab-4832-ac63-072c73e02ffc",
        "cursor": {
          "ref": "89f5fac3-ef98-4693-b7e2-c23afdde4d5a",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "6a66d417-63d1-446b-8ecd-41b3a778b773"
        },
        "item": {
          "id": "c51a65a7-f3ab-4832-ac63-072c73e02ffc",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d0e358a2-6497-43ab-96ca-8ecb21a4d37a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f6c2c76-ea1a-4c0d-a2f7-17c7bf2f0db1",
        "cursor": {
          "ref": "53d058a0-071f-4bcb-8db9-c9cfd586d359",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a1671dea-f3eb-4605-b8df-81ebb59301ba"
        },
        "item": {
          "id": "4f6c2c76-ea1a-4c0d-a2f7-17c7bf2f0db1",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "8960f651-82f2-47d2-8577-6022799bf961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "103bfd38-7da3-4b20-b1f9-c70130d540a8",
        "cursor": {
          "ref": "fb7495dd-9d3f-426d-8281-85ae8c282636",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "7699d2f9-9a16-4f80-bc32-ad53d21b5506"
        },
        "item": {
          "id": "103bfd38-7da3-4b20-b1f9-c70130d540a8",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "0c88a0d5-2615-431e-90a8-14cc75e4b04a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e1aa50-218f-4d86-b9bc-a210a26b137e",
        "cursor": {
          "ref": "e3a3731d-26aa-4094-b5d9-1e086870fa9d",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "ad8b3cdc-1972-4708-9167-b09f46542f5d"
        },
        "item": {
          "id": "03e1aa50-218f-4d86-b9bc-a210a26b137e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "72ce5f1e-068d-4ee8-b0d6-b632f27750cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5692288f-acb7-4c5a-b379-ad6a9737b23c",
        "cursor": {
          "ref": "4880de7a-2d43-4e97-99b8-3708fe804d73",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "310f2f53-5b30-4514-932f-f2f6049227a6"
        },
        "item": {
          "id": "5692288f-acb7-4c5a-b379-ad6a9737b23c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ec03981c-3d8a-415b-bdf8-10baf6144f72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 209,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "324f1ebc-43b4-4704-ad8e-896d808d9d1d",
        "cursor": {
          "ref": "93ac73c2-b93e-4c20-bf72-1bc89ce854e9",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b3ed9165-2166-4a6a-8d80-6bbec9eadd4e"
        },
        "item": {
          "id": "324f1ebc-43b4-4704-ad8e-896d808d9d1d",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "1db7d31b-4fe9-4b05-90d2-fa3bc38410b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c8d26ec-53ed-4f4d-8a05-05614d8b52c8",
        "cursor": {
          "ref": "ab44d690-bf93-44ea-8fd9-2f4d69b3e336",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "71bb70e2-f86c-4031-9852-aa357cd0a4ab"
        },
        "item": {
          "id": "5c8d26ec-53ed-4f4d-8a05-05614d8b52c8",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "09eaf155-711b-4c3d-9186-3800319c9892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "188825aa-3ace-4924-871d-cf98523ae894",
        "cursor": {
          "ref": "917c24a4-a699-4252-92c9-27abbb3c669a",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "58f87271-0bf9-451c-bb02-4ba88406a715"
        },
        "item": {
          "id": "188825aa-3ace-4924-871d-cf98523ae894",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e80359a0-58ca-4bd0-8076-b19edae786d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b31c55-d150-4b2a-a91c-f384d81f6af6",
        "cursor": {
          "ref": "594e4d7c-5791-463d-b6c6-a01922827de0",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c1bf3dec-fe40-4189-8cc7-3b481ce718c9"
        },
        "item": {
          "id": "87b31c55-d150-4b2a-a91c-f384d81f6af6",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d1791547-781f-43b0-83d2-acc0a4473f99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed473aaf-e684-41ba-bc3a-e99e45046bea",
        "cursor": {
          "ref": "d07d5911-e8d0-4080-8eb3-b0696a6194f0",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "a7bba8bd-6760-443f-8256-9d37a600819b"
        },
        "item": {
          "id": "ed473aaf-e684-41ba-bc3a-e99e45046bea",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "cfd3d8eb-eb7d-463f-b915-05b4e0bba005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bed90246-4e45-4caf-a993-d261e8743015",
        "cursor": {
          "ref": "dbfce5a8-f6ad-4d36-907d-3ce0c645f9b8",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "87756139-ecff-44a1-9f66-073f3481b42d"
        },
        "item": {
          "id": "bed90246-4e45-4caf-a993-d261e8743015",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "5e64d38f-cb50-42e0-9a53-c7de69c18908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a0e3c2d-81b0-4f60-b91f-7f99b91bd33f",
        "cursor": {
          "ref": "a09ff4b2-0f83-49fd-9454-ba2bce2736dc",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "eb84c5c1-f6c5-41ac-8d2a-642ee0fd46f4"
        },
        "item": {
          "id": "5a0e3c2d-81b0-4f60-b91f-7f99b91bd33f",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "c4cb30d3-9661-431c-bf6d-0f637a1557cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f429a7fa-d521-4eb6-90f4-13744ff1e42f",
        "cursor": {
          "ref": "e9770cd2-8617-4671-aee6-4e676fd0750d",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "72dabe2a-c103-4223-a30f-549bf4cb2bec"
        },
        "item": {
          "id": "f429a7fa-d521-4eb6-90f4-13744ff1e42f",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "1c44d757-2779-4c1f-8872-77926a43d2e7",
          "status": "OK",
          "code": 200,
          "responseTime": 272,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "27a3e60e-8e1d-4779-abea-898b5ae5be84",
        "cursor": {
          "ref": "98602bf1-b069-49cb-8800-51ab3b89b7bc",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "5c9edf7f-0d34-4b29-86ac-8e6f684c1949"
        },
        "item": {
          "id": "27a3e60e-8e1d-4779-abea-898b5ae5be84",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "2836801b-7243-4d73-a92b-b5c14e5b8def",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7bc01e8-e934-47db-8cf1-7bc0907764df",
        "cursor": {
          "ref": "ecf7b6a6-76f8-4ddd-8ece-586b6c35534e",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "83e91522-1b75-4622-8ac1-b63caa3f0f33"
        },
        "item": {
          "id": "e7bc01e8-e934-47db-8cf1-7bc0907764df",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "5d2a2fac-2f69-40c3-8939-d43d8316fb70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ad76d4c-1d0b-4a93-b5b8-5ec1c52f75f7",
        "cursor": {
          "ref": "1f488986-92a6-4b0f-b815-5b499459ee32",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "92f885c1-e699-4083-ba55-275a29804785"
        },
        "item": {
          "id": "5ad76d4c-1d0b-4a93-b5b8-5ec1c52f75f7",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "5057b611-ee86-405d-84be-6722e7e6cca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b190d36-0b60-4d70-8340-d461ef56523b",
        "cursor": {
          "ref": "12e3b8de-8b93-4c8a-9914-a160e1cf6477",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "596d4b32-3ca4-4f18-a157-84a4aba7d12f"
        },
        "item": {
          "id": "2b190d36-0b60-4d70-8340-d461ef56523b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f0ee0167-0b5e-42f9-a749-64e9b975c6ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02cb37a4-63af-4ee5-82ad-a751d11a38eb",
        "cursor": {
          "ref": "ec816ae7-aa7e-4a82-a9fd-8ca670b6fc39",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "95ebf722-f67f-4864-aea2-fca1ea7e5892"
        },
        "item": {
          "id": "02cb37a4-63af-4ee5-82ad-a751d11a38eb",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "81243887-252a-4125-8a32-8e71f488df68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2075d77-9e39-4327-9ff4-bb046cfdb252",
        "cursor": {
          "ref": "323f5a20-0c1b-4bd6-b54c-685367f0cb95",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "92660b51-a296-4562-91ce-0bbff98a333a"
        },
        "item": {
          "id": "d2075d77-9e39-4327-9ff4-bb046cfdb252",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "1a21df2a-345a-489a-b4b8-7f597d895b62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72b29683-b05c-44f6-8cc4-9f6ec7fce918",
        "cursor": {
          "ref": "05b5745b-d436-4129-b11e-75bda8888c76",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "469345fb-0709-4723-b942-65a737878c11"
        },
        "item": {
          "id": "72b29683-b05c-44f6-8cc4-9f6ec7fce918",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "68cd255d-0f9f-4ea9-9e43-623ba6683283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f128625-52ae-4b62-9648-6d395e7380ca",
        "cursor": {
          "ref": "23dfa6e1-77bc-4da7-8ad3-dfec46a8fae2",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "cda4691e-72c8-44ff-bbcf-03fa878d9886"
        },
        "item": {
          "id": "3f128625-52ae-4b62-9648-6d395e7380ca",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c50f0547-31ad-4c68-b37c-c81c6bc3e213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b715103b-aa8d-4d79-8401-08aa1f6d703e",
        "cursor": {
          "ref": "c637367a-fdf3-4ed1-afe8-3ee0a6cbd516",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "017df00d-adc4-4fcb-b986-c081c28193ae"
        },
        "item": {
          "id": "b715103b-aa8d-4d79-8401-08aa1f6d703e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "5e7f5d42-8897-4087-95cc-543c4ba342a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2388e233-7ad9-42be-844a-db641431244e",
        "cursor": {
          "ref": "187df0a9-bb4a-4ee4-93d8-bd84ac2e58d9",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "cbc4ed2c-d8f6-4a77-8ea4-6b4f5778c593"
        },
        "item": {
          "id": "2388e233-7ad9-42be-844a-db641431244e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f84a2261-9e23-4080-a784-0a2e0fca8712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dfc34d1-eaed-473e-bca1-028a20f03dd8",
        "cursor": {
          "ref": "a94acdac-1e53-4268-b6c1-3403b24e78a4",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0a8d4b48-8c49-41a0-9f00-aa6624f7c035"
        },
        "item": {
          "id": "8dfc34d1-eaed-473e-bca1-028a20f03dd8",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "6bad423b-73de-4b3b-af4c-cd31a041435a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71468193-70c3-4f37-96f9-fac4fc2dc517",
        "cursor": {
          "ref": "f43912c0-4d1d-4020-8ed5-a3db8192460d",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "00fe8415-268e-4c7a-b966-7131ecee3d9c"
        },
        "item": {
          "id": "71468193-70c3-4f37-96f9-fac4fc2dc517",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "bd460cb6-54db-4f84-b61e-87608be089dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b0db87a-d9b0-447b-9fa8-f25d126e77c1",
        "cursor": {
          "ref": "927bc84e-da13-4d0a-9254-252193856a32",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "1e40f6f3-afbd-44f4-9235-fa67d68a238d"
        },
        "item": {
          "id": "3b0db87a-d9b0-447b-9fa8-f25d126e77c1",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "9c95c5a9-48bc-4188-8b6e-943e8a7d4ef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9acf922-7890-4d73-af61-54638847fcaa",
        "cursor": {
          "ref": "005daabb-9c67-4824-a35b-0ed83540f7be",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f5d04981-b398-4fc5-9a62-f0851087ce22"
        },
        "item": {
          "id": "c9acf922-7890-4d73-af61-54638847fcaa",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "8ef2bf27-d5f3-494c-b64c-23d591946fa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1695cf9-ec22-4704-adb1-de24a6aaa83a",
        "cursor": {
          "ref": "f9622094-de5c-4997-bfa5-bc685f0383aa",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "1cf82b97-97f5-440a-a19a-23a2ce4bf7e9"
        },
        "item": {
          "id": "e1695cf9-ec22-4704-adb1-de24a6aaa83a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "639a14b7-3e95-4ac8-93e6-40ac884bc311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df42abb-30b1-43ba-9cd5-5507e2bbfe57",
        "cursor": {
          "ref": "6abf721e-17ab-420b-a517-3d4dfd3d0878",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "6e4e73b1-b262-4657-bce5-c8776cb385ba"
        },
        "item": {
          "id": "8df42abb-30b1-43ba-9cd5-5507e2bbfe57",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "bddf8a05-dc59-4fcd-b6d9-21fd7870426a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "909f04d2-488c-4b93-ac0a-05a057659e23",
        "cursor": {
          "ref": "1e018197-214e-4a77-8cfb-c6ad7ff6ddd9",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "b6f79661-48c3-4bd6-9dbe-68e7cdae20ab"
        },
        "item": {
          "id": "909f04d2-488c-4b93-ac0a-05a057659e23",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "b7acada0-0bb0-4af8-86c9-e733a5f06115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bc16e60-1acd-4124-bfc0-0bfc34d89599",
        "cursor": {
          "ref": "5c9ebb51-4c35-42dd-85ce-c64d0c4d8ab8",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "65ad8f61-cc62-4223-9ecc-21b6fadf377b"
        },
        "item": {
          "id": "7bc16e60-1acd-4124-bfc0-0bfc34d89599",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "242d341d-ef07-4b2f-9ffd-32f56ef664b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a9cedc7-3565-4820-a7a9-17747eaaee60",
        "cursor": {
          "ref": "2ce7a411-0b2c-4737-b23e-e5a2b9fa923b",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "de3c4d20-0e93-4def-8150-6b2436a8dca2"
        },
        "item": {
          "id": "8a9cedc7-3565-4820-a7a9-17747eaaee60",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f7e549ed-b938-4d32-867e-bdd1e9fae920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "746b64be-3ac1-4fed-a26c-a4eb9d108034",
        "cursor": {
          "ref": "046ea216-cf84-4f49-b0f7-29584b8e811c",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "00d35484-5762-4ca1-98ab-eca1ea1b37e9"
        },
        "item": {
          "id": "746b64be-3ac1-4fed-a26c-a4eb9d108034",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "bf4b9613-f022-4fbc-8f03-c6ac5ae549f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e611a1b1-c69c-443e-a76a-ad95ef734311",
        "cursor": {
          "ref": "17825967-22c9-4a96-8f62-ecbbe5abdb02",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "16a2394e-7185-41a8-afbc-311762c1f54d"
        },
        "item": {
          "id": "e611a1b1-c69c-443e-a76a-ad95ef734311",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d0e5cbb3-d209-4051-bd27-88db37b136cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "128e995d-798e-4f43-894f-610e87e75139",
        "cursor": {
          "ref": "94700d6f-a91d-4d89-ba56-d23af231c5b0",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "fa51c932-eb66-4057-ad8d-4229d60136ff"
        },
        "item": {
          "id": "128e995d-798e-4f43-894f-610e87e75139",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "572637e4-9e35-49fb-a411-bb665e89022c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11e9a959-393e-48b7-aecc-fced7781b6b2",
        "cursor": {
          "ref": "160116f4-8d19-4931-96c0-ee2e0ea13d23",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ffeb6c75-9e66-4a6e-b042-b55569642dc9"
        },
        "item": {
          "id": "11e9a959-393e-48b7-aecc-fced7781b6b2",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "c0afe5e0-9ad8-4965-b832-3494f362c06f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "785d12d7-8dc2-4727-a31d-47f821e14b0f",
        "cursor": {
          "ref": "36c7e587-7811-4bd0-ae8f-e916bca13e33",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b31f6848-68fa-4c5f-9baf-41421fd3218c"
        },
        "item": {
          "id": "785d12d7-8dc2-4727-a31d-47f821e14b0f",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "7a4745c5-bb0b-4031-9f11-2de09964cb94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ae0a8d8-21e1-457a-a038-6f793e41fe13",
        "cursor": {
          "ref": "be1fe595-7368-46f3-ba54-28b92a336800",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "82a27fa1-cd58-4f1b-ae52-12370d3345fd"
        },
        "item": {
          "id": "2ae0a8d8-21e1-457a-a038-6f793e41fe13",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "eb8102a9-1371-4b8f-b533-3f9e2ac5f1f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b9fa60-c27e-46a2-bb2f-28ea095f0706",
        "cursor": {
          "ref": "9c24eb83-9ddf-424e-9359-3603f12b9053",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "6d904ca3-e7b9-4b2b-89dc-e8f2b545f893"
        },
        "item": {
          "id": "95b9fa60-c27e-46a2-bb2f-28ea095f0706",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "0a931ca9-4530-4e96-8204-29f4e5036e25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17a46501-70a6-4811-a74b-1833632cdf2d",
        "cursor": {
          "ref": "6fe16ac9-3194-46df-b212-e1f4908c3c58",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a908ceb1-b38e-48a7-808e-013e844ad3c3"
        },
        "item": {
          "id": "17a46501-70a6-4811-a74b-1833632cdf2d",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "46d979c8-79cd-4712-9680-a746f8bcd7a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c61a6a7-5116-4cde-a310-ac3ceb792019",
        "cursor": {
          "ref": "42c6e5c0-f0e3-45ab-b58a-a0bca40fd51a",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f1747188-599a-44a4-b3e2-437d6139a8f7"
        },
        "item": {
          "id": "4c61a6a7-5116-4cde-a310-ac3ceb792019",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "d7e56d62-a9cc-427b-b96a-6b88fa9c28d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccab66a1-a245-4401-b2a9-bc7e59593ae8",
        "cursor": {
          "ref": "f4203629-4f10-4270-8e23-2f4fbcc6fbb4",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "3c029b35-50ab-4356-8b2f-8cbb9bb18738"
        },
        "item": {
          "id": "ccab66a1-a245-4401-b2a9-bc7e59593ae8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "88965b51-3fab-4d7f-b86d-a32fbcd6bca9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a928e71-c7d6-4c3c-b03e-d91ab7039c8b",
        "cursor": {
          "ref": "c821c533-90be-49db-b6df-63cda07c2b88",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a5e8a3ed-bfad-4296-b052-c871d2c0504e"
        },
        "item": {
          "id": "0a928e71-c7d6-4c3c-b03e-d91ab7039c8b",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b9607ee8-f9e2-4718-8bae-dc2dbcc8a18a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d2dad3-5bd4-4bb0-a9a1-d7485aaad52a",
        "cursor": {
          "ref": "94160727-fee5-4471-a8d9-5aacc3d1391c",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "61fbf435-5751-4a38-b293-f553fd83577c"
        },
        "item": {
          "id": "c1d2dad3-5bd4-4bb0-a9a1-d7485aaad52a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "767b9a30-94d4-4d4d-9ef9-7ee3c7b62062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3f22bf2-34a4-4ba7-a84a-4e205ccd198f",
        "cursor": {
          "ref": "6a5f9014-fcbc-485c-adcf-04b9ebd72092",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "933a00fd-235a-4993-927e-1e14311e673a"
        },
        "item": {
          "id": "d3f22bf2-34a4-4ba7-a84a-4e205ccd198f",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "9c8bb5e1-87f3-4da2-b1d8-5bc9e98a2602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c0df662-60e1-487f-8e84-6cae37f0595d",
        "cursor": {
          "ref": "3f3eeecc-5f78-4b9e-95ee-1ec3ae931cc4",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0e205fa4-3b05-4e0e-8fa0-b78a245642a7"
        },
        "item": {
          "id": "4c0df662-60e1-487f-8e84-6cae37f0595d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "de5247c1-e10f-45ec-945f-c168f02ee550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db7cd29c-7245-4da6-915a-3c6a1f8a31d7",
        "cursor": {
          "ref": "f678e50d-f1ae-4468-b8da-b89fc67988b8",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "856e76ba-b07b-46ca-afbc-358a750805a3"
        },
        "item": {
          "id": "db7cd29c-7245-4da6-915a-3c6a1f8a31d7",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "69d32f5e-05bf-48a0-b367-e446f4dcf703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85e17bca-ab7f-4063-9490-84ce50b03f08",
        "cursor": {
          "ref": "ef7d14c1-f8d9-4d9f-8668-0787ca679cd9",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "dc50495b-ed84-4475-bb75-566c73084718"
        },
        "item": {
          "id": "85e17bca-ab7f-4063-9490-84ce50b03f08",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "9f415bda-6383-4717-8bf7-1a861be33c11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d1f1c9f-b39b-4577-8180-1cc3faa7b2f4",
        "cursor": {
          "ref": "0423b526-903a-4bd6-9137-00fda564fd73",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c3372a19-1e04-4e0b-be54-85423b911d1c"
        },
        "item": {
          "id": "6d1f1c9f-b39b-4577-8180-1cc3faa7b2f4",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "cce55e7e-a521-4027-9d9c-0a574c341eaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d980e4c2-28ab-4be4-8802-13b85c19caa1",
        "cursor": {
          "ref": "8ab6f867-0e34-49ea-a2d9-e5956fbc3c19",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "20b25ca3-79ed-4dba-869e-c1621b8c0a7f"
        },
        "item": {
          "id": "d980e4c2-28ab-4be4-8802-13b85c19caa1",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "86d666d6-016b-4a45-98b4-a3323e867a93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20f5d1b7-f8b8-475f-a76d-856daa33685f",
        "cursor": {
          "ref": "533b2571-4289-427c-84c2-f34c7ec1c9db",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "e90dd6dc-fb30-4f13-9e3b-0a30d7efc429"
        },
        "item": {
          "id": "20f5d1b7-f8b8-475f-a76d-856daa33685f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "d55d4abf-9a15-44b0-b194-c1711555b968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "339968f6-7b84-4e0c-bfe9-0c0ab85659ca",
        "cursor": {
          "ref": "bb63d909-64ab-48e6-853c-19fed66ce8bb",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "569ba53a-c384-47ac-90a3-a4fea943f537"
        },
        "item": {
          "id": "339968f6-7b84-4e0c-bfe9-0c0ab85659ca",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "4849417c-b51e-46e4-ba9d-65936fc7ff77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a96b8f67-3eed-4d6b-a8a9-1e389e142dc3",
        "cursor": {
          "ref": "bdc41949-9844-460a-a5d9-b7298e79dd2e",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "bd7e980e-b2da-4368-acd4-996e59e17d41"
        },
        "item": {
          "id": "a96b8f67-3eed-4d6b-a8a9-1e389e142dc3",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "6639f0b3-58d3-4bbd-8f29-777e0621962f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f11686ec-108a-4357-8643-71ce52d04448",
        "cursor": {
          "ref": "db5f8a17-b552-4115-bbc7-1c0cbfeb6872",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0d614bce-8b98-47d4-84ae-8ff545c8de73"
        },
        "item": {
          "id": "f11686ec-108a-4357-8643-71ce52d04448",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "cab954a4-4357-413e-bffa-7a6d0511cbd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e246e058-04cc-4840-b32b-891e2280c699",
        "cursor": {
          "ref": "032029ae-f7a6-4eb7-ac85-76dfa8fbffa4",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "20741af0-ee0d-4433-af92-7a8bc7b182c6"
        },
        "item": {
          "id": "e246e058-04cc-4840-b32b-891e2280c699",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "999015cd-d524-4468-96fb-2b00ff2b7880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79fb1ae3-f364-4784-abba-0bca6851f320",
        "cursor": {
          "ref": "5c1caf5c-247d-4d8e-8a77-d50f5ad1d6d5",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "6bd13525-626b-4bb4-89ce-621f2e543c0a"
        },
        "item": {
          "id": "79fb1ae3-f364-4784-abba-0bca6851f320",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "356bdb22-bb26-451c-9362-2b30171dbaca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f4f2571-5b62-4564-a002-582cc5487630",
        "cursor": {
          "ref": "67e256ff-6203-4bdc-8e84-111493a08545",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "5505051a-ce2a-4f74-b523-da42a001a605"
        },
        "item": {
          "id": "8f4f2571-5b62-4564-a002-582cc5487630",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "848954d9-3a4d-4c6f-a1f0-4fad79852f28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3727dc44-6749-4189-a0eb-66f98131b57b",
        "cursor": {
          "ref": "481c2133-c39f-4f02-b127-62791540f0ad",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "75069f17-0445-4645-8b60-d978a1cc31e0"
        },
        "item": {
          "id": "3727dc44-6749-4189-a0eb-66f98131b57b",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "e3d46c45-b841-4bd1-8ed5-eb6c863e2d98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67006b94-2c13-4121-8c40-fd843706a2f8",
        "cursor": {
          "ref": "a739348d-bc98-4192-accb-1a97cdae30bb",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7c39b0cd-5bef-43f0-9c3b-22e089c9ef83"
        },
        "item": {
          "id": "67006b94-2c13-4121-8c40-fd843706a2f8",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "091a9b67-082e-4b0a-a6a2-01616b538356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a306660-f3b5-4075-84cb-340e2da00e83",
        "cursor": {
          "ref": "d6b0ae4a-c0d5-44a7-a0a4-b4802a95ca19",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "422a3d71-ecdd-4846-b4fb-0b4acfdbf6ad"
        },
        "item": {
          "id": "9a306660-f3b5-4075-84cb-340e2da00e83",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a087ad11-d467-4a56-ac11-98c176ee31ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0a08800-3e0a-4642-bd09-5f283615cfc1",
        "cursor": {
          "ref": "0cb255d6-22c5-4eb4-9dbe-db4ec9a54039",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "92e90493-b306-42eb-ae8f-862808985e9d"
        },
        "item": {
          "id": "f0a08800-3e0a-4642-bd09-5f283615cfc1",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8d4b383a-0b87-4866-87c4-217a727ff524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff014e89-51e9-4cf8-9653-7696f1e5ee70",
        "cursor": {
          "ref": "d666ba41-ceb7-424c-9164-b62f30a36291",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "75424d0a-fd57-42bf-bfad-e8a29a98642f"
        },
        "item": {
          "id": "ff014e89-51e9-4cf8-9653-7696f1e5ee70",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9e10c77b-f425-4768-830e-61e80b812a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40119e05-e956-45bc-a0fd-c8253117cdfb",
        "cursor": {
          "ref": "8e3b9f9c-861b-483d-b3ec-d3d97671b060",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "10d5faf5-e2fc-49d4-88a4-031cb5c84fab"
        },
        "item": {
          "id": "40119e05-e956-45bc-a0fd-c8253117cdfb",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "ba49788f-e2c1-4c90-b9f2-cc3379f3720e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f43c245-9a3a-4fe8-955e-0b58a403f362",
        "cursor": {
          "ref": "99fdf4ad-ad56-4eea-89d4-493333e177c8",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "de40ca07-a7de-43c5-99dc-a08bb11b444f"
        },
        "item": {
          "id": "4f43c245-9a3a-4fe8-955e-0b58a403f362",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "37adf35a-2602-4c4f-a8fd-80f56a02b055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8e15962-3ed8-413c-b5fa-07d828cf78ad",
        "cursor": {
          "ref": "2ec519b9-089c-4444-9827-ecb16967081c",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "40fb8cda-55ad-44a7-ba31-6fae20fc8b0a"
        },
        "item": {
          "id": "a8e15962-3ed8-413c-b5fa-07d828cf78ad",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c4a4743d-d6e1-40bb-ba78-c4007ce637fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad88e777-17fb-4195-97f5-43ebda0ed594",
        "cursor": {
          "ref": "3ea95981-cd7e-440b-95f3-e7bbc4c9a646",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "322a2053-e488-459f-a713-bbd592ee30c3"
        },
        "item": {
          "id": "ad88e777-17fb-4195-97f5-43ebda0ed594",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "08cea2ea-4a20-4889-8855-48a572176f99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5cb580e-cf34-4147-aa93-b4c3586bbc51",
        "cursor": {
          "ref": "f3e3099f-07cc-42b7-ae49-f89687d4187b",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "8de1e96c-d8db-4ddb-89ff-88552da9983e"
        },
        "item": {
          "id": "e5cb580e-cf34-4147-aa93-b4c3586bbc51",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "bba3155f-7267-4810-a777-f64463074c4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c1dbaf5-ba2f-4aaf-8779-c46eb5beae81",
        "cursor": {
          "ref": "159cadba-93e5-4be9-96a0-ff9b8911b0b9",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "a15dbf40-e4a4-41d4-8783-45972a6379a8"
        },
        "item": {
          "id": "0c1dbaf5-ba2f-4aaf-8779-c46eb5beae81",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "08f0b410-b9e0-4e54-a9e7-23127fc0f015",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56405409-ba87-42b6-84d5-1cb2983460d6",
        "cursor": {
          "ref": "3fe9b5d4-0e48-45d6-ab1b-fbe8cf532bac",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "eb5140bb-df60-4b07-8531-b5e868a1e4d1"
        },
        "item": {
          "id": "56405409-ba87-42b6-84d5-1cb2983460d6",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "638a5af4-7d25-44b9-b4e1-d006e8f46909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1eb8120-4683-40d8-a40e-569be36beaae",
        "cursor": {
          "ref": "8b593c9e-ea15-4907-9159-48f5b03281e8",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "59a5d05e-e902-4026-9d62-a2de47189634"
        },
        "item": {
          "id": "c1eb8120-4683-40d8-a40e-569be36beaae",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "93b97893-3a8f-405b-80fa-fb3416afad5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ab52d37-d464-41bd-a890-c32b3c3aae01",
        "cursor": {
          "ref": "05ed4bde-3322-4a9a-8cd5-71cfb10ce5d1",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "1cfe7fc1-e6f8-4420-ab50-9ac02a0215e0"
        },
        "item": {
          "id": "8ab52d37-d464-41bd-a890-c32b3c3aae01",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f0a040d1-a5b7-4b1f-b57f-122a2c097482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84134acf-fc7c-4ad9-94da-1b451ea6d687",
        "cursor": {
          "ref": "65aa51c4-2cc0-4eea-b86b-a01680dc1390",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "85eef0fd-b346-47d7-9402-7eca1162e473"
        },
        "item": {
          "id": "84134acf-fc7c-4ad9-94da-1b451ea6d687",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "4ae71971-35f2-410f-be9a-f0ec4eb1241e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2926048-7b19-47c4-8aab-f949355a700f",
        "cursor": {
          "ref": "27b1e02e-0ca5-452b-b5cc-8e352a861323",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "1208e0b8-9d42-4735-acbd-ea704c3bf10f"
        },
        "item": {
          "id": "f2926048-7b19-47c4-8aab-f949355a700f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "00b22aca-9352-4f42-940d-80c66bc6a362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dc7c715-1fb1-40e0-9fd5-322bfe7a12ac",
        "cursor": {
          "ref": "6a244d9c-a61d-4f28-b5ce-caf8667d7228",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "e3d50fc2-a622-47c4-b6b7-c06ce765918a"
        },
        "item": {
          "id": "1dc7c715-1fb1-40e0-9fd5-322bfe7a12ac",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e0f64fab-7f8f-41f1-84a5-4b3c97b0d779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d2b043a-463a-4a6c-8355-50779afaed8b",
        "cursor": {
          "ref": "d5f5e42b-4002-4373-8cfd-cbe90340d518",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "113a6856-09a3-4933-a361-ce75466a8a20"
        },
        "item": {
          "id": "2d2b043a-463a-4a6c-8355-50779afaed8b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f3d14fb7-3b67-4a26-99ca-585d187edcba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d10d6163-26fc-4a79-97fe-6366105012f6",
        "cursor": {
          "ref": "bdba2771-bc6c-408a-81f9-efb5db9c1882",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "dfe68c81-1e7b-4411-97ca-a515bc747dd2"
        },
        "item": {
          "id": "d10d6163-26fc-4a79-97fe-6366105012f6",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0761e1d3-d54c-4520-8940-182ee775d1a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3dd318d-1a48-49ff-943c-aec2d198a414",
        "cursor": {
          "ref": "11df8e8a-88cb-496f-a9b8-8f6fd718a3a9",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "8f4a639d-02b5-4e41-b589-1558bc367094"
        },
        "item": {
          "id": "b3dd318d-1a48-49ff-943c-aec2d198a414",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "cdf6fd8d-0c98-4577-b448-9d375d47eb60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c20031-aeb7-4f5b-b3ee-2f6de3061355",
        "cursor": {
          "ref": "38891516-7080-4e14-bd1b-6f359a3d92a4",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "9ca23255-5398-4952-841f-5efb752c2799"
        },
        "item": {
          "id": "90c20031-aeb7-4f5b-b3ee-2f6de3061355",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "511d179e-94b5-4f7c-a2ba-18f337fc9ed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e113ae-a45a-4661-90ab-01688e785992",
        "cursor": {
          "ref": "a489b903-c909-4376-8834-475fa5917d90",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "939521b3-a4a7-4c0d-89e3-13cd47ea34fa"
        },
        "item": {
          "id": "23e113ae-a45a-4661-90ab-01688e785992",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b7ad3e24-6655-4c2f-aa0a-d529908621f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad2f271-3854-49e8-a32e-a017722a2b68",
        "cursor": {
          "ref": "07a96c2f-b516-4c5b-a03c-bc975c7c09d2",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "fad1589c-9546-44ad-ab4c-8e469c412a5c"
        },
        "item": {
          "id": "cad2f271-3854-49e8-a32e-a017722a2b68",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "fc961324-abdc-4718-9569-b32d9d98862f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96749f82-cb23-41e9-8dcc-9448fe39fa52",
        "cursor": {
          "ref": "7b87d085-f39e-4661-87fb-6e691e49d45a",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "3a193d5a-5e95-4723-86ff-8a18e5a048cf"
        },
        "item": {
          "id": "96749f82-cb23-41e9-8dcc-9448fe39fa52",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "c20bb902-2f16-4230-83ea-90eb46ef5b3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc89e833-a20f-46df-8676-ff031aafa439",
        "cursor": {
          "ref": "287337b0-1d0a-4ad7-b336-a485d77fb6cf",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "820e8a8c-4d49-402e-96fd-1e62e2aa930a"
        },
        "item": {
          "id": "fc89e833-a20f-46df-8676-ff031aafa439",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b3b30dfc-4b1a-4eb1-8cff-120eb6276eb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f5f8227-a7c0-4ebd-872a-c21833ee216d",
        "cursor": {
          "ref": "cde85292-d6f9-44ea-861e-aa1942a30cce",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "d170a950-c5c6-450c-85b3-f4afc599a633"
        },
        "item": {
          "id": "2f5f8227-a7c0-4ebd-872a-c21833ee216d",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5d7a3514-f820-4b02-b5f5-a4a553811692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb6c749-0737-45a3-ba4a-ba7332d4142a",
        "cursor": {
          "ref": "0fe5bd16-f42e-4d7e-8609-dadde067a486",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "132e6e14-77f6-4732-bbb9-4ca4243f1921"
        },
        "item": {
          "id": "8fb6c749-0737-45a3-ba4a-ba7332d4142a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "55be0d56-ae69-4e8b-a4dc-049f1a302be2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dbd574d-7e42-4a51-956b-85c30267bbfd",
        "cursor": {
          "ref": "58cae6dc-46a0-4db8-b6f2-cdbfac93f08c",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "62d10e34-0207-47b9-aa49-4506c668c56c"
        },
        "item": {
          "id": "6dbd574d-7e42-4a51-956b-85c30267bbfd",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "08f667bf-fc71-4b29-9003-d345e5378b9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62836669-ee0a-4ff0-b919-d69e34fe740e",
        "cursor": {
          "ref": "74b75410-cd3c-474e-9dbb-0f0680bdab2f",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "f2b19c36-68b8-4de3-a9e6-baee2e6ae4e0"
        },
        "item": {
          "id": "62836669-ee0a-4ff0-b919-d69e34fe740e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d49f83f5-4172-4227-b992-96c83a3f585b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1159d0ec-fd44-4a0c-a3a6-37567a80e1a8",
        "cursor": {
          "ref": "a1455e7a-ec68-4572-9f98-a17888b0ea38",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "c1224ae0-ea9f-47e6-8a9a-78f3b4be249a"
        },
        "item": {
          "id": "1159d0ec-fd44-4a0c-a3a6-37567a80e1a8",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c175826a-445c-4470-b424-ba7b3d39fe13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0232acd1-3712-44d1-bfc5-fab37690f8c2",
        "cursor": {
          "ref": "08dea955-8603-4555-b6e7-85ad4bf623e7",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "f14bc277-86f1-40d0-b40a-7906803ee3f0"
        },
        "item": {
          "id": "0232acd1-3712-44d1-bfc5-fab37690f8c2",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "034dcc21-e7b3-429b-bc6d-fc368e68e332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1efd68e-a235-444f-bfc3-6ab5e4229cc1",
        "cursor": {
          "ref": "6b0d5732-93db-421c-b47b-eb474e0a681e",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "1fdb9b35-ec46-48e9-8e2b-bc0204760fe5"
        },
        "item": {
          "id": "a1efd68e-a235-444f-bfc3-6ab5e4229cc1",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "5e2cd252-4038-408e-bfd3-6c4ff30e0335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03d068da-9802-46e0-a226-892b840009c7",
        "cursor": {
          "ref": "fe84cbf2-1840-485c-88c6-5f78be53b48e",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "68888a4c-621d-4f52-a71b-a463183fe210"
        },
        "item": {
          "id": "03d068da-9802-46e0-a226-892b840009c7",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "49e3df2c-93b3-45f2-aa21-d0d1eaa22c00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e98cfc7-3bc4-4d1c-935c-d392d57b4453",
        "cursor": {
          "ref": "b2d2a49f-56fb-46ee-9047-78e07f5da8c0",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "6f85fd1d-898f-4601-b143-048ff8639f97"
        },
        "item": {
          "id": "7e98cfc7-3bc4-4d1c-935c-d392d57b4453",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "484626a6-ffe0-41ef-b7e4-c2fe38703f19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30b331bc-1cbe-4d26-8090-549cbd5ed02f",
        "cursor": {
          "ref": "ffc17e79-d339-4fba-a3eb-6f985779a040",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "16318d01-e350-40dc-a05e-474e294882ac"
        },
        "item": {
          "id": "30b331bc-1cbe-4d26-8090-549cbd5ed02f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b3f09bc5-5159-42dd-8905-64b4216615aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b49d603-dd1e-4cb8-bff1-9beccab0acb5",
        "cursor": {
          "ref": "b864bae8-6680-4577-99ad-3e127e73e23d",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "6f8fbf56-8cea-4ea8-a4a2-f303df0459a9"
        },
        "item": {
          "id": "6b49d603-dd1e-4cb8-bff1-9beccab0acb5",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "5ad88161-7d08-4dfe-8d85-a5847e36b6d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef15894a-637d-45f6-826f-853a25d3409c",
        "cursor": {
          "ref": "dce3b8c0-d75d-4395-916a-99810c200879",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "38e3a74b-cd28-4eb9-bcc1-d16b5e706fe7"
        },
        "item": {
          "id": "ef15894a-637d-45f6-826f-853a25d3409c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e4dcbdcb-fafd-4360-a4f9-5a4d2b0864e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:276)"
            }
          }
        ]
      },
      {
        "id": "7acc7c15-c249-4667-b8e4-3b62ab8bea03",
        "cursor": {
          "ref": "fc387d04-b6c3-4103-b7b3-81b9aa1cae77",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "8581dde1-6d3f-46a8-9a36-a961b20e0313"
        },
        "item": {
          "id": "7acc7c15-c249-4667-b8e4-3b62ab8bea03",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "f5e165f0-048c-45e1-b1d3-36f193589221",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "c135e8e9-4c94-4e81-a1fd-cbf1661654b5",
        "cursor": {
          "ref": "cf113222-fcab-4462-b8cb-55aa9957c274",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "3adb8f9d-8f67-4777-87e6-0accb1522d5d"
        },
        "item": {
          "id": "c135e8e9-4c94-4e81-a1fd-cbf1661654b5",
          "name": "credentials_verify"
        },
        "response": {
          "id": "78d098b2-2ce1-49a6-ab31-0ba374cc21e1",
          "status": "OK",
          "code": 200,
          "responseTime": 2482,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "597edeab-636b-46e4-86bf-cf61a48a857d",
        "cursor": {
          "ref": "3d2cb056-aeb0-4713-88f4-40f227d2a2df",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "55c059a8-8c73-4048-8f7c-0d4ba1308df2"
        },
        "item": {
          "id": "597edeab-636b-46e4-86bf-cf61a48a857d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5e18b72f-0612-4101-b586-dbd54215550c",
          "status": "OK",
          "code": 200,
          "responseTime": 2378,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ddf5f61-9fa9-4b7e-8e22-6141d26b5c36",
        "cursor": {
          "ref": "3f091141-f3b9-4617-b00c-32fc70cdb5b6",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "fcd1b95b-cb71-4cc8-a2c4-90e04ae4aab4"
        },
        "item": {
          "id": "7ddf5f61-9fa9-4b7e-8e22-6141d26b5c36",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "283e63d5-1342-42f6-9869-410317a65e88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "7ddf5f61-9fa9-4b7e-8e22-6141d26b5c36",
        "cursor": {
          "ref": "3f091141-f3b9-4617-b00c-32fc70cdb5b6",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "fcd1b95b-cb71-4cc8-a2c4-90e04ae4aab4"
        },
        "item": {
          "id": "7ddf5f61-9fa9-4b7e-8e22-6141d26b5c36",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "283e63d5-1342-42f6-9869-410317a65e88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "d464acb4-d58a-492a-8092-cd3347d47cef",
        "cursor": {
          "ref": "37a01256-f899-4a14-86e5-89e784cd44fb",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "b64895c7-6c7b-416b-8b30-6a6673ff850d"
        },
        "item": {
          "id": "d464acb4-d58a-492a-8092-cd3347d47cef",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ef88b2e7-078d-442e-bd3d-337a5eab5eec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "8783a211-2b1a-4c77-8029-e5be9b2e85eb",
        "cursor": {
          "ref": "7c213f08-5ec6-43a0-ba8c-9cfeb2acf99c",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "f6decd15-8100-401b-89b2-ab023eb06969"
        },
        "item": {
          "id": "8783a211-2b1a-4c77-8029-e5be9b2e85eb",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7719b641-b396-4e88-90c7-87f84e7b49d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}