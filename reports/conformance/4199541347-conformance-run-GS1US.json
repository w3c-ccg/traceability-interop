{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "74fdcab9-32d3-4751-afac-d168835be6c0",
        "name": "Clear Cache",
        "item": [
          {
            "id": "028ee250-7629-4030-9254-f9e9bfc6cdde",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1fddf8fc-ae97-40fe-ad1b-f1c519ae0ad4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "34f51b79-e985-4bce-95d4-a23185f84f5e"
                }
              }
            ]
          },
          {
            "id": "a36f8a34-4247-44f7-94d8-5a6ee0327c0d",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e23c2456-36cb-4114-a008-789224663106",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e244e38a-71f9-4172-b375-4f3f99270b2b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0d97019d-95c4-4094-9ae4-eb89be610d09",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "665dd703-4f0c-4f6f-907f-97fcee9eb057",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a4d57ce8-4d0c-4c07-9374-9e27e0e3b908",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "14601d03-c72f-455e-99e4-7b46a58051a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0e4d1f00-e0f3-471d-b45c-c7c5a7083484"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "536d1269-6018-4186-b0b4-16e4226326b6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "899e3388-dab2-4ff6-beb1-abd82dc3e3fe"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e38125bf-358b-4b88-8c67-128ca6279c01",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eb8327ba-cdcd-49f1-a61c-0ae6d7713f3a"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "55c33529-3950-4ad6-b112-58fe890e7d1a",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "97c2bb80-e0bb-4c39-a6a0-566db0aad62f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f078b83b-d561-43c9-b778-554a87902efd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d129dee3-b6ee-40bc-913e-a5f3b0c4fd92"
            }
          }
        ]
      },
      {
        "id": "75ea9671-d84d-4341-96bb-797111a85934",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "093d6139-a8aa-4c33-b2eb-2e80785afda2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "24793a43-88e9-40f3-93fc-78c8198e23d2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a7d81c9f-6ec0-4b07-af62-62c206bb3e36",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fdb5894-bf15-49d7-8228-78e28087387a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c98b46af-1446-4e53-866f-d66fb9ccea95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b23c0e8b-2124-43e5-a45c-c52fe016f3cb",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b032202b-bc1c-44eb-a94b-7dff5f867286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f8035997-59e0-4d92-a11a-98337e756659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "153a7ca2-1733-4ac8-a946-a69d7180105c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca4a6715-83c8-4823-a01f-86d62ac6fa37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "58f7e394-6a35-48be-a8e9-508bfa9ba660"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bff05ddf-f454-4fc8-9ee1-65a08d0921d1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "07d50071-87c2-4497-93f2-94675c81613f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3271c065-3a00-484a-b203-eb1c5251dc74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8b420e4b-55c3-46ed-991f-51cac39e38b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad3294c-2af0-47b3-83bd-b3ae5ecd5e1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9193273-5f32-4f34-86d2-10915647e547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f3f5fd4-9fbc-4849-aaac-43583cfb8a2a",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c69773-604a-47a0-9da6-203f9a74775d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "52bcd9b5-9b48-41f7-8303-95b7a5ca7460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46a978b7-8890-4be4-8c32-b84ea225ac72",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "8af751db-1f62-4543-bbf7-56fd314ba997"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7745247f-f785-4d36-b156-700ccbfc0dd9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e4e6ee2b-e078-4f89-b65d-433756febf28",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "89f32448-468c-460c-aa8e-c24993e0d339",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "7ce77435-b38e-48bf-a0ab-24fa94bb251e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5ee50181-919b-4149-8a35-cbc32557ba90",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "1296dda4-5f72-407a-af7d-0060328fa439"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "70227105-f720-42fd-a6dd-65f52ec61274",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fd1bb5f0-6406-4e9d-b667-0fb772385a03"
            }
          }
        ]
      },
      {
        "id": "f496fc99-7c00-4f67-a0f7-864dbaf48a49",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "266bde30-2bc4-4114-a00c-458cd2749999",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b65e2f6b-2ba4-4aeb-b7ea-7a7e87ca3024",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a3752bba-ae55-499c-894a-6430eb9ff6ab",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "969a0641-aa85-4729-9f09-3de793ad4d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "138338dd-99bd-45f2-bb61-9574a7938f9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c99af56e-78a4-49ac-90b8-6a3fece5f5d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8d8ecb7-dea8-4f81-8bb0-74a9eb4f7f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21841a02-948c-4ae9-9733-a12961e01e93",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c2a4b52-6ffa-46fa-83a4-44366ca01f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be23f533-48c8-49db-8d0e-c74ea608655a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "986a871c-d9e4-4f90-8268-c73be1f0fe8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "97fef9f8-54b0-4d15-b05b-a7e4c07b46c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6ad2bfc-89fe-4663-a94b-d1ba927d9610",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32974f68-66c7-42cf-90d4-fb31fad93cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f11529ac-a07b-4e45-9628-c9fb7239399f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a780999-e690-4587-9b13-a25fa5767938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b46ef08c-ea2d-4fe8-bcf5-ca7bbeaa38e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9815c09d-f152-4c93-93f1-e687ae31a21b",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c132a613-65e8-4a37-adf6-30f207af98f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99df4cb3-adc4-47aa-93c1-7d304f9ea3da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fab24cd-fbed-452c-ab8f-7b8ccd92fc4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31a605d9-14c6-48da-b8e3-1760ae06fc81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f9464f-8f39-42e6-9e17-a2b0b8871d36",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c92bc325-852d-4a46-982d-e51185d78059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70705246-4352-4a03-b339-aea93c32060f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ac65cc6-7425-4020-bd88-068be4604f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a7d6670f-b6a4-4d26-ade6-a36524fe54e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f21aa24-0b3f-4f3f-9f2f-f498fd619417",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "788dd43f-2ff3-49ea-a846-f03ffa91d3a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b311614-9545-4118-a9cd-ccbd28ac6a68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d87fdd3b-1781-4600-ab2f-24c37d5a76d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db857241-78cf-46fe-b00b-686dc0982abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "780f09f7-5144-48d9-bebb-f4ccffd95d31",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4e064f2-7977-4641-a8d0-33211c2c5b63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efb50dfe-0ce2-455a-87f4-df2fa0d45531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c71c480-0ecd-4a4c-bb88-c648ec422384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5101c56-aa13-4990-9793-57f4e2a19f09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "579b1216-d4fc-40a1-8439-73050ebb0f4a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16fc7a68-1d87-4e1e-af39-0683537a437c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8b73de7-9eaa-442c-ad62-baedb936e45f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ae8a85f-4ac9-4466-a180-34871e77b08c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1c7cfcb-2f1d-4b44-b9fb-baf7a1050e17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78789008-79c7-4694-8d40-cbe5f10a37bd",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dbff656-fc6a-47a1-97a3-c12024a131ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4967a188-2472-4e91-b660-db980ee16cdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f214fa13-3a08-4195-a7f2-b585b962df23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "58df2ce0-1d65-46e1-9b33-9e0531ea09c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef86b08-4a85-4acb-ae4e-e6dffbb4316b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "042b4158-ed1a-47b3-94b6-6383ce67da67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c51edfbe-4137-490a-a0c7-8cc3c55e474d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6375bc4d-40d1-41f1-904b-b639d11c8b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "033fc017-ee5a-48da-83cd-c5ebff23f233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02f2e2d3-36f3-4df3-9c96-3b36cab2e157",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9c4ff0c-80ea-40b2-8479-3ee494c0f054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "599c0d94-9361-46af-9a3e-b2438bb7e2fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b772fc8-bf8f-4fce-abd2-4487bd73f594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33a9ab70-afb5-4268-a8f1-e87c83a094a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fd93732-86bb-446c-a6e1-c77da79ee69f",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa679c0c-e366-4449-b6c1-c846042a2df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daebebe4-8378-4633-aab9-d28e0bb9add3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbef6d19-a9f1-4995-98c1-b633069e570d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b76e3616-6c60-44d4-9582-a2cfa4bca30f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71789ba1-34c3-4ea4-95ab-1558395f256f",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e952d799-5d64-4483-953f-a059d5d46c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4268872-e456-48a6-a63a-ff27fd8fbab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c1d8621-bcc3-4eb2-a4c5-df66ae5bf262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "41359baa-49aa-4a62-96ae-c3f928fc155b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e19f8023-2d64-4c17-b079-9ae93820ae7a",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c0a6f2-6f64-4ea0-80b7-1defa04dbbf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "178e45e4-b873-4020-8043-6bed61e652d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b928a16-e312-42dd-8898-20ce52289abd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bbaa18df-1473-44f8-a36b-bd231e846a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "010c5466-f435-4c8b-9998-212dde3b0a2e",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7e3503d-0a3f-4ef9-9532-04d0201871a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f58c582-eae5-45c8-a37a-0a5906b2ea57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa70f5ae-3de7-46e3-ae9a-a2d175af5f32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85d33d0b-ba13-46d8-ab27-ef8069067035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e7fe3d9-1c7e-482b-8f67-89a95ba153ee",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e56679c1-08dd-4e8d-b80b-3be319a20351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8b2bbe2-db1f-47c5-a6b1-a418992f8d01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93e75109-8693-4e35-b75b-230cd65fd86d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9ffe903-7ee1-4921-97d6-75b25a0ce706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "332ca0a9-1610-4e98-bd67-dd9754ef44c2",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3777f42d-3e32-4d20-b7fd-642d75a4f56e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b08410a3-eaa4-4dfe-8501-1aaf0b3690db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe8eee7-a73b-4a21-903e-6829963a5ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a55c4967-2659-48df-89f5-3501a1fe8bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50fa7634-6adf-498b-9ef7-7e92dc353799",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea915d1-7e30-4570-8f87-25fadb51b7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b4d683d-fbf6-4d31-a646-094e974e218f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0d244fe-3c27-43e2-b6ab-d17d69c1fbb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a8cfcaa-972a-4edc-afd4-47b48d63a7d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d84e2ac-12de-412e-914b-88ab386e99dc",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85b56d23-e1a7-46ed-b0e4-b9d364fb44ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "918bd27d-6662-4638-8855-9c79fdc9d54e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59a17fcd-7a5b-4b4b-bd12-3bf518a84c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e68e12a8-b09e-479a-a99a-2c63e9c29666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e314ae26-d173-46e1-9dbf-e66ffa30150a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe957b20-0827-4932-806a-d4b0ab211739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2d87c0b-23b7-458e-b8ba-da465f3fabc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fda875fd-aa36-40d5-9b61-c7d51966d892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "76f5a5fc-9967-46fa-8b09-026754b1c1f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51311dde-2193-4a37-a9ff-4fafad60ccd1",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f7d037c-b30e-4ae8-8fa8-7a23724304d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd2278c3-cc7e-4d1b-8b24-57dc534ac60a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23fd10a4-b2b1-4fe4-87d5-09e7af4e8f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b3758ea-180e-483d-9161-9b9c8f7e633c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0a70190-53c0-4565-9406-766b43691d96",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a4f77d-34c5-41f4-8662-c40fce5f7ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bda9ed55-c7c0-4e9f-9d1e-d8fd07c06ac5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f337c1-f887-4074-ba64-7c65277754d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3506beb0-4dca-4b50-a4f7-0f7c989d3535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a48dfdc7-4fc5-44ca-b866-f68e7c015d97",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3200de69-96cb-4b35-b689-4e4f95b22dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8d21c1a-94a7-469d-a8f5-c536ecc1a478"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0a5bf24-cb83-447e-b464-ab575faf0977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2cc8d8a-b1bf-4aaf-ae59-34fbf05bb29c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91507da4-8b46-47aa-8a96-8e5b77552d0e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e1a967-fc32-4f25-9344-9cf0923f3b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95ef2b38-2dd3-4b0c-9512-d14296a43515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc3d998f-4c95-449c-a8e3-52a06da8ca4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5d5b62c2-8289-4f18-a648-7f7196382a28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6147369-f855-40be-acdd-d98d5051e329",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb66cd5f-a596-49fb-8dc3-3974a17859bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2131c6c-2aba-494f-aea5-2b52cb11e2ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d174bb0-ad8d-4a72-b2b0-1d97cb17e787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f188b6f3-387d-461b-9901-0f4123c9dc70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ee052dc-d1be-4537-b17c-9aad5d583fdb",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "631d5f16-0a01-4c27-a821-00169c32478c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fccc41c5-90ad-4ca0-bd2c-fb8999cc5b21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f105de98-04ae-4b79-8c0e-3219e579c938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb68facb-71e6-4c7d-ab2f-9e817126c838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce4ced9c-28a0-4dc7-9f41-a43ddde3a082",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0e91bc4-4049-45f4-845e-7bbee23ff418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6f7f33a-0b80-40d5-8966-239e3d5ead9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5abf8d1-ed17-4ce1-b288-98675bed0167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e123ab4-ef7f-4f53-ad87-df37edf62cc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ef6120e-f912-463a-b2fa-eda8c96ab1aa",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99af9e2b-8e52-411a-9f7b-520a63b2caf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3e8403f-ffad-48d4-a684-52f4829053e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d91829ef-d468-4a74-9d3b-c534c46c3c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f99098d5-ba92-4451-ab3f-f9ee9c9b6f31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac4e108-ebbd-451f-b861-0a1ffc9f7f20",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac71a94-94df-4716-9603-ed696124caca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f828b62-814b-43a8-9b47-536a6b1d0fcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7debd1b-794c-4356-afc3-6d607ef315c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9289cc0-cf05-45ed-b975-a7ce1e400e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58286f02-fd86-413a-8da6-e98a36782108",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b88b03-f9e6-45d2-bdd0-91c5edbf7805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49f234a3-2f85-428d-bfd6-cd6aafc96f21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9ea0cea-f8fd-4f84-a60d-7abbec7020cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc13e673-d79d-4bb9-b5d1-df1abee25195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "101f0a68-83a8-48eb-bc93-a825a46dbf7d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99dc335b-3c8a-4a16-9a1b-e920031357d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4685c73e-5cdd-427c-8a51-074abd754df6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbd671ca-69e3-4925-8bfe-28813805fca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4f5664c-eb05-4c9c-be86-50a296d4200c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "336b1606-f503-43fc-bce5-66022b72cd77",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a27ffe-2cbc-48a7-9411-31a18d0fcaba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41646ab1-e9e2-4480-b771-77da74991f37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05af92ce-2913-41ae-a098-21629c94d98b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b2fdb19-9b3a-4ced-ac7c-94cb6b725ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "843ecc45-9d1a-4bed-960a-a989644efc9c",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df9031b0-de34-4abf-9eb4-830258575934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fc0fd56-1d7e-42c9-b5e6-ce115616040a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e63a0e93-6f99-4762-b9b6-13be49cb6001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a4b7b46-9512-496a-9da7-ed159565ac60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ac3c8dd-0755-452d-8a4a-5aafb6038c02",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "690f39f5-e62d-4ff2-b00f-914d06ad435e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbeb7116-dfab-4f58-8e64-5a289afba43c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52bca2a1-62a6-49a7-9018-e4b836371b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "916c823d-51be-4bba-844e-e7a829847334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9bbf6d6-8011-4325-88b1-0198ed9661f7",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e97fbbd0-a688-4116-903b-7ff73e643db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72a0768a-2506-4b11-8717-2b511495595d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "409f5b7b-4460-4c19-8ecf-a58cc8c2f531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fe59bb0-394f-4893-91ce-5d81b14b9e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d47e1fdb-4d3a-4d9a-9a0a-7f402bea547e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7070b64b-8318-49d7-9d76-10b7eb2f9746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54463d76-f5b9-4d5a-a1db-22edbcec1bbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a6a2bca-f50f-44fd-a1e6-c157e532531f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "172c47b0-cd30-436a-9aca-e545c159a562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fac0d38-89b4-40a2-a584-0c4f6400359d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "744fd88d-a44b-47e3-84ed-8295c87eb53a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "70452729-2fde-40cc-a6c0-db03abaf6343"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c08cade1-afb5-48c1-9f28-8d05ad166cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d7889386-2354-4a8f-a605-94cdaf3c1fb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6601791d-da6d-4e08-84d1-844f92f982b6",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc240e0f-58a8-4194-9891-eadfa92e90bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea3c42e0-e275-4509-9f60-ae8c0ec57748"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "677ac5cb-4f63-4de0-9338-f43cf5afd554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8528461-c573-4c00-8aad-0e06c4e1bcb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e305f23-dbbf-4560-9dbd-b7b280e7f5e9",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8319d1ea-5601-463d-b6d6-396c0948f330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1d9d618-d763-43e7-a035-192756aabf81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b72af90-ed03-4500-aff8-04747206f798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4b74544-6731-4a11-b72d-78f9c2f2f1a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9ef6195-1fe5-47c5-8a2f-bd226520be9e",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db6d7442-0b7f-4326-933e-5f85a61dd1fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c94f5cb-b80f-4246-976d-6aa1fec891b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2381c04b-9b7b-48a6-8fab-7f329e08c9ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e19f1b6-c337-4338-b12a-cff2f20db4ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55507c8a-aef7-47ec-8ce7-23472aa6d72c",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f2abf6-0c00-41c3-ba3e-e8cf24450b58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4f9d26d-9cb4-43b7-a9cb-2df0fe7a735e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "294c0903-7531-49ca-ab8c-4e91b581dcc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c6e275d-fe68-4dfa-96d0-7f9bceecfa06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b5ab43-9ee4-45b5-9863-6450da63ecae",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4623053c-6769-4ed6-a877-99fed7001baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4af79864-1faa-4c79-a902-c78d3ff6b69b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "320dbc23-1653-4d84-9794-25c32bf42a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "02c7cfbb-eff1-4084-9a4c-ba709688855e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86c951e0-4551-4fc9-bc24-08c1b3bc58f7",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fba8e66-abc3-4772-aa1b-245724f62be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c785d0bb-b9f8-477d-ada8-7bcfce1289db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a1ec517-6ec9-4da1-b52d-f78abaa4d6fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "1897da5a-0e54-40db-a64c-8793269c4b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e9b78e-5446-4a25-a903-d593dd770756",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e9b2066-c356-413a-b532-868237082374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45b546ba-d2df-4935-ab94-a01da6cbdabc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e58573e2-d7ea-4f88-90f3-cc639d39f91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8184326-ef21-479b-b8e7-914c67d73c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9942b1c2-4354-40c9-bad9-6167a50f0394",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb83808-90f6-4c82-9ac1-dfda79ead125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaccb76f-c6b5-4473-8f9d-0f25a39f96db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2662004-2c2b-4cda-b76b-010fd429f60a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ad175b7-0eb3-4255-a27a-40abb025ba1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de885ec-60f6-4ee7-a5b9-633bf6fb9b8e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9563223d-7bfe-45b3-b85e-c937466eca36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cebb5163-107f-4fae-8352-9303ee887c89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9654acc3-8a56-4f9f-878d-5918e2f2e51e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cabb2f54-830b-4746-b6ae-35a2cd0fa3a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ebdaa89-1569-4e95-81c6-bae43e88751f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e6f9f3-0edd-4d8b-b044-d156ef17cddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7be81a09-4164-4b2e-851e-7030e9ee3107"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb51ae73-c138-4d6d-af03-00fdf155429f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "52cabc81-a6ec-4cdd-b968-2371dd445ef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcefa1c7-4b34-4c76-8062-7e53547e590c",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2190217-221e-4dff-9171-f1ca58ba3161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62864a5b-41d9-4a84-90db-ef6ed8b99d8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83902d50-5d09-4be6-a9a1-4358ff81e0ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7362aac8-17ad-4aba-b05a-aed02ba6db84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13f75261-182d-45d0-bb3a-efe30af77072",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c66bd22-be59-492a-8963-90e648c3c9ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2936a41-6ad2-4a27-b379-9967f44dd7aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab1959e1-71ba-4108-b53a-95ad3b1eead2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2391bf9-709a-4c51-9f16-a1276f6242b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "280c1d28-3d25-4f3c-b104-42032f704ffc",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b339264-cde0-4f87-97d5-8b2f8c8fdbb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a2c7e7e-9103-4118-b795-24f5b97848d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9641866-3121-4b17-9e61-24ed3b98f474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9604f564-3052-4b83-957d-e1a848fbe5a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bac571f-d801-40b0-84bd-0627fc53aa72",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7046681a-a565-42c0-bde8-8db414fc7696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01cb8d8d-29e3-4240-ae4d-fd1ffea90503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d6dbf10-ecfa-4ec8-af0a-d0b71dd6a34b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "90b8c6c1-0f33-47b4-9602-fcd6d6909251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "678c59ac-9751-45ba-b858-534807e1305b",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23de72d7-1476-4f21-b9e9-fff91f7dc341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2130980e-eeb0-4708-abbc-92a0df1b0c09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20e95a6a-013a-4108-8f9a-0c31372709b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "9458bb67-34ae-4107-821e-e0566a8118fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "844aac84-3f13-44bd-800f-446cb46f4c70",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c8da80-0764-44bb-a35b-79a54ff34b69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fbac054-1a0c-4ada-b418-b59cb118daa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78dcd0f3-82d7-426c-b306-2b6d6847a05b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "502f9db5-6a11-410f-b486-d3cf505e2352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19c842b7-9585-4f08-a93d-16c52a9b8ef8",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e49a4ee-64ec-4d39-8492-c0861c526558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e406166e-711a-44ed-92ad-1f7a0a4f8480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "710ff3ca-2724-4f7d-ad25-83328188657d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eef6ccc9-c72c-4141-b8cc-856580b588b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49ae898d-a5a6-4b3f-8e4e-88ef9066752b",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a052c148-d4b7-4dce-9099-28e602bc37df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eff7772-7a82-4140-9531-3aa7aa9f83c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d8d05d7-fa03-4b57-a4b3-88a88128ecc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0860532b-456e-4e50-8fc5-50a4760823f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "309b6d47-9fc8-4ac5-8266-96cbc6106b62",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07fb0661-5f9b-46b5-b271-62e0f9e5977d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e29c139d-2db8-4de0-b6d4-1e07c90a5302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c626c68c-3788-49d9-b72b-8dfd802df00a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f4fb652-7808-4edd-94fa-7cf155f1b728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d5149c0-7135-40ae-b3f0-61c32eae1e65",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeca5408-3462-480b-aab1-383e8e3aeb83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acb3d147-a5df-415e-9280-8d2f923057ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee9018dc-a67f-44df-8440-85b174f6271e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "a850dfc3-2bd5-4425-92ec-bb4189044682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1966ac7f-fb96-4284-8486-78d3904a0d27",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40abcf3b-ae4f-411b-a07c-58562a9d28b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed99cb9d-97d8-4305-9613-d064c63a6731"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "430283ac-79c4-4858-9fd1-470eb1ef0e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "102caaf5-6e52-443f-97eb-98fafd652ec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0641c41-c60d-40fc-afa9-7cdd1f557396",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d752388-71da-41cf-a059-9dff19afcdb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ee9e4cb-adbc-4e50-b762-61ee0d866e1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "537e0987-fec9-4133-8d0a-db34db00594c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "00845ffc-40f9-49c7-93f3-f4ea8b3fcc70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "521d2104-47ad-43eb-b5ab-bdb5a0302147",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d54b2d09-6047-4dfc-bf0d-0ab1d2322a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0269810d-2682-414d-ae66-0d0487c7f6c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bab830b-7704-441e-a4d9-b82d4a60c635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b3cb9c62-b93b-41df-8dea-c93a78e04e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e216635c-d3c7-4afd-9486-b9defb105805",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3c931a3-f2fe-4e74-943b-49e4a6fe380c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af1d5ea0-6aba-439d-9e25-8dfb4bddea69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1732d84-8af5-4380-a0bc-d8cf1309bf4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8b6904f-7a1b-4c37-9d89-0f82302bff0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76925cb2-d8ec-4613-87ef-33e74c40d5a4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dc72d9c-a8e9-4b60-8f78-72282b324b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d3b4b98-0e6a-48b4-990e-95cf0e056c4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99791d6d-6b38-473b-bbb5-494a56775d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b84e378-a33e-4ed9-91b1-c810a0309c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28b51dd8-d913-4153-baf7-c401ebb8a7d1",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f20467b2-04c9-4771-ac3d-546aeeacb48a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9ed6b4d-25ab-4f62-8055-3aab8becd4b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3900bd79-d38a-4578-975e-52b84fbf9158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "90474b1c-a49e-4e2d-83b3-604a6962028e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c516a9d8-5c42-4bcb-91ea-37217f8f51a2",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5121124e-33c4-447c-a369-c99a935592e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeade322-fd74-4274-b4d9-5e4db676b31d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f7f1ca-2ae6-482e-868c-dbfa4fd8d2ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "35f0acd8-6360-45f0-92d0-87880cde3335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30a4409e-cd60-40a7-b589-baeb22d9e515",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42952c7c-672f-4aef-acbe-d0ac0e4f16cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0baae1a9-07dd-4fb4-9d25-4adffa238b1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ca8430-8ef5-48f5-b0bb-301dfaa67e89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e697b58-4ab6-4a64-a745-07d9e1303d0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44bfd396-bc78-4c3b-91ad-f23ecccc78ce",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74080e8-a800-4c76-9a99-183abbf177cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8a72e6a-6c8f-497b-805e-ecc2978b46a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b02c34f7-c423-4a37-a65e-5cfe4d01185f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "12c9966a-0868-4940-af4d-70a330cc9f2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a363480a-9fd0-4b69-ae4f-3a45fad0069b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f9a45c7-946a-44f4-8ec2-c22cb678df7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "569f587d-9c80-48cd-8a3c-37b38d0c2742"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "305288b1-a750-43fc-8685-0891e5dec720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fdb68cc-2486-4667-b29c-3dcd0f32b1ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "949f2d21-f447-4aee-b965-400a479e4334",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c62de23-9371-43ca-9400-c2b26a7982c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "261ec81c-90e8-4554-bdc5-5de6da563556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf81af9a-2bf4-48ff-bf07-54d48efe2f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "032ba264-b814-4e2c-affc-7e59955a5cd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4147fe40-a7ef-426e-b91b-8c9ad153055a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1e463fb-da9e-4145-a09e-6a9c62601743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dad2ad1-467f-4a13-a6b5-a5495bbe22c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d72936c8-f518-438f-9c99-253c2e71a480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e4d2bc3-5876-470a-9385-6cdc40a57b51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93748a9a-1ae1-4041-8454-582928edcd5f",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e20119-1bd1-438e-8c35-a597e7ef2c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3af5b577-8165-4edf-9aa2-019e769b0bc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87bc05ce-58a0-42bf-b252-277aa9d95087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "828042d7-4aff-426c-8786-baa8f45f048b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e5b8c71-17eb-441e-b660-c371e2a07921",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3979849-bb2e-4526-88a8-1d6a06d301c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84278074-c51f-4471-870e-9c946448c720"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b705c0a5-d041-423b-bca9-052e822b8894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1c55ba0-4513-41fc-9a8a-74b02422d42d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45af6a49-8fdd-4122-a2eb-ea348d4b6a5d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "912b267f-8c0e-4a9a-9f2d-47a35aca5372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cf5c536-f21a-411b-b62c-0f8747f3048c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccaaa68c-154f-4df3-ae54-413e17e8dd15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7d29959-a39d-4c9b-ba90-c2aff348c389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd862d7-89bb-4453-93f5-915176cca9ac",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d0aca8d-b126-4c28-98dd-16f8bf03da4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "683d2812-40ae-4949-a18f-dc7f214a81dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98e09296-ad6f-4e3e-8873-c4f9f921bf75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe9cd2bb-342c-4c9f-a25c-fde9562d0316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c21a96-2e6c-41a5-9a72-2457bf2f3d57",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c954ab5-7949-4777-af8f-b91629cef983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db1510cc-5297-496b-a206-c8581ef61fb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f637ea6-1801-450f-915f-ac82816fa171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "845be37d-50e7-401b-84cb-ea87a69b6b53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef5a4c34-1241-4a05-9c50-d294bf56253f",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68a3ed81-4663-4f58-acde-888d141170b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f2b1c92-4eef-44dc-b1d4-4095c9c3baaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc28d1bf-f7cd-4820-a597-6ab3f92031d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bb11b789-2611-4afd-a957-4b307d1facce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "879a6a53-5cb7-4c7b-bea0-bfb28d792353",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71084f2-e372-4335-8118-b66db42fd322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6024948-302d-490f-9731-1a70b3652efa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714e23c7-bc35-450b-afb2-8da3caf014eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "91c8b79c-223e-4830-afac-e3e7c00510ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c71a19a-1a5c-4fb9-bf04-3d221bc7925b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aacd431-4982-4c7c-8eeb-77e0b15f17b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ec6d757-0314-4a22-a817-ba99789f3271"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a25dde5-19d7-47f8-bc50-debaf81501ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b8929ab-3828-4ee7-a20f-b39f7fd0c733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e466f6-c1a6-4b8e-bab6-af9337e5ba5d",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c20dffbd-7f2c-4883-91a4-31b6ae322bb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "892a439c-1469-4774-84fc-8b904daf3e47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12e84ca5-daf5-40d9-9e59-2c72a55e10c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b8a9d92-da13-4925-92a1-aa47f9ccacb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd2c49e-37b5-4792-8edf-c72bea786360",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3f66719-7766-4cc2-8de1-96acaa4e1936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ba55bab-4c34-4d8b-9caf-13fdc472ab55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "574df05b-c2c5-4f13-8960-056b8a23ac04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "74b07ae2-5baa-472e-bbac-3a939a0fd4c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "019100e0-2f40-4319-90f5-c4d77c58c649",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f00a89d-4ea7-4194-b0b9-838fffddee46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec486405-7547-49b9-a252-531cee2432c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61b8a884-b67a-4364-b58d-bfacb511b79f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "99db4514-d4bb-40f4-bd42-c5dc655afb53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d970a585-4c3e-4f9d-9bda-ddcb4076044b",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f661c66-d6c2-4df0-adc7-0ab00d6b78f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "289c7880-9cdc-4fdc-9197-b6f03a24b46a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6878d9b5-5a93-43d1-b40c-b044a764ec1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8690f06d-08c0-4b20-a3d2-8b02e7b09620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6077e7c7-20ac-4789-8a00-1e51d51bd25c",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d04c179-7f31-43f3-9a49-2c0c5dc81f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faa04068-c959-48ee-89a2-4c8e61d06566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "512a5a7e-d364-4a68-8e53-a902ddf22a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6f3a483-871d-4e14-b490-6755322f9eb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "558b5526-e586-4737-870e-76bd7c7583b8",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbd43855-98f6-4ed0-8010-554116904010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0d9c238-da7e-4549-a4db-bb8788a10e97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90504689-f983-4af6-ac63-df503cd7d349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d115e8a1-df40-4003-aa51-7b5bca713d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c25f0f63-17f0-4061-9149-bfa0766c4d16",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e23b5256-1b5c-4eca-8368-de478dc3d95f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32ec941b-aa86-4aa6-8e2c-39a1cde7db3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a55b30b6-8618-42d7-ae02-7cc8ae17423f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7eeb2bc-3c85-452c-b292-fd66a52b9e9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "226e4190-1507-4d84-88b9-886d1df2ac35",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24050f50-8d77-439b-900b-e4aaa57a11cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fa752df-337b-44cb-9338-4220f9323c24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dad09b1-6031-4238-a3b0-80ffdce257a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7c1a1f8-09d8-4c75-959d-0fcd4aaf33ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a03c10d-53b7-455a-a02c-8b0b9042b2bd",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e12ae9a9-7bc1-44e7-8d1d-9b8f5348257b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b24d3491-6fa5-4bc6-8900-9303cff37b2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d14922a0-65a5-4cdc-b818-00aa35b70886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "56d49fe1-2b46-4ae4-b5d0-928f36a50687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e633760-2802-43a2-a41d-a0ebc4d7291d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c5989a-c938-4805-80ec-154848fe76c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f90b9a54-fb7d-4d36-a66a-b1388523541e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3d459ab-6eb8-44bc-a36d-33714a65f93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "80d1bf00-3919-451a-b32e-0becebcb4168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc159da1-35ef-4a2c-9178-5505db8cd22d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc3b73a6-8bc6-4925-8d51-c79c6ad83e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09811879-a05e-4df2-a715-936b76817720"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9363049-7159-4550-8f90-393c7018ec53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b06b3c54-b77c-435e-bb7a-6b128ca1fae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a96775e-9c36-4792-9318-8d2f98897765",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ec6fdbe-9cc7-4a9c-bd9d-b910088b67b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4192b322-5974-4bf0-b4c0-a520a2897d10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7281cc1e-7d46-43db-aa58-b96bbee87233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0648bed-2256-41bc-8c59-19830ee82901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aad6afaa-f48e-471f-822e-6b57969cc993",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcabc0a9-f432-4dcf-9bab-7ba6fe4a1f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83330033-7449-46c8-81a8-696b5de5040e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7320e0f-c268-40b7-99f7-2d981c6d972a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0917bfe0-7470-487c-bff5-c028a2e7f83a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d7afb5c-4f20-433d-901d-abcf0150c088",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "411bddbc-6281-4d97-8920-fb74ed1168b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bb5ab58-2153-4370-944b-6e890fbfd9e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa595f3-c5fd-417a-b5fe-d8a84e86eeb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "15669754-1615-4fd8-b53c-fda71e614350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a8e943-76ba-4540-8f17-11b94808d0e0",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e27b07-d1cb-4d99-9963-ed7ce5468ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0200ce16-f442-4b32-aa51-0faf4dfffd0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e962ef4b-995c-4e1a-a97d-45c89a5ac46c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf73329b-134a-4a6e-9480-aa28e17606fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b7f03e0-b74f-49c5-ad7d-f0a01d0cbba0",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d42bd3ef-06f4-4ffe-b51d-a5c0d4e9e17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5687eb1d-3cac-4b4b-8426-ed029bff2d21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a859c9a3-7c9f-4e23-a2ae-5e6291524e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f66324ab-19c4-4aab-8daf-31ed8bfd6f9e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b7b940f6-672c-480f-a92d-56a24e1a30b3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9b445979-9a2d-496d-be45-b6eb1f1f6479",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270ee380-85d3-4d42-b6d4-3073906caa71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "70d39f8d-6a8f-40db-b10c-ccb88ce2434b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ba8be9-858c-4252-a500-2166f24c13e3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "dfc73dac-7909-4c93-90ef-d8d7a0a25e9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1c1dc94-ed83-4add-bf4a-a7736d6c284d",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d66d40-a4ec-4d14-93a4-66af3f055015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75f1e78c-6805-4128-8631-b065b072cfe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98adb260-dbfb-42e0-a2d0-fb6bc6b07077",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "e428e2f4-a9f2-49d9-ad4b-976f41b45a4f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6c0bdffc-fb96-45cc-9b3f-cb6fb5de54d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78c30318-18b0-48fc-add0-707ede4425d6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c85fc60d-a9b1-46a7-b969-c7e3ead44189",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b6a77f2d-8a3d-42e9-8372-78a70a1e51a0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2350bcf0-ee81-41a3-924a-13643716ff4e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "33fa15e7-c872-4b62-8b86-df74b1e55da3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a92a5630-162f-40db-9ccb-cc8a56db9e7f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1aef54e7-4099-49b7-b13e-645ea851f64d"
                }
              }
            ]
          },
          {
            "id": "59813c3c-5ed2-4498-b6e3-b828deef8c25",
            "name": "Positive Testing",
            "item": [
              {
                "id": "58c069d1-a343-4e96-aa2f-d017a4126a62",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca1078f4-237e-4fc0-a622-d81e658c2835",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bcf30a88-fec7-4d24-bff7-3d820a6acd64"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19b3a5f0-926c-442c-8e10-96fe6848cb93",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "832e453c-5992-4f66-958b-79eafcb9fc94"
                    }
                  }
                ]
              },
              {
                "id": "bd76af1f-0bd0-4ce5-8067-af9712f39604",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "696c7a4f-de20-440a-a35c-c3b2e07611b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b68155f0-285a-42c7-8cbc-411ae487ef39"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "932b14e8-47c6-49a3-8e65-673f10751ff1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ef72036e-b781-46a4-a9f2-2d4c0492c80b"
                    }
                  }
                ]
              },
              {
                "id": "0c57351c-9b67-4cac-aae9-578730489ebc",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc06083b-6a06-48c4-b42b-07a3c6d49f27",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2d84e26f-9fec-4a7e-9298-e3e681088bd2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "01c42c30-ffe5-4bf6-bd79-6b44856735e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "65dcb4e1-c64f-4c66-9fa3-e3afd4c33f01"
                    }
                  }
                ]
              },
              {
                "id": "dad69529-5083-4d25-abd3-eee0996923aa",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc4c16da-86be-4306-bf72-6d15c4bdf90b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d673921f-8e8f-4304-a763-9aa22eb218b5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9665905-7c98-4664-b1d8-c21c832e331f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "1eac7499-7c06-4307-9a68-a22ffe652520"
                    }
                  }
                ]
              },
              {
                "id": "0c9d9eae-535c-478b-9f93-7af1c13eb6c8",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b3e0508-faf7-4c5a-a6ba-019a4dd7f3aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f9c81a70-3f2d-404c-b401-e1b366727d80"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6b79e525-fe89-4c89-9f75-a02fdf4be644",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e33f0ad2-2c10-4616-8a76-dfb327e710ec"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "91f0d5ca-23d9-4eb3-9ba6-9e313d1721fc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "846cddba-634a-4875-8975-a7c71dd4f885"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "03477af9-4c2c-4b39-90ba-aaaec0955f2b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "85daca78-896d-43e8-8e16-d2b49dd72587"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8d66bb6f-1c79-45e4-9087-5bc4804cd6f0",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "98e2ff50-3ae4-496e-b94e-dd7af736199b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3290e44f-72d7-4cd4-b46f-ab98a9fe0d72",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1f6e568b-748d-4976-9560-8cb59ae54c40"
            }
          }
        ]
      },
      {
        "id": "b232e748-b5ef-4c48-aaff-ddb5b6b256f1",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "88608925-0a12-47d7-8c18-2db3fd162861",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f3299521-68c1-4586-9f22-731449e90d1a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "295778c4-fa45-4a80-8d83-f35db619a084",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "552174f4-7699-470f-9fc1-bc009c3ed688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "440add66-1e09-4935-904c-91917e977bc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc02db3-8f45-46ff-9e6a-b5d2b694b238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd07b707-f320-4d89-9677-7f87515fcbf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e7c76d-aa18-4348-ad3b-55012d3e9aa3",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e37a5e6-2d64-40bc-acbb-c8ae8bbc9628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11da1ec3-dbd8-4e50-ace5-c14c1cd3b9ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e7c911-78f9-4e60-ad6d-2c1b09998ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e985f1d0-ab6d-40b3-8582-44116a1206ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056af0f5-10fd-4f0c-8c9d-e481a98244e9",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d8ea772-e1a8-40e1-ade3-3a9a3c9874c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3999d1a9-80d4-4064-a268-1b7b386a13e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f955455-ff70-42d5-b71a-c883587d016c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2ed0b0f-9fa6-479e-81e0-666a00d7cc19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9eb00b7-02ca-4c9f-91ed-6667e2a9c665",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ea66d9-012b-411f-a069-d16d48d0cf8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc5ee943-2112-48b2-8cc9-252112707d3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf8bc60-3ddf-416c-9a46-a638b26c6eaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e888b105-cbec-42d3-bd30-7a0cb0d3dea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50b90511-7311-4c18-8458-b4cabf68a759",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acf2be75-0f5d-4a00-a38f-fba85a75105e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9be2d0f7-e86e-4701-b4b6-241b98875b94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "436435bb-526e-40c5-aadf-62795e9e7ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "73d5b723-581e-469f-b157-ac4a2260aed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa6480b6-ed6e-493f-a813-9a5466e92c0c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5158db86-8772-4f9a-8a95-312883710020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4beed02-303f-40c1-b236-d75cc9e4f4df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d29f750b-5542-4bab-a67d-c3de7c002012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "31c29bb5-b5ad-4307-9da4-520e09983ef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5577752-3d69-4309-b177-2c9e3dca496c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3d4ad50-2bcc-4814-9fe7-09aaf1ff5cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "904a9af2-019c-4263-b04c-f81f40ddedf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f086b1-7a9a-453f-aa2a-0076e39cc7ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "16aa1e41-2016-4d3e-8d23-8ed8bc0b874a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40d4ad68-015a-4db6-8bda-760411be7e84",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cda7fb7-0b1d-4641-bdff-3cf3e86ed5b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3acfcf4-25e0-42f7-ac4b-271ad09a4b17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b37c8525-52d3-4d67-85dd-b40b4046eb9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2147ee8f-b315-4300-a87a-2226d066e3a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca3ee5ca-0919-4cfd-9db1-f7596e0b5e94",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7382e82-b514-4581-a492-4006f826fd45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "109069e0-10db-438d-b5ae-6f2cace16487"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35375218-d7bd-45c5-ba7a-2f2d3646236f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2ecbe3f-9119-4c00-ba16-d025eb8a1f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81aad510-a974-45f3-a64f-4b0465cf2a91",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de47180-21da-42a4-ba01-c8934c1050c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "181d49e3-6d4e-4315-8cda-4c24e9acd17c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b45be5f-a4cd-46be-8e6c-8caf17f1f777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7da23a08-7cee-4638-a0ab-096bd3d00294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3475bb38-de3f-4ad0-9533-9cc55d8a7500",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e155d4-2ac8-4cf1-8e50-c757121e54c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be29e6b0-229a-40a5-8997-62e6c7a69884"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08713247-e227-4099-b48a-9ae05e670c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "9c19988c-14c9-43e0-8b1d-d7c61edd0bcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c08e14-f93d-4f39-a9d4-7e83fd416ed0",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82f84dc5-bbac-484b-83c9-cdf595123ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a13c2d24-76ad-4813-b5be-6e579f022f99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9803110d-51de-484b-81a9-607ef22b94c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2ffe7bfb-03ba-4459-bef6-8ae5968d94c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91df5185-be5b-4cf2-8fe5-afd6a4a2bfcc",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e099a29c-3a27-49e1-9826-9b2db6734e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eed01c76-8435-44dd-9272-005f3c577589"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2238e06f-d666-47c8-b110-dbe8b172f142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cda77ab-b299-4a40-a7bc-97512b25664c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9a525c-f898-41d5-b47f-5abc1390c6dd",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f85e1157-acac-43e3-b565-9af816f817f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57f4fd5c-3496-42ca-b7d4-3e4b2ae166a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f57d37da-3eb3-4604-9ce9-d356362e2055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba6a9489-f797-41d2-b7ea-beef0b09f012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "927725e1-ceab-47d3-9d80-cebe3b261afb",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec54027-b655-4abb-a969-277a947bbf0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cb1ae68-5b5e-4ce2-88a8-e93b05681e4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "250b6aa4-852f-4685-b4bc-5e3f0ca2f7f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f39747c5-c8d7-482d-ab31-995d307b0cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf9f351-6503-4ee7-a52a-4dc90c615e28",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deaa7b66-8549-4525-b682-21d866d066bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1770f86-3f42-4d92-93bc-ae2c1bc25cf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97acccc8-bb9c-4723-8802-cad6e5f5734e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cc1243b-166f-4d52-91e0-a539aab52604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f97702c2-1b5c-4154-9acf-e543585042fd",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18702964-5bad-4879-8e3a-d357c46987b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6fb477c-59f2-4bbf-96b1-3a94669d2a11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fcf86c0-9118-4528-88ea-d46a9512a1b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "4788e96b-a00a-44fa-b857-74afe42ef9c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a993c616-32b6-4de5-9aec-4e667b0f5bdb",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26841c2a-6a2f-44be-b5e6-7cbf1e0da0fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63294520-986a-43dd-88e5-edc7cf393c89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c026d005-5f0b-4189-a644-dbc6021a6eaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "83ed5efa-11ae-426f-8d2d-3cd9c53a973b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c25a083b-29e1-4cc4-9751-a5869eed0661",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc145e48-db11-4e08-a764-2684182423a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "485f67a2-a81a-4c88-b98f-a27399309144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93837c3a-c7aa-4140-9972-18e46dd9b028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "097f4163-99a5-4749-8e0a-872a1987d9be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80794f28-a78d-4f00-9861-0bdb2c2b5d61",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f026601-7cb3-4075-bf1b-db4641bb9c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "883d27f1-3c5a-4a90-b810-3bcfdef075fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28d212f9-7cd3-458f-96f0-d6d6de36f39e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd46d4ab-8b2c-471c-b861-fca4c779492e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f283c9c3-32ba-4c7c-87d7-1c4d9a8cfaa9",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f62f754b-f741-403c-bb2a-e6825b1133ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "021b5683-ec53-4d99-9321-ed1197dfe76c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "221f6684-e852-428d-a8b6-505c1802f4fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b639d741-a20f-4555-a2c6-8a95cb2e90c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd60a49-6f41-4f36-99c4-c3f0a3b06fca",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eb438d9-35c1-406a-a92c-ef529bd6f1b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bb28af3-8137-4188-a948-7bc23f3341b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "219a21b5-3b1e-42ba-a4cd-f2ff000d6857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f632d3fd-e28f-47b3-9d9a-ce382ad5e5b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e3895e1-4e61-4bf1-b36f-a4014a07b099",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e298514-e702-4c60-a4a9-d84aa4e88a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98ff06cc-9ef7-4be3-a865-f3a02072b658"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "300f0517-35cf-4433-8df7-76667c6fa799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4395c039-b81a-4b56-88fa-0355405b6f82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cf59275-6fb8-445a-8f17-aeac9099b567",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad752ee-1960-4745-a90d-d113e82187bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "024a4b8e-6715-46b1-8a8f-f899a6146f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d84c88c-7a10-42cf-b11c-83eff3dfa314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eda7d22b-b4b7-4daa-9a34-4f4bf48b1333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566e7ec4-34ca-46e1-92fa-351461e58f95",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f63875f-f4f9-4024-874b-985f1ecd7667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ce19f82-8dca-423e-910c-42156c23791f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dd5ee43-8f55-49cf-93fb-290e1389e137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4278dbc7-2434-4657-8019-133abdd6fc99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6124d12-1ee2-4771-a10b-8f0a1d07e424",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad6837e-93fb-4a23-be98-8888deb7b0b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f148662e-ef5c-4072-8cc6-bfaff92dcb37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a86a8b6-86be-4c9f-bdaa-5925d5abd22a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1980c449-6764-47cb-8682-23f290de3b96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a05de07-6e07-4f56-ac01-8100defbeb4c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e95dc28b-4dfa-4899-b9da-9b99fb891196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15957fff-e017-47f5-9687-7d2372fe7088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd37657-4677-4b1a-acba-4e9f266006d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc754884-4ea1-4dc3-9793-a10593a04f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5fffbec-6878-40bd-bb83-d24e15f80a2d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaa7ab77-d984-40de-9008-95abed9d81b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4a5867b-9f1b-4e0e-b5df-733e8b3254f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff0b8186-88fb-496e-8e52-468979855919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8306876c-68e7-4a7d-bf0d-73cb5fdc2d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9d82a2c-7115-4578-8ab8-4c76eed2bca7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbbb8672-92fa-46fa-ad35-b492f3499a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41c20131-7b90-4240-a251-cb5027469c57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb0f7a46-403f-4528-ad86-3186bbc91d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9debdee9-8948-42e7-a220-56350f39693a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d61f076-091d-48ad-bcfc-62ae0dd4679e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b06fa5d9-daf0-4f1d-8f23-61801cd0800c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a9471ce-4552-491e-825a-6a42bc033e9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b28c89-19dd-488c-9e7f-3ebfd77e1e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b90a297a-b3ac-4458-adeb-8212797bb0eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8497cef1-13b6-44a1-b2f6-0a21cac1c3c0",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e72c3739-6ef9-46c1-9ba7-ffce47c9261d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8117948-15ba-40c6-bf47-7c970e28fb1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b44081f3-b563-41e4-91eb-13ec3ea970b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee300c58-5320-4e03-8fd2-781a68482924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "780f7a89-5099-4194-baea-a9fddc649cc7",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ce1ba9-1b2e-4e35-81c5-f206155151aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d99354a4-ee20-4807-8371-6ddfab34fc2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a11cc477-e038-4ec5-9a45-f591f25759b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4aafc507-3693-428e-b027-42c73c36299b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "823959f2-1b08-478d-995d-5493dd7baf48",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c8ddc3a6-c502-4215-bd6f-c29ac772ff08",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3907e29-4b0e-45ce-a0e7-81ead575364f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5658624-04d9-40dc-b5a6-5fcc63ac91d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f03eefa3-7a36-47ef-af54-436a992b7165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f14bc8f9-d4c7-4697-939e-1b9e5ec6859e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b889ad50-3852-4128-9ead-9ca6d7ad472e",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a68974c-c7c7-43d5-970c-231e503fc798",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "06a1b0cd-b10e-420e-bfef-9ab6955c20dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cea400e-b533-4771-be08-9d7ead655d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8f56c34a-aac3-4acb-8347-29c984497b92"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e8ca353a-6ef9-49f3-b8f3-8ab8a44e627a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ac6f9e0-68fe-4215-b31b-929dc775ca45"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4840013e-3708-4d40-919b-a15148d697ac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "774e835b-4643-4946-aed7-be7291245cd1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "febdba92-3fa9-4957-a97c-d19bd4ed48bd",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6cb2e91c-7d76-4775-bf8e-757ba1abe815"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "33dadf22-b70f-416b-87cc-8a993226b15c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "23037e87-8b87-4486-b50d-c8c18cde4662"
            }
          }
        ]
      },
      {
        "id": "405e3c8b-a0c7-4373-8c85-b10b1e2f2445",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "acc072eb-6ab8-4476-8608-16eb64a1a8e7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a85639ec-e04f-45e6-847d-6d5a424ebe89",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1f20ce6d-9031-49a2-8549-161fc7f0eea2",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad92fd9-1406-4254-ad31-9079665d83c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a64c3b55-f9a4-4c36-8cad-562913dc5b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f888d4-b170-4c8e-b70f-19792f647816",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff0ef3ae-e2b1-4fb4-98cc-0d3231d8d052",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "343cf22e-6959-4ebd-934b-f4df75c7f5e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74267871-36e4-479d-986b-af67905143cc",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c798f84-fd31-40fa-bb12-07f148050561",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "199b4ca8-40f0-43b4-a138-8521d9c526c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c91a0913-fc57-442e-9a0d-2c2261a1c6d3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64b99c9f-eada-42d8-9344-c9bd5907ba42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "587c13d5-5a4c-4ff6-b387-2b2ef36abed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d83ade-7ac3-4873-9da7-786210302440",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "add84c00-c1a5-43c4-81d4-3c0fb85c4d37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5eb4a48-4e7d-4ec7-8eaa-a6cac402a125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25651de3-5b24-49c7-a29f-4a19b96ad835",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b0aefc9-ef06-4e09-8120-5f671a26b2f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bdd1b25-1cc8-483f-88b2-1e7ded8ac41e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3eb27f0-caa8-43a5-b639-f1230dd0aaa1",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda119ce-81a1-451f-b949-0182c1bc862b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25f183a6-4c52-4e46-8068-b6d246a57294"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "322bf44a-edd2-43c9-a895-0115f63e0e64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ccb35ee-e5d8-4d97-8a28-7cea00236066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa07f23-7573-4d74-879e-124e779999de",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f56ce9-0540-4ff2-96fe-dff7b4c028b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b263dda-6f68-4751-9f0b-3de0439eceb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6af09b7e-20c2-4c3e-8d66-cfe2beafa5d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5157f89-85b4-42bb-a941-3eb93614ea80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2501bcc-4325-464d-bb13-f4128d22314e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a05ff7e-ae10-4708-b161-ff59fa3441b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "125ba760-4066-40c2-93bc-53f5e5789069"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "710849ed-c441-4b13-94ec-922e55e4fc02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df389f41-a755-4db1-9562-af4429825cec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "059d2120-43f7-4f3f-9fcf-fa3a1635e1a2",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7860527a-68d5-463b-a005-a4fa774e9e70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8853f785-e158-4396-88c4-5a9a7e269ed1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f4ca9a0-3d85-45cb-a322-61be943368c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5924df17-d17b-4748-82f3-ee27875817e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a42d92-405e-46e1-a8ad-5ef9ee200a5a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b01a641c-82b0-43dc-8696-76a1f8f01d62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c19fd43-4111-4a8b-9c37-a8ae011aa8a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc079a2e-6159-49a0-9817-d6b979394375",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f819223e-185e-40e9-892a-914fe8789eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa129c4e-7ad7-46b2-b665-289a10abc95f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e839b48c-6f94-469b-85db-065022144a2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d80f43f-a61c-4d1a-8ad9-c08e4f76a2f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf773934-46ed-4722-9f58-30d897eb786e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8087b69-54e1-413a-920a-ec3f581bdfe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4b38846-8a82-47be-b812-2ec2a692eee3",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a916c70a-40e9-448f-85d8-da7f2eb34559",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "864c6eea-4067-4e8b-8c1c-e6c3cb32957d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a4efd0e-c699-4f31-a472-ae4f279c0501",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "897dfdd8-ee2d-4c66-b20a-29fb2bba7834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "611acf0f-59cc-4cc3-ae17-82da1db1db8f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c59264cc-1a94-4caf-9c7f-c545e07712e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b0c3f51-c4c3-44f7-8303-28c087321d9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae8218e8-629d-4ee8-ace6-21e754922610",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "387b01d4-46ac-47cc-ae84-79173978b21b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0445e6a-25d7-45e6-8db2-cfbfe4a8d259",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "773cd9db-80ab-402b-9d73-bd3987534b04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37dbd62c-3f2a-4fba-b356-d0a6d46c096a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ed699a-c4ba-4e6a-97e7-b243541654a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1ff2880-525a-462d-bb73-9fecca8bb38e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90ef6392-0325-4feb-a381-b6536863f6ec",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1afc7b8d-7030-4d69-a009-3a15995ac42b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8580cc1-91b2-4a28-ad3d-c2fcf3cad661"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a31271e9-38ce-4685-995f-306c98475458",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75763e76-d863-4e02-87a6-09878a511db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58be3f29-6ba2-4b76-883f-11fef17e02d0",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe6fa04-2c24-4e05-988f-bb06686e8f20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59d147e0-0194-4a9c-a939-81b2b28de201"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "390c6255-f17e-46c1-b293-6addafc3fd10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de122a4e-0b6c-4753-bd9b-6abb4802d9c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8792994-ecbf-4b6e-8305-c4f88e85dc2b",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f062d2af-fd02-4ffa-a98b-f8faa08f4946",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9c2b89d-ba15-4e10-9da2-40c0ea7ffdbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f230f1c8-a56e-48c0-ba2d-2b70d70f0dc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db49eda7-b346-47e2-9c45-8ad51b1a3dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f9b69f-e161-494d-a7a4-509dddb956dc",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96496c98-0b9f-4cbb-b89f-07bd6d23e850",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "146c9551-e923-48a2-b3eb-61de3c2cdad7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7000fb56-68ea-4f1b-a7f9-817dedb03532",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74fe6cbe-297d-4efc-8b77-fb4e74c2fc5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d62b2813-09d3-4e52-ae4e-fb4ce090ce2f",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f48043ee-78bf-4688-a474-d858d4ce54db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b6deb60-6917-46b2-8ece-aeabf7039af2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b5ccb0b-eff6-4b40-a48d-e0eab51ebdb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23dc3da2-504d-4df0-99ae-d350ef088db2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54d26be1-1f5a-4e62-a794-71bfe1319b41",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "441d19b4-255f-4a3a-9ce0-2b51d8f46ebe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75d2b6bd-bbf5-4cc9-9387-764d52f7c9a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8bc8301-0afa-4225-99e7-eb4108b3c5c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6795e642-5937-44a5-8404-11cbfd5b5a0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3091f684-3dff-428e-ab4d-a84dbb2e7099",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "541e9a93-0420-492f-84a2-43d30b5f7420",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4edddc5c-4654-4464-b09a-a096ad82b34d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac36c23-c68b-40d0-9ffd-0016b0e063c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf536ab0-6463-48c3-b94b-475a021dd007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f6df4dd-f40e-49d5-8e6e-6d3b02c4e4a7",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12a592db-4ae9-49a6-a28c-f9aa1584e5e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4ac8e93-152a-457a-89ff-53afae544bc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eabd2b5-4ff1-480f-a3e7-55b91d93fab9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14e80c39-2195-4dd2-9439-4ffd0ea93a89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd8420a9-7b6c-4c4f-a847-e9dae19210b3",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4052a35-f3bf-4965-be5e-d913d31ea1d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac89f0fa-2fc4-4db2-af77-3f4f6fde1b0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f2cc51-2df6-4341-95e5-ac48d531abb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0f32881-16c8-423d-9883-f6dc1ebc0baf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74a9008-318e-4d96-9ef8-820481a28968",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c7adbc4-2594-49be-becd-78135b371285",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82d6ed02-b72e-40fe-994b-e7737b0d9248"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b5ce3ea-5bfb-47d5-a1cd-eb75b0fb5b04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd875163-8f84-446c-ac24-8dc10c64d635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf29edf-08bb-4bd9-a7e6-b30be2d3d3bf",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b114f668-813e-4571-bd98-41f89178d24c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd5f84ce-6a2b-4986-a181-f1c0fbb8728f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2abf4291-2a95-4e85-907b-4e168e342efd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceccd191-e3f7-4d0f-9cc9-70b4a6301ddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08cfc32a-1c30-43ac-a2c4-4db88bd5ec10",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7926142c-8120-42f9-b3d5-ffe5a00e03c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d576e7ad-974a-4b47-8edf-8b1f16d9a6a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56b725c0-4be0-4b43-b9a7-0d0d89abea11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed5c427b-6840-40c0-898e-09500bf60aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "588cd3ee-5e4a-4fb0-afc2-812bfe11e1b0",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f2d957-61d4-4661-9029-8cd450e8d223",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4b246ea-e272-4898-bc1c-fbaff3a9d820"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "999f9dd3-4ecf-455a-bfa2-a5c9b8fb41c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cee1d40a-6e85-48f8-8045-039f54c1c475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5603df18-5b8c-49d7-86ce-f1a4690ba2c3",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ed1b253-895b-42ef-80dc-c6c6cfc0dc91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0aa2d15-54b0-488f-b7e0-80d949bf1c02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acfaede6-dcc3-427c-af95-c179fa0726e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe9f0c8b-80a6-4cf6-968c-b8425aa39671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e982b1-c74e-4afa-a723-4342a8e3644b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aad4f08-f658-4d66-a928-c28406a1274c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f13affe-9ef2-4f13-9132-d8bc2efeb072"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33153bda-4548-4040-83a4-d740be568df2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc2f0f83-a120-41d2-82cc-9bfb7b50b3eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f17a01ce-5085-4b26-a595-c7e35414dee7",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5510a04-0f4e-4d88-b32c-ebad4edf32fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a64e2b0-8fd4-4167-9745-fcad50527bd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "974c96d1-df37-4890-8621-d876689ef53f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fc382bc-5ec9-46fa-89c2-9c30d5d090d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b966fc-060d-424e-b0f5-1a2d8975ffe3",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "745de181-dde6-486f-98ee-e616e75fe4d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f3bc548-a6d6-4576-85a5-15ac000d68ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b135f3-f5cb-4f0d-935a-876b7424e56c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dd6cea1-b9dc-497f-a8f3-bb130b884137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa4fb781-8a33-4049-94e6-9f7672f76519",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb2f6504-2bc9-4ffa-bda0-8d4bfd521d96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74864d18-2a49-4f08-a943-5157f8f4d0b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdadedf8-3124-4c5e-b229-4ba4b75aaddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6107af8-162c-4eb4-ae69-2f91623c0a00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5db732da-62f6-40c9-9e00-f35cac1c78a2",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e7bd930-8e21-46f6-8efa-e35db6f53c6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ddeaeb7-4560-464e-a666-f77bec90b1ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59fc5b5a-3a85-4574-81f8-46033a249495",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e236fad-c90e-47b2-84f0-ffea30bb8335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fbbf847-d408-4245-878c-aaf7323862ba",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f93bdb1a-e563-4344-a5e6-78fab5b02459",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "342e6011-b5e8-4513-b4be-b203cf269cb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c990248-f054-4079-8b11-249bf4ca06d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f25e80d4-6c67-4f9c-8c37-49afe132244c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ebb22f-3718-483a-ba94-5e6d83c39a01",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54087da6-09ef-4785-bf83-70a9ec178081",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49456346-39d7-4d3b-afaf-cb1ecd1cc003"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cb45762-1c30-4072-844c-d1a674fa0532",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4e54bfc-8048-45af-891d-4733ce031edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f477a04d-ff4c-476c-95ce-25aa3919cd2d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b0549b1-be9f-40a7-a725-510b0d062892",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c7e0ce6-631d-4449-b118-ecc4538ffcd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1906569-ee83-4efe-8e4b-7138d37ddaad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8adbb52d-16ef-4eab-90e4-10b7a1c126d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b0ffa1-0c30-4d6e-b50f-578b8d338f77",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f7b466-13e7-4f71-ae8a-0a01f203e80f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c0e7f75-bd12-481d-bc53-7ff6b9748dca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae4fc3f6-c82c-4256-8074-92a3695343d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcbfa35c-4798-4859-8238-1f5fb01b0cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4ca74d8-1fe6-4c11-81db-84b672d37b91",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d36259-e843-4618-be3a-e9fe1392b971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72e01f56-5a04-4954-97c9-0437535643be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2373134e-47e3-4516-bdfc-d344ab65ccfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30089884-45cc-4361-87a5-352c143f69aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "393940f7-df30-4def-ab91-672093a8a778",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2f4bde2-0556-4c9c-9d61-d2a974afc0f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0240b2d-3617-4314-bba8-940cb6b76f45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1509ab-0f1d-4bb3-b5d4-45182986d650",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9496edc1-c52b-4330-bb44-8771709c07fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5062a2db-ce51-4c80-b38d-86d3fdc61856",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a48615-b3c2-4681-b195-4ac972ef7f98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b4cfce2-8811-410b-ac1e-f2c7377579f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48961730-37f4-4074-8064-60f4215a6874",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c58ae23-21b8-4e8c-a04e-ca0e556179fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b52eaf-67ae-4b86-a588-8d2d3144a322",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b6ed45-0268-496b-83b9-441c8c92261f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94a7040e-c113-4ffa-a0ca-2ef6912c67ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7054db3-e687-4711-8800-e36f8899943e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef760a2c-9a59-4453-a2f0-3f519698daab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6566e53f-846d-48ab-9776-2280c0005eb7",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad5f7965-5048-44fd-81e0-872b018e1d8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddf519a8-bae8-4ea7-ac59-fb9d3839486a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dcb9d50-0d8d-4c48-a776-f2826acf2753",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8d4868d-e5d5-4199-94d2-fae35861bbb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c0496b-648c-4d4d-8e2b-743b7752fb65",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47e69ec0-7a44-4177-af0f-3636fd01157c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eeea2d3-dc59-4623-9bfc-ab55cf25461b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a62a2ac9-e0ef-4ae5-9325-1865c778dc71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b87547b-1382-4aa2-bb93-159b69b8d91c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ff8586-e8bf-47c9-89a2-11ae314f253d",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb2cbdb-7e66-49e0-b544-a160784c5c2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdcd5025-446b-49a3-979c-c3ab025483a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c781e761-8d1e-4fdb-8b25-52d8f1df3c34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cd2c6ff-1651-4068-8749-6d25a80c2f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dc7ff4a-7f01-4dc6-addc-64ade5b41111",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a44340-e9e0-4625-bbb7-5fe6f9f9b026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8789d291-bae9-4f33-a29b-6f0a6201a4d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55d66159-5190-48e2-b370-add115f6fffa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa850c47-efaa-489f-a82b-e1d3653fb8d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b05196f8-d813-4714-8156-78ac4d60aabe",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c426c3fd-a39d-48bf-a26a-851e96211b2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4e09b58-71f0-4ffe-833b-46267308c303"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ed856e-bfb7-4be4-ba77-c898e0fae571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb8141a0-6c65-4897-a140-b047ffb08373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb7f9710-6cd8-49ce-acb6-36d0857151aa",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2f6a28e-4154-4243-b1b8-1239b39ec42c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ec1dca8-da35-4adb-806c-f3eef6bfbb58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b91137e-28d5-47cd-beec-33011e7a7f78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2aa3393-41a1-4003-8c5e-3416b785af99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fe66d56-1f4b-4299-a3b5-535f7ce82dc3",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07dcae46-2799-401e-890d-b7cf5cf8d52c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10afb282-5a27-43fd-8dce-62ffc9005180"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e7ad580-7eea-40f1-809a-f397d356db30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12df56cc-d795-4af3-901c-caa121122206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74883bc1-45ae-4b7f-92a5-bcd43e814431",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bbc652e-98de-4f7e-8853-ae9cc1447431",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76d8e0b8-fc7c-4246-98a4-9b037c4a655c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92385e31-6b31-4238-8810-8b3043b10e2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07ff0788-4616-482a-b7c5-1f4919bc6aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdfcf703-b27a-4982-a39a-3f03775776c5",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad34b7f-dbab-4dc3-8ea1-2d2cd93beddb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2725334f-978c-41fd-a0d1-3e05394ba009"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "315fd4ce-8736-460a-95bb-1d2daffc92af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f86230d-2d4a-4ff9-89f0-e39da290167c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84646686-5487-4ba3-8e38-0f128905cd89",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d83a6d7c-514b-48e0-9200-ef6cb7e75152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df02acdb-65b5-4908-875d-362998c6d959"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4556468a-f927-44a1-9df1-d1b73d3a07d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5015dfa3-2bac-47a8-a96b-2fc8429c087c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d3d186-5937-4227-8d4a-984fc72357ff",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "443c5a4d-2b7d-4244-a731-d39fb5dc6d37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e034a14-9fe5-4991-b283-41170d09070c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f8ee560-48e3-4bdf-9298-b266c7a68b02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a7f92a0-d683-4ab5-acc7-56463d0b6349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5714f226-ac53-4716-aadc-47298facd685",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90825db6-869c-4f5c-851d-5c2db77c0829",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff082355-2117-4190-95bc-0253fd5cf660"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd869a84-08a6-4010-be85-c571ebc6e344",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd7b65cf-fa28-4591-ad8a-98679d9689dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd9810a3-8e12-49d0-acbd-e8995a301382",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32a361bf-6594-4ac0-977f-322ac7f436ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f5fffdf-fdf1-4ae9-b951-16b64a0c155a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84670fe2-72d2-4546-919b-7a473678895d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c2e6c4e-686a-4781-b02d-4e31071d0033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c91b1a4-cd04-487b-85d2-a3f0dfddb7d9",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6bc7a1b-4dd6-416e-b353-0d75d173f176",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49cb686e-98f6-49f8-9cf3-53947091e673"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "211eb354-0ca1-443d-9ad9-c3086e639c9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36d64a40-0a4d-457f-8d1d-3cff21b7d781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db20816-3451-4725-b94b-62b940790e89",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a4b8ba0-7155-4e7d-b434-813e4373d86b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65e7d88d-02d9-4403-9c71-f9f057837b16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef5fd7f4-1ed2-403b-8b14-e4f6fe056ce5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb8e2df4-20a0-4b22-8154-19a1a7d4cf78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "224a0137-6b9d-423d-89ff-6565b9362ab9",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b0e249-371b-4577-9962-f03d65dbd44c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "129a4c75-60a4-4578-92e0-098f428c57b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b0001c-9e56-4a0c-9bb4-08ee079c0034",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14f541a6-6a13-4d04-bc9f-050b1a8f6315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a37021-61ee-48e3-afe3-6a841e59e583",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b612cd07-baf2-4065-aeae-f113a9621671",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2545748-4394-46c6-bf49-91b1715c34c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11eedacd-2491-4ea7-9fc2-5840419856b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "377bca21-2fc4-4b3b-a2ea-4f38b2738d0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "631393b9-2caf-4a3d-916c-54027dccaa2c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b847de-c79a-4eac-8cd4-c7189fc53c4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eec84b60-3a36-475d-8446-f887b9f109e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e328733-0804-4e5e-94ee-750c1c0afa85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3060af06-72f0-4772-924d-a40e9858c0e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75da73fa-e461-40e5-8692-b80e9117630a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "657409e9-2b69-4546-aded-d3937865d879",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cab7ed60-6fe7-4fb2-b722-0d74ced7af34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fffbb0c-7d7d-4f6b-ab52-e560085387c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d6c79d4-dbc0-44c3-adc2-c0e004aba9cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb2a4980-5c31-48d4-b4e5-3d5b84717735",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d88471-12dd-49b3-8094-ec923d0f119e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "664d870b-0d15-4a7d-8acf-c40ef61d8759"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd90b20b-44cb-4261-b8f2-e56c2d352132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a269568f-d131-42ab-bc40-6efea996590c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d6e8f12-04df-49e7-8af0-f63f40545812",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1336a3ce-ec0d-4b1b-8992-2efde8bed7f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54c1a904-d96e-47e6-aa54-ec5a21d7356f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d385833-5b19-4432-b982-ce070703cb6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e583bd3d-7701-4a3f-a3dc-589d11f3f79b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e1721e1-499d-4670-94ee-33827e732f46",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ec04de2-701a-499b-8a4b-69a1c7c1deea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "515294ef-45e3-4ece-9c89-4e87ecaf8b27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b0cc99-8f62-47ce-bec0-b0c16713726b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7150429a-8202-4612-91d7-701ede53843f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1517b393-670d-4fb9-9923-c2d27691b671",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a62ab02c-142c-4d92-a5e2-5e109a1e693d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb89c004-0bb3-44b1-9790-f17f408c24ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a229c291-5f55-490d-8747-f21d8d02a64f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47b9cba0-564d-44e1-b315-ae537c613ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a11a476-ff65-4540-8e33-f7c46ae54b33",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3748417-62b0-4e39-8f3c-f15711cf3452",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa8ed8a1-a356-4c6d-bf2b-6bd0714e2666"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7a39117-cd62-496b-af48-f97caa329d21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3483d5f-7bfc-485a-bc89-a3f31de4b878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19ff016e-d016-4504-bbec-544f994fcf11",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d2ac913-10f4-4a52-ad67-3d4877a03e3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "269623a7-9f71-4601-ad0d-4675cc7ef4a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4843e9d0-3dd1-483f-a245-5ade1607569d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d924b5e-610a-4060-bcb0-fd2efc5d2fb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48b35ef0-9a1e-4303-acf3-6308a5350c2f",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb880c01-1e3d-43d4-b88f-4b8a10007398",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "093538fe-003b-4aa6-8e63-3ae2e3f56803"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9396339a-bd39-42f7-9399-997d4ea5627b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8cc1a86-2c07-404d-9acf-edf69c22383c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e5634d9-c30d-4009-90ed-2919dcab152f",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f84d0da-b027-49ad-8ebf-3c819ddda701",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b037b5b-7b3c-41f8-8633-b521b2c4437c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2cf7d49-34f0-44a4-b079-23652486280d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9468e565-bda0-4f23-a656-e71a2a3f4518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f5b71c3-e84c-4267-b48f-ee6e25968fd4",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "147d9d7e-f5f5-4371-8456-4c5ff616de42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26e42942-a156-4166-b839-10259f2b1780"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94d196c-d2d1-47c9-baa0-c30c5758ac06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c551b57-0d8e-4e0c-9e9f-6a56880d4ab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3263d4-f341-470f-b85c-c466daf4fc77",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9329d545-8c2e-4160-9c07-75cdbe06d253",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b0dd904-8f1a-4784-8faa-5a98f64819c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f14a7b9b-f97a-4857-9a16-942429f6177f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8119089-9256-459b-bb98-7f7ecdf3c588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca1017f-2ef5-4ca9-99b2-e80ec096ee20",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee8db71d-9c92-47aa-9849-cd43017d1437",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50c9d46f-6a43-42ab-805f-6761e1968e7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2577da5-8945-4cfc-aef2-9a53de582b45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82281680-205e-4f12-bb01-77c060ffa69a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6805dfb-9b22-4252-832f-9eb294e6201d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee7bd250-9263-4ce1-a209-2281a1ddec32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85092ff6-cd40-4a60-85d3-81d6a2211f7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc6d3566-9a5b-4d9b-b70c-35bf50cebffc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "467ba450-6666-4c5c-a340-7c5be84486ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1416cca2-cb8a-4dec-8b92-7bd01bc7558e",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88846339-6938-43e4-b8a7-d822f3445d40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68e9124a-ae3a-4288-8a58-c24338e81177"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f844a4e-c077-42e1-abf1-013fb7e04892",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49f27b7d-54f7-4c06-bcc4-4cf28a320867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc58e45b-f18a-426a-87f9-527dd070aa02",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f74af1ad-9eff-425f-978a-253c1b9d44e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e20e5e7-8af6-4a39-a2c6-20b1176e6d7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "049ce332-191c-48b3-a503-0f548edb5bf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9073d48-bec9-4395-9fec-c251d56a9be7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d737ce31-d86b-4357-9928-a74d8e184912",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce42966-02ce-4e00-a9fc-5a43a3fcb416",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0502ae0-8fde-4787-98bc-341e9ff9d870"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de534cb4-bd06-4d51-bb28-94eb0e327586",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6e8bb48-99fc-45aa-a2be-92a862f5a3c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8640a1b-0fa3-40e7-8180-e96a41730c14",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c92d172a-2f15-4c7e-8adc-0226676bc9ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41d3af0a-2456-462b-aaf9-4a52b0fa6df3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82d25979-6db0-42c7-9bf8-e1e5cd7d5a97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3bf85f2-67fb-4cc7-8e2f-a7e85f3cd8cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b93db81-7b2b-4117-9d74-581abc997d26",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe5c1fb-1359-4cad-addc-fabe1f15450d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d686fe8b-d0cc-46c1-87ec-da4e4ea7adb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d35070b-03bc-4222-94b5-5e45833a9fad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adf887d4-fe5b-408c-8ce9-d47f6a8eef1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e84622c-a304-43da-bb45-03030f5eb69b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dae75a2-1696-4b46-b9eb-f6abdba608b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48532e57-7458-4b68-88ee-ab31b081ccf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbdec616-4a1a-48e7-952c-e81bbe8cbbdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf1833ba-e0cc-40dc-9825-f9176a55402e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a6ef9c8-1baf-45e4-80d9-6d478a4ae805",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ebfb23e-7a50-46fe-87ae-91f9035729ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6eb4cc34-084b-4c2a-a78a-fa18a3878242"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08e9e47a-2d22-44af-b380-afe633f4e6c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0562c9c-d848-460d-b95b-3f52c2a00e95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "272e236d-c70a-45c4-b872-f5a9815a8cd5",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dfc83ea-7470-4a4b-b547-5a75a7a88654",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90aae725-0e63-4981-888c-78aff4f4e67a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0a9c602-02a8-4259-bdd4-1c195f2bdd7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2f04d84-c594-46be-9a8e-680df87c22a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d93a3f84-58a5-46b2-a747-d80f9ca62266",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e0034c1-5f92-4408-93e1-24dc98a3de6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13518c03-d2a7-4143-9dce-c9f44a6d1f1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e731baa1-61bd-472a-8820-8a9d0bbe47c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c07380a-630d-459a-abcb-828fe3ee36c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8748f55-f230-4594-b680-a3dd441b3769",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77995e50-7276-4bdb-98c3-cfe207dd1573",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d06fd6f5-d24b-4a95-ba78-3a4e90261be4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7751e75-bc27-4bae-b8fb-4ac545b1e467",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08414c32-67ea-4fdd-8bc6-5c92bdc2661a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8952bb39-a9c4-4442-a1e2-ad0b790e4d07",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e6b578-9c94-4a87-a72b-94732456cea2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "996c93e2-0c98-4860-ac19-03f24c7f4fd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef934c70-2b91-4436-afa8-c6b782bb40b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a131248-e088-4046-a1ed-7c3c57777ebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df633f5d-5f99-4dac-96d0-05a801aa3180",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26b192c-1eb9-459d-9e01-4502936f6d0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b86df73-c3f9-46d2-9835-64639cca7cdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fac7ca9-0314-4ffe-8e3f-2b474b7e6103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32c828b6-298f-41a0-aaf8-df4c0db39f7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35d0498e-5686-4720-b872-67aed04f561a",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af7dfbee-8a40-4e11-a6a4-d15b56de09cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60fce45e-2b12-47ed-8e39-483f194de02e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a369f9b-f565-4766-b5a7-6d5f9c5b15b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4af3e97b-9c01-425b-be2d-f88dcc9fde8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93fcd50b-664c-477e-92ad-43a04b862d30",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e22c5e97-1c4d-47b7-955f-b7721c95544c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a69cd35-7f59-4ef0-9ebc-b678497eaf36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bc97aab-3e0e-4e9e-bf62-37f9ff2590f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb5290a9-8a68-42e8-b6e9-0c6f61707d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a41d40a-b7d5-4ddc-bf33-f83d368ce838",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba2d97f8-afc8-4162-ace3-e7d3cd897380",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f6b8634-4d34-4455-a3ee-e91fb57f43c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "638d4f4f-9d6d-447d-9358-03252d9ff367",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b28e136-bb8f-4c15-88ea-9ba5e227cbdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a573670-fc35-426a-a54f-6c7cb1e81090",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13a42789-c78c-4a82-894d-36e9087c1f3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb584e30-5508-4786-843c-9b67bcf0e79a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3374cdf-5ddd-4050-a309-2123960d5c88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fb0bdad-5d19-4ce4-924f-c5d8c7139ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5775206-8da9-48de-9d96-9b0f89b99115",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb05a96a-eefc-44a8-b2ff-1f8901fc767f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcfb5bd8-a85e-4723-9a1c-eed3652c77a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6500ae88-9ee8-4357-b384-18573aa33de3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "061a68a2-9428-4ff6-b038-d578225a7240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a8d5a0e-dd7a-4c01-aef0-5a881e117ecb",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9875a6c-b672-4b8b-8fad-d16974cf6961",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0235ff78-c7d9-4a20-adf9-22ca2e7282e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd4ff6af-5b69-4106-b8d9-dbea21151328",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1f362c0-b046-4fc5-ae7b-52f1665d4b54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a883f1c-8693-449d-b196-3dc3b38c2a5a",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79942ce1-5f0c-47d9-805c-ff1ad6da7711",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8718fa36-cbfa-4f82-912e-9ec98c1b9944"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bbc0459-9f46-454b-9c5e-73eb4c7ffb6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f7ec9e3-e8be-4ac5-8a76-58a0ca2fb5c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c012a088-48ba-4941-ae69-0d817353d01e",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef3921e-f0e7-4db1-8a18-f3ccc4a7fb25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be7318e7-48e4-41de-b133-f728d4103162"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a1fc479-3312-415c-8266-9f0a622b6835",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "652eb105-1b30-481d-bc5e-aef3e66d4bcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "305ffd14-e3af-4389-bd47-061e7e904381",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cadc85c-2e5c-42d3-903d-83affcfa4ea8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15dadc9a-1f20-4faa-9ec0-db7130d5c230"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f03abb25-6a87-46a7-a965-52e006eefee4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a775a25-bef3-462c-ba92-c684992f0fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d23a3ab-3672-4093-8487-53650f5f1d5f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cfc238d-79a8-44f8-ab19-b60c54afb019",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10d04836-600c-4a33-8776-363b4efb06cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3346783-c6e0-44a8-91fa-deb4aace700f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01b53863-a6a4-4286-9377-7edc20ae686f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41e3264a-7d72-406c-a291-12d5e59d987c",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f083d835-826a-40a1-8e63-3ffb0b84ce34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c6328f6-da0c-495a-a601-f50025181a03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6233912e-9278-4bb7-a51a-6b7085ecb807",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "266715d2-7fda-48e2-8ba6-a37dbefc4428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c8ce2a3-f9a7-47cb-b751-596b63680bd0",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f62d701-1ce6-4b4f-b5c0-7b9ae2ff50b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4e04e57-cec1-4c60-b1fb-908f3d0a688c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c57d3fba-f773-4706-b3a4-c1c8482ad372",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81085daf-96dc-414b-8092-0507fa8e233a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c95939a-9c9d-46e2-bbed-8afd7d1df04f",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7b76c3e-e6e4-44cc-8081-aa8cb3b46a14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c477836-76b7-4882-9a0b-7a4f2213c2c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a4ead93-43fc-412b-80f8-ba2233f9d3b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d577a6c9-bfb2-49ea-bad7-a2410b88e9a8"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1558d25c-a651-4867-adcf-f65870341c6a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76014d76-0869-4ce3-9f43-326456121428"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9603acf-8fdd-49de-aad4-46e28b87ef2d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c9e97980-391d-474c-ad76-1bb142fc7992"
                    }
                  }
                ]
              },
              {
                "id": "2096bc41-83dd-437f-befc-611a9b9fdc75",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bc87ca04-d5b4-469e-b98e-d0edd2a820a0",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41dd298c-848a-4bba-8bb8-5fa51cc68754",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0964ac4b-8770-4eed-bb16-0f3b921f9f95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63d76ce0-6fdb-40ac-8eec-06a4e5158e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "670e07aa-4b64-4eff-b7cc-122bb1db0f2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2869cf26-522e-4e75-96a6-5803c700f05b",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d8bb99f-0a86-44c1-924a-dcaba1390cb2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "20c72344-ae87-464d-8473-a139b7483826"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc0bac53-bf84-4d88-ba67-0d6f4f6abf46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "13d1cd2a-be2b-43c3-a6c7-863d56964078"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "570b5d34-9069-4e7b-a42d-bb2d1edb2ab2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "806d9a75-ee51-44ab-a5a0-748122e89be8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a176043-4435-472a-9ea8-bdc6d3eb83e3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "69fcfaf1-dfb0-4f3e-882d-4cd58b89ee67"
                    }
                  }
                ]
              },
              {
                "id": "f1f96d00-3fba-43bc-ad0c-c23b6d0116ca",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "def8040c-4840-40da-9895-25a5f0e14685",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ec32b5-0146-450f-8235-2fdf1a0e9deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "9afc7886-d4a1-4b24-9b7f-060fe01e9bff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46fdf694-5154-45c6-82bf-fc50723e4281",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fa53b8a-5d08-4014-bfa4-f97bd7b3f42a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c5662c07-40b4-4c13-93f9-3aaf08548a52",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3d47f3d6-9872-4183-a174-a85107965a1b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9fd45fa0-f1c7-4fa5-9892-470366613ad6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "57b5ee49-782c-40cc-9208-bd6cf7dfa606"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ac48fda-f16f-4f77-bf41-4e6cb7afc540",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c6d7c38-1f10-4f45-9e07-1da3e0927259"
                    }
                  }
                ]
              },
              {
                "id": "8708e7b8-8450-4e62-b023-606e2c58b98f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "453f81d7-62bd-48c4-be8e-075c92fe9b53",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8ed00755-c14c-47c3-a5f9-5bd2c1e7167e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b40f8bff-3159-4d81-a89e-d719b5338581",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8aadc25b-46e8-483b-8c10-216ab3e94b95"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5f08591f-ad2c-482e-9ea7-a03ebcb4481a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "88103759-622b-4e9c-8e85-feaa2b31ac40"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e4cbaeb3-df7c-42c1-841b-f79c81387544",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b9b3757d-1a41-4aca-8659-97a7d4b48508"
            }
          }
        ]
      },
      {
        "id": "fc03370b-3acf-4651-9847-52f13f9d6acd",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "65f4c462-7742-4054-846b-8b018bedc0ba",
            "name": "Negative Testing",
            "item": [
              {
                "id": "946a446b-f75c-4f6c-9739-0eb1a0ddee8a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "43003d40-a740-474e-9a4b-5802ead24e19",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f504b4d6-9d3a-48b0-bccd-b05383431a78",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "37422b0a-4129-495f-8435-9f6db531be3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79dbc0e-ab99-45f0-a8e5-aca79217d2a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e6b3a3c7-d59f-4687-98da-b619cf3bd35c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49da17c9-8510-4c5c-9953-6044527e7d94",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d59fadaa-1ad8-4764-9f80-58c7df22c185",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "59cb4627-bee4-4343-b39e-9b7e2fd1f9c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b803a8-5607-47fb-97eb-49d3d6689e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8248c7a8-b812-4c90-bc14-987af7657c50"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e97c768-6f00-47e9-a4d7-131199d05c9b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a4007619-32bd-4849-9643-9073c6cae557"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "402cee6e-9d78-4c77-bfed-4b46bbcbf955",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cf38be21-ed9e-4ab1-ac04-ac6481170d16"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7df52eba-d7dc-466d-a147-7e2aebc1df8a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f86c8a14-8953-4720-b161-3a39a0b373b4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "03ffc6e5-1cc4-4588-b4eb-b17bc5f126ef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "71e0e413-62ec-47a1-90c7-bb333dbda96a"
            }
          }
        ]
      },
      {
        "id": "92f9c728-6a64-40d5-bc1a-21a2a0ce4b0a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "aa0e9602-aa07-425b-a1e3-d0ce478411d6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ab0ee62d-ba8f-46eb-a977-910b9ea3a820",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6a9d1604-5a75-4c69-9f7b-aa5a8b89d558",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab3af12-f032-4adb-aeb2-137342f66797",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "eb23d400-f613-4286-bbdc-43289bb1aa3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7097f685-0893-45ce-8fb8-05bf03c87e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ecc2cd26-e702-4167-b838-e798ef4806f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb844805-489f-4910-bd3b-833c70c1247a",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21de6e31-2024-4e51-9c8c-d63d2e16ee21",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "030a1853-028a-4ff8-ab78-789dd99cc1ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6922f58e-7e23-40f3-80a6-7e1020a192e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bcd76f87-61ff-4648-9129-75be7853f9c4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "455c98d3-2960-4f5d-ae9b-8878f41d2236",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55a9878c-d424-4494-a0a1-88d36c98a972"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e95af811-81b5-418d-8f07-fefeebae3056",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f73547c-36ee-46a3-869b-a93097b6c096"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3eab73e7-de7d-437c-a43c-d0caa662db58",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5eb8bf16-ba23-4f87-8b69-6fceae23919f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9b886ede-059d-46da-88d1-09c491001e46",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6b3bd70c-121a-4bae-88c4-658ccf9a57ee"
            }
          }
        ]
      },
      {
        "id": "9fcc91d4-9a0f-4e08-926c-878dd3d4f8ee",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3ec34f39-d506-4f1f-9ac1-e1af480224f9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5f29f1c7-56b8-4bad-af44-4f9527e42e3a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "832f6f89-2337-4b81-9a34-0f1ac1e81d35",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff420f65-2275-4fe9-a4dd-797237d9e72d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "54f53a0e-e836-41b5-8ba0-975564c2ad28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae2edab8-537f-48d6-a42f-42f98cd94ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "24d63e21-ed11-46c9-b041-4216674d38bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0777a079-3246-4d95-b4a5-55047fc6852c",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53d520de-8a79-45b0-8ecf-09614e71ed57",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1abd1736-f818-4b23-881f-cb185cba3456"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d24b1ba9-3ccd-464d-9976-034d1bf729b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "47005e96-feae-42bd-ab5f-916f32cb8f19"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58a5ca1c-7e0e-43d3-9fc3-87b8896bd09d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "61604733-d31b-4c30-8224-89071a9f6933"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "239348da-2898-4f63-a682-b32eb9ffe3f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9df2687d-47af-439e-92df-add0ca61c664"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "19257080-d73f-455a-8cc6-435c36adb1e0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0cd52a0a-e99c-44fb-a0a8-8e0e203db8a7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8c232794-9c35-40fa-8a2f-8408f9e6952a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0bd55f59-547b-4835-a3d7-7fc5ac5ed1bb"
            }
          }
        ]
      },
      {
        "id": "08e66747-3f72-4c91-9f9d-422257a972db",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e8e68296-108e-495e-a022-af73aeb768e5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a386d379-a400-475d-9921-e08f4012bc4a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "3ba0cc3c-1009-4211-9c09-427e5dd09e34",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f85eada4-4378-40f9-bd5a-352fb05ac66b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c4f12b15-380a-4392-9e13-0697e671c78c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1917,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 515,
        "pending": 0,
        "failed": 49
      },
      "testScripts": {
        "total": 963,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 954,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 271.5577027170099,
      "responseMin": 9,
      "responseMax": 6216,
      "responseSd": 740.8769665425323,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1676594641255,
      "completed": 1676594722566
    },
    "executions": [
      {
        "id": "028ee250-7629-4030-9254-f9e9bfc6cdde",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "90dba2d1-0be6-4965-a961-015a340782cc",
          "httpRequestId": "eb462843-b343-4d5d-bfc6-b229f79418bd"
        },
        "item": {
          "id": "028ee250-7629-4030-9254-f9e9bfc6cdde",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "8ea07988-5bd8-4d6b-b258-7a63c2908f2c",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 0
        }
      },
      {
        "id": "a36f8a34-4247-44f7-94d8-5a6ee0327c0d",
        "cursor": {
          "ref": "b2884880-f5eb-42e3-bea4-a423a9081f96",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "09874fdd-d0f9-46f1-ae11-1e0c71ea276a"
        },
        "item": {
          "id": "a36f8a34-4247-44f7-94d8-5a6ee0327c0d",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "aa688638-88a3-42aa-9b9a-b0b83a576268",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "a4d57ce8-4d0c-4c07-9374-9e27e0e3b908",
        "cursor": {
          "ref": "811e3103-60cd-4c87-8966-27b881dc0774",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b0c8612c-f5be-4935-9bf1-a03c682c0b05"
        },
        "item": {
          "id": "a4d57ce8-4d0c-4c07-9374-9e27e0e3b908",
          "name": "did_json"
        },
        "response": {
          "id": "570db81f-0b74-4344-a65d-e0caa788268c",
          "status": "OK",
          "code": 200,
          "responseTime": 469,
          "responseSize": 1290
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7d81c9f-6ec0-4b07-af62-62c206bb3e36",
        "cursor": {
          "ref": "110f90e5-9708-49c4-8916-37d8b5385138",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5295d001-1caf-4aee-8664-ea5f49dadcb4"
        },
        "item": {
          "id": "a7d81c9f-6ec0-4b07-af62-62c206bb3e36",
          "name": "did:invalid"
        },
        "response": {
          "id": "03b27444-a7e7-4e33-8fe5-12a3a4b146ca",
          "status": "Not Found",
          "code": 404,
          "responseTime": 461,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "a7d81c9f-6ec0-4b07-af62-62c206bb3e36",
        "cursor": {
          "ref": "110f90e5-9708-49c4-8916-37d8b5385138",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5295d001-1caf-4aee-8664-ea5f49dadcb4"
        },
        "item": {
          "id": "a7d81c9f-6ec0-4b07-af62-62c206bb3e36",
          "name": "did:invalid"
        },
        "response": {
          "id": "03b27444-a7e7-4e33-8fe5-12a3a4b146ca",
          "status": "Not Found",
          "code": 404,
          "responseTime": 461,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "b23c0e8b-2124-43e5-a45c-c52fe016f3cb",
        "cursor": {
          "ref": "359a6103-e158-4e6c-bd79-4563dff0fbae",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5fe554ab-2512-4ca4-9688-5c9c52ae072a"
        },
        "item": {
          "id": "b23c0e8b-2124-43e5-a45c-c52fe016f3cb",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "69158d6b-f93d-4595-bc8d-6fec0d3f24c5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 63,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "153a7ca2-1733-4ac8-a946-a69d7180105c",
        "cursor": {
          "ref": "ae47317a-7301-424c-8b14-a30c89b36ff8",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "25f30bc0-f090-40a1-be8d-e9cb1ce0356f"
        },
        "item": {
          "id": "153a7ca2-1733-4ac8-a946-a69d7180105c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "15e65f23-81f5-4b97-a8dc-2f0e080e1f8d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 68,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07d50071-87c2-4497-93f2-94675c81613f",
        "cursor": {
          "ref": "d9a44c64-5723-4075-83a5-150f93cd526b",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8ba2e963-d3c9-4b5c-ac1a-37cdf213ca78"
        },
        "item": {
          "id": "07d50071-87c2-4497-93f2-94675c81613f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "72ee622e-7068-403d-b6d4-9b08dfb3b9a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "0f3f5fd4-9fbc-4849-aaac-43583cfb8a2a",
        "cursor": {
          "ref": "f75ffc9b-34ff-4b2b-8245-937946186607",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1dbf550d-a5d4-4560-9e20-44f768468d86"
        },
        "item": {
          "id": "0f3f5fd4-9fbc-4849-aaac-43583cfb8a2a",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "6599f1d0-6857-4d11-9100-556f72260074",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "0f3f5fd4-9fbc-4849-aaac-43583cfb8a2a",
        "cursor": {
          "ref": "f75ffc9b-34ff-4b2b-8245-937946186607",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1dbf550d-a5d4-4560-9e20-44f768468d86"
        },
        "item": {
          "id": "0f3f5fd4-9fbc-4849-aaac-43583cfb8a2a",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "6599f1d0-6857-4d11-9100-556f72260074",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "e4e6ee2b-e078-4f89-b65d-433756febf28",
        "cursor": {
          "ref": "072b8556-b26f-40c9-998d-b1c39fe0436e",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "95f94ace-e922-422a-941c-d6ca37b97030"
        },
        "item": {
          "id": "e4e6ee2b-e078-4f89-b65d-433756febf28",
          "name": "identifiers"
        },
        "response": {
          "id": "9bbb57ab-e04a-4495-ada0-63b75cdeea4a",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3752bba-ae55-499c-894a-6430eb9ff6ab",
        "cursor": {
          "ref": "eb21e578-04a1-463d-9ee6-510a1e2e06cd",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9abc6fbc-240e-42e6-9e4e-937638479a41"
        },
        "item": {
          "id": "a3752bba-ae55-499c-894a-6430eb9ff6ab",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f3e767a6-c75b-4736-bd67-004674980148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3752bba-ae55-499c-894a-6430eb9ff6ab",
        "cursor": {
          "ref": "eb21e578-04a1-463d-9ee6-510a1e2e06cd",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9abc6fbc-240e-42e6-9e4e-937638479a41"
        },
        "item": {
          "id": "a3752bba-ae55-499c-894a-6430eb9ff6ab",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f3e767a6-c75b-4736-bd67-004674980148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21841a02-948c-4ae9-9733-a12961e01e93",
        "cursor": {
          "ref": "959845a8-2fa4-4b3c-b2f9-2d779c318442",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3616bea0-4195-4342-b026-3625325b3e8b"
        },
        "item": {
          "id": "21841a02-948c-4ae9-9733-a12961e01e93",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "5bbe4875-2330-41e0-b3a2-2b263b0b4c29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ad2bfc-89fe-4663-a94b-d1ba927d9610",
        "cursor": {
          "ref": "d7ab9eb4-4e18-4889-9587-63c4d7707db9",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a0bd21c9-ed67-4891-a505-0b9b06b4a998"
        },
        "item": {
          "id": "a6ad2bfc-89fe-4663-a94b-d1ba927d9610",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7df89d25-c71d-45c0-94a9-229baee59eb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9815c09d-f152-4c93-93f1-e687ae31a21b",
        "cursor": {
          "ref": "47716778-1262-4bfa-ba02-b7bd70549c50",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d2d85448-d1c1-44df-8045-286ab7b28c6a"
        },
        "item": {
          "id": "9815c09d-f152-4c93-93f1-e687ae31a21b",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "1b7692e4-c12b-4abf-af26-40350ad8fad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16f9464f-8f39-42e6-9e17-a2b0b8871d36",
        "cursor": {
          "ref": "f569dee0-85bc-410b-9355-eb6ab8e12494",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b31a3253-df46-4865-b2e8-6f85af58ff23"
        },
        "item": {
          "id": "16f9464f-8f39-42e6-9e17-a2b0b8871d36",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "10bac56a-c957-4807-b90b-7bfa795a6d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f21aa24-0b3f-4f3f-9f2f-f498fd619417",
        "cursor": {
          "ref": "d8932481-2962-45ef-819b-9dfddfbed81e",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e6dc7b87-6548-4644-8a06-3fd1f84f99b1"
        },
        "item": {
          "id": "9f21aa24-0b3f-4f3f-9f2f-f498fd619417",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "2f2bc2b8-948b-46be-b6c0-d72991b6f28e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "780f09f7-5144-48d9-bebb-f4ccffd95d31",
        "cursor": {
          "ref": "e24183bc-4aee-40d1-90b8-6dd8c82a23c5",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "94683999-e52f-4180-9ba8-0fbc5b7c1beb"
        },
        "item": {
          "id": "780f09f7-5144-48d9-bebb-f4ccffd95d31",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "132c0244-f46b-491c-8467-d38f6dc6b10f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "579b1216-d4fc-40a1-8439-73050ebb0f4a",
        "cursor": {
          "ref": "6071f39d-3722-4be6-b3ed-3773f46f5d0a",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d14e11a4-dd42-4d55-ad21-14df3774f1e9"
        },
        "item": {
          "id": "579b1216-d4fc-40a1-8439-73050ebb0f4a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "c86a4033-fdaf-4266-a1bd-c15f9ec1f5fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78789008-79c7-4694-8d40-cbe5f10a37bd",
        "cursor": {
          "ref": "35369381-46d2-4a76-a6ba-b093d9d25d58",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "480e0ebd-7d31-4793-9185-8e03d34c4f4f"
        },
        "item": {
          "id": "78789008-79c7-4694-8d40-cbe5f10a37bd",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "70ef3183-ca81-48fc-9eb3-747589dc1f70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef86b08-4a85-4acb-ae4e-e6dffbb4316b",
        "cursor": {
          "ref": "d5e7634c-f066-4279-a2be-bb2bc6edd724",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a1400e2a-edad-4268-b206-3baf088a6c91"
        },
        "item": {
          "id": "8ef86b08-4a85-4acb-ae4e-e6dffbb4316b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e238b065-ffbb-4341-b278-d842fdffdf9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02f2e2d3-36f3-4df3-9c96-3b36cab2e157",
        "cursor": {
          "ref": "db60fd57-dcef-4ff3-adc3-127c4c0a4626",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4cba4b00-8fe7-479f-9860-aed4be1646b0"
        },
        "item": {
          "id": "02f2e2d3-36f3-4df3-9c96-3b36cab2e157",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "48afb582-8a9e-477c-9419-90b8d04f2aa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fd93732-86bb-446c-a6e1-c77da79ee69f",
        "cursor": {
          "ref": "3f61d11a-4b12-40a2-8d4c-75afeaa45ca4",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9ab68fd8-b81b-4740-a2a1-b3be78415b80"
        },
        "item": {
          "id": "2fd93732-86bb-446c-a6e1-c77da79ee69f",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "525f53ec-a7ef-44eb-ac78-c644b7b693ad",
          "status": "Created",
          "code": 201,
          "responseTime": 612,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "71789ba1-34c3-4ea4-95ab-1558395f256f",
        "cursor": {
          "ref": "0ff123bb-5d8a-450f-852a-f127c7be395f",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8183b016-ea75-4da4-91ee-f40cd5ce95b1"
        },
        "item": {
          "id": "71789ba1-34c3-4ea4-95ab-1558395f256f",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "9151cc79-8c08-49ee-b82a-0ce6129ee82a",
          "status": "Created",
          "code": 201,
          "responseTime": 4615,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "e19f8023-2d64-4c17-b079-9ae93820ae7a",
        "cursor": {
          "ref": "fc144aeb-fa40-4a50-9668-51ab158764a5",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f36ca141-499c-4418-8d03-c374616a6349"
        },
        "item": {
          "id": "e19f8023-2d64-4c17-b079-9ae93820ae7a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e763475b-f87c-4b8b-a69c-151eb6908733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "010c5466-f435-4c8b-9998-212dde3b0a2e",
        "cursor": {
          "ref": "11a9f19a-0f92-4ef0-98f2-58d03e27932e",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e5557cc2-bdbc-4198-bc19-fd64a41d46f3"
        },
        "item": {
          "id": "010c5466-f435-4c8b-9998-212dde3b0a2e",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "8c3cf958-80a7-4c28-8560-86157b0ebf85",
          "status": "Created",
          "code": 201,
          "responseTime": 2612,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "6e7fe3d9-1c7e-482b-8f67-89a95ba153ee",
        "cursor": {
          "ref": "bdbc397a-9920-4c1f-a923-d810f4ab5c1e",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "90f7e233-0587-41f0-9973-c433962e4647"
        },
        "item": {
          "id": "6e7fe3d9-1c7e-482b-8f67-89a95ba153ee",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "67d9c06f-902c-46fc-bb1b-4921ff8e3f48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "332ca0a9-1610-4e98-bd67-dd9754ef44c2",
        "cursor": {
          "ref": "61fc65b1-a7d7-4f5a-8664-d1ba4b86d692",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "a2d81443-54ae-4e17-8db7-eb657ffc525e"
        },
        "item": {
          "id": "332ca0a9-1610-4e98-bd67-dd9754ef44c2",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "1ed14da5-61e0-4ac9-ac88-d9874e69a09b",
          "status": "Created",
          "code": 201,
          "responseTime": 2126,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "50fa7634-6adf-498b-9ef7-7e92dc353799",
        "cursor": {
          "ref": "0703c93f-6f9e-4ce4-a431-c4941c90a613",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c8bdc0eb-bb32-428c-8c3e-1eb44c26be84"
        },
        "item": {
          "id": "50fa7634-6adf-498b-9ef7-7e92dc353799",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "03783e70-841b-4d0a-8b2a-ba4697018c67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d84e2ac-12de-412e-914b-88ab386e99dc",
        "cursor": {
          "ref": "00c3533a-0765-4869-b81a-400f34b068e1",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b515e2fc-981f-434a-a519-2e065d1bf72f"
        },
        "item": {
          "id": "7d84e2ac-12de-412e-914b-88ab386e99dc",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "db67cb92-241d-4451-9cac-9a8ca21364dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e314ae26-d173-46e1-9dbf-e66ffa30150a",
        "cursor": {
          "ref": "a32dd18a-9a0d-4fc9-88e9-afc7fc5f9b25",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "74f1e6c0-403f-418a-b476-58e32c033468"
        },
        "item": {
          "id": "e314ae26-d173-46e1-9dbf-e66ffa30150a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "6bb98fea-dcaf-4e93-93e9-cb9e768e446b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51311dde-2193-4a37-a9ff-4fafad60ccd1",
        "cursor": {
          "ref": "5b26741d-fa90-468e-b0bc-abf2e204f783",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "fadbb23c-868a-497c-8316-1fc66ffbd1a0"
        },
        "item": {
          "id": "51311dde-2193-4a37-a9ff-4fafad60ccd1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "0a402b37-b2f5-421a-baa7-db1bbd3ba0fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0a70190-53c0-4565-9406-766b43691d96",
        "cursor": {
          "ref": "c015f81f-81b1-422f-83bd-5339c4a1d063",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "72105e2c-29ad-4e96-80f6-50502ac74081"
        },
        "item": {
          "id": "c0a70190-53c0-4565-9406-766b43691d96",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "207127e5-20b4-44ac-bf07-65ce7e8e6cef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a48dfdc7-4fc5-44ca-b866-f68e7c015d97",
        "cursor": {
          "ref": "5d77f612-230a-4037-bdf7-2a5416d98216",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "37335638-8d16-4f74-93a7-bbb53dc2d075"
        },
        "item": {
          "id": "a48dfdc7-4fc5-44ca-b866-f68e7c015d97",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "30fa6edb-d2e8-4448-ad85-419bff911f72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91507da4-8b46-47aa-8a96-8e5b77552d0e",
        "cursor": {
          "ref": "9c5e70b1-e1c7-449d-ab42-263b838377d9",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4c30c7ef-4878-46c5-8fbf-684238f9b5a7"
        },
        "item": {
          "id": "91507da4-8b46-47aa-8a96-8e5b77552d0e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "a12ac1d9-e417-4bf8-89dc-45cee35bcace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6147369-f855-40be-acdd-d98d5051e329",
        "cursor": {
          "ref": "b75dd20f-7b46-444b-9682-2751839c0418",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2ec12b7f-ed86-4367-8824-6b83b1ba1113"
        },
        "item": {
          "id": "b6147369-f855-40be-acdd-d98d5051e329",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "68783cb2-2ec6-49c8-83e2-c04e45921a2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ee052dc-d1be-4537-b17c-9aad5d583fdb",
        "cursor": {
          "ref": "d5ae55b8-10ad-49e2-a2a3-8ee9e138d77a",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "8a2c1efb-363a-44a0-bd96-9615c962d306"
        },
        "item": {
          "id": "0ee052dc-d1be-4537-b17c-9aad5d583fdb",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "91a8a333-794c-4313-b786-aaac22921b61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce4ced9c-28a0-4dc7-9f41-a43ddde3a082",
        "cursor": {
          "ref": "36ac66e8-58b8-4785-ba5e-d366b6642a93",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8261aa76-b058-46a1-8c6d-ed06b0c2a9e6"
        },
        "item": {
          "id": "ce4ced9c-28a0-4dc7-9f41-a43ddde3a082",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d10d5482-38df-4a37-82e5-244521a4376c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ef6120e-f912-463a-b2fa-eda8c96ab1aa",
        "cursor": {
          "ref": "5a600e76-99c3-45be-85b8-174f2ce89ef3",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e897c154-9d8a-44f4-ba7d-3784b931a4e6"
        },
        "item": {
          "id": "1ef6120e-f912-463a-b2fa-eda8c96ab1aa",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "deed5ef9-bdcc-4673-9cfd-98340e69f623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac4e108-ebbd-451f-b861-0a1ffc9f7f20",
        "cursor": {
          "ref": "8b4cf18e-d202-4862-82d3-631810d61b5f",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "25f79af6-f220-4715-9c3f-5bfc5918f1f2"
        },
        "item": {
          "id": "8ac4e108-ebbd-451f-b861-0a1ffc9f7f20",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "08adab74-44a0-4d78-b092-6e0c103b1d90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58286f02-fd86-413a-8da6-e98a36782108",
        "cursor": {
          "ref": "57093de5-3818-49ae-94d1-1eb3d70cfea3",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "87320702-f93e-4e42-84be-e9c528165c05"
        },
        "item": {
          "id": "58286f02-fd86-413a-8da6-e98a36782108",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "6fe71a55-8fd4-4763-9fb8-275bae8ee90b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "101f0a68-83a8-48eb-bc93-a825a46dbf7d",
        "cursor": {
          "ref": "4bf9a03e-4a9b-407a-9e2e-2209e23d82fb",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7dc56811-ff43-43fb-b7aa-9755e07894e5"
        },
        "item": {
          "id": "101f0a68-83a8-48eb-bc93-a825a46dbf7d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "24429893-f0e9-4cbb-a1a2-a8332aaf66e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "336b1606-f503-43fc-bce5-66022b72cd77",
        "cursor": {
          "ref": "6fe3bd52-62ab-4307-992c-2c162f079ddd",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f397c8ed-3b3f-45c1-ab5e-1c0340157547"
        },
        "item": {
          "id": "336b1606-f503-43fc-bce5-66022b72cd77",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "1fae280f-a4d5-4eb4-b0ca-c64675b9b43c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "843ecc45-9d1a-4bed-960a-a989644efc9c",
        "cursor": {
          "ref": "296c9cb6-af92-456b-8fbd-0ba96e2f2463",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "51072163-9a81-4bf2-8c0d-8e93db593722"
        },
        "item": {
          "id": "843ecc45-9d1a-4bed-960a-a989644efc9c",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f49f1080-9f94-410d-9209-4e83e5e6f457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ac3c8dd-0755-452d-8a4a-5aafb6038c02",
        "cursor": {
          "ref": "14c0878f-e106-4794-8e69-464216350866",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8abcaae4-0fbc-4043-b4e2-84f6018a0780"
        },
        "item": {
          "id": "1ac3c8dd-0755-452d-8a4a-5aafb6038c02",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "0b1c3c25-ae90-481c-bcd5-4c6395f1120a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9bbf6d6-8011-4325-88b1-0198ed9661f7",
        "cursor": {
          "ref": "dd294e4d-67b1-414d-8132-a1e643ffa961",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "8d9cbb55-c85f-4ee1-a635-094ec2aeeec6"
        },
        "item": {
          "id": "d9bbf6d6-8011-4325-88b1-0198ed9661f7",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c7e1fa9e-9757-4b04-ba56-2e3812d9e245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d47e1fdb-4d3a-4d9a-9a0a-7f402bea547e",
        "cursor": {
          "ref": "c8b2692b-820f-4e47-89b5-3bee200cd2cf",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "22973fae-ff56-42d6-86a5-dad820098f43"
        },
        "item": {
          "id": "d47e1fdb-4d3a-4d9a-9a0a-7f402bea547e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "4e898540-aa2f-4b67-8fcb-f5a349cff3cf",
          "status": "Created",
          "code": 201,
          "responseTime": 2847,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "9fac0d38-89b4-40a2-a584-0c4f6400359d",
        "cursor": {
          "ref": "96e680da-f407-4b67-8c5e-62957fa1e832",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d604aa3b-c7a5-44fb-a57b-85eb26915c90"
        },
        "item": {
          "id": "9fac0d38-89b4-40a2-a584-0c4f6400359d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3e02e017-8caa-4d36-a91a-122a2e4f0268",
          "status": "Created",
          "code": 201,
          "responseTime": 2492,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "6601791d-da6d-4e08-84d1-844f92f982b6",
        "cursor": {
          "ref": "3cde3f6d-6c78-40da-8b3d-77259866292c",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c90876da-32d5-41db-bd96-fd04950732c7"
        },
        "item": {
          "id": "6601791d-da6d-4e08-84d1-844f92f982b6",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "84689647-00b7-4a21-a602-794764e09a34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e305f23-dbbf-4560-9dbd-b7b280e7f5e9",
        "cursor": {
          "ref": "476198a4-1c28-41b8-bf76-48f6b4527f79",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2c25b102-fcac-4abd-97bc-6ea5c6a78f30"
        },
        "item": {
          "id": "0e305f23-dbbf-4560-9dbd-b7b280e7f5e9",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "3e1e2487-ef0b-4780-b5c8-88a3b36eef7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9ef6195-1fe5-47c5-8a2f-bd226520be9e",
        "cursor": {
          "ref": "dda61124-55c4-4f38-bb36-f446dcc5f739",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "628806a5-9e50-4692-ae25-4ea0bcabbabf"
        },
        "item": {
          "id": "e9ef6195-1fe5-47c5-8a2f-bd226520be9e",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "4d2464a8-4d62-4b55-b4a7-ee72173bd4ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55507c8a-aef7-47ec-8ce7-23472aa6d72c",
        "cursor": {
          "ref": "fd8a8f3e-4d80-40c4-8a1c-81ed83fd02dd",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "c8f480e2-b251-4064-94e4-1f891508c030"
        },
        "item": {
          "id": "55507c8a-aef7-47ec-8ce7-23472aa6d72c",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "32e002a3-2b9e-4261-b7af-246b9b87d38a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59b5ab43-9ee4-45b5-9863-6450da63ecae",
        "cursor": {
          "ref": "09523586-986c-44f4-9827-445ca4a0128a",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "dea624f4-0ee5-47ca-bab5-d847c404a279"
        },
        "item": {
          "id": "59b5ab43-9ee4-45b5-9863-6450da63ecae",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "5398c4d6-7ac4-4476-b59c-c65e4f3d57fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86c951e0-4551-4fc9-bc24-08c1b3bc58f7",
        "cursor": {
          "ref": "899b3253-9e42-4462-9c2f-1d9cbc2806e4",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "cce27e0f-76c3-4bb7-a109-308e39df6d78"
        },
        "item": {
          "id": "86c951e0-4551-4fc9-bc24-08c1b3bc58f7",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "da073469-d06b-4a63-acc3-f80a355140db",
          "status": "Created",
          "code": 201,
          "responseTime": 1818,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "59e9b78e-5446-4a25-a903-d593dd770756",
        "cursor": {
          "ref": "6300b12c-7233-4b22-be9f-e478426449b5",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e5130617-ae1f-4b43-a2ad-aa8c2373fede"
        },
        "item": {
          "id": "59e9b78e-5446-4a25-a903-d593dd770756",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c6d90f0e-567a-493e-bfda-47a876095399",
          "status": "Created",
          "code": 201,
          "responseTime": 2473,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "9942b1c2-4354-40c9-bad9-6167a50f0394",
        "cursor": {
          "ref": "d83409eb-146e-4bfb-bee6-0d53df1d4f78",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4c48e100-17b6-494d-bd0c-ad791f580e56"
        },
        "item": {
          "id": "9942b1c2-4354-40c9-bad9-6167a50f0394",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "20f69e02-0531-43f1-a55e-d35fd3914aeb",
          "status": "Created",
          "code": 201,
          "responseTime": 2386,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "2de885ec-60f6-4ee7-a5b9-633bf6fb9b8e",
        "cursor": {
          "ref": "6e73eb0a-2fe1-41a3-a2ad-9571765a7559",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "df852b0a-b985-4f0d-8d5b-dcff6e5bc0f5"
        },
        "item": {
          "id": "2de885ec-60f6-4ee7-a5b9-633bf6fb9b8e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "beef4181-df5d-4b72-bb03-8c0392e39c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ebdaa89-1569-4e95-81c6-bae43e88751f",
        "cursor": {
          "ref": "e436f250-f6ef-4569-885c-9d58dcda043f",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "c0bf2e4d-6776-463e-9024-6687647ae0df"
        },
        "item": {
          "id": "5ebdaa89-1569-4e95-81c6-bae43e88751f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "bd36469e-c42d-4dd3-b1dd-93545e671daa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcefa1c7-4b34-4c76-8062-7e53547e590c",
        "cursor": {
          "ref": "4d53658a-1924-40a4-8e1d-303da70fa4b8",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a326ce91-eb70-4fc7-ae54-1c5eab4bc496"
        },
        "item": {
          "id": "fcefa1c7-4b34-4c76-8062-7e53547e590c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e0e93315-ad62-4ee5-959a-775a7a9ce49e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f75261-182d-45d0-bb3a-efe30af77072",
        "cursor": {
          "ref": "e9bc52e4-54d3-4247-acf6-a2706ba01b9a",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "70b9efde-0554-4c5f-84af-0e810227e32f"
        },
        "item": {
          "id": "13f75261-182d-45d0-bb3a-efe30af77072",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "3038c434-307a-474f-80d3-9ce7bf5e71f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "280c1d28-3d25-4f3c-b104-42032f704ffc",
        "cursor": {
          "ref": "f5923b72-65bf-4ec6-a8a5-328da043f3e2",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "52a29eeb-ae3d-4a76-948e-9368eb6049f7"
        },
        "item": {
          "id": "280c1d28-3d25-4f3c-b104-42032f704ffc",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b720ef09-8096-4e0f-a40e-46b55ffacfbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bac571f-d801-40b0-84bd-0627fc53aa72",
        "cursor": {
          "ref": "b222e5f2-d3a9-45ae-8d5f-90b4f1593563",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "aad0f94b-4581-487e-85c0-c6543bcba481"
        },
        "item": {
          "id": "9bac571f-d801-40b0-84bd-0627fc53aa72",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "cd03d1aa-80ce-442d-9403-2128276c61f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "678c59ac-9751-45ba-b858-534807e1305b",
        "cursor": {
          "ref": "7d30e28d-9f33-4ce7-9d34-da105dd825c5",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "91082174-1a2a-4531-ae83-7e55e20216cb"
        },
        "item": {
          "id": "678c59ac-9751-45ba-b858-534807e1305b",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d0f00378-a361-4200-8281-dbd39b44233e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "844aac84-3f13-44bd-800f-446cb46f4c70",
        "cursor": {
          "ref": "c321b503-232a-48fd-a9e4-cf3ee469b36d",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "9dfbad0a-9188-4796-84fc-0a022338ff7f"
        },
        "item": {
          "id": "844aac84-3f13-44bd-800f-446cb46f4c70",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "0ddafded-ac5f-47d1-9a19-e0f5d00c3025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19c842b7-9585-4f08-a93d-16c52a9b8ef8",
        "cursor": {
          "ref": "866607d7-042f-4168-b0de-059cf8333842",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "26f07d4c-9192-435d-afe5-7df5a513a632"
        },
        "item": {
          "id": "19c842b7-9585-4f08-a93d-16c52a9b8ef8",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5c0b5c5a-807d-4e8b-93ce-c93e806b6ed2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49ae898d-a5a6-4b3f-8e4e-88ef9066752b",
        "cursor": {
          "ref": "e11d701d-3bbd-4e44-b985-21fe56345d62",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "883cad09-bec7-4d10-a83a-f6b9c5744585"
        },
        "item": {
          "id": "49ae898d-a5a6-4b3f-8e4e-88ef9066752b",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "462ec777-70b3-45d3-9b67-4903ac85c735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "309b6d47-9fc8-4ac5-8266-96cbc6106b62",
        "cursor": {
          "ref": "05891e03-c486-4eba-afe9-332381392f3a",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "bc379d0c-1e0a-4ddb-a127-b34ec005d604"
        },
        "item": {
          "id": "309b6d47-9fc8-4ac5-8266-96cbc6106b62",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "df956f16-b4d6-404f-bd74-862fcbada115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d5149c0-7135-40ae-b3f0-61c32eae1e65",
        "cursor": {
          "ref": "0221a838-adb9-4d92-b2d1-97694e08744f",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "bcee15b2-9cb2-41a6-bf99-25cad1bd5867"
        },
        "item": {
          "id": "5d5149c0-7135-40ae-b3f0-61c32eae1e65",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "48aabbbf-a172-4a5a-bcf0-f0651071e485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1966ac7f-fb96-4284-8486-78d3904a0d27",
        "cursor": {
          "ref": "e5a76c56-0aa2-4875-9583-e121d726474c",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "f23bab8e-9ba4-4b4f-ad85-2d24ca4b3bee"
        },
        "item": {
          "id": "1966ac7f-fb96-4284-8486-78d3904a0d27",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "9099b44c-a7b7-4c12-81d3-c7b718d9985d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0641c41-c60d-40fc-afa9-7cdd1f557396",
        "cursor": {
          "ref": "588b6286-dbd6-4392-8063-77be2b78b5e7",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a08464e5-eb34-4bde-8e35-dd76938f2e3b"
        },
        "item": {
          "id": "f0641c41-c60d-40fc-afa9-7cdd1f557396",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "709b1a1b-2cff-4cf6-9a5f-b5571e8f2b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "521d2104-47ad-43eb-b5ab-bdb5a0302147",
        "cursor": {
          "ref": "d4ce8b24-96cc-49e4-ae93-c9b0843b8e24",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "febbec47-3c01-44df-8be8-c04d34afd649"
        },
        "item": {
          "id": "521d2104-47ad-43eb-b5ab-bdb5a0302147",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e9b6e81f-7bfc-4233-9f57-f59e616415d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e216635c-d3c7-4afd-9486-b9defb105805",
        "cursor": {
          "ref": "81580266-6510-4fbe-99de-4283e68875f3",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "8b3353e0-d3dd-48b2-9382-d2a0a9533d9c"
        },
        "item": {
          "id": "e216635c-d3c7-4afd-9486-b9defb105805",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e3261ce2-de81-4cf1-a7bc-e16530de6fb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76925cb2-d8ec-4613-87ef-33e74c40d5a4",
        "cursor": {
          "ref": "dde2e973-2e9c-4df7-a4ee-1a942f3de250",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7c6901fa-04a2-4b15-b6f1-759983c14fca"
        },
        "item": {
          "id": "76925cb2-d8ec-4613-87ef-33e74c40d5a4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "2aa6f777-9489-45e8-ab85-f383b52a3039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b51dd8-d913-4153-baf7-c401ebb8a7d1",
        "cursor": {
          "ref": "33bade00-e2a1-458c-a2cc-ba7c9bb6ac4c",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "8b91951a-b7bd-4584-9d52-8e85ebb1a702"
        },
        "item": {
          "id": "28b51dd8-d913-4153-baf7-c401ebb8a7d1",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f29b0b37-25c7-412e-8775-608c1ff745cf",
          "status": "Created",
          "code": 201,
          "responseTime": 2291,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "c516a9d8-5c42-4bcb-91ea-37217f8f51a2",
        "cursor": {
          "ref": "d0ceed31-e204-4c8f-be84-70643ac2649a",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "479fa384-f517-4938-8e4a-3bf1f64c706a"
        },
        "item": {
          "id": "c516a9d8-5c42-4bcb-91ea-37217f8f51a2",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "3c509c3b-7057-4618-832c-a3b796586ce2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30a4409e-cd60-40a7-b589-baeb22d9e515",
        "cursor": {
          "ref": "46efea07-6330-4eb4-b350-7dc942326561",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "2ce186bb-29ef-49b8-9223-10c902da0dca"
        },
        "item": {
          "id": "30a4409e-cd60-40a7-b589-baeb22d9e515",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "e1d9b4d2-3015-4355-b47f-84f7ec48452b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44bfd396-bc78-4c3b-91ad-f23ecccc78ce",
        "cursor": {
          "ref": "866a4076-3f47-4ca9-9b5f-6dd1383e0a2f",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "07277ac2-549c-4938-b330-7e28726f38cc"
        },
        "item": {
          "id": "44bfd396-bc78-4c3b-91ad-f23ecccc78ce",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d6e1ca39-3838-4899-9ea0-6c385af18a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 148,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a363480a-9fd0-4b69-ae4f-3a45fad0069b",
        "cursor": {
          "ref": "a914cac8-a6c2-417d-88ad-9f07a2b97ae3",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "557df4e1-6e8d-497d-89b3-7e00c28c64ff"
        },
        "item": {
          "id": "a363480a-9fd0-4b69-ae4f-3a45fad0069b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "acbd2dbc-8e3d-49ae-8df8-7695076ef280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "949f2d21-f447-4aee-b965-400a479e4334",
        "cursor": {
          "ref": "fce49773-33fc-45fe-a0ca-7be16157b9c1",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "3bf48ef3-8468-4c7a-853e-bacc8e0b5b36"
        },
        "item": {
          "id": "949f2d21-f447-4aee-b965-400a479e4334",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "913c2253-ccbb-469f-a198-674c8c031655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4147fe40-a7ef-426e-b91b-8c9ad153055a",
        "cursor": {
          "ref": "9accdd80-81b9-4a0e-97ac-fbc51a15600d",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "9fa6c64e-b920-4a09-977c-7f1aaec4ea40"
        },
        "item": {
          "id": "4147fe40-a7ef-426e-b91b-8c9ad153055a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9b28db18-bc79-4eb1-b64e-1749a2825734",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93748a9a-1ae1-4041-8454-582928edcd5f",
        "cursor": {
          "ref": "17445d74-bf51-43a9-bd9b-c8710d9c1f76",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "214bad46-6eb7-4fc5-af07-c116fca3c649"
        },
        "item": {
          "id": "93748a9a-1ae1-4041-8454-582928edcd5f",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ca5901fb-330b-440a-af4b-fb57ca8f3f21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e5b8c71-17eb-441e-b660-c371e2a07921",
        "cursor": {
          "ref": "17fbab79-9cb3-41ef-ae61-7e3ce088ab0e",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "e90beed8-8abe-4516-8525-e96fc98c139f"
        },
        "item": {
          "id": "3e5b8c71-17eb-441e-b660-c371e2a07921",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "debbd0dd-8c9a-4a57-b7d2-f5aa1df929ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45af6a49-8fdd-4122-a2eb-ea348d4b6a5d",
        "cursor": {
          "ref": "d525dd93-f142-4a33-b5e8-21c1a5b1d089",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "50caf716-5f3f-4b3a-932f-2133c47d562f"
        },
        "item": {
          "id": "45af6a49-8fdd-4122-a2eb-ea348d4b6a5d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "1065b262-ba7f-4fc9-b532-2ef5f2c39d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd862d7-89bb-4453-93f5-915176cca9ac",
        "cursor": {
          "ref": "589c2deb-69bb-4719-90aa-9a3ec1a6db37",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "ee6dbece-25a7-4557-98d1-e781549ec33a"
        },
        "item": {
          "id": "9dd862d7-89bb-4453-93f5-915176cca9ac",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "1605ac57-8532-43c8-8b70-4163bb87f051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62c21a96-2e6c-41a5-9a72-2457bf2f3d57",
        "cursor": {
          "ref": "bb074aa3-d038-41b1-be8c-5bf799f3c527",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "64a2be57-fc71-46b0-b56b-2335e955b901"
        },
        "item": {
          "id": "62c21a96-2e6c-41a5-9a72-2457bf2f3d57",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "855d4f2e-3fef-4639-a9b1-b09ea84f0c7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef5a4c34-1241-4a05-9c50-d294bf56253f",
        "cursor": {
          "ref": "775dc8eb-c01b-44d2-8620-8ac8575976ed",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "6856e019-c045-4f35-9d96-76800215bb94"
        },
        "item": {
          "id": "ef5a4c34-1241-4a05-9c50-d294bf56253f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "71b3652d-520d-4f6f-9f8f-ff4fb0b710e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "879a6a53-5cb7-4c7b-bea0-bfb28d792353",
        "cursor": {
          "ref": "a3d442ec-90b9-49a2-93c0-850df0149c1e",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "24438f3c-e2dd-4014-a458-27ce3c0b0c53"
        },
        "item": {
          "id": "879a6a53-5cb7-4c7b-bea0-bfb28d792353",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "468f8993-6d36-41f6-bf0b-75d2d85b9189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c71a19a-1a5c-4fb9-bf04-3d221bc7925b",
        "cursor": {
          "ref": "c44dce4b-fb2b-485f-92e6-566684c358d1",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "e06932ca-40d2-42b2-a4a4-a2f533598dee"
        },
        "item": {
          "id": "7c71a19a-1a5c-4fb9-bf04-3d221bc7925b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "c4daf13a-92b9-4ba5-acca-aecfa5bdcf5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e466f6-c1a6-4b8e-bab6-af9337e5ba5d",
        "cursor": {
          "ref": "76b3aaf4-f809-4564-bc7a-fa22ad898c65",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "469a6bdf-e39f-4bd9-8ff2-bc2e4e7b3070"
        },
        "item": {
          "id": "20e466f6-c1a6-4b8e-bab6-af9337e5ba5d",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "df2bb77b-d019-4967-8869-1f522c3f5eae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd2c49e-37b5-4792-8edf-c72bea786360",
        "cursor": {
          "ref": "bc9728fc-e706-449d-88c3-82b66077396f",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "708fcbef-619b-4b81-9cd2-a313bbbd97b7"
        },
        "item": {
          "id": "6dd2c49e-37b5-4792-8edf-c72bea786360",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "7942a9ac-4573-43f1-aa2b-2870112369c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "019100e0-2f40-4319-90f5-c4d77c58c649",
        "cursor": {
          "ref": "b6ae3956-e9ca-4c1b-9f1a-f9ff824e286e",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "29510f06-cf92-4282-aadd-359082e4e8a9"
        },
        "item": {
          "id": "019100e0-2f40-4319-90f5-c4d77c58c649",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "11a9e39e-50f8-4b05-8e65-f4aacd78f833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d970a585-4c3e-4f9d-9bda-ddcb4076044b",
        "cursor": {
          "ref": "fdf87990-6168-479f-b6c6-2a4273c06c74",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "31c2c560-0f61-4f66-a6e3-7824c7878bb7"
        },
        "item": {
          "id": "d970a585-4c3e-4f9d-9bda-ddcb4076044b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "7b9c5138-9d37-4bbb-9d6f-5799ae07ffee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6077e7c7-20ac-4789-8a00-1e51d51bd25c",
        "cursor": {
          "ref": "606a9667-5b52-4511-b1bc-a1e84a94f1b8",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "83db10cf-d883-4d93-ac6f-696633ca2dbe"
        },
        "item": {
          "id": "6077e7c7-20ac-4789-8a00-1e51d51bd25c",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "a7afaeb0-a6bd-4cc3-a85d-df6499369ac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "558b5526-e586-4737-870e-76bd7c7583b8",
        "cursor": {
          "ref": "4d8be88f-e0b8-4a06-9df7-baa03ced3969",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "00e63c23-ed2b-4f3a-9bf6-4a67a8a29e43"
        },
        "item": {
          "id": "558b5526-e586-4737-870e-76bd7c7583b8",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "58384ae0-10d0-4d70-b92f-0a7b9105aeb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c25f0f63-17f0-4061-9149-bfa0766c4d16",
        "cursor": {
          "ref": "99055ffb-85cc-4473-a186-40830a33fa47",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6daabdaf-0556-42a6-9130-064a574057fa"
        },
        "item": {
          "id": "c25f0f63-17f0-4061-9149-bfa0766c4d16",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "22d2f6f5-f1d9-48b2-8a52-b89b5d5e7c02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "226e4190-1507-4d84-88b9-886d1df2ac35",
        "cursor": {
          "ref": "063e3eb5-2cec-4c33-a2f3-be9d254ca7fc",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "6192cfb6-f766-41dd-acd4-2bc44dae35ef"
        },
        "item": {
          "id": "226e4190-1507-4d84-88b9-886d1df2ac35",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "4d1b3848-9b95-4edc-92f6-8e6942d802df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a03c10d-53b7-455a-a02c-8b0b9042b2bd",
        "cursor": {
          "ref": "b9a740a6-07cb-4cb4-b043-3290f7485f8f",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "335b9a3c-faf3-4497-827e-9f95549b5cde"
        },
        "item": {
          "id": "8a03c10d-53b7-455a-a02c-8b0b9042b2bd",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "e9a2e8fa-6bae-4f79-873a-58fea447f06d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e633760-2802-43a2-a41d-a0ebc4d7291d",
        "cursor": {
          "ref": "8971ca5b-a495-4237-a7e9-cdd7bc9026fa",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6966e502-e2d6-4830-9c4a-d8bfe3d03b61"
        },
        "item": {
          "id": "9e633760-2802-43a2-a41d-a0ebc4d7291d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "82857fde-7668-4a9a-982a-648aac75d60f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc159da1-35ef-4a2c-9178-5505db8cd22d",
        "cursor": {
          "ref": "974e9744-7804-4599-b314-410ddb061e86",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "365a3a1c-ed1a-4c87-ab15-670638fd0286"
        },
        "item": {
          "id": "cc159da1-35ef-4a2c-9178-5505db8cd22d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3bd5aee0-cc33-486e-a844-7a24df79c149",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a96775e-9c36-4792-9318-8d2f98897765",
        "cursor": {
          "ref": "c148c0b2-59ff-4f68-b860-86686f3d9ffe",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "66ead04a-4cfe-4013-8e02-f8baba7ff7ad"
        },
        "item": {
          "id": "0a96775e-9c36-4792-9318-8d2f98897765",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "fd5dd2a4-38ac-4cdd-80eb-8b4ec0ef8c95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aad6afaa-f48e-471f-822e-6b57969cc993",
        "cursor": {
          "ref": "a3dfd9ba-3191-42e9-bb22-f39f64d1d7af",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "9fcf4938-b0c9-42fa-b897-19e684f0aeef"
        },
        "item": {
          "id": "aad6afaa-f48e-471f-822e-6b57969cc993",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a2365461-3f4d-49d2-a381-27bc8a778db0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d7afb5c-4f20-433d-901d-abcf0150c088",
        "cursor": {
          "ref": "29f7e628-82a1-49de-98c3-3dfef1e6eee9",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a99c7a94-c870-47b7-b876-6fdd18abc77f"
        },
        "item": {
          "id": "9d7afb5c-4f20-433d-901d-abcf0150c088",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4e902605-00ef-4c33-bb40-28cbac477f05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a8e943-76ba-4540-8f17-11b94808d0e0",
        "cursor": {
          "ref": "e4621025-a85b-4cbc-acbd-1d470b1b39dc",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "cb7e377f-c303-433f-a759-dc9ed0ced8fe"
        },
        "item": {
          "id": "f9a8e943-76ba-4540-8f17-11b94808d0e0",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "eb3c0f3a-a628-44b2-9c73-280f6a41640d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b7f03e0-b74f-49c5-ad7d-f0a01d0cbba0",
        "cursor": {
          "ref": "872d0b03-19a9-4769-b529-41e769b6fb44",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "43f39ca2-a4cf-4839-b229-840a12a9f332"
        },
        "item": {
          "id": "8b7f03e0-b74f-49c5-ad7d-f0a01d0cbba0",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "83f983c5-baa3-4af4-be28-d85ede37ea04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b445979-9a2d-496d-be45-b6eb1f1f6479",
        "cursor": {
          "ref": "a328915f-b0ce-44e7-826a-b6e4416ae3ef",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "65558225-5389-4dd8-96e1-7c052c6d3063"
        },
        "item": {
          "id": "9b445979-9a2d-496d-be45-b6eb1f1f6479",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "bb5220d7-9585-4c1c-98a5-61932e787cba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "a1c1dc94-ed83-4add-bf4a-a7736d6c284d",
        "cursor": {
          "ref": "9189f838-d865-4cd4-8460-4e4b1d5d3501",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e43aad81-d2cf-4f66-8a63-325dd5307753"
        },
        "item": {
          "id": "a1c1dc94-ed83-4add-bf4a-a7736d6c284d",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "83389cf5-f20a-4bf2-9ee9-ce7c7df499c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "58c069d1-a343-4e96-aa2f-d017a4126a62",
        "cursor": {
          "ref": "c97906c7-9b30-47bd-a9fe-1dc2ea94f310",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "fdc70d6b-4d09-4c0f-bfd6-2f23fe7e65e8"
        },
        "item": {
          "id": "58c069d1-a343-4e96-aa2f-d017a4126a62",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f9230d31-de75-4897-89f8-0ea009fa85d0",
          "status": "Created",
          "code": 201,
          "responseTime": 1901,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd76af1f-0bd0-4ce5-8067-af9712f39604",
        "cursor": {
          "ref": "f848890f-4a29-4ec9-8889-a9d98b197654",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "bd9fb4db-1eb2-44e7-9a13-c80fcef82d1d"
        },
        "item": {
          "id": "bd76af1f-0bd0-4ce5-8067-af9712f39604",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c0fc59c1-39cb-4183-9299-567fb925ed02",
          "status": "Created",
          "code": 201,
          "responseTime": 2297,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c57351c-9b67-4cac-aae9-578730489ebc",
        "cursor": {
          "ref": "4fba5393-699e-4e6c-b511-12dc52daa42a",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "9ec37943-2254-45c5-be3b-6a5a0ddcfa44"
        },
        "item": {
          "id": "0c57351c-9b67-4cac-aae9-578730489ebc",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "15c5e288-1de2-4c37-84de-24ae6498eb91",
          "status": "Created",
          "code": 201,
          "responseTime": 2160,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad69529-5083-4d25-abd3-eee0996923aa",
        "cursor": {
          "ref": "4ac369dc-88b7-40d9-a660-5f36be2f2ad0",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "9bcc011b-239f-4305-aee2-6b94fe62c8d5"
        },
        "item": {
          "id": "dad69529-5083-4d25-abd3-eee0996923aa",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "18c35cbd-4ccb-485a-aafc-21129d615226",
          "status": "Created",
          "code": 201,
          "responseTime": 2338,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-02-17T00:44:48Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-02-17T00:44:48Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "0c9d9eae-535c-478b-9f93-7af1c13eb6c8",
        "cursor": {
          "ref": "ba54dc7c-968f-480e-8092-7a42c28fa5b7",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c85e2ad4-6201-441f-97f1-9db8fbd4c4d5"
        },
        "item": {
          "id": "0c9d9eae-535c-478b-9f93-7af1c13eb6c8",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1e1e1cc9-688f-499d-899e-10047581cb0d",
          "status": "Created",
          "code": 201,
          "responseTime": 2376,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "295778c4-fa45-4a80-8d83-f35db619a084",
        "cursor": {
          "ref": "dc7bef49-2938-4d09-a0a0-2d3893fe5e65",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "16a65964-be3f-43e1-916e-e2b5cf851d88"
        },
        "item": {
          "id": "295778c4-fa45-4a80-8d83-f35db619a084",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "fd23005e-63fe-4519-8ecd-b00601d0edd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "295778c4-fa45-4a80-8d83-f35db619a084",
        "cursor": {
          "ref": "dc7bef49-2938-4d09-a0a0-2d3893fe5e65",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "16a65964-be3f-43e1-916e-e2b5cf851d88"
        },
        "item": {
          "id": "295778c4-fa45-4a80-8d83-f35db619a084",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "fd23005e-63fe-4519-8ecd-b00601d0edd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21e7c76d-aa18-4348-ad3b-55012d3e9aa3",
        "cursor": {
          "ref": "75420955-901a-4bb5-930d-a80bdd650a93",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "4fcaf095-b8bf-4931-8b7b-fe5ddc5ae74e"
        },
        "item": {
          "id": "21e7c76d-aa18-4348-ad3b-55012d3e9aa3",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "43efc609-2baf-4a9b-aac3-ad0a326ea032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "056af0f5-10fd-4f0c-8c9d-e481a98244e9",
        "cursor": {
          "ref": "5b0f09aa-3da9-42dc-b11a-16fe6d850dd0",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "9439b5c2-94fc-4e90-97d8-018359b5439e"
        },
        "item": {
          "id": "056af0f5-10fd-4f0c-8c9d-e481a98244e9",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "26a23dae-6b8a-4f2f-843c-eefbe4a0baa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9eb00b7-02ca-4c9f-91ed-6667e2a9c665",
        "cursor": {
          "ref": "37f9b89a-1a66-45e8-b455-8e8c2ddd377a",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "23c5f4cb-80b8-4a87-8dce-4dd1968f9cc0"
        },
        "item": {
          "id": "f9eb00b7-02ca-4c9f-91ed-6667e2a9c665",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ea759880-339a-46ba-a0dc-16fd446cf05e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50b90511-7311-4c18-8458-b4cabf68a759",
        "cursor": {
          "ref": "5f53bf2f-46bd-406f-adf0-63ec93a67d1d",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "aa576a4a-c58d-42c7-8130-333c09a185b0"
        },
        "item": {
          "id": "50b90511-7311-4c18-8458-b4cabf68a759",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "542b919d-2679-4a29-99cb-b6bcb39c3e0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa6480b6-ed6e-493f-a813-9a5466e92c0c",
        "cursor": {
          "ref": "5dfc7fd3-b343-40c5-9def-ba7864f2e094",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "576380f5-a71c-4b9c-a861-24293f7f5a18"
        },
        "item": {
          "id": "fa6480b6-ed6e-493f-a813-9a5466e92c0c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9be9f1ef-ddb9-4192-a8af-9d18cee01de9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5577752-3d69-4309-b177-2c9e3dca496c",
        "cursor": {
          "ref": "7ba9a696-6759-407c-9aac-c8ece2eb5164",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "a628811e-61ab-4c1a-8341-f1a6eb6918be"
        },
        "item": {
          "id": "f5577752-3d69-4309-b177-2c9e3dca496c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c77179bd-5020-4d78-a613-34b2c0852b6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40d4ad68-015a-4db6-8bda-760411be7e84",
        "cursor": {
          "ref": "f11b2a18-9687-49b5-bc82-f3a95397d29a",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7e84fb93-aef2-4779-ac2e-52b8672580a3"
        },
        "item": {
          "id": "40d4ad68-015a-4db6-8bda-760411be7e84",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "1b6ffe85-54da-4fb1-99a3-92d14d29ce7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca3ee5ca-0919-4cfd-9db1-f7596e0b5e94",
        "cursor": {
          "ref": "55ceec7d-c68a-416a-9141-24bfa4c2181c",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "36db5750-dfad-43e7-a1c8-a48e2b93abcb"
        },
        "item": {
          "id": "ca3ee5ca-0919-4cfd-9db1-f7596e0b5e94",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "783655d9-dd68-4118-a827-2935112a96f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81aad510-a974-45f3-a64f-4b0465cf2a91",
        "cursor": {
          "ref": "96446e19-5e95-4df5-9d19-224edaeb749a",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "0bb2aa66-858f-430e-be5a-09b44c3944b6"
        },
        "item": {
          "id": "81aad510-a974-45f3-a64f-4b0465cf2a91",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2b0c88b5-f00b-46b3-bdc1-ee34b2c8b65c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3475bb38-de3f-4ad0-9533-9cc55d8a7500",
        "cursor": {
          "ref": "1bfb920f-a69a-4930-9cd9-54c7dacf1cab",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "647a2de6-410e-4f5b-ac00-9f7d3b60d3d6"
        },
        "item": {
          "id": "3475bb38-de3f-4ad0-9533-9cc55d8a7500",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3b772adf-b56e-4efa-abe4-01f2fedd8aa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c08e14-f93d-4f39-a9d4-7e83fd416ed0",
        "cursor": {
          "ref": "c1f7e4ca-7cea-451a-9131-e4d098767a20",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "80adfb96-8790-40d4-8dab-3145ee12b82f"
        },
        "item": {
          "id": "82c08e14-f93d-4f39-a9d4-7e83fd416ed0",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0235f0f7-1278-46ec-afd4-f44be114926d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91df5185-be5b-4cf2-8fe5-afd6a4a2bfcc",
        "cursor": {
          "ref": "bcda04e9-4dae-40f0-9011-de19b3757daf",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c8b0203a-239c-4607-ae2d-197c5f371ae4"
        },
        "item": {
          "id": "91df5185-be5b-4cf2-8fe5-afd6a4a2bfcc",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f17440de-139b-429b-aa70-92f98a675703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd9a525c-f898-41d5-b47f-5abc1390c6dd",
        "cursor": {
          "ref": "24a13a3a-5c32-4a8e-b762-829050e0db5e",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "0eea7436-7470-462e-b117-6fc830883173"
        },
        "item": {
          "id": "cd9a525c-f898-41d5-b47f-5abc1390c6dd",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "bb0984c2-b9e7-4260-9c55-dc297605b923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "927725e1-ceab-47d3-9d80-cebe3b261afb",
        "cursor": {
          "ref": "0ad45d8b-76a9-4b36-b48d-bb92541acd93",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6bcdc86a-9204-4374-a989-9b41d3143c8a"
        },
        "item": {
          "id": "927725e1-ceab-47d3-9d80-cebe3b261afb",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "07809e1c-40bf-4680-af8d-65bd78e29ad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf9f351-6503-4ee7-a52a-4dc90c615e28",
        "cursor": {
          "ref": "1137a209-cb04-4416-9a0b-9c85ee80e0c9",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7b056f1b-fd27-4ba2-8510-6f396a728078"
        },
        "item": {
          "id": "8cf9f351-6503-4ee7-a52a-4dc90c615e28",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "46e4927e-793d-4bf5-8c0e-4c605c9e5446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f97702c2-1b5c-4154-9acf-e543585042fd",
        "cursor": {
          "ref": "0ecfb245-839e-4e3b-9ec1-18198018d736",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "8a210f1d-9fcf-4ad6-9b9e-c336c486ac10"
        },
        "item": {
          "id": "f97702c2-1b5c-4154-9acf-e543585042fd",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "012d7877-2564-4811-969e-38249a909652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a993c616-32b6-4de5-9aec-4e667b0f5bdb",
        "cursor": {
          "ref": "56f9c8b4-3f0b-4829-b74a-59756c7719c7",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "08a03fd7-7fb8-4a01-94ac-afabac2fbc9f"
        },
        "item": {
          "id": "a993c616-32b6-4de5-9aec-4e667b0f5bdb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2102832c-17d6-4e1b-a3d5-19bd96c94a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c25a083b-29e1-4cc4-9751-a5869eed0661",
        "cursor": {
          "ref": "df8ccdec-a3f0-4b59-9bfd-a65ee93db12c",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "63c1157e-ffef-46f0-ae8b-ee7f34ef6c4a"
        },
        "item": {
          "id": "c25a083b-29e1-4cc4-9751-a5869eed0661",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0ff1bcd6-c2b3-4762-9f04-47fb4daa737a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80794f28-a78d-4f00-9861-0bdb2c2b5d61",
        "cursor": {
          "ref": "759d5963-d976-45cb-bc2d-56be6d1f7539",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "64fb6a70-565e-44bd-806a-47587b7a2f15"
        },
        "item": {
          "id": "80794f28-a78d-4f00-9861-0bdb2c2b5d61",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b2e61168-2eb2-48eb-9398-0a0834e0d3fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f283c9c3-32ba-4c7c-87d7-1c4d9a8cfaa9",
        "cursor": {
          "ref": "35a3695e-112f-4d88-bf72-4ae4041b174b",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "24ee9237-dae0-458f-ab4b-31862aa11a31"
        },
        "item": {
          "id": "f283c9c3-32ba-4c7c-87d7-1c4d9a8cfaa9",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a54f2071-94b4-4de2-9cad-5ecce9be7dff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acd60a49-6f41-4f36-99c4-c3f0a3b06fca",
        "cursor": {
          "ref": "d46df28a-d825-42f0-853c-e67cc11442db",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "0853efd5-daf0-4c89-a8cc-0437b7cc0c5b"
        },
        "item": {
          "id": "acd60a49-6f41-4f36-99c4-c3f0a3b06fca",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "20650588-08fd-4603-a6d1-81d4d3265af8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e3895e1-4e61-4bf1-b36f-a4014a07b099",
        "cursor": {
          "ref": "1cec4911-bd6f-41c1-895a-3e21ae670c21",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "87dd2b3f-e45a-4720-8156-38db52af6d9f"
        },
        "item": {
          "id": "6e3895e1-4e61-4bf1-b36f-a4014a07b099",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "08afc0d0-33ec-426e-b354-d34932f16010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cf59275-6fb8-445a-8f17-aeac9099b567",
        "cursor": {
          "ref": "88306555-892f-4ff1-ac06-2c4f0dd3907f",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "729fa923-d46f-4adb-8ab3-8518a8c88b03"
        },
        "item": {
          "id": "5cf59275-6fb8-445a-8f17-aeac9099b567",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "02eaf1dd-6bc9-4cda-9d01-72672a842973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "566e7ec4-34ca-46e1-92fa-351461e58f95",
        "cursor": {
          "ref": "c21a41fe-e52e-4917-8555-21a649d579a6",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "4166c2c9-1f05-43d0-b70f-0fb4d1643db0"
        },
        "item": {
          "id": "566e7ec4-34ca-46e1-92fa-351461e58f95",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "7b1604d1-00bd-443a-a729-6b75c2885c40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6124d12-1ee2-4771-a10b-8f0a1d07e424",
        "cursor": {
          "ref": "38edbbeb-1477-4e7b-be20-21c8b9f4b91a",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4aacb48e-e044-44c4-8d33-e8e6f7d3ca07"
        },
        "item": {
          "id": "c6124d12-1ee2-4771-a10b-8f0a1d07e424",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ef7bd18f-30af-47ee-8467-afec0f677a70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a05de07-6e07-4f56-ac01-8100defbeb4c",
        "cursor": {
          "ref": "5938fe11-23a7-4148-9acb-5388bf17016b",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "90788864-f110-4174-ad21-03891205a754"
        },
        "item": {
          "id": "5a05de07-6e07-4f56-ac01-8100defbeb4c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e67b739b-7846-4585-b019-4b70ecafd18e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5fffbec-6878-40bd-bb83-d24e15f80a2d",
        "cursor": {
          "ref": "419a0b04-43a5-4b00-a84e-49d35f4a0cf0",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "923c0687-5ea2-4033-a7da-37d0e8495e64"
        },
        "item": {
          "id": "a5fffbec-6878-40bd-bb83-d24e15f80a2d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "dd38928e-dd60-4876-8b6e-b36da7e78746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9d82a2c-7115-4578-8ab8-4c76eed2bca7",
        "cursor": {
          "ref": "676a034e-6734-498b-a1ae-a74cb7d6906b",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "6682bd76-2a60-4a2e-bcde-77c6b672855c"
        },
        "item": {
          "id": "e9d82a2c-7115-4578-8ab8-4c76eed2bca7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "4995a136-479c-408b-9a04-61cb254c41ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d61f076-091d-48ad-bcfc-62ae0dd4679e",
        "cursor": {
          "ref": "a78bd24f-4917-47be-b94b-a40fa3f8d5ff",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "57102af9-773a-4169-a595-726aedafcba4"
        },
        "item": {
          "id": "2d61f076-091d-48ad-bcfc-62ae0dd4679e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b09ec2b8-4bc5-4b39-96da-8aee0748e353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8497cef1-13b6-44a1-b2f6-0a21cac1c3c0",
        "cursor": {
          "ref": "05b62638-c15b-4ceb-bf2a-32602f2bfda6",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "06287721-4063-4805-816b-3d0853d77700"
        },
        "item": {
          "id": "8497cef1-13b6-44a1-b2f6-0a21cac1c3c0",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ad756855-b40b-4b1f-b37d-2d33ffc5405d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "780f7a89-5099-4194-baea-a9fddc649cc7",
        "cursor": {
          "ref": "c23ed53d-8e05-4014-a00c-46c5f17cc60a",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "51080c7f-30ab-40d5-9778-096b7956a5fc"
        },
        "item": {
          "id": "780f7a89-5099-4194-baea-a9fddc649cc7",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "113038f2-acd3-467f-8fe3-33b8b979134d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8ddc3a6-c502-4215-bd6f-c29ac772ff08",
        "cursor": {
          "ref": "8c3558d4-7263-4bd6-997f-da22b0fc6ed6",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "9f619e82-1c62-440d-9180-0a49bf8f64a3"
        },
        "item": {
          "id": "c8ddc3a6-c502-4215-bd6f-c29ac772ff08",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8ebe10c6-52f0-4edb-bf17-cba476f46fa7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "b889ad50-3852-4128-9ead-9ca6d7ad472e",
        "cursor": {
          "ref": "f31cb3be-c68b-42bc-af42-a02dce87ae39",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "d5d46224-2e80-4e0d-9fe5-94bc8cfae66f"
        },
        "item": {
          "id": "b889ad50-3852-4128-9ead-9ca6d7ad472e",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "a3268855-8d00-43b3-bbf3-b633c85b408a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "1f20ce6d-9031-49a2-8549-161fc7f0eea2",
        "cursor": {
          "ref": "3c5d1103-bff8-4c44-a58c-db0ce0a32b54",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "437788cd-1e79-4b8f-bc3b-5754138d9ca0"
        },
        "item": {
          "id": "1f20ce6d-9031-49a2-8549-161fc7f0eea2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8acb69c6-f1f6-4fc3-844b-56c06caad387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f20ce6d-9031-49a2-8549-161fc7f0eea2",
        "cursor": {
          "ref": "3c5d1103-bff8-4c44-a58c-db0ce0a32b54",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "437788cd-1e79-4b8f-bc3b-5754138d9ca0"
        },
        "item": {
          "id": "1f20ce6d-9031-49a2-8549-161fc7f0eea2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8acb69c6-f1f6-4fc3-844b-56c06caad387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3f888d4-b170-4c8e-b70f-19792f647816",
        "cursor": {
          "ref": "c89b38fb-015b-4598-a983-c79f3aae7531",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e8f025b3-a83e-472e-bc61-bfcbb28de41c"
        },
        "item": {
          "id": "f3f888d4-b170-4c8e-b70f-19792f647816",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5a79a6f7-251f-476c-bceb-b3d73edb5a98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74267871-36e4-479d-986b-af67905143cc",
        "cursor": {
          "ref": "c175269b-f2a5-4c34-a132-99f4f05a3e2d",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "440b056f-ce45-442a-9cea-241114a6900a"
        },
        "item": {
          "id": "74267871-36e4-479d-986b-af67905143cc",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "6bc26abf-8baa-4701-b70d-fa594b19b0d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c91a0913-fc57-442e-9a0d-2c2261a1c6d3",
        "cursor": {
          "ref": "95c175ab-c903-4d92-b83d-372f7792737a",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "669d3d2b-98df-4257-b8d5-9b2debe35d0b"
        },
        "item": {
          "id": "c91a0913-fc57-442e-9a0d-2c2261a1c6d3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "400b956a-e04e-4eea-a1fd-498867883739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d83ade-7ac3-4873-9da7-786210302440",
        "cursor": {
          "ref": "51f754b1-b004-4395-8750-70310af5c990",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "e57d1053-3ed4-48ef-be59-0218fad6746e"
        },
        "item": {
          "id": "c7d83ade-7ac3-4873-9da7-786210302440",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "655ac4e8-8590-4644-b047-0540a68074a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25651de3-5b24-49c7-a29f-4a19b96ad835",
        "cursor": {
          "ref": "40a74b1d-70e4-439f-b6bc-d3e458fad787",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "12257f48-84e0-4916-8479-a6ad0959c811"
        },
        "item": {
          "id": "25651de3-5b24-49c7-a29f-4a19b96ad835",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e60131a0-189f-4e0c-9293-0bafdb511e2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3eb27f0-caa8-43a5-b639-f1230dd0aaa1",
        "cursor": {
          "ref": "af83857e-dabf-4baa-9450-709d26e8854d",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7d6417b8-6c96-4000-9e40-233f7bd0ca19"
        },
        "item": {
          "id": "d3eb27f0-caa8-43a5-b639-f1230dd0aaa1",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "2d02dd56-05ac-4fa2-82ff-1acda65620fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caa07f23-7573-4d74-879e-124e779999de",
        "cursor": {
          "ref": "32fc2621-7ef3-4e8e-a2af-c846997769bf",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "71aae226-9084-44fb-b458-e44601c97f7d"
        },
        "item": {
          "id": "caa07f23-7573-4d74-879e-124e779999de",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "9341bb59-1cbe-461b-b018-40e0c1e54897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2501bcc-4325-464d-bb13-f4128d22314e",
        "cursor": {
          "ref": "4afb0114-697f-4d00-8680-4433b3727102",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "728f112b-ba10-4c49-a521-8ceb70add84c"
        },
        "item": {
          "id": "f2501bcc-4325-464d-bb13-f4128d22314e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "53f15e37-dc96-4343-8b58-1d2f129437fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "059d2120-43f7-4f3f-9fcf-fa3a1635e1a2",
        "cursor": {
          "ref": "e9c71cb6-a3fd-4853-85e0-454a222ea06b",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ec17469a-6962-4ef6-ad52-b6cdb63c79bf"
        },
        "item": {
          "id": "059d2120-43f7-4f3f-9fcf-fa3a1635e1a2",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "fd5b9753-f991-4d0e-8dc3-69739396b7d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a42d92-405e-46e1-a8ad-5ef9ee200a5a",
        "cursor": {
          "ref": "88abc3d9-85d7-4873-bd56-54243abf0b35",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "6f97a7ad-5580-4514-9096-1be9d8278523"
        },
        "item": {
          "id": "d7a42d92-405e-46e1-a8ad-5ef9ee200a5a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6b4e5bfa-01ad-4fe5-a9fa-7adbe8e98157",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa129c4e-7ad7-46b2-b665-289a10abc95f",
        "cursor": {
          "ref": "3dbacdf0-4d08-4bc1-8337-eaeb5df23a34",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "2d29eda6-e485-4d5d-9b22-259d62419127"
        },
        "item": {
          "id": "fa129c4e-7ad7-46b2-b665-289a10abc95f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "26a027b1-a6ce-473b-bafd-42380c3afa7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4b38846-8a82-47be-b812-2ec2a692eee3",
        "cursor": {
          "ref": "9d263dad-8282-423e-aab9-605aeede0949",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c4d1bd0b-087d-49a7-b887-cf429fb5ce55"
        },
        "item": {
          "id": "c4b38846-8a82-47be-b812-2ec2a692eee3",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6eab7478-6939-4de3-81aa-abeb6538e45a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 164,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "611acf0f-59cc-4cc3-ae17-82da1db1db8f",
        "cursor": {
          "ref": "71526a43-2428-46b7-9b50-3494e3f174ab",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "792e524f-15f6-4926-b2e7-8cbdb0d8aa79"
        },
        "item": {
          "id": "611acf0f-59cc-4cc3-ae17-82da1db1db8f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "0eec9659-bf8e-4ddb-9350-0fccd12f7ffb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0445e6a-25d7-45e6-8db2-cfbfe4a8d259",
        "cursor": {
          "ref": "ce9678e3-976c-441f-b500-2a4a9c5408d4",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d324987c-e578-4148-aef4-c6ce07aa35e9"
        },
        "item": {
          "id": "b0445e6a-25d7-45e6-8db2-cfbfe4a8d259",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "9c2eaf1f-5f2a-4c21-b16f-34e6196e1a56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90ef6392-0325-4feb-a381-b6536863f6ec",
        "cursor": {
          "ref": "7368fcb6-7cdc-4fd4-93ae-b61c911b2f9d",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "790a1515-6af5-465f-b91d-f2d7514c929d"
        },
        "item": {
          "id": "90ef6392-0325-4feb-a381-b6536863f6ec",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2741eaa6-65ad-45bf-b829-54c48fb8ef3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 391,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58be3f29-6ba2-4b76-883f-11fef17e02d0",
        "cursor": {
          "ref": "3d98d2e7-d584-482b-8159-b6cb15b3f470",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f80a62be-773f-4e86-9704-c9191febadb4"
        },
        "item": {
          "id": "58be3f29-6ba2-4b76-883f-11fef17e02d0",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "09a5f1e2-1061-47ba-b6c1-54e19a6055c8",
          "status": "OK",
          "code": 200,
          "responseTime": 433,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "a8792994-ecbf-4b6e-8305-c4f88e85dc2b",
        "cursor": {
          "ref": "4dbbc8c9-c27f-48e3-b6b9-2d939d363b4c",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "17eccf97-808b-49d4-b2bc-0a0f3f2fb9e2"
        },
        "item": {
          "id": "a8792994-ecbf-4b6e-8305-c4f88e85dc2b",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "2728650e-8468-4170-904d-b1b51c69e738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f9b69f-e161-494d-a7a4-509dddb956dc",
        "cursor": {
          "ref": "155a5d83-807c-40e4-b75a-08ae1626523b",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "81cf5585-1a91-4dbc-9214-f00f94cc2a3c"
        },
        "item": {
          "id": "80f9b69f-e161-494d-a7a4-509dddb956dc",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f7d7250a-aa19-4150-8bf6-026babcc93bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d62b2813-09d3-4e52-ae4e-fb4ce090ce2f",
        "cursor": {
          "ref": "3cd9c01d-890c-48d8-b2cd-25b00373acbc",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "0ae1b11d-98d9-447a-957a-5f505599c222"
        },
        "item": {
          "id": "d62b2813-09d3-4e52-ae4e-fb4ce090ce2f",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f15224fd-5a57-4098-b401-01af832ee019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54d26be1-1f5a-4e62-a794-71bfe1319b41",
        "cursor": {
          "ref": "aa0e3fb4-ba7f-4002-ba37-9d0761226931",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "17d9bf9e-b381-47cc-bc3f-7957e53e0958"
        },
        "item": {
          "id": "54d26be1-1f5a-4e62-a794-71bfe1319b41",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "96f43ffd-c868-467d-a58e-f8ea4985f4f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3091f684-3dff-428e-ab4d-a84dbb2e7099",
        "cursor": {
          "ref": "15e90cff-56bd-4498-a78c-36f195fbb24d",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "a6a3bc66-fcaa-49e4-942a-88d866d37624"
        },
        "item": {
          "id": "3091f684-3dff-428e-ab4d-a84dbb2e7099",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "d16804f0-53d2-4370-8ad2-610945415480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f6df4dd-f40e-49d5-8e6e-6d3b02c4e4a7",
        "cursor": {
          "ref": "e709d46e-b727-4c39-8c40-258bb697f382",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "5c9def3b-fe40-463c-91b4-67960639814c"
        },
        "item": {
          "id": "5f6df4dd-f40e-49d5-8e6e-6d3b02c4e4a7",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "cb309a9e-58d3-4b83-96b1-6b7abd8df9dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd8420a9-7b6c-4c4f-a847-e9dae19210b3",
        "cursor": {
          "ref": "0f7c4f45-8e0c-4b10-864e-90baf6255b7a",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ce31c43d-2476-472d-95e9-93f7e8dd4afb"
        },
        "item": {
          "id": "fd8420a9-7b6c-4c4f-a847-e9dae19210b3",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "bb09d0c6-a618-474e-aeca-1826b414b195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74a9008-318e-4d96-9ef8-820481a28968",
        "cursor": {
          "ref": "26bae5fc-9509-47be-b662-16bdd40c058d",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "da68546e-de3b-499d-bcfd-e6a72c397103"
        },
        "item": {
          "id": "d74a9008-318e-4d96-9ef8-820481a28968",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "7d7e3aaf-d2fe-4545-a9a2-d09e901af386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf29edf-08bb-4bd9-a7e6-b30be2d3d3bf",
        "cursor": {
          "ref": "04ddd19c-77d6-4b7e-ade4-c4a80c871362",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "84f1a960-444c-45c0-9097-2b05fab206c0"
        },
        "item": {
          "id": "8bf29edf-08bb-4bd9-a7e6-b30be2d3d3bf",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "8685a3aa-8aa8-4a44-b593-842cd08294c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08cfc32a-1c30-43ac-a2c4-4db88bd5ec10",
        "cursor": {
          "ref": "1d58eb50-a602-4c7b-beee-1bf31a68c6e5",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "deafa506-eaf4-440a-bef2-de88dabdb6f7"
        },
        "item": {
          "id": "08cfc32a-1c30-43ac-a2c4-4db88bd5ec10",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "2032cd31-0734-485f-84da-d420154a792b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "588cd3ee-5e4a-4fb0-afc2-812bfe11e1b0",
        "cursor": {
          "ref": "3b094fca-857d-4a2a-875d-50a796e1dd19",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "8b30453a-7be9-4f96-bcea-23ba73cf8de6"
        },
        "item": {
          "id": "588cd3ee-5e4a-4fb0-afc2-812bfe11e1b0",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "5f0750bc-76e8-4e8b-99a4-8191e3b7eaba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5603df18-5b8c-49d7-86ce-f1a4690ba2c3",
        "cursor": {
          "ref": "ced5fbe1-ad51-4d36-8931-052f193f435f",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "426b2da4-0915-4ce9-b944-5926da7bb1c7"
        },
        "item": {
          "id": "5603df18-5b8c-49d7-86ce-f1a4690ba2c3",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "80042d49-f216-4b95-ad96-8339ca65eb63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8e982b1-c74e-4afa-a723-4342a8e3644b",
        "cursor": {
          "ref": "4a45621b-1161-42de-b508-57871a1a99df",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "cd66f852-7e74-4979-9482-00d14cc4b6c5"
        },
        "item": {
          "id": "a8e982b1-c74e-4afa-a723-4342a8e3644b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "63b380e1-318d-4a55-93f0-324942103d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f17a01ce-5085-4b26-a595-c7e35414dee7",
        "cursor": {
          "ref": "7f7d2341-7124-4dd5-bf58-e0df6461951e",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "2dcb238a-11bd-4140-90cc-18eb4f0cfa62"
        },
        "item": {
          "id": "f17a01ce-5085-4b26-a595-c7e35414dee7",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "139d5d71-e0e6-4e98-825e-c46701de32de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b966fc-060d-424e-b0f5-1a2d8975ffe3",
        "cursor": {
          "ref": "1bd37d2c-38a0-495a-997d-b8318fb1df18",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "db6910ed-c43f-4bb3-9bc6-ca9a1e5450e5"
        },
        "item": {
          "id": "f2b966fc-060d-424e-b0f5-1a2d8975ffe3",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "7cc5fc28-b23b-47b6-8aba-85b5af532fbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa4fb781-8a33-4049-94e6-9f7672f76519",
        "cursor": {
          "ref": "425c4fe3-5e8a-4dc3-9b6e-8b603d67976b",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "be164bb4-cca8-4365-9151-74fdc46acf9b"
        },
        "item": {
          "id": "fa4fb781-8a33-4049-94e6-9f7672f76519",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "13377010-59f9-4cb3-be14-c384e93c4ce1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 203,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5db732da-62f6-40c9-9e00-f35cac1c78a2",
        "cursor": {
          "ref": "19511e5b-cb13-480c-a2b3-70605c344d87",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "72c42b91-4e97-4a56-8bdc-4c895279332c"
        },
        "item": {
          "id": "5db732da-62f6-40c9-9e00-f35cac1c78a2",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "5743c83e-181a-4e2f-aca6-c5586196adfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fbbf847-d408-4245-878c-aaf7323862ba",
        "cursor": {
          "ref": "17aa8bc8-820c-4bbb-aeb1-158a4fbf5f46",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "32dab5e3-3bf2-4f0f-800e-58acab98414e"
        },
        "item": {
          "id": "9fbbf847-d408-4245-878c-aaf7323862ba",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "09853790-1cc5-4687-84eb-a6c9c26b2754",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83ebb22f-3718-483a-ba94-5e6d83c39a01",
        "cursor": {
          "ref": "de3e6c4c-d349-44bb-ab13-c6efa4c5782f",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ec290b63-cbc3-4bb1-9802-521341793bd1"
        },
        "item": {
          "id": "83ebb22f-3718-483a-ba94-5e6d83c39a01",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "5bdd26ce-d04d-4b31-937e-39a78397b49d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f477a04d-ff4c-476c-95ce-25aa3919cd2d",
        "cursor": {
          "ref": "9be62705-f292-4551-97e9-c8557f1b0efa",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "5c537108-6dca-4e35-acac-161ad5465b40"
        },
        "item": {
          "id": "f477a04d-ff4c-476c-95ce-25aa3919cd2d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "31745e21-7402-446f-8083-962eb7ef55c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b0ffa1-0c30-4d6e-b50f-578b8d338f77",
        "cursor": {
          "ref": "de885c48-a976-4d80-a7ad-6f483e60005b",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "ddcf4a94-8062-4266-a941-3b5c701b99be"
        },
        "item": {
          "id": "25b0ffa1-0c30-4d6e-b50f-578b8d338f77",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "210aa96a-e235-4b0c-ac66-7874e9022d2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4ca74d8-1fe6-4c11-81db-84b672d37b91",
        "cursor": {
          "ref": "f42ec2ab-8065-406f-ba4c-0ed80df6f6cd",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "526d4c4c-aa94-4648-b7c9-4618673b4246"
        },
        "item": {
          "id": "b4ca74d8-1fe6-4c11-81db-84b672d37b91",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "fa715c5b-3d21-461b-97e0-92257eccbb09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "393940f7-df30-4def-ab91-672093a8a778",
        "cursor": {
          "ref": "28441a48-a687-432c-b4ce-55433f6a1780",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "47fe1b9c-793d-4567-add1-cdbdded9c840"
        },
        "item": {
          "id": "393940f7-df30-4def-ab91-672093a8a778",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "ee06cc48-2bb4-46c7-a3c4-e9838bb82b8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5062a2db-ce51-4c80-b38d-86d3fdc61856",
        "cursor": {
          "ref": "2823adfa-70be-4afc-8c71-bce164390d47",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ec4802c2-4238-4f9a-818a-8ad32d1ef964"
        },
        "item": {
          "id": "5062a2db-ce51-4c80-b38d-86d3fdc61856",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "4485f076-4e12-42d0-916c-25d8fee8938b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b52eaf-67ae-4b86-a588-8d2d3144a322",
        "cursor": {
          "ref": "47fdb30b-4ce8-411d-8a83-66823c3b24b6",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "82ab1685-1cc9-4873-8529-c80227a63eee"
        },
        "item": {
          "id": "76b52eaf-67ae-4b86-a588-8d2d3144a322",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "e9bd6620-8dea-489d-bd58-95738d9c893e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6566e53f-846d-48ab-9776-2280c0005eb7",
        "cursor": {
          "ref": "12f9e565-1523-4179-8946-7b942623a18f",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "89a61740-8bb8-4cc2-afdb-6b5a6b55a9ec"
        },
        "item": {
          "id": "6566e53f-846d-48ab-9776-2280c0005eb7",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "27f7bd49-07e9-4a88-bc9b-71c1527c2654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7c0496b-648c-4d4d-8e2b-743b7752fb65",
        "cursor": {
          "ref": "98dfe352-4eaa-4b46-9a80-8d7731bfd6de",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a66ed487-f1b4-4e8f-bd96-d3b35b75c35c"
        },
        "item": {
          "id": "b7c0496b-648c-4d4d-8e2b-743b7752fb65",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "f28a8a51-798e-4fa7-b0e3-9cae6cfaf03f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3ff8586-e8bf-47c9-89a2-11ae314f253d",
        "cursor": {
          "ref": "c186843b-39da-44cf-a26b-1e7f4b783532",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "16af705d-ec9b-426c-b80b-4ba317fbd4ab"
        },
        "item": {
          "id": "d3ff8586-e8bf-47c9-89a2-11ae314f253d",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "35874bfe-0330-4bc2-bb8a-fc6f79798c3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dc7ff4a-7f01-4dc6-addc-64ade5b41111",
        "cursor": {
          "ref": "7b28a7e7-7c2d-42c9-be69-2a98be50267f",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "93a0b62d-24af-4370-91a4-87c498d61305"
        },
        "item": {
          "id": "6dc7ff4a-7f01-4dc6-addc-64ade5b41111",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "90f09225-9587-47c4-961a-ecacb4de06d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b05196f8-d813-4714-8156-78ac4d60aabe",
        "cursor": {
          "ref": "9d3536d7-4b90-459f-a220-441951c14e5c",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "83c6783c-8ec9-4585-9a79-7198f41da4ae"
        },
        "item": {
          "id": "b05196f8-d813-4714-8156-78ac4d60aabe",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "cc69b51f-c4c6-4155-8569-fa5e54dc0fbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb7f9710-6cd8-49ce-acb6-36d0857151aa",
        "cursor": {
          "ref": "d8f951b7-137f-4e87-90ad-4839de22d6fa",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "184af839-42aa-4ba4-aab8-a4576fa90193"
        },
        "item": {
          "id": "bb7f9710-6cd8-49ce-acb6-36d0857151aa",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "892b8c5d-f82b-4237-9742-d3b0528643d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fe66d56-1f4b-4299-a3b5-535f7ce82dc3",
        "cursor": {
          "ref": "f8f5732e-df98-4375-9860-79b38630f0ad",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "dd976bf4-f735-4527-87df-9a27249d1f1c"
        },
        "item": {
          "id": "8fe66d56-1f4b-4299-a3b5-535f7ce82dc3",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c7b19ba8-f6b7-4e0e-b7f5-19b4aca5d1cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74883bc1-45ae-4b7f-92a5-bcd43e814431",
        "cursor": {
          "ref": "a1632f4b-b5d1-4db7-be03-91aef2c6f73c",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b689602f-c641-43f6-9084-d676e6073cdd"
        },
        "item": {
          "id": "74883bc1-45ae-4b7f-92a5-bcd43e814431",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "7ab3c61a-b223-408a-9cf2-4d510b9884ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdfcf703-b27a-4982-a39a-3f03775776c5",
        "cursor": {
          "ref": "da3dff34-fd71-488e-8cbf-25e8bdb12746",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "367fa434-3971-4560-9599-2c3934d92b30"
        },
        "item": {
          "id": "bdfcf703-b27a-4982-a39a-3f03775776c5",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "4264af1a-559a-454f-981a-69348884a0d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84646686-5487-4ba3-8e38-0f128905cd89",
        "cursor": {
          "ref": "ef92c072-e94e-46de-a4cb-8b4bcf0828be",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "3443ef65-31ed-42aa-85e7-f2f7a62beac1"
        },
        "item": {
          "id": "84646686-5487-4ba3-8e38-0f128905cd89",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "21b614e8-24d5-43de-84cb-f28e40de4083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2d3d186-5937-4227-8d4a-984fc72357ff",
        "cursor": {
          "ref": "d137db4d-23ab-4b51-8156-a37d6c8e4558",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3c21d097-d987-46eb-af95-3ca4917be37e"
        },
        "item": {
          "id": "c2d3d186-5937-4227-8d4a-984fc72357ff",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "585eb4dc-7f94-4b34-afa9-75bf3fba4414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5714f226-ac53-4716-aadc-47298facd685",
        "cursor": {
          "ref": "6bddb67b-1161-468e-ad4e-d8da6750abf0",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "248d0fae-7d00-4c6e-a9f8-8ee73d05cf6f"
        },
        "item": {
          "id": "5714f226-ac53-4716-aadc-47298facd685",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "cbb6855a-4a31-4420-8dad-93fb632822b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd9810a3-8e12-49d0-acbd-e8995a301382",
        "cursor": {
          "ref": "a7b96227-eef3-4021-ab60-e36dec51602f",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "55b6a8d8-7494-466e-91ad-d6a317ce227d"
        },
        "item": {
          "id": "dd9810a3-8e12-49d0-acbd-e8995a301382",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "8ae7bdfe-a6ad-4c19-a699-b8f140e2c45e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c91b1a4-cd04-487b-85d2-a3f0dfddb7d9",
        "cursor": {
          "ref": "61321d81-10c8-42ea-a662-a1a36fc5f248",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "4d319537-fced-4cfc-b382-19f7b7cd79b7"
        },
        "item": {
          "id": "6c91b1a4-cd04-487b-85d2-a3f0dfddb7d9",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "64e1b5ac-ba0d-440c-9458-ee430d311163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2db20816-3451-4725-b94b-62b940790e89",
        "cursor": {
          "ref": "9084ab2a-6b95-4dc0-8859-23b3c2cecd15",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a9cd5303-6299-4aa8-b02d-e6bf4d937f3e"
        },
        "item": {
          "id": "2db20816-3451-4725-b94b-62b940790e89",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "749fe057-8063-4a5c-a240-fc3ec7686388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "224a0137-6b9d-423d-89ff-6565b9362ab9",
        "cursor": {
          "ref": "1aa6baad-810a-4648-a217-0297f27a7559",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "25e6b52d-874a-4647-8077-16db70d1e4f6"
        },
        "item": {
          "id": "224a0137-6b9d-423d-89ff-6565b9362ab9",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "34438e39-b457-40e7-9d9e-ef90b907face",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8a37021-61ee-48e3-afe3-6a841e59e583",
        "cursor": {
          "ref": "4fd2e93e-e187-4716-85d1-48a2323a9342",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "2046f309-efe4-4ee4-bce8-0f404d9ea41e"
        },
        "item": {
          "id": "d8a37021-61ee-48e3-afe3-6a841e59e583",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "55aeed9a-ec21-447e-906a-1e63a08d3459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "631393b9-2caf-4a3d-916c-54027dccaa2c",
        "cursor": {
          "ref": "4de9b603-791e-45a7-9e8f-290c8293762c",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "2bb7bab2-b005-4bc7-9b9b-7a1c283777d1"
        },
        "item": {
          "id": "631393b9-2caf-4a3d-916c-54027dccaa2c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "22ae9df7-27e5-4361-b433-0195f351a93e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75da73fa-e461-40e5-8692-b80e9117630a",
        "cursor": {
          "ref": "58b6a37d-88fd-4192-9ca5-939266ecda12",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e7ac7742-e3b3-4ec9-a88c-b4cbde9ec70e"
        },
        "item": {
          "id": "75da73fa-e461-40e5-8692-b80e9117630a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "cb626fbf-9fde-45ff-bbdc-e3c3ca63cc33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb2a4980-5c31-48d4-b4e5-3d5b84717735",
        "cursor": {
          "ref": "a349ea8c-f088-4c6e-9645-ecd8e6dc4a2e",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "bfd0023c-1738-40dd-8ad6-b98af0bb7b5b"
        },
        "item": {
          "id": "bb2a4980-5c31-48d4-b4e5-3d5b84717735",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "141554af-c815-4dd9-9b22-6c01e98f13fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d6e8f12-04df-49e7-8af0-f63f40545812",
        "cursor": {
          "ref": "71683c8c-4050-425f-9edf-bafaf8523ef7",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c454b184-5327-41db-a020-9c7f9493b781"
        },
        "item": {
          "id": "9d6e8f12-04df-49e7-8af0-f63f40545812",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "611b3d42-fd3a-4d06-a44c-8c6118bb4a0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e1721e1-499d-4670-94ee-33827e732f46",
        "cursor": {
          "ref": "5c988d2b-cf13-4bae-8441-5e96943926f6",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "fc5e2e47-4947-4386-90d9-23209e57e19b"
        },
        "item": {
          "id": "7e1721e1-499d-4670-94ee-33827e732f46",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "077ef7f9-49ff-49b4-8003-6eed84e79273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1517b393-670d-4fb9-9923-c2d27691b671",
        "cursor": {
          "ref": "984d6806-cb9e-464d-9a4a-faaf978ab162",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f78edc5b-0609-41b5-8682-1be598e26495"
        },
        "item": {
          "id": "1517b393-670d-4fb9-9923-c2d27691b671",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "46ba381f-e110-48db-82ea-1e4bee4cbb27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a11a476-ff65-4540-8e33-f7c46ae54b33",
        "cursor": {
          "ref": "9a557226-a221-4c8c-9f02-f239f6f75fd1",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e62b39bd-781d-4448-9498-a0d50332a8d6"
        },
        "item": {
          "id": "5a11a476-ff65-4540-8e33-f7c46ae54b33",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "dca90e23-4d39-404e-acfe-794e7c02ec02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19ff016e-d016-4504-bbec-544f994fcf11",
        "cursor": {
          "ref": "48135aa7-99de-4e60-9284-7fe70937c725",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "0747747a-03dc-487b-8a36-6542de8c0956"
        },
        "item": {
          "id": "19ff016e-d016-4504-bbec-544f994fcf11",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "c33d7592-f1c8-4a8f-988f-62ddee8a8191",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48b35ef0-9a1e-4303-acf3-6308a5350c2f",
        "cursor": {
          "ref": "5facdc4d-aa4c-4dbc-a98a-6d07dc65e787",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "01fdc9eb-36d1-4588-9ae1-daa72ab23ad2"
        },
        "item": {
          "id": "48b35ef0-9a1e-4303-acf3-6308a5350c2f",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "113c676a-6e7b-4ce4-828e-812f47e77946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e5634d9-c30d-4009-90ed-2919dcab152f",
        "cursor": {
          "ref": "d6274533-9d6c-43d7-abfe-7af005f3b7df",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "68254d60-7f0e-4b40-a5da-eea47d185ed7"
        },
        "item": {
          "id": "4e5634d9-c30d-4009-90ed-2919dcab152f",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "f5a7555f-ca88-4192-a905-72964a1f84a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f5b71c3-e84c-4267-b48f-ee6e25968fd4",
        "cursor": {
          "ref": "750966f0-f1e4-4fd0-92ac-dbfbb5e2cb02",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "019fbed3-b44a-4b61-9059-a2f864886e96"
        },
        "item": {
          "id": "6f5b71c3-e84c-4267-b48f-ee6e25968fd4",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "677fe805-932b-408a-bdfd-54e3a16ac2fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c3263d4-f341-470f-b85c-c466daf4fc77",
        "cursor": {
          "ref": "16d60a23-907d-47aa-905b-516bc92db083",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "77bdf351-d38c-4732-8090-cc3b310cc7d6"
        },
        "item": {
          "id": "1c3263d4-f341-470f-b85c-c466daf4fc77",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "f2ec922f-84ba-4be1-9103-3ce9a91f3b9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca1017f-2ef5-4ca9-99b2-e80ec096ee20",
        "cursor": {
          "ref": "f08fe62e-02ce-4e11-b5d3-6fbf0aba3ae9",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "668ce4b4-0e9d-4a68-9794-0d0fd16dcd17"
        },
        "item": {
          "id": "8ca1017f-2ef5-4ca9-99b2-e80ec096ee20",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "9cbf6b3f-38a3-4e18-857f-18bb3a90c639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6805dfb-9b22-4252-832f-9eb294e6201d",
        "cursor": {
          "ref": "cbc5e8de-506d-44d5-a25f-dc03549d4c44",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "49d89bd0-5582-48b7-8006-6406cda2c14f"
        },
        "item": {
          "id": "e6805dfb-9b22-4252-832f-9eb294e6201d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "532bb1ee-08b1-43cb-9ef8-681efae4a701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1416cca2-cb8a-4dec-8b92-7bd01bc7558e",
        "cursor": {
          "ref": "e14b6566-bdbe-46f3-afda-7657e45e2a25",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "d7457002-b6fa-42fd-8c4c-85a3419d6586"
        },
        "item": {
          "id": "1416cca2-cb8a-4dec-8b92-7bd01bc7558e",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "1831e0ed-d9f9-4162-93d2-f6e34266b799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc58e45b-f18a-426a-87f9-527dd070aa02",
        "cursor": {
          "ref": "ccc01ee5-dfc8-4a42-b6d2-c69717dd4f3e",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "48d849d3-8164-44c2-ade2-19e9c86149ab"
        },
        "item": {
          "id": "fc58e45b-f18a-426a-87f9-527dd070aa02",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "935497dc-e84c-429e-a9f6-b2c3883ee652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d737ce31-d86b-4357-9928-a74d8e184912",
        "cursor": {
          "ref": "c38a7a84-ce93-4329-9eb4-b1c84ff28acd",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a406e25e-ffa6-422d-a8b1-6fdfb1e0e1de"
        },
        "item": {
          "id": "d737ce31-d86b-4357-9928-a74d8e184912",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "2c7a81b5-7a28-4f4a-bbc3-a466ed7e2187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8640a1b-0fa3-40e7-8180-e96a41730c14",
        "cursor": {
          "ref": "e1534886-2150-4d9a-a2cd-dd6fb1173256",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c1729f1e-f590-4c13-a3c0-01348f421842"
        },
        "item": {
          "id": "b8640a1b-0fa3-40e7-8180-e96a41730c14",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "9ac4afdd-2cdc-4150-9c22-9cb0982cfd0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b93db81-7b2b-4117-9d74-581abc997d26",
        "cursor": {
          "ref": "0e05bd98-9641-4c29-9009-9e80c3aaba9f",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "7602ccb5-d65d-433c-81fa-72970055d25d"
        },
        "item": {
          "id": "2b93db81-7b2b-4117-9d74-581abc997d26",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "dc404738-a49a-48a3-bafa-8445749e25df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e84622c-a304-43da-bb45-03030f5eb69b",
        "cursor": {
          "ref": "a2d2f314-de7f-45a6-ace0-7545ef59d134",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "3e7ee9e8-4d6f-4551-9167-b22f38c928f3"
        },
        "item": {
          "id": "8e84622c-a304-43da-bb45-03030f5eb69b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "5ba3cc55-02d2-4739-b927-0e82dd3e9a07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a6ef9c8-1baf-45e4-80d9-6d478a4ae805",
        "cursor": {
          "ref": "2930722c-4b41-4445-8c67-482f75cb5f9a",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "fb3fddfd-6ad8-4b5b-9c01-45d2fa445727"
        },
        "item": {
          "id": "1a6ef9c8-1baf-45e4-80d9-6d478a4ae805",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "596fbdd4-67b2-476a-ba57-055642681680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "272e236d-c70a-45c4-b872-f5a9815a8cd5",
        "cursor": {
          "ref": "06a40e73-6875-484f-9137-1f2bcad239c1",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "89c8bf9f-72e5-4bde-a4ee-2f2602d8edb5"
        },
        "item": {
          "id": "272e236d-c70a-45c4-b872-f5a9815a8cd5",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "502b522b-d2bf-44db-90da-8e40913fccda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d93a3f84-58a5-46b2-a747-d80f9ca62266",
        "cursor": {
          "ref": "d2c2e393-73d9-49d4-b732-34d9fd43131e",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "399d4d7f-d203-4010-b4ad-931d20e2061c"
        },
        "item": {
          "id": "d93a3f84-58a5-46b2-a747-d80f9ca62266",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "4f3a00b6-1308-4643-be07-c15a3f784cd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8748f55-f230-4594-b680-a3dd441b3769",
        "cursor": {
          "ref": "70820791-6edd-4aab-a642-ef3a2ec1dcd6",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "28abe5e4-f503-4c63-8bd5-54e22fbbbbb2"
        },
        "item": {
          "id": "a8748f55-f230-4594-b680-a3dd441b3769",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "809acd64-a50d-4e46-9f9a-ff17319b36e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8952bb39-a9c4-4442-a1e2-ad0b790e4d07",
        "cursor": {
          "ref": "29284e3c-e043-4c42-9698-de4be5eefb19",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5847be99-7fcc-437c-8cf9-d236042d7833"
        },
        "item": {
          "id": "8952bb39-a9c4-4442-a1e2-ad0b790e4d07",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e77cdefd-c288-4158-a6e3-8a0ef6c4cc70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df633f5d-5f99-4dac-96d0-05a801aa3180",
        "cursor": {
          "ref": "91065891-e5bd-46cf-9211-31b233956864",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "f5910fa9-e3ef-4c78-9b8d-b16f0533a205"
        },
        "item": {
          "id": "df633f5d-5f99-4dac-96d0-05a801aa3180",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "232c7078-88e1-4443-9019-e9bd102fce6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35d0498e-5686-4720-b872-67aed04f561a",
        "cursor": {
          "ref": "74a4114a-c967-482b-8f51-440626526e4f",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b040527d-f978-4777-9784-840ed9565c2f"
        },
        "item": {
          "id": "35d0498e-5686-4720-b872-67aed04f561a",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "3272b92a-61b9-4458-9868-a8add4a47e3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93fcd50b-664c-477e-92ad-43a04b862d30",
        "cursor": {
          "ref": "5d39c6d9-df63-40bb-94df-9cd0acd6c65b",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "68ecd84d-c6de-4b92-8c37-5e61d101d4d6"
        },
        "item": {
          "id": "93fcd50b-664c-477e-92ad-43a04b862d30",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "65e32411-93ce-4e91-9ef5-8021d28a759e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a41d40a-b7d5-4ddc-bf33-f83d368ce838",
        "cursor": {
          "ref": "76ddca95-cd08-4ef0-9545-57220556cd83",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "964efa6f-a016-4fd1-8478-67fb95451f1c"
        },
        "item": {
          "id": "9a41d40a-b7d5-4ddc-bf33-f83d368ce838",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "0e4670a7-14bc-4f86-adce-dacf1ab1d139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a573670-fc35-426a-a54f-6c7cb1e81090",
        "cursor": {
          "ref": "0ef2ea79-4aab-44df-8b34-aed6f4a5bab7",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e7470b71-69c1-4a35-b78f-1baa92704799"
        },
        "item": {
          "id": "7a573670-fc35-426a-a54f-6c7cb1e81090",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f16d2ce4-2dcc-4c9d-a942-15f12aae0a48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5775206-8da9-48de-9d96-9b0f89b99115",
        "cursor": {
          "ref": "97b607a2-6832-44f1-b103-45c132c5f6da",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "951f6dd3-7472-434c-b5d4-7838ce8be988"
        },
        "item": {
          "id": "b5775206-8da9-48de-9d96-9b0f89b99115",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "16ab762d-9c75-470d-811c-a11b014157b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a8d5a0e-dd7a-4c01-aef0-5a881e117ecb",
        "cursor": {
          "ref": "67c6f4f3-ca85-4711-aeaf-c6838fcbad3c",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "77f28bb5-bf89-4bb2-8a93-3e89e79f0351"
        },
        "item": {
          "id": "0a8d5a0e-dd7a-4c01-aef0-5a881e117ecb",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "4b59972a-76d1-4415-84e4-3cff484b43bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a883f1c-8693-449d-b196-3dc3b38c2a5a",
        "cursor": {
          "ref": "81b5bce0-89ae-42db-9bdc-fd4ed2a8c23a",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "71f9bc5b-0d25-4b7f-b3b1-24d32d4422cd"
        },
        "item": {
          "id": "7a883f1c-8693-449d-b196-3dc3b38c2a5a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9251d43d-c63e-42f7-8ee7-a57f6119169c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c012a088-48ba-4941-ae69-0d817353d01e",
        "cursor": {
          "ref": "8b9f16c8-4067-497c-914c-20ae7dc1d4cf",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "85a81425-8022-4970-bee8-8712eef5ecc1"
        },
        "item": {
          "id": "c012a088-48ba-4941-ae69-0d817353d01e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "b3b025fd-d624-43c6-bb3d-9b4fadab1e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "305ffd14-e3af-4389-bd47-061e7e904381",
        "cursor": {
          "ref": "408f5f1d-5315-42e6-8f14-d181cece5632",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0a175a1f-6535-4e9e-9448-1254b9fee3be"
        },
        "item": {
          "id": "305ffd14-e3af-4389-bd47-061e7e904381",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "dfb2fedc-408e-455a-b504-f65d2b2e2b02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d23a3ab-3672-4093-8487-53650f5f1d5f",
        "cursor": {
          "ref": "d58f7e15-ef37-4cbf-a564-20a3e4d8886a",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "dcd8bf45-03f6-4dd7-acf3-f2a1fb7513e6"
        },
        "item": {
          "id": "1d23a3ab-3672-4093-8487-53650f5f1d5f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "2e0b7ed0-b882-487e-a60e-c553b5703c85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41e3264a-7d72-406c-a291-12d5e59d987c",
        "cursor": {
          "ref": "a282edbf-209d-49b5-9a1a-d69d838f1b24",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "7d9e9a0c-c756-4bf9-9dbf-b03a0f02be6d"
        },
        "item": {
          "id": "41e3264a-7d72-406c-a291-12d5e59d987c",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "7c9bd8d9-4485-43aa-a239-0d95d7d9a5cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c8ce2a3-f9a7-47cb-b751-596b63680bd0",
        "cursor": {
          "ref": "2d6c5d7e-f64c-437f-9260-e20eefe35efd",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9458228e-60a3-4504-a472-19b468bf4d13"
        },
        "item": {
          "id": "3c8ce2a3-f9a7-47cb-b751-596b63680bd0",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "5b617614-50b0-4c18-8b18-82643203c541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c95939a-9c9d-46e2-bbed-8afd7d1df04f",
        "cursor": {
          "ref": "77147d44-b2ed-4660-92b2-54d927615370",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "b96e42bb-5666-47a0-a923-aa44813db927"
        },
        "item": {
          "id": "2c95939a-9c9d-46e2-bbed-8afd7d1df04f",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d78f0132-ba32-4c09-b0e3-6f9d825b89fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc87ca04-d5b4-469e-b98e-d0edd2a820a0",
        "cursor": {
          "ref": "f17b6820-df6f-496e-a553-e19c748246f7",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "48eee692-d15b-4988-bf2c-c30e3da0a0d8"
        },
        "item": {
          "id": "bc87ca04-d5b4-469e-b98e-d0edd2a820a0",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f1c35d03-52e7-4e00-b151-6faa26f6a21d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "2869cf26-522e-4e75-96a6-5803c700f05b",
        "cursor": {
          "ref": "c967dbf9-975c-4965-a8c5-1b8806af8502",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "672695c5-7405-446b-8d54-e3beea87fd0b"
        },
        "item": {
          "id": "2869cf26-522e-4e75-96a6-5803c700f05b",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "8d659c86-f8ea-4956-ad78-d7565ab127a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "def8040c-4840-40da-9895-25a5f0e14685",
        "cursor": {
          "ref": "34da305c-42be-498c-9736-280f2b6740c6",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "648c1520-d157-4992-881a-a3d56b8d324e"
        },
        "item": {
          "id": "def8040c-4840-40da-9895-25a5f0e14685",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "71f258d6-71b5-4e24-826d-aaee7af383dc",
          "status": "OK",
          "code": 200,
          "responseTime": 177,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d47f3d6-9872-4183-a174-a85107965a1b",
        "cursor": {
          "ref": "caedc193-ac64-4639-a974-519ee8c35e2e",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "fb4bd27b-0129-4d49-9b08-298ccbbf0ecf"
        },
        "item": {
          "id": "3d47f3d6-9872-4183-a174-a85107965a1b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "f18bb0f6-5cf0-42a9-b1c3-7b7ac722dd93",
          "status": "OK",
          "code": 200,
          "responseTime": 4812,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "8708e7b8-8450-4e62-b023-606e2c58b98f",
        "cursor": {
          "ref": "c5a68717-274d-4a8d-b8f1-b53f09d4789d",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "5b5ceb86-e6c9-420d-9c29-ad38632b3755"
        },
        "item": {
          "id": "8708e7b8-8450-4e62-b023-606e2c58b98f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "af14dfcb-bfe1-49fa-a72b-db0789820875",
          "status": "OK",
          "code": 200,
          "responseTime": 6216,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "43003d40-a740-474e-9a4b-5802ead24e19",
        "cursor": {
          "ref": "b616410b-16d0-4928-8e5c-c2dbb0ac135d",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "64bf7c6a-4387-4631-ac58-65afc8844c9c"
        },
        "item": {
          "id": "43003d40-a740-474e-9a4b-5802ead24e19",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "43003d40-a740-474e-9a4b-5802ead24e19",
        "cursor": {
          "ref": "b616410b-16d0-4928-8e5c-c2dbb0ac135d",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "64bf7c6a-4387-4631-ac58-65afc8844c9c"
        },
        "item": {
          "id": "43003d40-a740-474e-9a4b-5802ead24e19",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "43003d40-a740-474e-9a4b-5802ead24e19",
        "cursor": {
          "ref": "b616410b-16d0-4928-8e5c-c2dbb0ac135d",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "64bf7c6a-4387-4631-ac58-65afc8844c9c"
        },
        "item": {
          "id": "43003d40-a740-474e-9a4b-5802ead24e19",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "49da17c9-8510-4c5c-9953-6044527e7d94",
        "cursor": {
          "ref": "6fb464ef-fa3e-4ab6-b1c2-f1f37408068e",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "05f8773c-8420-44e3-9680-d62afd9649de"
        },
        "item": {
          "id": "49da17c9-8510-4c5c-9953-6044527e7d94",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "6a9d1604-5a75-4c69-9f7b-aa5a8b89d558",
        "cursor": {
          "ref": "0fa93c52-03c0-4773-8c42-c01d3e9a6fab",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b6ff979d-6912-4055-a52a-cf829c7d2808"
        },
        "item": {
          "id": "6a9d1604-5a75-4c69-9f7b-aa5a8b89d558",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "6a9d1604-5a75-4c69-9f7b-aa5a8b89d558",
        "cursor": {
          "ref": "0fa93c52-03c0-4773-8c42-c01d3e9a6fab",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b6ff979d-6912-4055-a52a-cf829c7d2808"
        },
        "item": {
          "id": "6a9d1604-5a75-4c69-9f7b-aa5a8b89d558",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "eb844805-489f-4910-bd3b-833c70c1247a",
        "cursor": {
          "ref": "8d9d9cad-f446-49a9-8550-f4e2542ebcce",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "45b3872d-5a17-4536-9493-7d14a115bf67"
        },
        "item": {
          "id": "eb844805-489f-4910-bd3b-833c70c1247a",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "832f6f89-2337-4b81-9a34-0f1ac1e81d35",
        "cursor": {
          "ref": "5eb3bdcf-4119-4c28-83ec-221bb9b67001",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "571daac7-0bc3-40e5-9da4-be7528383f3f"
        },
        "item": {
          "id": "832f6f89-2337-4b81-9a34-0f1ac1e81d35",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "832f6f89-2337-4b81-9a34-0f1ac1e81d35",
        "cursor": {
          "ref": "5eb3bdcf-4119-4c28-83ec-221bb9b67001",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "571daac7-0bc3-40e5-9da4-be7528383f3f"
        },
        "item": {
          "id": "832f6f89-2337-4b81-9a34-0f1ac1e81d35",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "0777a079-3246-4d95-b4a5-55047fc6852c",
        "cursor": {
          "ref": "90c8d937-233d-47ce-b96c-7d75ca9ba218",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "fc3e9774-88cb-4b77-9861-5b3907d806eb"
        },
        "item": {
          "id": "0777a079-3246-4d95-b4a5-55047fc6852c",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}