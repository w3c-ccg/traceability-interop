{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a59355df-47c3-4c99-b75f-7bbe64017b49",
        "name": "Clear Cache",
        "item": [
          {
            "id": "7c3a9928-bf49-498f-850c-c322a31076eb",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "48ec73b1-2b5f-483f-ba61-014662896512",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3cab03f2-e9e3-4088-b871-c44e0ee908a8"
                }
              }
            ]
          },
          {
            "id": "84b1bec6-89d9-4436-953c-fa3e0ad445a4",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "048cc4bd-5fea-4226-b5ba-303f321a987a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2a58f030-392e-4ea9-9cf2-d34ed354a2d0"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c5a43461-ddf8-433e-9660-364230f2a1aa",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "6ad89151-ccba-44d4-bae7-a4fdbcbb1b8a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ff1d8ce0-9ec0-4cc8-9056-af399908fccf",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "14812994-22d0-439d-a133-89d5f918ba68",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bb14167b-14f8-4cf5-9f0d-870bf5a6f272"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "94e683be-9c12-4104-b923-5af9ab20a22a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9109ec03-f622-4c65-ad9e-4e5d7c0ae37e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d4972fc2-edd7-46d2-8d2c-c019fc8b1b97",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "221ff729-3a6e-482e-abf9-b787ea0129f4"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8748e593-7bfd-4a74-a6ee-47e809a932eb",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "c628a60c-aa6d-4cf0-95c2-f4653d3c5d2e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d7cbe9cc-828a-4f40-be8c-009c35118f93",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "74c1eb80-b42d-4b5e-9ccf-67e930d44ba0"
            }
          }
        ]
      },
      {
        "id": "6f9d2b9a-30af-43bc-8f80-44f1d1955fb4",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e885d37d-085f-427d-a5c0-a67c93d2e409",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3a3a51db-cc23-4c25-a078-614f49e5a48e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "990dc1aa-0e56-4117-9120-a77b4baf0974",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d6011f1-0a91-4f2b-b188-f579bda82872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ebba8517-9375-4724-8384-d7e1817687e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "213648b9-da06-4134-a190-4be23f3606fd",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ecb863-e8f1-4f3d-928c-61bef16c83ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "399334f6-dc97-42f2-a75c-3c72bb39fc2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bfc50fb-b162-4ed4-833b-b0afc36f1bdf",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8d96fc-cbbc-4056-9cc2-6f94d13b11f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "754b36ee-d306-4264-8d79-451da995a3e7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "355ab95e-7c7a-4f78-b2be-0f8f2febbf1b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "24a7d051-9c33-4a7b-8f7f-7787239658fc",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6597623-bca6-4954-a591-f5db8083bf62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8379dbdb-5655-437e-8b7d-2bf4292c54d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e745c68-de0a-4f20-bb3e-273432065e02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc077a78-a91c-42da-bdb1-7fac5d54f567"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "715870c4-fa47-48d7-ad28-8378390ca232",
            "name": "Positive Testing",
            "item": [
              {
                "id": "df3e7097-5b9b-4468-9ec2-5f121e54d63f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "22d7c879-4c49-4aeb-a70c-fe0962217ca7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f8108d60-6237-4307-8002-077d6f0c4281"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "edd7ce11-2355-4e15-978b-8496a80f3856",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "3c30b56c-d42d-4e38-a817-940d14a750f7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "361e26fd-07c3-49f5-99bb-34c4c02ca9e3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "84e6a077-4df8-4b93-8e91-54398d10b7de"
            }
          }
        ]
      },
      {
        "id": "d413a51c-35f2-4e01-8dd5-db77db20dc72",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "09583f20-d886-40e7-b20a-558eb6f76298",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a453eec9-c2eb-46f2-86e5-a3f882110716",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "bd596536-5807-4496-af13-8ec7185396cb",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66039d0c-89fc-4bba-9525-28c1f4d617a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c63612eb-4b50-4c45-84f0-17955809aab4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9beec3c9-7753-4a73-9049-e512a7777732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "edbda145-cd7a-4a9d-b14b-6910c21eeb52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "364432f1-7fe1-45c5-ac4e-f2040bd067c8",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af78d0af-0efc-4aff-af7f-3293f8a70a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9164af2f-1e9b-4367-ae3f-e43f343d28ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38361680-d092-41e5-a33b-cb6edd551789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "177254b4-24ba-4c86-90b8-800738d4136a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d922c062-9ad2-4dfa-a045-cfea15442b7b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b381f030-06a5-418f-b8b7-be25f21a5b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8b5b402-b3e7-41ca-80f3-b0e64859e6db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af9e0f7e-f8eb-4ed6-87e1-0735964161b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9fe82d5a-f242-4f55-81c8-abdc941512f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb795c6-4db1-4a3e-b758-bb878dae7223",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aabc940-e87b-4768-a1b2-f9cff29d5e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d145be3-ff2e-4ea3-943c-790863ff1a65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d66e51-006e-4806-9ba2-3e974f0cc596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4fb6d6be-ceea-43a4-ab6a-d2295ea38cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "955a9c09-8ea0-4e55-9b82-3dd9d4563695",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9574885-93cd-4992-92c4-d2090cb2e2de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cc2b4d1-3216-4733-897f-836f13d8d9e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41bad8e5-ca68-4efa-8b82-f9bbe2a94721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1bbe8630-ba26-47c9-9efd-11246ff56409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca348582-f890-4ba0-a637-66ebe7ac9bd7",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b50a9751-24e3-4e69-8f7d-4a38f885ec36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d2f59a3-3216-453c-831e-82da78ef8313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7ef5d25-997a-4420-af67-1a90578434ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa6c0a89-2d03-4f4e-b067-8b0ea507d328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0248c575-c7b0-4429-ba35-0e3451878f6c",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd6422a-5e8e-4779-a6b1-cec2fc75d209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0d28752-0e53-49a7-86b7-3c1ef736f0dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40a7a66a-e083-4dcf-acb1-d5ef8d7710ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49b09503-639e-494e-9701-fa83a35ff332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5184103b-d9cf-4c57-ab4a-7fc9ab446a24",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a1b2120-4fc7-4986-9102-54b968d35b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "799ce8e9-0daa-427a-810b-9216205d9811"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cbca87f-024a-4530-92d2-29907e2c04ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc53f60d-82f5-4867-b66c-590862ea885f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caeea330-b1e3-4ff5-9eb2-3f0bc1cd63a3",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c1f7b2-db13-45d5-97ff-d95e289dedf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43535488-c007-4c3a-847b-e0995610b82f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "956e7745-dc10-48da-a43c-d5687389a17a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d449302e-636b-4237-9726-62c0f3c87134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5293f7d1-7657-4d15-a473-276db1bb0481",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fed9fe0d-5e7e-48f3-b76c-0139f0e409d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fd7fde7-638a-48d5-b5ed-e1b663b0cf6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e152a5d5-282b-4c23-b3d4-1c8aa0256ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9638a90-0fdb-43d5-9386-a662e01eaef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba89032-bd9d-4cdc-9931-69893abc20bf",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff3f3c5f-b317-4e9e-b4dd-3f33c114d2fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67e61c64-1785-4dd7-b1df-553273cc57e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04ca315-3de3-427d-900b-87cef2b93da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f27676af-7bfe-4f8a-81d3-1b55039f77a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "484a2503-88fe-48e9-b96a-8d2f79148763",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "763168fb-a9f4-4ba0-bfd3-6895a01ebb19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a9a8017-44f5-497a-9353-b8061b09bbb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4566056-b1db-4649-8f7b-78d4d33f05ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0176aab4-2481-4a64-b621-47715f4eebea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af3effdf-7561-43d3-b4a8-4144768c1579",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c8f19e1-fa87-4d29-ad73-fc9837ed4cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caf24e1e-01cb-48fa-871d-b88d5988c479"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63397ed3-29b3-4e94-9dce-9c6038628271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a91c8ed6-2cb0-498b-9b44-b23546ee3e60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0baa7e8-a731-4149-897e-d4edf02af53d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b6fe1f0-5148-43a2-aab1-5a4a99412c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "727aa97a-52f0-4dca-948a-1539febd7bdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e2273c-c9a4-4eb6-8e52-41911142b6ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "79a9ee3c-a547-4a45-9132-d0ad42968d7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3291af56-286c-44f7-b29c-86c3cf29fd21",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "762b4555-90ec-4b2b-a069-b58bd4459183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "900266fc-225e-49ee-8704-2e13c75995f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7403e876-e0d5-496f-9025-dc9e295d6b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6033c926-d47a-4e8e-881d-da9d9082e938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d19a978-268a-4198-a726-1056793143fc",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0f60b8d-b0d7-4ca1-ba7c-a5e25aac082d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b10f9ebb-af90-4272-a749-3f7064877c77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "117f9bb9-5487-488e-9269-a7ac22dca529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33c75e72-12aa-40a2-8b67-2ec96b725737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "308d9170-4647-4484-8e03-8cff970fe8dc",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a94852-6a5c-4bd6-885b-e5c384163347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f37fc2a8-9743-491c-ae64-dfdb6c675495"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410c4d50-96b2-409c-91fe-556d85712ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4713e4c1-34d5-4758-92cf-117b89beeb47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "200ae61e-d9ff-4175-8dca-29a4f62116ce",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a46f00bd-34f8-457b-bea7-cde8533cd270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd15fd42-c1de-4cc2-b670-266e4ba3b64f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "789ea5fd-885a-4ccb-9b3b-eb7cd0a19df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "eda23505-e826-4146-bf36-510c86c81d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83348bb6-308e-41fe-ae81-95f62b849b78",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9574ccf0-d71f-41b2-ade5-8df1d67dd623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2dab6c8-0c96-4730-a69c-ebc3a8390c6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64a99f78-7ad6-4789-87fc-f6c45c4aeae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "054f5d91-e60b-43d3-91e5-22f332126f42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e58d8eea-bdde-4791-b249-f689c551cc5e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "735c1489-0949-4c6c-b1ea-76010aa59458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05894dc4-3d49-4a98-8b62-9a3c5b9244b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c45f25-3b3d-4a3d-b3ad-79d5a39af59c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d02f8d2b-5575-49ea-b66c-fa2f34fb1037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7f38976-173e-45fc-bd13-1ecf4d241b18",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa8a6b56-27ce-482b-95e4-2bd50753ae4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5666546e-46cd-496f-811b-36d881fd25cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f25c3c5-3634-462a-be74-6ca179c8f04c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "634653e1-b8b6-4bd7-ad34-41183d0f3f35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29aa9d42-ac6c-48f5-bbf0-9c889fd82383",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7633fc7f-9e96-46c9-bd8b-a2beac69dad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8ca5a73-9e72-44cf-961f-6a1fc69f24ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbfd5b28-9f76-4050-b457-3a6f0b47e1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "feba30a6-c29f-4021-ab12-c4ad972e8ce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "705e704f-0c05-4b42-b10d-13bfe6e2d103",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6397bf69-f455-423d-9e5d-a1f4214eb105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ce23501-b37a-46cf-b026-34f9004ba169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcab7788-7da6-4a3b-8f80-422916d2e97e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e10babd7-28b7-4f6f-9038-edafed0bdda4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ab2ea9-b1fa-4d85-bb14-6b2ae447d8fa",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6465c718-7430-4bda-8c76-527577e24e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4dd0388-f95f-471e-9b3e-17805ae3b393"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ebf9cd-dcac-431d-af39-7a3672c2430e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c49ad83-54ab-4c43-8be5-db7c6566423d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f13a92bf-6caf-4fe1-8c75-ef751bd61677",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13980aa1-3762-4ed5-9bd7-6902c9cd7c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "918fb658-0a23-4a77-bea5-cd5b2c010c1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba04b88c-9da8-4258-be31-88564893de9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "29b0489b-30b8-40e3-93de-07a622809d1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7157c311-ea9d-41db-ba42-a71375fd6df8",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a8217b-fdda-43f0-8fa6-dec771289e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ced1a05-9a0f-4ac4-ad43-2a4bdc1e7db8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6768290-f345-4e2a-9f09-bf35985064f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "226a5935-eaef-4c9d-bb2a-e3e488c98739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00a3acd4-0fc7-46fa-a720-e33438ab0e01",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ce94b0c-5459-4214-8f83-a69803ba2d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f633480-cf07-4d52-b5f6-1ca59a441e4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abede2b0-b9ed-4765-a2f1-0d3bf912a6aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5696b3eb-74d8-4f57-b9a9-735609e3d56f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ab58a6-d5e8-432a-9cc1-3d19de368a8a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b6c6518-a3ee-4cbf-91d6-955601d2f45f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a96a3aac-2be6-4be7-a257-cdb3c8772a06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b38b3d4-e9ca-4958-9c61-a0f8955e168e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ca9f302-2702-45e9-ad48-eb0c80973f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89d1d50d-b6bd-4d9c-b0ea-a981e3b2ca3f",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddbd5804-4564-4b13-879e-ecf04d461eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f22d48b-d167-432c-91d0-61d46875c0ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9550985-f292-4881-9737-5fd5346e465f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b454d98a-f469-4440-b809-b4fc0f0aa95e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d278f2c0-504f-4b74-921a-8e762963d68c",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c876ba58-f281-444e-88cc-9b3ea147b958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b46f3d09-bd68-4bbe-a140-08765371ba67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "535fa59f-2ccd-4000-8ffa-d4acf897b827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "366a39c5-3992-492e-8342-fe70d7532018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c58ef3a-3684-454b-a437-3d91e816ef8a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d68b66fe-8608-4a22-9023-5804ae1d31ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e1b41b7-a6a9-4d4b-8215-80f100458775"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bbae99c-1ff3-4f32-86d6-d382ffcd07ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7dfb65a8-16b2-4edf-9d0c-077c057eb861"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fddff2ab-3d6c-471e-a213-c5fc68407a22",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5634b1b-036e-4efb-b209-33d5ea12088d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3746a547-9d15-4a66-825f-c1aa8d848a9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd0511e5-e563-4883-93fc-734539695b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3c16c55-e242-4acb-9ea2-f7c1bc58a016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d84e4bc-9f93-4290-8be7-b478339fef21",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae0472d3-8412-47c9-acab-66a5acfbd12c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b9016e5-6e77-424e-961a-5b3a0439de16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6cdeebe-ffbe-499e-916d-0c2488a04d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "99c53ccd-02c5-437b-b2b9-69582400c405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d1cb2e-03ed-4f59-bd64-13676cdc579d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4b4f6c-bf3e-43a1-9243-af8d590a01f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59962e0b-ff3d-4d20-8f0e-ed793e384a50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79794aa0-5598-4914-8498-20da2c97f9cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2284328e-f52a-4dcb-aa02-87829fa87f0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e930639a-fda2-4844-8d6d-79a7e7a37377",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e32534aa-b846-4a65-ad6d-ce19e1884402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15f90e36-4880-417a-a210-4ee9a43e2551"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9be5fb02-ee8c-4d2b-bc85-d471e4311f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a15c2357-db8c-41f5-b977-66d1c2c01510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f43e31-e903-4d50-8d6b-69263f5af9f2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13dc75e3-7a42-4b8a-9f8c-b17a8d0829b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba67d277-bef5-498a-9e9d-c29d965522bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57bee43c-6580-4fe1-94a5-cc40c76f82af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "238994b8-41c1-4486-b112-d2acb669c99b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a52fee31-fabd-443a-b36c-1b9ef3caa6de",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "003039db-74fe-49a4-9e72-08b3c3909582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6dee2d3-e38f-4e4c-97b2-0b93e6348115"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4d44921-0ef6-4501-a565-e931090cf071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "877313f5-8e26-4023-ba39-c795e75ca290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67e235d0-2021-44cf-bebd-09ed543a61e3",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65dff7eb-e569-4fbd-8b1e-c33519ba74ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a76385aa-9fea-41d5-97fe-852072359de8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17536537-71d2-41fe-8df5-b0a3a6145601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef2c5664-5553-41bb-aa95-60c06fcf48db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0771624-b8c9-42b4-bc60-82dbd1b546ee",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf11980-b4b0-4dc4-be98-84fe0359958d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6adf9c5e-5c45-4baf-9bf7-d3c63f0e1370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f014af73-4710-4360-ae53-d17bcb89541b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1933dd1-2786-4f2a-87d4-3952d8e87497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b8d219c-d62c-4a28-8902-441293a85846",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61abbbe8-eda5-49b8-b698-3a2b76243b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ffe8716-9bae-4973-9253-78e1152a42b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb66fc0e-d81c-42fb-8d46-c1a1290a18e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1953b7e7-14ef-439c-a0bb-ae5de872b732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af66869-f494-47ee-9e88-0f036bba3bad",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a25c56b9-36b8-412d-81fc-e0ccb4e2d766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bbb1333-b640-493d-8b66-f6eb03cfd1bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e8857e-e16c-4341-8a04-9e8e9b8f7be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed5116dc-5f39-4aa2-8b49-05f763abbeee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b7d88f7-ade0-4d76-8e55-1139f3ad03fa",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b33b8f0-9e75-45dd-b742-689aeec5aeed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec3339af-402f-400c-88ef-30178cf3f171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d804b4a1-3653-4031-988f-5850b9a61d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2f122be3-8c7a-4398-8b23-acfbceae66bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a58ec74-78b5-43e6-8fbf-33e31ea573ce",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c2d2ba-0271-4189-9e0f-444eb40655eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e558b90-a59f-4d1f-809a-2e5564517bcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd5e42bb-f578-48f8-8f06-2e0ac91e77f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "db319b13-2b70-4c30-9fc8-60a00e76d2c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d688b1-a284-40b2-b2ee-742eb1b2a7a8",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea1d6d0-49fa-49fe-8a80-f480a7c90da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b3343d3-96b8-4d9a-b46e-fecad59c55a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81596671-5097-4bd9-8852-451248bcb42a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "e01ca1fc-d6eb-4d58-8566-903dbda58d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6480dd38-bb59-4299-a2bc-8696f2308d49",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "490d71ca-4fb8-48fa-bc6b-39f09f0b8230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "524a334e-2f1e-4a95-94e5-2ea673dad416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "626af234-26d8-4627-b796-6dc018ffbd99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "703e1828-22c2-4e14-aaeb-d708b0bbbb45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c2e6e0-3698-4fa0-9ad5-10ff2483cb4a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdf012f0-e30f-4f9b-a532-dc2619a03155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21ca8003-4a55-4a24-87f1-451a6e2224fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b82e774-4680-4ddb-8b20-5533d6e6c3d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "69c96433-f074-4d6f-886d-aba22d91f529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5550593-b018-4e5c-9071-5fd3d6aba3fb",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b525c9-9d4e-47c9-a57e-e16fab07e584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c69ce45e-9cf6-4b18-bcb2-4ddc79cb0278"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e7341ca-d309-473d-8313-971d3e836500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b41b5c1-8c11-4683-9bdc-4045e384e255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c9bb1f0-2a5a-43e9-9749-ff083bef033f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e341ab53-893e-4f3d-919d-3b91932ff366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "773b9a2b-bb18-4aff-a90b-f60078a14afa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d5c0324-9d47-45a3-ad99-c42c4f5a44ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ba76e6a-8246-4c67-af82-6afebfc8ec56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "142ce0f9-1629-4324-96bd-9ee647b3fc18",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af51154c-ee1f-47e7-9817-8bdaa5fb68b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26b95e4d-4e36-4b38-a4dd-d00e2d66bfa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b98709d8-0c60-4d27-84ea-a810e86a36ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "23e11267-eee7-4188-b2e5-13fbd96a7e11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6f90e77-83c9-4feb-8cbe-122f0bcdfef5",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "816379fb-b977-4158-9bd8-4010a360369d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e45ca5fa-6157-46d7-bc15-15264e4c0f27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a1662d7-74e3-4ff7-ace8-61a9de5247ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "84a28d5b-1740-4d22-af64-fe0b8f937342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "708dfca5-a239-43ae-8746-7ab3d5d2d5bb",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c285484-a8cc-4481-b1b9-1bf8a56b7fe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "687a5b04-f9fe-41fd-9a79-9284e6cc48f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cf7b371-ec2e-4846-96f1-9bb21a124d5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc3a73d3-3810-42a7-b1ae-e29c7e6a0231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab31b1e0-1c36-4a6f-9875-22fa2a170dce",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53c60aa5-a775-428c-aae4-b193c9e60f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc2a25ed-c947-4a85-a83e-0ea7e86e96e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ab614fb-aea6-40fc-8003-24cac43c9d85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e6b21c7-448b-455f-b27d-6aaabcd817cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "393b0bf5-37de-4a45-9bc8-635609b7b2cc",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad9733fa-fcbb-4bb6-bc92-f2fb736a15a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1da69290-bdb6-4445-a772-757f353fc74d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b92c213d-b6c7-49f9-b62b-6ab55000a986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "41b6041f-5a92-4bc2-a868-cbc13b3f3b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8a08c21-7df8-425a-bac8-4ded6b0be5b9",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b98f9f8-2c41-4f66-8b16-73e7ae4b90a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "867a491a-dce1-44e9-90e6-cc65d795e979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97390f7-bc2e-470d-a664-bfcb6245a410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "51e2a996-5f01-4ee9-9d98-d52d695d3010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af70e42e-9c47-4571-85e6-1f4ed4c349b0",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ee278a-3de6-4311-9276-b8f443b26bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5195d6b3-e4bb-48d9-9fb3-c62995ba4541"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fb63190-173f-4cab-9401-a219e1cbeecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "021f60c2-9841-406f-acc8-a83359ec6f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38db5441-88e1-4fd3-a22f-f0bd64d24217",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8ef2c7d-dc33-46f9-9cbd-dc776ec90bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d90d135d-a2e7-400d-8a60-007418b4d70d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c8ff866-c41f-4f77-82e9-b92ecad70df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "e0af8f41-7be9-4e31-8fff-0355a51991ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e2e5785-ea29-4dab-bcbe-722e5e2c4b89",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe88305a-ada8-4625-893b-11e46af0d7a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "241e820e-28d6-4be4-9006-f4414f4fc2a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "991db267-43c1-4f27-90cc-808fa28846b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4cbcc5a-de56-476a-bf48-10fcdfbf7324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1e77fd2-0d09-4bbc-9d47-98189b45abc4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8dfd2c3-6f35-40de-8212-094e687d480e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ee427aa-b5a4-4a1d-9042-4f96b0559a84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "754f68ac-0d71-4e43-a308-db5b5a00ad1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1b0c8c6-bcd3-4936-a438-9c166234f74f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b89f8533-6c64-415d-98ce-f048ca145461",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5795e721-0d9c-473d-8db9-33b2715115e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "730f526f-1eae-4fb1-b231-591ddf8b04dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd266ab0-6c4b-4865-a827-28f9d3f42690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7cd769c7-9f94-4075-b1a1-9eeea8924454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbbf3392-69a2-4269-8461-e21097f11875",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b66bbcf6-0fc4-4ff3-89fa-edf120a30fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96f67ec0-c8ce-4a4a-9886-03fc92f50515"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a9c17ae-2151-4842-b9dc-1c0e87d89315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6596d21-6c0d-4edb-b448-945d0dc03a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55011284-8cd8-4497-b45b-ba139d3b9dec",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be28e15e-d0cb-4225-8583-f27fd5cf21e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e23754be-98f3-427f-965b-26353dfd1d2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b37aefcf-553a-4d30-b4cf-17f46a539525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba7921b7-6b05-4ff4-a5b7-a80c29ff14d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1114079-4b5f-4e6b-8029-dc13ae19d12d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66fe576d-2016-4a70-8479-42339681ed3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0d79cac-9505-4374-ab81-51000c643ffc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "058019cb-347e-4f4c-b4de-85a029e23eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f0d229f-c4ac-43bd-95fb-76fbe9681198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0373ae21-c144-4e0b-b71f-f87d5ff4f155",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0319312e-0e7d-46c7-aa95-896c62417c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74e1ad54-4dad-4396-9385-a35b0a4c3b7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2602cdf-fba5-490a-b25b-c5be4bd2b567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebac0079-0f02-4df7-b737-9e99128a6b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "086306dd-c27d-4da2-81e1-149b5207db6b",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8222707-1c1b-4b6c-b149-8a763e477793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2d46b6b-6481-4143-85cc-3eb8ff258a58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "712941d2-fa8c-45e2-92e9-3e07ce0aa6ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d3ef5c3-5a79-4503-babf-8c083921e627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0817a7ea-4fc6-429e-98b7-18d2d3ebe814",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fc1f89c-45f4-473d-a81f-de025fcfec90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48841281-36e5-404e-abca-f2601f8fac43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca3444e-a9da-4202-a5c9-d17e9211abee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "62485a03-35e7-4e83-b023-dbea2beac559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c32c20-f4bd-40e9-85b1-7c9874e00496",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7bb1356-a25c-404d-bc88-29c935c59828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf70ae58-c5cc-4854-8cb4-f567afd11fd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "669b94c0-49a4-480d-a7de-ed66b59e06da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f5b78dc-f667-4964-82fb-19f817bbb335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "353a8e80-7374-47a3-976c-8fac3d1d1f1d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff13c687-ee41-43f8-8f08-5db44b735b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1b5ff34-60ed-4af0-8690-af7275394e75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a2a6433-bec6-4990-94c7-71de7e6ccfef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ac2729a9-eee7-4109-92e6-1ff31b0f7043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ded188d-0f66-432a-b899-fa0e86bc4c45",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62428170-7fd8-4c46-9689-6fd9a8e85afa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8663863-3edf-4301-981e-496eaee56022"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29ed1150-8bc3-4a12-98a6-c0657a42cea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "060d80b6-167d-4a86-9099-7c39e88a8460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4c4add7-aff7-4f9d-9b09-8dd3825a4310",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ba356f-c022-4c34-9227-23cef1ec7b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7afc1d7c-5551-47c6-9ec8-dca6048934ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7488049-bed4-4c0a-a39a-0b340639da32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e74e7ca3-1fb0-4a62-8df9-2fb8917cbfe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8d06c4-50a3-4e3a-95e3-2c88306e3702",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b282847-2a14-44e9-bf28-4f7e865f5d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3421af4-8245-4d05-9f7f-3b88759a5806"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc6a1070-bc7c-4913-8f0a-83d018cb55ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a73446c-a52b-4b09-8c29-4adb68953837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b49d825-2244-45d6-8b5d-81bd4e244437",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7049a590-95a4-4efa-893a-823275f32ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afc6a47b-7890-4f57-9483-99569c75ed12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ddd22f9-266b-48b5-96d4-9b1e076889b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e8aea20-fcf6-48c0-8c9e-411632aa9b66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97bd21f0-7c61-4f1d-8bad-ffe62200783c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d99e417c-9a29-4eb1-98f3-2082abb0dd89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "982aa54b-b31c-4ab4-af4b-9b0d14d3611e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf6ddc4-392c-4c3c-9d04-c9b2d2d56608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4f661a5-6eaa-4abb-a727-e25654ebae10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a07ad6d3-648f-4f78-87c8-50fd5113d0e2",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c336ac1-647a-4451-bbf3-f41ebec94e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e752da59-8c51-4538-b4e1-d35a588fd6c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "051cde4b-1cf1-4a89-b825-41ac3f9c4588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea26bf9b-babd-4345-bd4b-667211875362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd9d4556-8647-425c-a403-413cead5dc11",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb255975-e5ca-45b1-90ca-dc433958baff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b37502c-3e53-4a87-8ecf-c31e945ea631"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc0fc317-ff57-44a0-a9d7-c077b0aee543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2886d7dc-ebfd-42c9-8fcc-6908f02aaf1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17410c88-7c57-44f9-a58d-89f167740da7",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a2c9e34-859a-4fa4-88c6-73ab1e0777d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99457935-0927-4f10-873a-ddbcb40230c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec9b84a7-2d30-430b-815a-0d55d5770145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca5831f7-642a-4149-b93b-22d9ff7f337f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813bd012-4fe2-4e74-b69f-407de9cc4c80",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d07f5e5a-ffca-45a0-b6c7-42f73ad223be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1434da93-4c34-4b74-883f-e55b7d9c126f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c392ad6-ba8b-4c8c-bce4-d85dda730599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6df0fd2-97ec-462f-80a0-1eeb2650507b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e62bc8d3-fbb1-4041-a3f1-4c0209b54bd6",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ab7aed-01cf-4775-a684-05c363176602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c80d25a2-5291-4a05-9e8d-4869b875d078"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aeedc00-bd47-41ba-9c1a-8caa9fc981c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d361ca7-9d88-41bf-84dc-ee4b4fb8872f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab3212b5-d1eb-4cba-8149-46e2e2ae40e1",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18fcfcaf-12ef-4460-bed1-6d8527b3e4d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5612867d-4b7b-4ea4-8e6a-1fce5e79c3aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db04fb75-16ca-45f6-9eb2-ab41b3b9cf41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3ad0809-5128-40be-85ef-a7d3b9e8b3b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f969cfe8-1b25-4dc2-8cc8-fc4fa8595cfd",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72b41af7-0fe2-4645-acab-ad06ee7eadc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "122af90b-1a88-4bed-a8c2-0cc43db83cbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbc9ab96-3562-4256-b3ac-c702030c0111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "325c7ed6-669e-4fa3-8010-03307c8d06d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7765fd8-f0dc-464e-9050-5f7f8536797e",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bbe11d2-3914-42df-8b86-0b310342adc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e27a1b5b-2af7-4884-93c6-9b69196704b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3708dbe9-cae8-4eed-911c-f5b3aad404fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6aaeab75-9a98-4c2a-a0e4-63f42d92ae5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bf4a6bf-3f05-4093-8606-cbc684ff9cb6",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78092003-c146-4e52-8135-9cffd7b4eb65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2df04cd-3b0a-4ef6-b19f-32b62d336375"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3419fcb-67cd-45f7-9ac8-5e235e33406c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2830e041-4807-4b4f-be90-50ef89842e27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d98e5e0b-87f4-4e28-b519-a736ebe17af9",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3a52202-7cc0-4870-9b98-7e64425fb9ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecbd2f8b-80c7-4654-a3e4-6ce58bf4c1ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c11c1f1-bdca-4403-b71e-e97fd97f8f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b86e906-fbbb-4dfb-a866-e0e7eacb00c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4c5e07b-3973-41ea-a639-8c2d71936883",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "539d71cf-4f0d-4603-b358-8817b02db06b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d37d9385-f225-432d-914d-9a1a30a492f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60427285-87fb-44aa-acbb-f8f6f883311b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6314088c-75f2-44ac-94f6-086b92a9093c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb37cd78-f16b-412b-a3de-cbe60d31c87e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a959e83b-4310-4093-980e-5f7d836818eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95d711af-1cef-4582-8e6a-bfd90c929053"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8934b6cc-36ba-4387-b6e6-b99f6660c5c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9966fa5-d572-41af-af6c-2255a3abcad9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31c9e8cb-cd5b-46d5-82fc-409c079be61f",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1408aa28-c27a-4578-b722-b185b225787f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cd110db-b4f8-4a07-abde-fef5ac69c398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "322a2256-a40a-4cc4-ae2b-701490e54aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "889a337c-5ee6-47cf-8d4f-d6d0e8a52fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09d064a9-fae6-475c-b4ae-e022790d358c",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc1674b5-d7cd-4b63-a2a3-82091c0ef62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64f8afa8-389f-404d-8582-d4e2f6eaad1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d1631b-cda6-463e-b3ed-62859f5fb0c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0af5c75-f1fa-467e-a1d3-41b8239d2348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93056b3a-88d6-495d-87ac-d9c9bc42082e",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a0e7210-ce78-49fa-bade-409d93252fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8f67cb7-39f2-489d-b268-b5bbfb451d2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feff56fe-196e-4b80-bfed-430cc9705ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "87bfa6a7-f936-43b2-b5f3-967f5a04d9e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e19f38ec-3974-4bb4-8680-636798a3af36",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f7a1550-3a89-46d3-8313-8daa1c697cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec55246b-2909-40f6-81f4-f65dd9ac6b7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9857cef-5f29-41f0-a8b6-ba21fd51107b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e7bb82e-af99-4332-b25c-0df108097b68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2815dab6-85ae-4bf9-94e7-b84e2a3257d9",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83eb3a12-1f01-466d-9583-13091e85e0a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9acfd50a-75d6-4f95-b926-fee8faab0535"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c6165e-e1b2-4020-8b91-6184afa04c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "44243b4c-93d4-438f-9a76-82b2d6a9bdd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee58b2e1-8114-4e89-b1c8-12e1de9121ed",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39ea8be0-4410-4d75-8f90-765e42d60c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbaf14de-5696-446a-ad89-9eda9e26b1ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c511fd-f1ba-4cff-9f0e-f7e0a7fb9759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c385ee0a-ab33-4313-9964-f490daa1da04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06909a81-11bd-4790-8fdc-fb70ae01baa6",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9780be5-42b3-4055-9167-c5296000ceb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53be3d95-c7df-4465-905f-a3ca65135272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5292ab0d-6fff-411f-9c04-5571e7749df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "70aa2721-459b-439c-b9d2-2cfa7e662784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "176c646c-20af-4769-bb9f-625d27f561f1",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1989aab-8fd7-49a4-8917-43b5ad5c7cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "bb4f5a9a-8ce2-4add-b0ad-64d09bc23c61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "851b5904-dfd0-4880-9f64-146cc398d876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6669571f-4125-4429-a8ec-be75199cf862"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "844e4f8a-222b-4449-82a9-c6db77a0b9f9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ad1706f5-1a27-4b16-a333-ea8e0c366e42",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf84249-e53e-4a50-8951-1bce9ce53e2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e18d1c6-5917-4edb-a56e-8fade0391bf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c2e09f-30e3-4b42-a65b-a0a32d5b3188",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f8a54dc-aaba-489b-9886-3d08b9718a65"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ecbcb18b-661b-49fe-ae5d-55768dfe6d24",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6cdd32a9-71b9-498c-9654-4de29cfe77d4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf86c8cd-31d1-4f2f-ba6d-390be3552d32",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "57b236b3-0751-4aed-8f94-21151f3640ce"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "da7b5452-cd25-4f57-bbe4-058cd11b7164",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1f4b890b-f4b4-4d30-b483-d05a8e2536f6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4a064b23-621a-4a9d-b997-a147e733aca5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "be75635f-4432-45c7-b9e6-386567b75100"
                }
              }
            ]
          },
          {
            "id": "b6182b26-adad-44dc-89aa-54d6e9339de9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a1caf015-df5c-4b25-8725-c7e8ff067e98",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "188f5825-8f39-4bba-ac5d-ea9b8c1067c8",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79d8c01-96f1-4f43-ba64-c7aa2ba43834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1ab39e51-5cee-4d40-a2ee-b24fb32e471b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc59897-3b3b-41d0-b03e-61f97480d499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "793dab2c-4d66-4cb1-9ca2-6df7572b1f59"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4613a1fe-96f7-48b2-9119-8a5a56502169",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6884b72d-9026-4581-97ab-8f5339393f4f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e23c285a-8311-4c2c-a74f-3e3c3d65358a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb5dc65f-663f-4231-ada4-c468a17fe4e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a7529460-6da7-4dce-bb70-ca904e4f6b4c"
                    }
                  }
                ]
              },
              {
                "id": "9a77db24-f5ef-41a2-902e-ffc26f005b01",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "edb1f72c-3792-4476-9281-3c44030c7ebe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6aa818f2-3206-48f0-99e1-18f60c3b9e37"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5968db8c-6f7e-4cff-9e5b-6d955ce5f33c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c85989b6-03e1-47a1-a08e-d73955816c5d"
                    }
                  }
                ]
              },
              {
                "id": "289d2d87-36c0-48c9-8290-5237151e19c7",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f138a245-59f2-4f76-958f-4a8e2e5c2e6c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cdf65186-77ef-4cc8-92e4-85e21f281bac"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "87610af6-7e47-4ed0-bc0c-e7a69cb818b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "37048a6e-c0a5-4bdd-a600-a34a56270693"
                    }
                  }
                ]
              },
              {
                "id": "b074d1ad-8e76-4e9d-baea-3ed7b75d7610",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "64159bfa-a1a8-4bf2-a936-4ebfecf39ced",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "298c25c3-652b-45e8-9a41-68b00e31ac1e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "79c8c3ca-d9db-4fa2-aabc-c7a3b50c8b44",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7e48e0cf-9e42-460b-beb5-be92f5d0383f"
                    }
                  }
                ]
              },
              {
                "id": "8e0a3da5-aec5-4b8a-8159-cf509e3c1c36",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b3947f3-9c78-4f93-9488-3021fa23eaba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c6c996ed-57f1-44aa-ab34-486a579071f8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "650c50e1-0222-4d07-97db-d128a0d8a11b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2dc2c065-64b5-4cb2-aba3-7d323ee580f2"
                    }
                  }
                ]
              },
              {
                "id": "6e584a98-2b61-4301-b55a-32e156591d32",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "33ea01ba-94c1-44bb-a59a-a9ed649c925d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ae8b3032-c7fb-4d08-b61c-d64eb5585bff"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "09438481-ad60-495a-85ae-c4821ace2212",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "42e64d6a-a87d-43bb-9a17-0534b851d6c1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "555350ed-c562-40a6-a633-26d6e4a6f4f7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e6464756-f120-45e1-a698-88b8753559de"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "34a445d1-303f-403c-81e4-5ad3f37ac37c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4e79df51-9e32-493f-8422-51457278ed6c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d56f0d35-3cab-41fa-8f67-b1f956300e05",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "f05e7c59-c703-4d7f-9115-aaf8a234d634"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4425da40-9cdf-4d36-842d-24e8f1c3f184",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "51e773ca-5320-40b8-9ed8-19b28360b16f"
            }
          }
        ]
      },
      {
        "id": "234131e6-e70d-4566-8b89-6485e1c97b7b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "bcd1f559-fed6-4356-9fa5-3b79b93b63c8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4811defe-7a49-47b7-b492-679c64218a50",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4e908bdd-2a06-4264-afd2-d39b757ea8da",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c1d3248-24aa-4988-90b5-818f914116e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebbaac29-409f-48cf-8dfd-764a57c6b57d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68cb4dbb-4ef5-464c-84e4-041de881daff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d191a3c-0ef4-49d2-ab75-6b2dd5436a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1631e744-24e0-4b6d-ad66-7ddb1e116316",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc88de3-954e-4f93-84e8-1c3407f9baba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60245c71-09c6-4217-8f9c-6d55c2f1b325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37ed2cc7-6a3b-4535-88d0-2ca6182626c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0620cfc9-e8da-47e3-9779-3f937d8544d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca68dbb7-9e81-4d38-b05a-9b1f0c1bcbe0",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29c8fb44-5634-402f-a07b-3a32baa2ade8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b28fd415-dea3-4ec0-a28f-fffddb4209dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bb1e820-b307-4fb0-bb21-af2ae4d18f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b86e199-30e5-454c-907a-6b6fc03168ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69ea9e8-2aa0-4088-a42a-4461c509dfa2",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b41910f0-6bdb-4391-a2cc-3a8cfdd765d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b49fb4f-a2f8-42c0-8e72-ee32d67e6976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c1ac3ce-185a-497c-8b8c-02048abb46fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "97fc1075-bbad-4aa9-b1f8-5650152b916f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea863e9c-972d-4421-b494-1f04cbc08322",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc64842e-915b-4f58-90e4-9c19625227a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c074e86-bf07-4c54-823d-b907b256f424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "099cf79b-db73-4603-b648-9b819ef6efec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "14dea699-a918-494c-8707-a7f18c3a38a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c37f0882-791a-4459-9d10-be637a7d01fd",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8874b3e9-326b-4967-8636-4cb888271b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ce703d9-ea5d-42f2-a1df-7a4048913fdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13a21ff-1f2b-48d2-b362-cfeef99dfee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2470aa3-5835-4a84-94b8-36f4a0178a61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f6f23a1-04dc-4118-9066-adca956840e9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ff450f-372a-4f52-bf49-e3bda58b5f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "111fa040-5702-4ede-9231-0aa34433be95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53d5c498-b661-40eb-b0f9-c33d55667326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e390f72-80d9-4f8f-8475-3f0b7b2f2094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf1ca20-86a7-474a-bcdf-bbb4e42786ce",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5767d19-71ea-4a43-ba24-4a171652ffd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce6bd02e-4fb6-4fbf-a6be-b43e3e4be1bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b94208f5-2a92-4de9-91c8-4a37f8589bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "61ee31fa-f56a-415e-8b97-a47505921b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "badcddfa-e0eb-4a70-a356-65b6772134b6",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8afebb86-4066-454c-9ebc-8c1fec6f7891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba02b60a-c0fb-4f50-abbb-ece14557d973"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4342439-b9e7-4a6d-b850-81f42db2fb0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "48d501ca-a86c-4fdd-a890-be5f288a032d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263d636a-9e74-415e-b03e-b91924060497",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f48816-aec4-4536-a1ab-eb280e657d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cbf7a30-a8cd-4580-bd40-b42c09de7bcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07cf89fe-1755-4173-8508-4c324d134127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "45b65bbe-eb9b-46be-9d7b-98de56bd6886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7104f0dd-5035-423d-80df-340861010014",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b4e2f6-654f-4dd5-9767-76a406f4ae56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3704a3b3-0379-4090-8e4c-59de46c17998"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1271e47a-9d8b-4f64-97ff-ef5733780144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "204eadf5-d07d-4d74-9adb-c7380e156346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9877894b-3a31-4d43-94f6-a2d59252a801",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b0fc28-dd0f-49d1-9bd6-6b5071548ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "852e6d78-2c1c-4982-a7ae-dca5a613519f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a89da42-2db7-4990-aca2-248e91e992a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "eba1ed40-6337-4a7b-bd3e-aca2e3af05be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d919acee-0bf8-490c-aedf-ea72079cc7e4",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9db0c193-146e-4d0b-b8c7-759eba14bec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f8b9d53-79d1-450b-aa45-84f6a76abab9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3ee636b-104b-4187-9b82-40349d699180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b3b3db8-bdd1-40d3-a746-758b7e936d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "018a942c-c05b-42d3-9fbc-e0d78ee289b7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "146a513b-a089-48c5-888f-d069baaee4a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5521e19-e864-4123-87d1-6f78a0c78c1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b069dac-d4e2-45da-b1d5-f85ea03642bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "232ed9b3-db54-442c-864a-b3da8187c27b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679d9392-f509-4393-a5e6-febf484c2058",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f75918e-abbb-4034-a23e-9819132640e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a412984-2ee7-42a4-a4a7-4c24d00cc58d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a15e592d-ccda-4f04-892d-f5884b1484fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e92f50fd-ec7e-4229-a94b-86fbafdd3211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eb41907-0e04-49e9-ae02-26d4828293d7",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e26caa2d-efc9-47b4-99aa-bd8d9a61bbe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "658570cd-a3d4-48c8-9590-fce04eba0ce8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9278190-3817-430e-aa66-1b0d2d48cca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8e0f0da-fd0f-4330-9f8e-df2d4f38a6df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ce2e25-b40c-4b10-a4be-c4e32dc0b77f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca41b3a-fefb-4d08-b61b-8d23f79eed2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "570f708e-5067-40ff-9e2a-de17b12c0576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51a9c591-bab9-4496-8ba8-f331df96b74d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b174086-99dd-42b1-9ce0-254f7980cfd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a19c5ba-f89c-47ba-84ab-42974ba1dcad",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "156be0ba-093e-460a-8128-12296800e03e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3fb5064-b32f-4677-b8a2-fe78a22f50bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e045fd-7d1a-4e00-9ccb-c2e277eeba56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "81f9b6ca-1d29-473d-8202-bd967ca5aabb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3471c59f-7b1a-4899-b2b4-8f8d698463bc",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cebbad3-c173-46d3-8850-6a250b9be88a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65433a48-017a-40ec-b5b7-42f41fed88b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea488e4-6f49-4d35-805c-3138b00ee9ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "523878fc-5866-422e-90a0-e942f3108db0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c725bd-b7e4-4a1e-83f2-6cb6f91040bc",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8972289-5390-40d4-9e30-ee249bdadd95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d2fff6f-56d3-4c68-aa07-5ce3b7a5910a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30313b81-975c-4ac3-b1e4-cba06e66028a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e9f1cad-77f5-4fcf-abe5-63c4693f22f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da3227da-bae3-4ddc-b51d-98ca9b16754f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb2a4f1-9365-4597-ae8c-ccd71d6fb35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "200b95b7-e54f-44a7-ac0f-a66ff312b060"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f649d7ee-88d3-49c0-b289-2362d32553e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cb4837d-f698-4bfc-a96b-7e2dba6396be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3eff0e5-1aaf-4b2b-8a56-171aa6451eae",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0668a417-b26d-47f8-9f4c-6f4142c6f91b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1008e910-71d3-4452-a47d-0c1beb78a75d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be613e3-a568-42d2-b750-c62c7a07f9aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5270d8d8-e21f-494f-8fbd-5e2368fe48e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "110585d1-39c9-4c59-beef-2ea0d76c8366",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e746df-7ac1-4251-8086-f60bb60ccba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7d0de54-1bd0-4e81-81d2-fc1246644e66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c948af9-b7a3-4409-8aed-0b594cd6969a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c5ce18e-781d-4bbd-9bf5-f69ce8940572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b806b03-c9ea-48cf-ac37-063a21b8d3d8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf6796d7-12bb-403a-940e-ce5bfb5c6048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8615eab9-41eb-4df4-823d-73fce70d37b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b8e231d-c0c8-4b7e-8778-5cb6549434c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d978a7d5-ff64-4d28-9ebd-d1fb844e43d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e75f951a-79b4-489b-8c5b-d80fec49cfa9",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf253e28-04fe-4c57-aabc-18f324f1b32b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "119d8281-d0cb-4625-9384-99b6129a1eaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4db5cd7c-e66c-4d97-95ba-521a7f0166ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a79a36ed-1b15-43ab-ab7f-dc0d9b1b1dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6123906e-6b97-4219-9507-3e5c67cad95e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "353aad1f-64ed-49fc-b19f-5691be81d16d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea32f456-1c50-42ec-913e-97e470cbe9d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dcba450-e32e-43d0-86a4-dd646bf1a508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aee3e663-534a-4dec-bee3-f400d8adeef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1144a44f-0be4-465d-b2c6-180e57dd669f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18f0bccd-8cee-4e71-bf3c-f947901db0ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bfd156a-381e-44c5-a72a-442eb0cc5514"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97436585-e6c0-42c4-889a-12131c5dd9ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e631f987-8b53-4994-9130-ea28836375ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "889540f1-f106-4c28-b5dd-ff157cad562b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91701f82-dc5b-4bf6-aaf2-0cb26b36b8b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02c75230-5ac4-4361-9202-f7c7beff7eba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4f5c0df-50d7-490b-8139-4e0d58c6fc6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60698891-a464-42ba-9f6b-78f03a7aef3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "927b01d3-c581-4735-bf2f-d95c74bc341c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee252c17-3073-4ad5-b758-f96f515145e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef0f24be-4e6a-4638-aa9f-fcb1a6e307a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d0e2e6-b0fb-4053-9201-d899c126dba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dff4393d-9428-47dc-b78e-ad22eddeed7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a55df60-af1b-4190-b431-e9e5f46a8a82",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e33ce29b-4efb-442c-8607-7759503b1095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afce9b4c-e9a0-4888-babd-b1bcf1073f3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "115ba86c-59db-4224-8d7c-3ccb476d8588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74561f0c-6ab7-4079-a40b-5c81d9332711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a7c6cca-e4a3-4e0f-b3d0-f845af80cb3a",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edcc43fd-730f-440f-90d1-1ccdd90e64fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35266664-5fab-4b9d-99b4-d58c0dd217d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00bf7beb-18e5-41a2-99e8-b460fbe50af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "96845d41-650f-477e-995c-408d06c17260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b74b84df-359c-4cdc-a016-87065aee9bf2",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b83032c5-0b1d-4e7e-876e-48bb99150302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cf2cfe2-b646-4017-ac41-0d43bf350579"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01265bc-ebfe-48fc-9ccb-4199ce0e64eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5115603c-598b-47f4-8136-3acbbbd3fa4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b5fbccf-517b-42f7-a533-e223e9a67f24",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ad3452-7595-4303-b903-f1d3f9d47572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcc1d8ad-43ee-4408-9121-3e4583ba95c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89616fbf-c682-44ca-ad26-582dee5d23f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c76f6a9-b5e2-41ac-9ed8-daa2884df449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f200d4-cd42-44f8-8ff1-0236d780ee5a",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d18715c-04a6-44ca-abc1-0c0ef9e96e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6563a88c-3cb9-4661-bb8c-335f406960e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ce2487-30d1-4c4c-bbff-0b08e3069745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4a3a940-cdf4-4886-822c-8b84ec5fb220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1116940c-ed2d-4a0e-8805-145848997fda",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c3ab36-13ca-4663-8094-195e2babf85c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad76cd80-b3e5-4691-87a2-d47a7b3df5d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28e1436e-926e-45b2-aca5-2b0e071a44c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a41e0c7-17b4-41ee-8b81-f6e43e13f3d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd6d858d-f7e9-436a-ba06-e5898e0f91f7",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c0de6c8-fbe0-4bb4-8201-1ab092dba1fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab612a7f-46b2-4c89-8e42-6795198f4254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad5d932-e127-4ccc-9874-8d91e8faccdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed885b1e-c8ce-4086-ac6f-9ffc332d5c3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa642a47-e0c1-40f1-9bcc-a829fdd8fdc5",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10663651-d73c-402d-8519-1203d13f261b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d6710ee-e16d-40a9-9618-1b5d29f82df0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c05399-c8ef-4b16-adf5-46314b00cc4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2bb5732-bf6f-4066-929b-432b56327aad"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ab672168-78af-4b87-9cad-52fd9fde22e0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b1912838-d9be-4da0-8343-49601403cbce",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37830d09-9d88-4eda-bc80-6a855d2f35b2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e35b56da-55e4-46a8-8222-f7f3a467b1f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51ab1bf-3efc-4d12-990b-d9d00bdd1950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "940dd471-fd72-450a-bff8-151b367dcfb1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d1c349c1-975a-46a3-8416-260c1c97f4c8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d470d72-df3b-4d9a-b861-941642239e3b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd737407-b458-46f0-81c9-b52c99c1bcd8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a98762fc-260c-4a47-98a7-408f79b86c62"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "27516be0-275a-4172-aa89-0e97aabbe275",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "049ccbbe-7a74-4ebd-9c4a-e7e03f1e12c8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9bea28b4-bbe1-436d-8acf-62c8a7bb3b67",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "862e07da-880c-45e5-9393-ccba59c49126"
            }
          }
        ]
      },
      {
        "id": "24bf1a89-a4cb-4505-b58f-286600693548",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "100e03f0-7619-460e-956d-984982a85d94",
            "name": "Negative Testing",
            "item": [
              {
                "id": "47cd3956-beb9-420a-9da0-82f3c391e031",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a9c96c6d-d27d-4b23-959d-d480cdfcb770",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63fc1d7b-908c-4cfa-85aa-62f719e371f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c980808f-0d52-4d87-af51-a779dd5ea66c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0224dc6-230f-4275-86f1-53df36dbea9e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d3ef693-d108-423a-88c4-ea0bb2c92813",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18d3a3d5-cc9b-45f1-8a37-6303499b039a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ebca171-8028-431e-a500-160d4d39fd2b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5367bf4-0797-4047-919c-7d7d24ab7fef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1617ba4b-75d4-471d-96d3-4c2208615de9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "741fe3aa-1cbc-4550-aa3e-9eb3b506807d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0edc19ff-ae1e-42a6-89f7-dac153e83db3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96a56a3d-a49f-47ab-b42e-a8ffb5798e73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a947f536-c404-4ff0-a344-5c358b3336ee",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aea8adb8-0ec4-4b06-90ae-2efc7564bd23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "395a0943-b51e-4b06-b198-a72311d5140f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81bbb67f-71db-42bd-af9b-4a9b7844719c",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b8127b5-a2dc-4114-bcf2-ef62b198c5b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cab0fcb-a0ed-43c9-a344-b9d7eb742a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "313a2d3d-5ddb-4aa5-b2c3-7bd9b6cb60de",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a735f9-cc31-4d4e-b959-f49b87ffbb0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "307acc29-fc0a-4109-9662-e616cab5b00b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f75a0787-9741-4bf0-b75c-faa9f433c641",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a569437-61ce-4ff6-b733-6c0e01e5b8db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b13d795-721d-469f-a22a-42ad9c5a0ddc",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad9540bc-a6f8-41e6-849e-35f34068d9f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a22f28a7-12dc-4507-a5ba-0679833c94c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65d85d1a-5fa6-4d55-9c9c-3de1c6fc86e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f3c57e6-f7d7-41d7-b527-ca3db4314205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b301152-9c6f-45a8-8135-6e442afd5e18",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "259c0260-2005-42c5-8c43-b88575fb158b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1c5f98f-a865-40bd-8041-7a59cc43b26b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e98371e-e280-41b4-99e8-ce29aa17e5f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df90ab55-81c0-428e-ae1f-765a3796054d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "532081c6-c529-444f-8d5f-94fdb111c6d3",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1963a09c-0844-4376-8fb7-82bcf363a164",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "699d8eae-8606-41b3-a1b2-ded8e04710d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c95473-f3d4-4196-89f0-5dfc2fb01835",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a7e293e-b575-4372-ab81-2aa7274185bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "680a944a-f6e3-4e02-ad12-7d8f299bb3e3",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19b27e42-201b-4cb9-87d5-a38c1e61b62e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "756381d7-2e13-4020-8d80-55c72edb4083"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "309b3f73-dd65-4f8d-bd63-876252119971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f31d1ab-98c8-4110-ac63-c5d32972fdb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb40fb0a-6645-4785-8ad8-2fa8e2672fb8",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c29695d4-7a17-4c50-b4cd-e17c214552b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3afe276-bc6e-4285-acb9-768bff5593e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8bb9848-330a-4bdb-8b7c-af94a9d8e1c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66508450-9bb8-4d63-96c6-53fef680019e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87a7bb3c-5a09-4fd8-b22e-bc29ed203724",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "485564f3-6f85-4815-832f-22e7bc8f394f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae0c79e4-a597-4189-91be-e720525d653b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d7d08e0-5c20-48c9-8298-bc332643f70b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c4119bc-96ec-4e94-8e5c-03a916e86637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d12e4ebb-5fcb-441c-9ff7-7af11a039607",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57effdd0-19b1-4b2f-b9aa-57d888228289",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e93aee7-a07d-4c80-9de6-16bfc47e09c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a0a2e64-e8a9-4e65-aa8a-acd25a4fd0bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee2a28f1-3326-4f60-98d0-7ada4d165970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c10dee-c60d-47d9-9dfe-3a4855f96db9",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb9ab8a-768e-4e04-97b8-aa2450337d91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aaf9ea67-3727-4378-9575-0f4b2c887816"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "633bbacd-f4d0-4745-8015-46d1e28885ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57ee8054-daa6-4e6b-9739-ce2d6c5608f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a69d0e34-c45c-44f6-8d5b-1c25fc57e491",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81505381-3bd8-4430-bdc0-761c87d726f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9eaacc3f-acba-441d-9d2e-e645953a13a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbbb2b45-b3e7-4b8d-9d7f-3856c7429623",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "947af202-1a5f-4e17-88cf-5aece3f435af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e7fb012-6344-4091-b49e-602d39c558ec",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "342ac42d-0b01-4b9e-8690-a84bb86947a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b6927b4-eaeb-416c-8911-6b1ff1b4d8a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9cac201-dc0e-4d95-92b5-578ac3e7c5e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dd9dc95-280a-4580-bfcc-05cecef5b92a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c766cef7-8172-4c5b-8ed0-4457ebf70343",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e92c251c-9db5-4115-b1e8-c1d5f83105e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "854fe159-3e29-4b94-a46d-2c107d27aa7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2796db4-0f67-4c3e-825b-115c3eae9b47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c6ddd1b-81fd-4074-aedb-bddbfaf51301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36ddb4a4-8ff5-45c8-ac7f-934ce57fafe4",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db98580f-02cb-4078-835d-1c9f455ed3c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7945bc34-70f8-440d-ac7f-1403a802a0e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea81025e-2adf-4bd8-a27d-7ef033f7b070",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afa42dd6-48a3-40bb-84fd-0c3a0d251947"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec1e135b-75b5-435e-be2b-7e013e90e039",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d92ff953-8492-4d40-8b97-01b0e459b6b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46943e58-babf-4793-9375-0f1ecd85380d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f8ffb05-ab69-4212-beff-cbe8a6febe47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61e7fe6a-beff-4f7d-a2bb-931a52b8f5d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9295fe7-4f89-4738-b314-9ba31cf1b32e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bcb3828-624a-434c-9fdd-20f61661d0f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8622fa72-6c88-4d7a-92f1-693df6b14046"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d8efaf-bbf8-4ec6-a91a-4970fa7437ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "546cff09-6147-4963-aa20-7833b0a156a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaafd6ac-e261-45d7-9188-9fbba7009a2e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f81954e0-f02d-46a1-a59e-df71bee19a34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15d2ba14-aa22-444e-9070-ce84267e4a1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e39c06-436e-4768-aa6e-69b22f3b8bf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91bfab0e-e577-4df1-bef0-a48a7d072181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21551338-9dbf-4794-9e40-fae48d6552b4",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccff76ea-9e39-4f1e-aaef-fd3864ec964a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0575155-6be0-4516-8c4f-1324716a9253"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dab062c-5054-4078-9713-9f9d85f359f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f729185-aed2-4f58-96f8-4495a258254c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef9c1aa-21bb-4837-be5f-7a65b4be0303",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f6ba6a-3302-4d90-bd5f-1ab67cd69c18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eaf2925c-9829-4be4-a483-6e7f345faadd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5143cce-5d99-4a57-a14b-098c25a8897f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81840d36-10f7-4176-91ee-6229235995e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f30f466-499f-4821-8faf-b038ecaa2c28",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8babea70-0d2c-4402-b809-58c23c646f7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21ebdf48-003b-4773-9afd-a17e59bfdc61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cc5edb4-0c88-4253-8a8f-194740d2969a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af2c42e5-9c10-48b4-a77a-406c22de8cd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d39efd0a-b898-45d4-bc12-5f1a36eef334",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24abfb22-d4b1-46df-8fd8-806649742453",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b77178ac-dfa1-4255-99ed-15b7b962302d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d099c989-d3a2-4e30-9315-a1d3a18b2921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3320a43-130f-429f-bcbe-48d8f9607b65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b349caf0-2a6b-4c8d-9d18-bc0f181a9155",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec41edc9-652c-4b48-acc6-7b3cc9acdc30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "beae8f18-3873-4c45-a691-701dfa20d435"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83e80b38-9a79-457e-8c43-13c7c63a9a3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d40c95c3-3e09-4d1e-ba25-49e57957deb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d330ff7-f23e-4c20-bae5-7f8a9af2fb00",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "681a4417-ed33-4ee7-9f13-6835a114abe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a89617c3-d38f-4e4e-83dd-966a957cc95a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9959ae4e-c982-42d3-99c9-32c0f229c16d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fa451ec-6caa-437d-9cd4-867c6ab3c28c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2210e5f-826e-43db-8a4f-9d46a0094079",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c36315f3-cc04-4279-921e-ac050b447d8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a0d3580-f3e5-44c9-8907-da67814972d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d94969-25dd-46f8-92d8-8a6087c72c63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e4074fc-d884-4dac-b3e7-7c917ec8dfaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c6ba7a1-ca79-4459-a84a-6ce1f45168ef",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf8ec86-40b4-4a95-9be0-ed731603a80b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89a8e918-efd6-4f86-8021-679dd48334c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e10eb542-0fff-497d-ab34-c516ca6244d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bb6fa74-abbb-4681-89c1-ac0743f93b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc6a564a-072b-4a4d-809b-f3d0a8d9d0de",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6572bf0-2c06-422d-904c-5145df4edf0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b80a0ab-3976-4d17-bb9c-bfab55b9b16b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a235d5-51e1-46dc-b530-f8fce6e9cb61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e426f4dc-ee0d-43a8-86cb-452b656d7842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "143cde52-671e-4dca-96d2-db7f6e7a598d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33cf5d52-bdd8-4272-b0f8-75d43f8b0577",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87b5b18b-193b-4915-abf6-f81fa9294a20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "243083e7-b16d-465a-9911-ba4054f55748",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbfa6113-f1f7-430c-920f-2548706687cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c8cc9b5-2038-4c20-95f2-1ef459b863f6",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e37466a6-5244-4a7f-995a-17f031694563",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a3d0f21-8f7b-43eb-a107-2ee224212095"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd72d22b-7f93-4742-8d0e-9c2fd97c0865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75fc3a8b-ae25-4d6d-9a8f-d7cb65d697b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b41ebdf6-af2b-4cf1-bdb5-760134d99d9b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a2e7ab8-118c-4fb3-9402-2346f0bccabc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73fd37f3-3ed1-43e7-ae64-451d6f844a61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "278e5690-1b6b-42f7-a8a5-a9089700cc15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f68efdd-610c-49eb-98d2-95000c6bff2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f081614-b864-4e83-aeec-fd6bca1db3ab",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a44247d-fdb3-4345-ab8b-eda64bcf89eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "977676a5-18c8-42a0-884c-061aba65b07e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0575dc8-703c-4f42-afd8-369480247eb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd095de9-3908-4ef0-a151-84531f59b490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e50dae6-f591-405e-9ae4-02182658685c",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93154908-ad41-418a-8393-3dbc94c475a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e228472-5d47-4537-b626-82493cdda02c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "847e8668-9edf-45b4-be38-bc15fb514d81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a37d69b6-4cb9-415b-a7d8-32922211866b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86c854a4-e5fd-487b-ac87-22c4b85ff7f7",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95a2bca7-6828-421e-b1d6-a985c9de9114",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdb7cacd-24ae-4ee1-82dd-dc4502d27f23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "788ec6a8-f390-4323-9aa8-cb0ff66d69d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e54d6cf-681a-47a6-bedb-a87b94b01147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b81e6c4e-b101-47d2-88de-4119175808f7",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0808bd2-158b-4ec6-a6c2-b670208abadf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21eb946a-ce32-46af-81b7-da19c3dbbf21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34bb1b9b-a52e-4001-850c-6c119337e904",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6e9fde7-30db-411f-bbdf-df506c0b77ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a94c88a8-7394-4ebb-b1ea-d0680c6ce6b5",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8507d657-a9c9-4864-b0ab-e930708a6c64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34c6bd23-59ea-4b86-83fb-b3eeae7f806e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "984fadb3-6aa6-4870-bf7a-9d02f968f3e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43d95ea7-fc84-45b0-8be6-d9d9375eb7dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "071da166-2d33-49c0-91da-d432e455d681",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "022de7f6-7df2-48cd-95ac-058643548ce0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b0b8f1c-b820-4984-a126-1649f1293bca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca34416e-5f4d-4a86-bd20-7cd178d9f7bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b5ec6da-cd7f-4dad-933b-e1d56d83af49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8242c74-9c5a-4057-b13a-a96d70b1c1de",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a934d5a4-d9e9-47fb-ac37-2afc6b25e71d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccd114de-8ee9-408a-b33b-215d75a562fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1c23fa-1eda-4ae1-825e-e72861783cf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37211067-1057-4e19-8386-5d8fa2eb0ba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25940494-8b92-44d1-a0f7-f26df964487b",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fc1f861-f9c9-41aa-ac85-1ffcf8692e16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7f99aeb-56c6-46b3-99d3-766c9103ab03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12338144-f34f-4e6e-ab12-c1e4f6554749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81db5b38-5b5f-42f3-a154-5df28edad7c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fbfb78a-46d6-4c9b-a9ae-531abbd584ae",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46574265-1ff7-4e07-8019-e6245ba6395a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36f3b66b-0a3a-4fc5-ab67-3fd66812584d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ee7eaa2-c376-401d-a7c8-a2b1cd43b55e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08fbcd6f-6d26-4608-af61-6d0a52018ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf6a4601-e6c3-400e-93d7-a1757692ff7b",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14dca971-4619-471d-b30b-ef7b4e454294",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28993c8f-7fda-4336-bc8e-db20048b60ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bf96c83-d565-4957-93ab-df9a5d36bf54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bea6173-db4a-4e74-9e90-497df1f09abb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b9d5253-2dfa-4b48-8f26-d6596de77534",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d546bc12-8d21-4258-9545-582ec96d78cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a37ab624-b388-4821-96cc-68975a78cbd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67dbb638-d704-4465-9935-1bc26947dc06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfb46371-6af5-48ae-a2df-b7a99b6cb618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56326109-500b-4359-b10a-7fbd1ce5a9e8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b90b28d-19d8-4d4a-bee9-f1d889233382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0243646a-e1d9-4d2c-b1fe-3cb1e734bf3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fae9681-b349-4fad-be8b-86df12893e8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb6b5fe4-619c-4268-aaec-4976118cf7bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc3984a-492f-4619-b110-cff5a6150183",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fa9d0fe-ce0e-4006-9072-13317e5d2cae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90cf1979-e4bc-4201-b584-f4e3c66a3e55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2751044c-f610-4be1-bcfd-f8474ca7c363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64556f9e-6619-4884-92bc-c4814f6e2704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "849bc955-49f5-4b14-b16c-25e0479ade81",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a1ba80-38cf-4f66-aefe-0f11a73ca840",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc002a51-8970-480a-8dbe-0a75d2cea291"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b178222-754a-444a-a572-a62df53530e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e85bdf28-7d50-4840-8c75-e5b2be58a5b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5a8dd86-25a4-4e30-9d2e-7f817cf8d449",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0d82ad2-2f7d-403a-8e7b-c34cb8ae6207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae38fd21-c853-402d-9784-3b2674363827"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba347bcf-e850-4435-9c63-1825d8e285ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3a44006-504b-476b-9772-80773a2b0701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b41ddeff-0688-4669-9d8b-3f685e552576",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73fb0a4c-b696-4405-bc38-cb59957a04ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "368a901a-2385-43ba-a28f-bea34b1af588"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8f17111-9a49-48ca-8c75-c50b00b08b98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c7534eb-31e4-4608-9a52-44fa9fe24783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c55bfd69-9dc8-4cb8-adbf-3a9ba50f5dad",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "216f4a6f-793b-4bd6-82bc-09e917883d12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cbb8cfb-1c88-4dee-91d8-a05fd20ef765"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40dee336-0e4e-4e6c-8d31-651ccdb07882",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f18ceb1-eeeb-44b0-a907-cb6e990772ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db4e08a9-3e16-4a2b-97e1-f74c2c6b86ea",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c1bf985-a843-47b5-ba03-fb3d2fba4100",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad982e4f-6bb5-4e9f-9afb-2d8743575cb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b102c55-89aa-4e6d-8f24-fe34feaf893f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93f50b9b-0b47-43e6-9cbd-415a7eaee387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e943ee8-e516-4eb7-83f1-f3ae291ce33b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e712243f-b424-4292-8804-ad0351480e7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bccf66a-5727-43c5-8143-a687dca873aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08166e0b-1ea7-4716-9bfd-fce3ca66f0d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2db512e-754f-4e44-83ab-798ed43a797b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31201775-6dd7-43de-bc47-57010f5fb055",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a72447f6-7fae-4b18-9c8a-65cebd879be8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "189fb571-00ef-46c0-8bf4-a1d32a211d70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9534054-d095-45ee-9fe7-1caba90765b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b35716ce-4329-4a17-865c-083ae59b531b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eb83667-1cd1-4eaa-9a26-7dcb9d748818",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1da6ebf-5208-416a-8a08-16cb7833e939",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8573f452-a10b-4330-b612-7ee9ecd5e533"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8253b8bf-7242-41a0-898a-26ba462d20db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "382164d2-94a1-4b4d-b88e-3ecf2c32fac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de7030d-9c1d-4bed-afff-de917678db2c",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "014dedc6-22ae-4080-92ad-29dfee2ba072",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b244399b-dd9c-463f-96a2-1d0f21ab1ca5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b54f541f-9936-4f5f-9234-5ebb2545591f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf257165-5885-4d48-9116-7f4f338403ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04a1d6e4-7cbb-4c98-ac29-2f14f223d5e5",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38c317c2-ed07-4fc1-bdcb-a65db0264e18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1af7c1eb-8016-419b-8ebe-b12cdfa6e231"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f4a0a07-915a-4486-bd9c-29365a51a747",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7619977a-1f20-4aff-b4c5-3e1d18c17725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a13c134-764a-4798-b55b-d3359e4c8f8a",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc8ffb88-3a28-4afb-b1af-34f69f05a716",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60af8d48-1074-49ec-a746-55e9fe76c9c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8177de9-c49a-457b-8fb6-d22e76c507a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29a29189-9d96-4bf4-84a6-48b304bf04f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "255b426c-b2fb-4dd7-a6b2-98d1b6747ae6",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84592a55-6922-4205-be8d-d257c6dcc78f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a90ed53b-0104-4e01-93c8-18845eebc982"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "115d6a2b-d8e3-49a9-9d00-f2b8c78f760f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef0b22c3-0ccc-4d0e-87da-84e959b86558"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e5dbc2-9a79-4590-9701-848cffdcb013",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2500660e-62d0-4615-b1a3-07ae431beb10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06f31e26-efea-47e6-8feb-1b7529153e94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "345be47d-9714-4ff9-99ea-567999406053",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01a83336-54e1-4a30-8153-6af0772cd156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b81268ea-43ba-49cb-9b2d-2ee7fc3b2768",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15be7041-de3a-491a-a43e-5db23eb8ea86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c44e6bcc-9dcc-406d-ac66-bdaad17f1f82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d378ee80-30ac-46da-8a49-ca7e9640d551",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa3d2914-9888-4eb2-bdfc-087a884321e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3a038c6-8324-4474-aaed-e7c0d83edda1",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52855169-eccb-485d-95b9-ecca27e1d44f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78073ccc-d21e-4be4-a7b4-fe00c411a606"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a56905f-3314-40b5-9ca0-93be98c2c525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "674f0e95-3911-460b-8dd3-d4523f2eb39d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ba9af36-c304-44a4-8edd-393096f9164f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d28931dd-e81f-4985-8e68-1c7a28e69cf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "631972fe-9586-4307-b56f-15227cd6ac28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13e8bb33-719e-4009-8bb2-3a053bd2d5e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc88b8e8-1deb-4f05-9787-877267942ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2abde016-0480-4155-817a-93d697734d08",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ca71950-58a4-4048-8fb9-006145d75543",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed4a0d49-7c57-4e17-88c4-7006a6dfea78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9966bbc0-aeb6-41c4-9727-86bd824b3cd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "310bfa12-63e4-43ca-bc2e-9d74a9c4b07e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cadf138-ab12-40b6-a5db-d7b6cc6d4cbd",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f228a5d4-40df-4c0d-8e17-1f976c3beb87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bee5e69-c99d-4dca-9499-3e4be5ebfbb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c52bb3-036a-42b2-9517-9c69ed47a4e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33749cef-c324-480a-91e8-4e900480be3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a87c300b-a13d-46ae-bc24-98cfb46bddb9",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4ed6add-3081-4a06-b444-2ea79eb47cbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3f69600-0dd2-4f12-ba50-0d13cfb40907"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05bc4398-870e-4ece-893d-739121011d97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3e528ef-2cdc-4f59-be8f-1907071aa086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "539d9e5d-a960-4770-8579-6936762077e0",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37a9d3ca-3dbc-4d35-b697-7e4b569cdd12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4732e0b3-f6c4-4182-ac42-7d9093dea757"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10be191c-ae66-4e7d-a6ea-06839056cede",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb413ccf-be03-4f67-a70d-76ea27f2ee32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f15e9d1a-bc75-4a11-ad82-85903ed9d51b",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd5c0ff4-50d3-463d-afbf-c71d5077d7d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb72a95e-79a5-4805-abb3-11d833b47653"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d73516-ec5a-4016-8f80-39987fba4729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83bd43d1-f0c7-40ff-baa1-0ed72bba9062"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0716a74-2481-4fa1-a846-ef718439fe94",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4723b92f-50a2-4251-b3e7-39cd60427697",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edbc5cf4-14b5-4753-9005-22b4517644f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "168df32c-2069-4cb1-8222-6f67a77d5d6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9736502f-6a32-4b7d-b30c-8b158532fbaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d83248c-9406-4c4d-879e-a21414859254",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b01c9704-c568-4798-a725-749bab4740a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3803e2b3-1a37-4f75-a6a2-407e2f4bb448"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "153da81b-a4e0-4544-ab65-1fdac78eed6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1de9ca73-0d6a-4238-8d10-75bfedd440f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "925be2bd-c59c-4ec4-a7f7-19864b737c90",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8042ff52-25af-4100-ac38-7ff997e42012",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "976119b0-be09-46a9-87db-2b6431fc1b6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf0711fd-4d05-42c8-a2eb-86ef32022308",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a34848d-a00d-43ec-a7f6-bf18e8531150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbff95a2-3107-45bb-b1ed-7b7dee337d96",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b5a1ad-3b42-4722-a124-4d4fd102ac37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "462a57dd-18b4-4fdd-a6b4-58d4dda5ed5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e72c67e-12e4-4622-a49c-4e988a307043",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5383c6d-496c-4acb-aa79-10d96a4be945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5364162-cbaa-48dc-a20f-f73490a6602f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63f93bf5-ded9-45d3-9ce4-4a9957382892",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e08e6822-34ac-46cb-8806-f475d3940ccc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22add8d7-5766-47fb-8de8-b152315f05c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd9a0820-21d9-45da-9741-f4a08091f584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "936db069-2c24-4e4a-98b9-617ce42b9ced",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b41a2b18-2c2c-464d-a330-e520096e0f24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c966f7ae-14fb-460d-b047-9a866239e739"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2dedcab-2c8b-48d6-948b-aa49ff229a82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "370a91d7-e8ab-40f7-9920-fd364f998e5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf63d3c-622f-4bd4-8104-3af0e9369fd6",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5002689a-c910-4d0c-820f-fcfb191a9d92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d17ae6da-aefa-43bf-9c01-17465dd4f741"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27f9dfff-988b-4e93-87f5-864dfaeca86a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "470d497b-cd21-4c4b-b7c6-0827e81e1f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "380cf55f-7e78-4ef5-953c-a03fcd64d41e",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a836b4-5329-4dc0-92e4-a733437c29eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ebf0052-aac7-4e61-9f39-54a4b34e22bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c820ad17-117e-4e4e-8b10-9cd05dc07fef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3575c227-65ba-48c9-90c6-73cfb0eb1e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24476a17-0c8c-4681-bb03-28b310b187be",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f14eeae-7c4d-42ec-9bed-606d739d1759",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9691b470-d90c-4620-960b-bbf534337291"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c75e62d7-08cb-4ef6-bdeb-b4bb4bce6196",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91e4a2b9-19d1-4aab-a5d4-43e90d55d819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c61c934f-bc40-49ae-b4ac-8257c55cf3cc",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b06d4929-2012-4c8d-8f48-f08755915d04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab14eb76-119a-48ad-8c13-69c4bf653fe9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e5972c8-825c-4b1a-8a46-140bd12738ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "111783d9-ac64-4861-94a1-63ce6bc717c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a99c5b58-d34e-475f-bc23-e208d552ed78",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5abf4ff9-5965-43e4-b057-3b1d61cc7896",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ed55828-1b5c-4173-953e-2c1736146552"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6996156-122c-4307-96e3-9fa612b7bd66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7770a617-dbf0-41e8-95ef-bdad9cdb4a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa9df155-655e-4175-85f0-dbaf1a738006",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46ac4760-3320-4e3f-bd5b-94fc35fb32f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "035b3903-9143-4cc5-9219-f0e89080f47a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b658544e-452e-46ef-a19e-5ab8e4fc8d62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faa28b46-e59f-4437-a3b4-a0d68eadc277"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26ca3b9b-5b26-44f9-9606-9f88e8a8e973",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7656e80-3187-4b29-bf4a-91db4a43dbef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73f7c3cd-d7d7-4464-861d-cbf765011a53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5886a4ee-dc4d-484d-86de-00b661cdfe15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd3cad05-a01d-446e-9918-115ce6fb4864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3848701-0346-425c-842a-60940815a953",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8231c7-fb08-433a-96aa-e9a7dfb1e89b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "990a3881-9306-4f82-ab33-d87db6e869d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f18a4b57-2876-459a-82a1-799884c18b67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d6f6df6-e000-431c-b421-71aa7a62752e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8916d9a5-42e9-47dc-aa45-3c8d675509bf",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a63618-4661-4008-87b7-8ab4f5b1bc1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f1a470c-a0b0-4ecb-93bf-89adebdb634f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a60386a4-d37a-40a3-8e9d-f2ad4f5b9c78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6990055-8e89-424d-a7c2-f19235df418a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f60a16-7d7c-4d1b-8501-64880e265d57",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49efc09a-74f1-41c1-97f2-7c7dddce949e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9c13d78-8375-4dc3-a2c2-980ed6d8c886"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef8a16b-06fc-4453-9ea7-0f7f881bf092",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baf9615d-c7b7-4521-bdad-43eb7a5a3df9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87a757ff-f93f-4c18-816a-0cb176c16767",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c609bda-793f-467c-b202-994815506bd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8ac7879-3e87-44d8-979a-1e6c0047fb14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e00d18ea-1323-465e-bfb9-a329779a8666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dd4e222-f2e5-41b7-b73b-32bc313fd48c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd79ded-968d-4b91-9894-24b155241016",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d4c3cd-9582-4f94-b257-0bf1c94e7f07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b910ee4-b0ac-4769-b9f9-3e19e11bbb44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1cf725-c4dc-49ba-b942-4161c0d1ce31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f4a9fb0-2c00-43d2-a5c0-c94030ecd511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2610debe-741b-44bc-a76d-309f72930784",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df2ccc41-f972-44ff-9a13-5175dab16fbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d37cdfe2-c013-442a-8ff8-67985066081f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aaaa845-ad6c-4d16-97ca-2ced05f9772f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "404b962d-9dff-4573-9c46-b77cd494a51f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50ae51be-8c10-49b4-865f-fc110f78b90d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c3c8cbe-021b-45d9-b504-14ea18cf4824",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63404977-4d9e-417a-8018-14fd5b81d62e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf0db13-85ee-4255-b82f-d8b2f8098ca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23632f7a-6ca7-4ff2-ac5c-89474adcb85e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14b656de-8516-4b57-a0e7-2e6be0a062b3",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "496534f8-b392-4943-8743-fca028b96c4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0debead9-8d21-4a6a-94d8-e855d1dbf6c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "324d38c8-2742-4037-bb97-e37ad53fa08f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39733df0-692a-40d2-a435-dca8f37cbfc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45bc545c-798e-4fb6-8958-1ff48852b56a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd33a90d-ff05-42f8-a9e4-697438d6a1b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73ad82c6-df5d-44e8-b8ee-72c5b2b89106"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "777a1f29-35b5-401f-97c6-29f8555effe0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "433f6c6d-39be-4f71-8cef-04aecae3a1c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd7a29c-f58d-4b47-acbf-0992efd499ff",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6da2ac26-ebcb-4bcd-b55c-f24952cca648",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbca2880-822f-456a-a4f6-32688ef8fde0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59c7edc-70ac-40e6-9863-3654c8db14c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01d4c911-1c08-4ece-aaea-848bfa210e1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb5eafd-4421-48bd-b8a2-69a3922d7cae",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd07f2e-9e33-4662-a195-21135a9ca0cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f74ffebc-9488-4721-8003-d2f57645baf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba00bf69-0c94-41b1-aca9-473819eb7251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aa04c0b-6d93-4219-8a3d-cfd2dac6e841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "781f5ec9-f52a-43d7-a293-ffe164cfe38b",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41efef3b-ac7c-4389-babe-337678312ba0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "800fa016-babb-482d-babf-720f64c70f43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea69cc6-e613-4bca-b93a-aac2dca58167",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33ab22ae-dedd-4be7-83f1-80c7598daa3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2514d0a-0692-49cf-a4fb-e3cf96077998",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6fbe3c9-3e38-4be5-878b-25e04a35967a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2fc431f-1795-4dcc-a810-110a553ce137"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "065dbea3-e7b0-40c6-a51d-ff4ad743a1ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf0f72d1-c2e7-4ff7-82b1-353de0cfb55f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f18f25f-7438-4685-ac93-4553e7fa802b",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a0784d-7aff-41e5-878c-15b4c31dcbe6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b489a24a-8f5d-4801-9d63-de729eb88932"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c3aa924-caea-4c5e-9aaf-f5d03f6f8196",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c25068da-5041-4421-af45-8cb7a2f7fd2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c92e4fd9-1abd-4c8e-805f-bcf17cb9a7cf",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e401fd2-4788-4b56-942e-b06b57588012",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c77fe242-cb5e-4a2d-b9cf-cb5f73106718"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dfc2991-5383-4b63-9591-c7c6f61accc9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ed1f642-5583-4745-8090-ec54adb69f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d07f0e6-e6c0-4a59-96f5-e817538792fa",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c2dfecb-d82a-4bbb-9532-5f5fab95c414",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e278fb3-24f8-450a-afc5-5425d6a9f49c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68daf8a3-ea38-46e5-96c6-baac49e0d9a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d785f84a-d26c-41d3-8a85-bac0bab8cd99"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "62d7701b-2f0f-4e4f-a60d-57a5105dee19",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31e00327-9cfb-48cd-b542-2416e22e256b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "466e11c4-efd9-4eaf-85ca-0ffa069d1f4e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "041a8a60-df4b-4d73-a73e-0f667eec4197"
                    }
                  }
                ]
              },
              {
                "id": "dbff54d8-14ac-42d7-8fea-3fed08c9a667",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "24166f23-eb4f-494e-a861-1f7aa6377833",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94e76d94-534d-4786-b85f-0a25b443d8dc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0854bdeb-94dc-40de-bdf4-21b4f06ee79a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "900f5092-79f9-46d1-ac3b-f37fb5ff3342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a811cf64-4cf3-4386-9f03-6ac264baef21"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30a86dc2-f965-4e80-8a96-eec2cc9db04b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a4140ac-b046-4ada-9785-61ef0fbd9c46"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6d3e52a-bcd7-4815-85f1-cdcad8e21db9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "863ac212-d917-4dfd-9148-6e01d6183782"
                    }
                  }
                ]
              },
              {
                "id": "25774e69-2b74-4dd8-b218-5f8f8c2f4002",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "777748d6-ae81-4fd6-af0f-579a5c816e0d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "826c3fa3-54da-43c9-bd2a-bd583106c438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e1a7b829-74f9-4a48-a3b9-b9d871cddd9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b77b4ed-4757-4c89-8014-fb827ea37199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40e42285-a2da-4e8d-b27b-c6b9702be355"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5293eac3-196e-4dbf-a6a5-6ce356d632f3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "199cd8b9-eac1-4b97-85d1-f4871f6bc486",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd59c888-f283-45fc-a52a-60539c95172e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "11dbd886-bb3c-4982-9082-a5c36d446757"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e62df1aa-449b-4270-8aac-59178eecb681",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6537bf26-2172-45b1-8f24-9aba60f76a05"
                    }
                  }
                ]
              },
              {
                "id": "6d6bd3de-a5e1-4717-a2ab-62da12c5edbe",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8c253f0-f719-44d5-8479-7009e136fc42",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f2392a54-436e-4ecd-8b95-ad2e66da3f9f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7c26c066-02e1-4c8a-8b13-0c76eb22f509",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fce747f6-f105-4438-9e1d-cb3ec587243a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "daead4bb-152b-4f16-8796-c69b5c7c685c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "01fb3d8b-5a0b-4dd6-baba-9be058abbac0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "50aead85-7d8a-4d39-8e99-053018f358ae",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dce9e05a-8214-4c45-b7c6-a6bb7da307e1"
            }
          }
        ]
      },
      {
        "id": "fb8db663-ca5a-47fb-8f01-66f446e1091c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1db25ab2-22eb-48eb-a580-5125115355fa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0b26cc6e-4f4b-4fcb-b5e7-8ae3bc10824f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7bed48a8-e44b-4fb0-a19b-13dd7c5dbf39",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23586934-dee3-4185-bb33-a000cab4f396",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4e33fea0-5d5e-478c-bb50-bda40d246217"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "723b6962-4953-496e-ae26-00ea41474797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb5dd0c6-2675-48a0-b576-730a263b08ba"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1968bcd0-204f-4b8e-8e98-88888259f6f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b4b6f47b-5923-4260-8227-046f2c50cb1b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c3ea668e-a1d0-4889-a243-1c1b81c98244",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6193b6dc-8fba-4c25-981e-14e200c80958"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "661e23d0-5cb3-4979-aa73-0087d5eb8cce",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "63fbeed0-17bc-466a-be56-38bc8a58c956"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "385593ed-a3c5-432f-9e8c-a508a57a22be",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f71f4e26-35bc-458f-bc42-9003b25a3beb"
            }
          }
        ]
      },
      {
        "id": "e9fc90f9-8246-48df-91c6-4a0579297fc0",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "bc3a9e60-52ab-4499-831c-eb21137bd954",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cd6be954-3cc4-493e-b42c-fbc4129b7cd2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a23b2973-0f7e-4588-8b60-24b97eddb8e9",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac998b5-4d41-4018-a2c9-b5088cce8ed5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e6e6232-e9be-4406-97d8-dd70e71fa5a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fe89bf8-aecd-438c-a814-314ce3a4b9df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0b4a96a4-c3a7-465d-9198-a78b6930518d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "53ea1084-ff44-4660-be4d-523308d41d73",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3267961b-df55-4d38-8771-e3b56dc27100"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "374d4822-31fd-4d5c-8cfd-407b42398207",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "afae1c75-5276-4b4e-8833-824292c28b6a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d588f15b-e634-4161-a8fb-5caf627f9a73",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4ff459a9-e746-469a-85fa-d869889ba2a5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7146e82d-2002-40dd-91d6-a25dd1a824c5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ba96aa7a-4a8b-4084-94df-acc02da2afa5"
            }
          }
        ]
      },
      {
        "id": "6b4d1c2c-1908-49a6-b5a9-bd17ff2b4203",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "45fa6ebd-a3cf-44b3-a1ea-6372c08bffbc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "67a7054a-af1f-4acc-b75d-1aea160b03cd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3acccdd2-cce6-492c-9c48-0867a372016e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9ab0405-29b1-4dc5-a773-9728edab097e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83dabe23-0631-4433-b915-b4a0ad192187"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b25d775e-47a9-44a6-82f3-7c229ecd7b79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3315e740-394a-40d7-b544-c2b9bf823339"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8e84b98-4c68-447d-8d95-1d14d7a7182f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3097364b-b789-430e-9512-8281f8d8aabf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e3c8811-9014-4e2d-8f0a-3aba9e911a44",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6d21724-10b4-4a36-9565-dc0c19616315"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a3f762ce-4cb2-4930-9bd0-027d5cb3441a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f6952574-9b7d-4eb8-8381-9f3eba67aa59"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ad4c5853-f198-4ab6-b683-37536a48ef2f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d4e178f2-ad9f-45b1-b622-4777a0d064e1"
            }
          }
        ]
      },
      {
        "id": "52127b5c-0073-424d-aea8-2d546a783ce1",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "83e6b47f-2c7c-456f-a621-dae85022601f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6339ef83-b6d5-4488-96bf-5cf810584646",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "dbe265cd-516d-4cde-a638-702df544c9bd",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "baf6a4f4-921a-4ee7-9e9d-8ed805a64ce9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "990f7569-7355-4c2e-bcc0-7f6458d515ae",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 70.05158730158732,
      "responseMin": 7,
      "responseMax": 631,
      "responseSd": 80.75006337815297,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1718757513847,
      "completed": 1718757540111
    },
    "executions": [
      {
        "id": "7c3a9928-bf49-498f-850c-c322a31076eb",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "628e7064-da14-414d-9c4a-fb847c801ced",
          "httpRequestId": "0bc83666-743c-4bbd-8b62-992b1dc93887"
        },
        "item": {
          "id": "7c3a9928-bf49-498f-850c-c322a31076eb",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "f33c938a-216c-4a6d-ba63-c57a9aa45278",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 0
        }
      },
      {
        "id": "84b1bec6-89d9-4436-953c-fa3e0ad445a4",
        "cursor": {
          "ref": "70e10596-75f5-4605-adaf-8ad877c50d79",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b419572e-9528-4d99-b47c-50fd02db845e"
        },
        "item": {
          "id": "84b1bec6-89d9-4436-953c-fa3e0ad445a4",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "8ea12d09-2e4f-4a05-810d-fb28b1f0c6d9",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "ff1d8ce0-9ec0-4cc8-9056-af399908fccf",
        "cursor": {
          "ref": "5e9d7589-797c-4e3b-b1cd-4bdb72b75265",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c035a95e-21dd-4bda-ba23-075f1ee8990c"
        },
        "item": {
          "id": "ff1d8ce0-9ec0-4cc8-9056-af399908fccf",
          "name": "did_json"
        },
        "response": {
          "id": "86149bde-27f1-44a7-8ec2-ea014743dbaf",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "990dc1aa-0e56-4117-9120-a77b4baf0974",
        "cursor": {
          "ref": "05bbf0a1-42bc-4412-9965-8eda99b4c5fe",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "70e89cf0-cbe2-4317-aa76-e1023a2bd210"
        },
        "item": {
          "id": "990dc1aa-0e56-4117-9120-a77b4baf0974",
          "name": "did:invalid"
        },
        "response": {
          "id": "1af5c432-2225-48ae-900e-ab72aa402baf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "990dc1aa-0e56-4117-9120-a77b4baf0974",
        "cursor": {
          "ref": "05bbf0a1-42bc-4412-9965-8eda99b4c5fe",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "70e89cf0-cbe2-4317-aa76-e1023a2bd210"
        },
        "item": {
          "id": "990dc1aa-0e56-4117-9120-a77b4baf0974",
          "name": "did:invalid"
        },
        "response": {
          "id": "1af5c432-2225-48ae-900e-ab72aa402baf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "213648b9-da06-4134-a190-4be23f3606fd",
        "cursor": {
          "ref": "09e1ca8d-69a7-496a-b319-6a3ad68ef6b1",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ff7c17bc-8fee-479f-b0a5-ae2754fcc842"
        },
        "item": {
          "id": "213648b9-da06-4134-a190-4be23f3606fd",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ac9d63f4-7a51-49f5-bb5f-fcc25eb8abf3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 319,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bfc50fb-b162-4ed4-833b-b0afc36f1bdf",
        "cursor": {
          "ref": "3bd7aee5-5ab8-4204-8144-3e9f975c9cf0",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "adbb43b0-2618-422c-8c82-5f32266c01be"
        },
        "item": {
          "id": "6bfc50fb-b162-4ed4-833b-b0afc36f1bdf",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "57ad8f06-4e15-413a-b2f8-1ce0f94ac808",
          "status": "Not Found",
          "code": 404,
          "responseTime": 44,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24a7d051-9c33-4a7b-8f7f-7787239658fc",
        "cursor": {
          "ref": "c459ebdd-e6eb-4435-ae0d-838fa8d30306",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "634f0f9b-9a83-4bae-9474-290261215022"
        },
        "item": {
          "id": "24a7d051-9c33-4a7b-8f7f-7787239658fc",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "679eb9b9-b1b4-46b6-b267-4b865e2926ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df3e7097-5b9b-4468-9ec2-5f121e54d63f",
        "cursor": {
          "ref": "4f4bb026-b3c7-453a-80f4-7529c35c69f2",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f21e289c-44eb-4891-8c91-dbe9e04222be"
        },
        "item": {
          "id": "df3e7097-5b9b-4468-9ec2-5f121e54d63f",
          "name": "identifiers"
        },
        "response": {
          "id": "be71144c-93d1-4f2e-b297-63978c9f3f3f",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd596536-5807-4496-af13-8ec7185396cb",
        "cursor": {
          "ref": "ac6a3ffc-7adf-455c-9088-19c72be5250a",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5a09e777-ecc8-45b6-a0da-60c1557047eb"
        },
        "item": {
          "id": "bd596536-5807-4496-af13-8ec7185396cb",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "355d7773-0f97-4bf4-98cc-a2c0c9532a8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "364432f1-7fe1-45c5-ac4e-f2040bd067c8",
        "cursor": {
          "ref": "e0135a42-83d6-4d12-8af5-bcd10c43a3df",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d20a2563-afe7-437c-abe8-fe069fbbf40e"
        },
        "item": {
          "id": "364432f1-7fe1-45c5-ac4e-f2040bd067c8",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "cc20866a-f760-40b1-b315-234e3d69d6ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d922c062-9ad2-4dfa-a045-cfea15442b7b",
        "cursor": {
          "ref": "458e724a-1177-4053-a678-0b709ec6fb5d",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "aa8b70e6-7f32-4d5e-958c-42094c587a45"
        },
        "item": {
          "id": "d922c062-9ad2-4dfa-a045-cfea15442b7b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e9a40bb3-79c1-402b-94f0-00229c7834eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eb795c6-4db1-4a3e-b758-bb878dae7223",
        "cursor": {
          "ref": "a1f59368-ec5d-4a33-b226-5d4b106f97d2",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "fe89aa9f-0b27-45ef-b88b-c2bf136df8f0"
        },
        "item": {
          "id": "4eb795c6-4db1-4a3e-b758-bb878dae7223",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "44e4bed2-b9f9-4a73-af6e-0d7bffb33e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "955a9c09-8ea0-4e55-9b82-3dd9d4563695",
        "cursor": {
          "ref": "31ae5494-913e-4e6d-b79e-b545c310f3d1",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6aa0cfa9-7f83-4cbb-a5ec-82bad0aed5e0"
        },
        "item": {
          "id": "955a9c09-8ea0-4e55-9b82-3dd9d4563695",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "7153ae24-bf3e-4bd9-a559-8c70c37bf94e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca348582-f890-4ba0-a637-66ebe7ac9bd7",
        "cursor": {
          "ref": "c5095859-ec89-49ab-82b9-e31bcaf4931f",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a228937e-47df-4f2b-b6b3-c14384dc9ed6"
        },
        "item": {
          "id": "ca348582-f890-4ba0-a637-66ebe7ac9bd7",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a0b3c547-6652-421d-be9f-0265277c419e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0248c575-c7b0-4429-ba35-0e3451878f6c",
        "cursor": {
          "ref": "c63a1fa0-9c4b-4a62-9916-a6dcf4f9a28e",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d1d6845b-6411-44c4-99ef-278349535297"
        },
        "item": {
          "id": "0248c575-c7b0-4429-ba35-0e3451878f6c",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "7ac70055-485e-4f0e-be5f-506d57daa73a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5184103b-d9cf-4c57-ab4a-7fc9ab446a24",
        "cursor": {
          "ref": "6d7be415-5758-4e02-b766-aecfb64dbc1a",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "21e93f7f-a216-42d1-b4cb-2c70c8935295"
        },
        "item": {
          "id": "5184103b-d9cf-4c57-ab4a-7fc9ab446a24",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "187c52a7-ad2d-4fbf-88f0-9c0bddf6a4cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caeea330-b1e3-4ff5-9eb2-3f0bc1cd63a3",
        "cursor": {
          "ref": "c3ad501f-bd14-4984-8441-4213f59c2353",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6026f99e-0a6a-4730-850f-6eb33f1d5b69"
        },
        "item": {
          "id": "caeea330-b1e3-4ff5-9eb2-3f0bc1cd63a3",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "422ce381-c6cb-4ccd-a55b-69081368073e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5293f7d1-7657-4d15-a473-276db1bb0481",
        "cursor": {
          "ref": "395acda1-d466-4986-9388-96ed36d182e9",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d1fbe944-d773-47db-8b6d-338ef4544fd4"
        },
        "item": {
          "id": "5293f7d1-7657-4d15-a473-276db1bb0481",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d2dd08bd-d701-4360-82aa-cf8b9266f449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ba89032-bd9d-4cdc-9931-69893abc20bf",
        "cursor": {
          "ref": "85a3a8ad-7e32-413b-9651-907ff4bd5f97",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0bb011fe-3124-494a-adf7-45fc3a576e98"
        },
        "item": {
          "id": "4ba89032-bd9d-4cdc-9931-69893abc20bf",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "135e3c51-016f-487f-b45d-1627e0aefbac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "484a2503-88fe-48e9-b96a-8d2f79148763",
        "cursor": {
          "ref": "f49246cd-f044-4985-92ed-e422336f8ed9",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3ebacefa-42ad-43ea-bf20-c0301f73a0df"
        },
        "item": {
          "id": "484a2503-88fe-48e9-b96a-8d2f79148763",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "5fd314ba-ce50-44f3-ab6b-ac32050b40f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af3effdf-7561-43d3-b4a8-4144768c1579",
        "cursor": {
          "ref": "be6dde80-c6bc-4ad9-949e-5b6cebfbe832",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "84127b46-995a-417f-8367-709e5fbdf62c"
        },
        "item": {
          "id": "af3effdf-7561-43d3-b4a8-4144768c1579",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "24add697-69c0-4118-8475-730117ed7a03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0baa7e8-a731-4149-897e-d4edf02af53d",
        "cursor": {
          "ref": "a6e9ef9f-4374-45ac-9fd3-b1bf1dcce41f",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "56208edf-a5ee-4529-af07-d5002d690ba9"
        },
        "item": {
          "id": "f0baa7e8-a731-4149-897e-d4edf02af53d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "e2f2991e-9cee-4f89-bf15-d5491f844fa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3291af56-286c-44f7-b29c-86c3cf29fd21",
        "cursor": {
          "ref": "56ff609f-4190-4ddd-bee5-20f4c15ac0e7",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "026f0a43-d501-4ff8-8377-c57760962c51"
        },
        "item": {
          "id": "3291af56-286c-44f7-b29c-86c3cf29fd21",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "31a45c09-0e74-47fe-a2d4-47d5487050fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d19a978-268a-4198-a726-1056793143fc",
        "cursor": {
          "ref": "aa6c559b-0b19-4166-b777-a25fdbb9fa7d",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "25e94caf-866d-46bf-b4a0-bb4fdc386d14"
        },
        "item": {
          "id": "0d19a978-268a-4198-a726-1056793143fc",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "012fe0db-305e-4de7-96aa-0425b76299b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "308d9170-4647-4484-8e03-8cff970fe8dc",
        "cursor": {
          "ref": "5e9ddc2a-6746-4045-a9ac-07b5ad342c81",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "65bfd21f-15df-49b2-9876-c0ecfda91654"
        },
        "item": {
          "id": "308d9170-4647-4484-8e03-8cff970fe8dc",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f6524a9a-bf72-41b1-9b50-79c5a8317a9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "200ae61e-d9ff-4175-8dca-29a4f62116ce",
        "cursor": {
          "ref": "969c0a8d-80c2-44bd-bb25-d34f588a6260",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e0ca6013-f6e9-46c0-b181-777a9b1083b9"
        },
        "item": {
          "id": "200ae61e-d9ff-4175-8dca-29a4f62116ce",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5a796e07-f458-44e6-a0f5-c3e7736c5b8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83348bb6-308e-41fe-ae81-95f62b849b78",
        "cursor": {
          "ref": "866b480f-51b4-4a06-b9ac-2c14e3e313de",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "17227adc-fa06-43e6-ae42-1e128f2e9b3a"
        },
        "item": {
          "id": "83348bb6-308e-41fe-ae81-95f62b849b78",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "f8ac5769-bf09-458b-ae20-cd23859ac3b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e58d8eea-bdde-4791-b249-f689c551cc5e",
        "cursor": {
          "ref": "69fbde72-57d2-40f7-97af-f5b4a8f2446c",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b018f284-a05a-445a-9858-983511529f47"
        },
        "item": {
          "id": "e58d8eea-bdde-4791-b249-f689c551cc5e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b4aad604-19c0-4aec-8acd-f9aad30f4451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7f38976-173e-45fc-bd13-1ecf4d241b18",
        "cursor": {
          "ref": "bce52bcc-8eeb-4f30-b3d8-d2c740a5e6af",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "1f903d9c-ffc9-451b-ba89-87f2a3a0df22"
        },
        "item": {
          "id": "b7f38976-173e-45fc-bd13-1ecf4d241b18",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "b595021c-f402-40d1-9472-0fa22d67c63c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29aa9d42-ac6c-48f5-bbf0-9c889fd82383",
        "cursor": {
          "ref": "0d456931-b4a8-438c-8202-9bf6a75e4523",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f18f66e3-eaf3-457b-bdba-3e15c215028a"
        },
        "item": {
          "id": "29aa9d42-ac6c-48f5-bbf0-9c889fd82383",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ca640097-e306-4380-8171-025ff319abe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "705e704f-0c05-4b42-b10d-13bfe6e2d103",
        "cursor": {
          "ref": "912ad526-775b-41e1-a982-e212654df861",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2f6f75dd-1e6f-4268-bbff-0dd45bfee675"
        },
        "item": {
          "id": "705e704f-0c05-4b42-b10d-13bfe6e2d103",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c664e37c-e184-47ca-a27a-732b6bf7467e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71ab2ea9-b1fa-4d85-bb14-6b2ae447d8fa",
        "cursor": {
          "ref": "5a69566f-30ef-4b84-a112-8fd13fc86ec1",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9e3bce47-0b6a-4168-bd2c-fdbe31f14b01"
        },
        "item": {
          "id": "71ab2ea9-b1fa-4d85-bb14-6b2ae447d8fa",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "afa8eff8-3183-4e36-b4f9-994e643ed51e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f13a92bf-6caf-4fe1-8c75-ef751bd61677",
        "cursor": {
          "ref": "bcffa915-44a4-482a-b0d1-62879801000b",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "960692c6-6baf-41b9-b907-f09ea451b48d"
        },
        "item": {
          "id": "f13a92bf-6caf-4fe1-8c75-ef751bd61677",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "f2f539f2-47a0-4861-a0eb-6586c22923d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7157c311-ea9d-41db-ba42-a71375fd6df8",
        "cursor": {
          "ref": "b6fa66cc-d7e7-42f0-87d7-068127213407",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "dce23056-d74d-4e3a-b73c-aee9e814d578"
        },
        "item": {
          "id": "7157c311-ea9d-41db-ba42-a71375fd6df8",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "1ec0e5ea-cd1f-47eb-9df5-094d64b2d839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00a3acd4-0fc7-46fa-a720-e33438ab0e01",
        "cursor": {
          "ref": "6d132576-7c29-4744-b1a3-72a2f04bbd5e",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4339d621-5819-4cf4-8b3e-608848b0dc88"
        },
        "item": {
          "id": "00a3acd4-0fc7-46fa-a720-e33438ab0e01",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f0df9f6a-32bb-4c27-8f58-14e53fc37f9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18ab58a6-d5e8-432a-9cc1-3d19de368a8a",
        "cursor": {
          "ref": "7979f8d4-bbb8-4e0d-a696-d3fe4e77c191",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "5c7c33a0-9d3c-49d7-8425-a249c864e5a7"
        },
        "item": {
          "id": "18ab58a6-d5e8-432a-9cc1-3d19de368a8a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b42e3321-8d7c-4335-b7f1-60a3d8487cc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89d1d50d-b6bd-4d9c-b0ea-a981e3b2ca3f",
        "cursor": {
          "ref": "6fee86a0-0465-46ff-bcb1-7908da79cc58",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "44587046-aeb0-4601-82ff-6bda4cc26e08"
        },
        "item": {
          "id": "89d1d50d-b6bd-4d9c-b0ea-a981e3b2ca3f",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "d96a062e-b794-492e-921b-6a7d0af10748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d278f2c0-504f-4b74-921a-8e762963d68c",
        "cursor": {
          "ref": "4701e96c-35a6-4e82-8565-07d9d8e870e8",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "94ace152-f201-4c52-8271-de24bc642c2f"
        },
        "item": {
          "id": "d278f2c0-504f-4b74-921a-8e762963d68c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "0431e8ee-bd57-4b5f-a80a-db3447b7239f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c58ef3a-3684-454b-a437-3d91e816ef8a",
        "cursor": {
          "ref": "7c04c6c0-8106-43cc-b713-8664cb5fc7e8",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1ecbfc63-2a01-44a1-af7b-402100149ac4"
        },
        "item": {
          "id": "6c58ef3a-3684-454b-a437-3d91e816ef8a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "490b21d9-0d1d-4c35-a1d2-83ddc129c057",
          "status": "Created",
          "code": 201,
          "responseTime": 631,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "fddff2ab-3d6c-471e-a213-c5fc68407a22",
        "cursor": {
          "ref": "992a031a-fbb1-4998-a354-baefacf9e844",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ab4848b9-a3e3-4ba4-9a4c-426424c4cbaf"
        },
        "item": {
          "id": "fddff2ab-3d6c-471e-a213-c5fc68407a22",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "1e4e5ae3-4338-4645-819c-61a978c4ea5a",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "4d84e4bc-9f93-4290-8be7-b478339fef21",
        "cursor": {
          "ref": "80dd99de-1d8c-4df7-8f94-111f89c403bd",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b17c404b-1901-4ce2-ba41-12397fff81e1"
        },
        "item": {
          "id": "4d84e4bc-9f93-4290-8be7-b478339fef21",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ddbdd949-268c-42a7-9959-ae4f310d84ed",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "99d1cb2e-03ed-4f59-bd64-13676cdc579d",
        "cursor": {
          "ref": "e285c231-0b12-4839-b9e6-8abe6cebebd2",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "427eb991-b1da-401c-8af2-2fcf4b759572"
        },
        "item": {
          "id": "99d1cb2e-03ed-4f59-bd64-13676cdc579d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "0b7f1183-1e0e-448e-b69e-0e53123e4672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e930639a-fda2-4844-8d6d-79a7e7a37377",
        "cursor": {
          "ref": "aced0e8f-05a8-4f4a-bb16-2ab45084a66b",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f66e5df4-0f10-4953-b46c-e0c4d0fb99d6"
        },
        "item": {
          "id": "e930639a-fda2-4844-8d6d-79a7e7a37377",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "9fec5cbf-0895-4133-b13c-582342f1a16e",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "08f43e31-e903-4d50-8d6b-69263f5af9f2",
        "cursor": {
          "ref": "e63eccbb-e11c-4985-baa2-ea54c699740e",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "aa24748d-1e8f-4750-9c6b-f625f4a43a86"
        },
        "item": {
          "id": "08f43e31-e903-4d50-8d6b-69263f5af9f2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "7e7eb1ff-631c-4b79-a366-1f68b07de344",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "a52fee31-fabd-443a-b36c-1b9ef3caa6de",
        "cursor": {
          "ref": "ca6fde86-3cdb-4957-845d-6b954b67275e",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1d95570a-f65a-4e4d-812b-2d1000990e59"
        },
        "item": {
          "id": "a52fee31-fabd-443a-b36c-1b9ef3caa6de",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "8fddadac-b2b0-4878-8438-a35d07fd767c",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "67e235d0-2021-44cf-bebd-09ed543a61e3",
        "cursor": {
          "ref": "3263f91a-4aab-463f-a2e0-407d38b08a3e",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "2597fef9-ebd7-4ad8-8ff4-6c9b3c3741af"
        },
        "item": {
          "id": "67e235d0-2021-44cf-bebd-09ed543a61e3",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a3903471-3434-46ab-9be3-144d7de754c7",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "c0771624-b8c9-42b4-bc60-82dbd1b546ee",
        "cursor": {
          "ref": "fe01388a-ed11-470d-8691-53f7afea15be",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "bcb6a0fd-184e-4403-a6b3-828999150d2f"
        },
        "item": {
          "id": "c0771624-b8c9-42b4-bc60-82dbd1b546ee",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "463d64b6-f75a-49f6-b320-50ff4e10e52e",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "5b8d219c-d62c-4a28-8902-441293a85846",
        "cursor": {
          "ref": "a9166c38-b93c-451f-982d-32814602efce",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "50dc4d35-d4cd-47fc-8392-3adc5d4171c6"
        },
        "item": {
          "id": "5b8d219c-d62c-4a28-8902-441293a85846",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "4950609d-d00a-47a9-99f7-37c490e41e59",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "0af66869-f494-47ee-9e88-0f036bba3bad",
        "cursor": {
          "ref": "835e0a1e-1865-4e70-9a43-0247c9a80620",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "620e1bd6-9be2-4375-842d-4c0a2b52bc17"
        },
        "item": {
          "id": "0af66869-f494-47ee-9e88-0f036bba3bad",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "39632320-1d29-4437-9fc0-e88b64b03cfb",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "6b7d88f7-ade0-4d76-8e55-1139f3ad03fa",
        "cursor": {
          "ref": "bd6dd882-4f6d-4874-ae31-c8ae20abc29c",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "93277d36-6876-49fb-a717-a300ef5c3421"
        },
        "item": {
          "id": "6b7d88f7-ade0-4d76-8e55-1139f3ad03fa",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "150f6437-1d6e-4b49-ab95-305f61ad78fe",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "5a58ec74-78b5-43e6-8fbf-33e31ea573ce",
        "cursor": {
          "ref": "0b44882a-cd6c-46ed-8cff-b8430745cd1e",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "eda1cb64-c66b-4e15-a85e-19f54c65015e"
        },
        "item": {
          "id": "5a58ec74-78b5-43e6-8fbf-33e31ea573ce",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "dd43edf1-f176-4176-9839-e5c802261b71",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "e2d688b1-a284-40b2-b2ee-742eb1b2a7a8",
        "cursor": {
          "ref": "2c81103e-9b2b-404a-bae7-cabf8deb7620",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "0966687a-9120-4114-9a5f-f14715cf926a"
        },
        "item": {
          "id": "e2d688b1-a284-40b2-b2ee-742eb1b2a7a8",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d3f9ad5b-edd6-415e-a847-825994261c4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6480dd38-bb59-4299-a2bc-8696f2308d49",
        "cursor": {
          "ref": "c84af9f9-b55b-423f-9039-f7a3c96915df",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a8f3c74d-92a6-4dc7-8df2-90d532d1a82d"
        },
        "item": {
          "id": "6480dd38-bb59-4299-a2bc-8696f2308d49",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "53e0401c-1702-426c-a9e3-15283522439a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03c2e6e0-3698-4fa0-9ad5-10ff2483cb4a",
        "cursor": {
          "ref": "535571ce-40dd-4601-ac92-9c98a6a05e5c",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a19ae1e0-c6a3-441e-9fab-df09c9c2b865"
        },
        "item": {
          "id": "03c2e6e0-3698-4fa0-9ad5-10ff2483cb4a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "1184075e-8d66-4d6c-8d21-5300e3bd1cd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5550593-b018-4e5c-9071-5fd3d6aba3fb",
        "cursor": {
          "ref": "9e68fc42-b418-4b6c-9b3d-223c4eee770d",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "912e3aef-4338-408f-addb-acfcddf50be0"
        },
        "item": {
          "id": "f5550593-b018-4e5c-9071-5fd3d6aba3fb",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "d8761e4c-9ab3-4fb4-af7d-fec6ad44d394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c9bb1f0-2a5a-43e9-9749-ff083bef033f",
        "cursor": {
          "ref": "9430d48d-5f67-456a-933a-ba8172afdcbf",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "42f94eca-6909-4249-9e53-db692cff03c2"
        },
        "item": {
          "id": "2c9bb1f0-2a5a-43e9-9749-ff083bef033f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "23a70d14-eeb3-4b93-b6cb-f4bae0dad3ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "142ce0f9-1629-4324-96bd-9ee647b3fc18",
        "cursor": {
          "ref": "514b1954-1cd2-4fc7-8aba-1eee65d2bfa8",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8171eccd-1089-4bf5-ac0b-6aa61d781ba3"
        },
        "item": {
          "id": "142ce0f9-1629-4324-96bd-9ee647b3fc18",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "132ee787-363b-45a4-9098-ebf3562bd9e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6f90e77-83c9-4feb-8cbe-122f0bcdfef5",
        "cursor": {
          "ref": "fbc3a561-8b1e-4e64-bdc3-8a871254dc7a",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "14066db1-ea20-46df-a393-5a996b61f789"
        },
        "item": {
          "id": "f6f90e77-83c9-4feb-8cbe-122f0bcdfef5",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d0287dfc-136b-4cef-adf0-2ebe7fc00ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "708dfca5-a239-43ae-8746-7ab3d5d2d5bb",
        "cursor": {
          "ref": "f5ff6ce5-4f24-496f-b9e6-ce46eafd466e",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "7865fc75-3c4d-483a-825d-77e448254cbc"
        },
        "item": {
          "id": "708dfca5-a239-43ae-8746-7ab3d5d2d5bb",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "835d46f3-b145-4cef-88d7-2b48af7e0603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab31b1e0-1c36-4a6f-9875-22fa2a170dce",
        "cursor": {
          "ref": "09de690e-b1c0-457d-a277-0c2664744c07",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "c43749b7-fbef-47ca-946c-3b0bdbbb8bb4"
        },
        "item": {
          "id": "ab31b1e0-1c36-4a6f-9875-22fa2a170dce",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "31e711e1-e293-41a7-aa35-c0d3dcb9c441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "393b0bf5-37de-4a45-9bc8-635609b7b2cc",
        "cursor": {
          "ref": "fbed70ae-eb13-4cdd-b181-dc8b0f0f3e34",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "05f98f6b-f6bc-446e-aa69-f441448f604a"
        },
        "item": {
          "id": "393b0bf5-37de-4a45-9bc8-635609b7b2cc",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "be36680d-e722-48f4-9f85-8bdc2f37fa3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8a08c21-7df8-425a-bac8-4ded6b0be5b9",
        "cursor": {
          "ref": "896dead4-9de5-4a0b-b767-0a67179d73ee",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8c4c0f56-783b-4a45-a8b5-cb6a6a658b58"
        },
        "item": {
          "id": "e8a08c21-7df8-425a-bac8-4ded6b0be5b9",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d1fea119-b392-4ab4-ab91-b4b33d969de2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af70e42e-9c47-4571-85e6-1f4ed4c349b0",
        "cursor": {
          "ref": "7fcaf7c6-7fcb-43c3-ac26-49884dae90b4",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "46340664-00c5-4460-971b-477b997a4a66"
        },
        "item": {
          "id": "af70e42e-9c47-4571-85e6-1f4ed4c349b0",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "67975e07-128d-4abc-8887-0710e1c9a48d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38db5441-88e1-4fd3-a22f-f0bd64d24217",
        "cursor": {
          "ref": "8a5250a4-5a97-4d3a-9fd9-0e8d7e10fb68",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "dbe4a291-e504-400d-b120-4e6c5ae3a0c7"
        },
        "item": {
          "id": "38db5441-88e1-4fd3-a22f-f0bd64d24217",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "7dfbe8d2-e9c9-4cf8-b0cc-8981c8502c96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e2e5785-ea29-4dab-bcbe-722e5e2c4b89",
        "cursor": {
          "ref": "266dd584-40e4-4cb2-8362-acd262c80c5f",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "67fe312b-3265-47fa-8dc0-5fb5a2753d98"
        },
        "item": {
          "id": "5e2e5785-ea29-4dab-bcbe-722e5e2c4b89",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "1c0d13c3-2690-4f55-884a-dfaa40135173",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "d1e77fd2-0d09-4bbc-9d47-98189b45abc4",
        "cursor": {
          "ref": "8c5a43ed-d2dd-4413-b819-12de89d62261",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "cc2d7a52-b916-410f-a496-47b1306c6868"
        },
        "item": {
          "id": "d1e77fd2-0d09-4bbc-9d47-98189b45abc4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d28bff48-25cf-421f-9682-a1da61d45c18",
          "status": "Created",
          "code": 201,
          "responseTime": 450,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "b89f8533-6c64-415d-98ce-f048ca145461",
        "cursor": {
          "ref": "634e3f76-cf32-4237-9141-4e3557178c2a",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d6507344-080c-40cc-897a-3d3975b65ad3"
        },
        "item": {
          "id": "b89f8533-6c64-415d-98ce-f048ca145461",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d16b2bae-eb51-4c40-8b18-67584385675e",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "cbbf3392-69a2-4269-8461-e21097f11875",
        "cursor": {
          "ref": "49a93da8-92ce-4b9f-91c2-394bc0c265dd",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "ae3ccc9f-438c-41b8-b384-ff1d60fb79eb"
        },
        "item": {
          "id": "cbbf3392-69a2-4269-8461-e21097f11875",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "2d8f83e2-c51d-4f8b-9102-74e01bc970e5",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "55011284-8cd8-4497-b45b-ba139d3b9dec",
        "cursor": {
          "ref": "5562abda-fc20-4830-9f38-aa7c49d9a9c3",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "cfa7b7c1-f1c3-40ac-9815-bb0111ebe196"
        },
        "item": {
          "id": "55011284-8cd8-4497-b45b-ba139d3b9dec",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c6950f1f-ce0a-4057-bf77-71ba7bda319b",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "a1114079-4b5f-4e6b-8029-dc13ae19d12d",
        "cursor": {
          "ref": "9a4f037b-f780-464f-bdee-4ab4f87ede02",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "e495a758-5d21-44aa-992c-21b89b759b7f"
        },
        "item": {
          "id": "a1114079-4b5f-4e6b-8029-dc13ae19d12d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2e88c05b-76fe-4abe-8f46-7aa8efd16c86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0373ae21-c144-4e0b-b71f-f87d5ff4f155",
        "cursor": {
          "ref": "cde3da49-31fc-43d5-982c-1d9ca06d48a9",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f3f6ce41-aaef-444c-b189-7a403ff75884"
        },
        "item": {
          "id": "0373ae21-c144-4e0b-b71f-f87d5ff4f155",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "4dbce82c-112e-4aff-92a0-864fbcf01d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "086306dd-c27d-4da2-81e1-149b5207db6b",
        "cursor": {
          "ref": "2f808ab5-4b6a-439d-ac24-8a9ce888b54c",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "2b99ab36-2468-4724-b2eb-f1d20e002c52"
        },
        "item": {
          "id": "086306dd-c27d-4da2-81e1-149b5207db6b",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "54b325ef-b248-467f-a2ed-977cb4f3a200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0817a7ea-4fc6-429e-98b7-18d2d3ebe814",
        "cursor": {
          "ref": "621fd33c-b86f-4518-81dc-f87fbb3c2ff9",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "4173261c-a557-4b13-b948-636a49d6031f"
        },
        "item": {
          "id": "0817a7ea-4fc6-429e-98b7-18d2d3ebe814",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d0de1547-dad9-4152-92db-ccc6d140e483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c32c20-f4bd-40e9-85b1-7c9874e00496",
        "cursor": {
          "ref": "0dd0c3a1-4450-4de3-b497-a3437d0168ed",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "fd947a28-d4b6-425e-b3c5-c76b04923f06"
        },
        "item": {
          "id": "12c32c20-f4bd-40e9-85b1-7c9874e00496",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "7a38b8fe-57a3-44dc-9406-65f02b7d8e2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "353a8e80-7374-47a3-976c-8fac3d1d1f1d",
        "cursor": {
          "ref": "527f360d-8ff5-46fa-9572-c4a81158a520",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "01ae50ab-54c0-48de-94a0-148956002820"
        },
        "item": {
          "id": "353a8e80-7374-47a3-976c-8fac3d1d1f1d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "43bbe9e7-e1e6-41b0-a294-8c6c2dc41cba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ded188d-0f66-432a-b899-fa0e86bc4c45",
        "cursor": {
          "ref": "0b21090e-46f5-4be3-ae45-af5ba0a500f3",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "561fcdb9-710d-48ab-b9fc-6921013335e7"
        },
        "item": {
          "id": "1ded188d-0f66-432a-b899-fa0e86bc4c45",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "57560366-443f-4c4e-82a5-4bfe76c679d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4c4add7-aff7-4f9d-9b09-8dd3825a4310",
        "cursor": {
          "ref": "c583998e-f0fd-4994-a6e3-6c221c6371f9",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1217a190-d3b6-4510-92bf-c1b53a8c2e53"
        },
        "item": {
          "id": "f4c4add7-aff7-4f9d-9b09-8dd3825a4310",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f822fb0e-796c-4d4f-8d5d-bdb44a22267e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e8d06c4-50a3-4e3a-95e3-2c88306e3702",
        "cursor": {
          "ref": "36fc6b64-3f15-44fa-a3ae-cdc6b5645866",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b3c42b87-337c-4ba7-aaa7-2fe7ffb30c5f"
        },
        "item": {
          "id": "4e8d06c4-50a3-4e3a-95e3-2c88306e3702",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "8de045ca-9f86-4b1e-988e-2dafcfb056c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b49d825-2244-45d6-8b5d-81bd4e244437",
        "cursor": {
          "ref": "0c8cfde4-d528-4a34-b61f-7f678075e9bc",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "2074ed67-b5a2-40cd-8753-96aa0b1cc503"
        },
        "item": {
          "id": "3b49d825-2244-45d6-8b5d-81bd4e244437",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "960e04a3-a2b1-4f7c-8241-bb2aa8af88e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97bd21f0-7c61-4f1d-8bad-ffe62200783c",
        "cursor": {
          "ref": "21e02eb1-eb18-4628-aff2-2700d2211561",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f250051e-728f-4229-9823-e1d753bff3a2"
        },
        "item": {
          "id": "97bd21f0-7c61-4f1d-8bad-ffe62200783c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "af738215-408e-4733-a977-b331f5b4560f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a07ad6d3-648f-4f78-87c8-50fd5113d0e2",
        "cursor": {
          "ref": "864a7bcf-9c8d-45e6-8195-4b41f0e8d81d",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "eef01e61-d1c8-4507-827a-1b5c4ac096a6"
        },
        "item": {
          "id": "a07ad6d3-648f-4f78-87c8-50fd5113d0e2",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "413be6f9-90fc-4ea2-8339-5ed12ead3289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd9d4556-8647-425c-a403-413cead5dc11",
        "cursor": {
          "ref": "23b7a449-0742-4ef3-a6d4-c7390786d242",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "ea55f4b1-44be-41bf-ad1f-5bbb1234fcc3"
        },
        "item": {
          "id": "fd9d4556-8647-425c-a403-413cead5dc11",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "338210d2-e33a-4c96-9ef9-748796865cc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17410c88-7c57-44f9-a58d-89f167740da7",
        "cursor": {
          "ref": "54f4a089-a476-4cb5-b8fa-e9a2d3cac5cb",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "db36173f-1934-4a10-a6b1-50df0e68d164"
        },
        "item": {
          "id": "17410c88-7c57-44f9-a58d-89f167740da7",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b174b163-e419-4e0a-9a6f-f6fa0c3c7c2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "813bd012-4fe2-4e74-b69f-407de9cc4c80",
        "cursor": {
          "ref": "7bd660a3-2e9e-4ffc-b81c-f405577f5f3a",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "331fcaea-a331-475a-b76e-b15733090cbf"
        },
        "item": {
          "id": "813bd012-4fe2-4e74-b69f-407de9cc4c80",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ecb30f33-07b6-4540-8109-c6ed080e5cfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e62bc8d3-fbb1-4041-a3f1-4c0209b54bd6",
        "cursor": {
          "ref": "ba89090f-abec-47a3-9f6a-e2e20ba7db59",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ec9d8b5b-b9a3-40b9-9e4d-46bbab43c5b2"
        },
        "item": {
          "id": "e62bc8d3-fbb1-4041-a3f1-4c0209b54bd6",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "de7d15b9-218a-422a-bb83-8987ab26a810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab3212b5-d1eb-4cba-8149-46e2e2ae40e1",
        "cursor": {
          "ref": "32223214-0b22-4ce1-8f49-a37876e61671",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "e1772d1a-7870-4466-8eb1-a0e3d8b0590c"
        },
        "item": {
          "id": "ab3212b5-d1eb-4cba-8149-46e2e2ae40e1",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "e621cc73-0345-47fe-b0ca-60c073fc291e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f969cfe8-1b25-4dc2-8cc8-fc4fa8595cfd",
        "cursor": {
          "ref": "d76fc0e9-e99b-48f6-ae05-dfc124330fd0",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "cd8e83a7-17b1-456a-b601-460ea567d2e2"
        },
        "item": {
          "id": "f969cfe8-1b25-4dc2-8cc8-fc4fa8595cfd",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "7bba3a16-837d-41bf-a0fc-9f7bdae378fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7765fd8-f0dc-464e-9050-5f7f8536797e",
        "cursor": {
          "ref": "585966e3-f423-40f6-81f8-bc58e42299f1",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9d0582e0-8faa-4074-bce3-aff9b22fc9ee"
        },
        "item": {
          "id": "a7765fd8-f0dc-464e-9050-5f7f8536797e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "b10cefac-d7c9-43e5-87f6-95be9e589d73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bf4a6bf-3f05-4093-8606-cbc684ff9cb6",
        "cursor": {
          "ref": "ce599af2-6806-4b23-b559-fb478ce14188",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "dcd3e834-79a9-4c9c-8e4f-357ff38c0b57"
        },
        "item": {
          "id": "6bf4a6bf-3f05-4093-8606-cbc684ff9cb6",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "9df53c43-de46-49c8-979a-3b81696d31dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d98e5e0b-87f4-4e28-b519-a736ebe17af9",
        "cursor": {
          "ref": "59dccf3a-fc6a-4ff3-be28-c797d71f7d42",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "6f820d0f-0e72-465c-8bc8-331a0cbf0b10"
        },
        "item": {
          "id": "d98e5e0b-87f4-4e28-b519-a736ebe17af9",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4cef0fd9-804d-46c3-8741-779465912faf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4c5e07b-3973-41ea-a639-8c2d71936883",
        "cursor": {
          "ref": "1398583c-3bfe-49fa-a3ff-b7c5e8fa6886",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "247f4c70-ffb9-4a2e-892b-b41c607cd62a"
        },
        "item": {
          "id": "a4c5e07b-3973-41ea-a639-8c2d71936883",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "75d6cf7f-8eab-4d01-8286-6c4470ae813c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb37cd78-f16b-412b-a3de-cbe60d31c87e",
        "cursor": {
          "ref": "d7d60d03-f443-46ea-832e-014fffbe3179",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5a082537-7712-4e2f-9da5-9b33b411d695"
        },
        "item": {
          "id": "eb37cd78-f16b-412b-a3de-cbe60d31c87e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "998b21e3-a433-47e3-837d-524cfa91deec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c9e8cb-cd5b-46d5-82fc-409c079be61f",
        "cursor": {
          "ref": "2f9622f5-1953-483f-a746-2393be92ff37",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "35843744-5b7d-4ccb-87f1-4bdbeb7e93ba"
        },
        "item": {
          "id": "31c9e8cb-cd5b-46d5-82fc-409c079be61f",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "96e4a4c9-3d7e-432e-8986-78fa33e348cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09d064a9-fae6-475c-b4ae-e022790d358c",
        "cursor": {
          "ref": "3500636e-10d3-4185-9e10-89c1b6db193e",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "9a575aba-fbfa-4313-b81a-c43379a9032f"
        },
        "item": {
          "id": "09d064a9-fae6-475c-b4ae-e022790d358c",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "bcd07993-459b-430c-9743-c4f577cd8b01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93056b3a-88d6-495d-87ac-d9c9bc42082e",
        "cursor": {
          "ref": "843330f7-dc89-497d-970c-32307bee8434",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "eb712234-a121-42e9-87ff-745b072caed0"
        },
        "item": {
          "id": "93056b3a-88d6-495d-87ac-d9c9bc42082e",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "8b50d1f3-d2b2-4517-82d6-64ccb4f6c61f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e19f38ec-3974-4bb4-8680-636798a3af36",
        "cursor": {
          "ref": "f7310347-62d8-4c4e-bab2-5e34b2b7f44f",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "98139e7c-e31e-4d9d-be1e-ad24cadff344"
        },
        "item": {
          "id": "e19f38ec-3974-4bb4-8680-636798a3af36",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "2770cf32-5f92-4857-b0bd-956adef7b1b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2815dab6-85ae-4bf9-94e7-b84e2a3257d9",
        "cursor": {
          "ref": "156d6f81-1dc8-4578-ab08-b35d0ffaa17f",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "db4b48ba-2fed-45f6-a1ac-3b2adf06d0f2"
        },
        "item": {
          "id": "2815dab6-85ae-4bf9-94e7-b84e2a3257d9",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "929e0657-bf67-403b-94ba-450b3a47b8ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee58b2e1-8114-4e89-b1c8-12e1de9121ed",
        "cursor": {
          "ref": "fefc8439-42b0-46d8-844b-796194e18908",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d7c36f30-7f42-4310-bdba-91a51c0f8c76"
        },
        "item": {
          "id": "ee58b2e1-8114-4e89-b1c8-12e1de9121ed",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "0110e6ca-5f8f-45e3-bb81-f0bbf7cc016c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06909a81-11bd-4790-8fdc-fb70ae01baa6",
        "cursor": {
          "ref": "d6abada2-abd9-4e1b-a9a4-adba9588e027",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "42fb665b-5328-4aeb-b4c0-6e186ca88451"
        },
        "item": {
          "id": "06909a81-11bd-4790-8fdc-fb70ae01baa6",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d0130c2c-dbca-4e26-825e-f4373da939cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "176c646c-20af-4769-bb9f-625d27f561f1",
        "cursor": {
          "ref": "5ba359c2-8c91-44ce-8dbf-5ee71e2e82f4",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "86cf6db1-e923-421c-9a76-f7b7e5d8a91e"
        },
        "item": {
          "id": "176c646c-20af-4769-bb9f-625d27f561f1",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "73d601db-546b-463f-8be3-1686caf6d626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad1706f5-1a27-4b16-a333-ea8e0c366e42",
        "cursor": {
          "ref": "cd4e710e-c43b-4693-9190-2f4240f48406",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "edca8a75-5ce8-4ecb-945f-e7d86e2015d4"
        },
        "item": {
          "id": "ad1706f5-1a27-4b16-a333-ea8e0c366e42",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "433f3575-0c6f-4828-b5ff-af9338bfe641",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "188f5825-8f39-4bba-ac5d-ea9b8c1067c8",
        "cursor": {
          "ref": "ac7e17d7-ed1f-4858-ad39-5620acebddc3",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "bfb86b35-c75e-4338-8a12-ee64153ff6fc"
        },
        "item": {
          "id": "188f5825-8f39-4bba-ac5d-ea9b8c1067c8",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "d454c286-0db1-4217-bce7-8fead508aa8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "4613a1fe-96f7-48b2-9119-8a5a56502169",
        "cursor": {
          "ref": "35d66f8d-a746-41a9-a82e-0097bbb03fc6",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c589f03a-5300-4401-8b67-7b4c0f6886e6"
        },
        "item": {
          "id": "4613a1fe-96f7-48b2-9119-8a5a56502169",
          "name": "credentials_issue"
        },
        "response": {
          "id": "03b1aa3d-5815-4025-99ef-54fe922382b9",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a77db24-f5ef-41a2-902e-ffc26f005b01",
        "cursor": {
          "ref": "d425621f-206d-4ee8-9fc6-f5a088af7677",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "7a98cfd2-40b4-4c8d-a024-26307c3b87bb"
        },
        "item": {
          "id": "9a77db24-f5ef-41a2-902e-ffc26f005b01",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "8835f82d-b221-440c-ba44-b126193e4f03",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "289d2d87-36c0-48c9-8290-5237151e19c7",
        "cursor": {
          "ref": "21a9be0d-1eac-4497-903a-1c045e349a72",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f634dfe3-6cf4-4248-a305-3ea904d8bd56"
        },
        "item": {
          "id": "289d2d87-36c0-48c9-8290-5237151e19c7",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "bab277b5-36ba-4965-ab4e-d0d0f9c3c4b3",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b074d1ad-8e76-4e9d-baea-3ed7b75d7610",
        "cursor": {
          "ref": "4c79a7af-2775-4a2e-be90-a1d4ea24412f",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "cfad45ae-6c6a-4a11-aa5c-b154a2c254af"
        },
        "item": {
          "id": "b074d1ad-8e76-4e9d-baea-3ed7b75d7610",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "3a0d4ded-1d00-43e1-aef3-cf5e3f666aac",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e0a3da5-aec5-4b8a-8159-cf509e3c1c36",
        "cursor": {
          "ref": "9a6dfa07-a9bc-43c6-8ea3-25320561aac5",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "01558091-5ad0-4537-9437-4e6056e547e5"
        },
        "item": {
          "id": "8e0a3da5-aec5-4b8a-8159-cf509e3c1c36",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "88c98baf-881c-406a-9dc9-ef2b3f514995",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-06-19T00:38:48.617Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-06-19T00:38:48.617Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "6e584a98-2b61-4301-b55a-32e156591d32",
        "cursor": {
          "ref": "6bf71da1-f110-402f-8397-fe32a5658b2d",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0a0fbe63-ce3d-4ded-bafe-b88352593f68"
        },
        "item": {
          "id": "6e584a98-2b61-4301-b55a-32e156591d32",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "72d49e05-f684-499b-930d-f93da8c0c1c4",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e908bdd-2a06-4264-afd2-d39b757ea8da",
        "cursor": {
          "ref": "415c584e-7367-41d1-8406-244616d967e3",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7a90374a-b033-47bc-b40b-63795ffbe628"
        },
        "item": {
          "id": "4e908bdd-2a06-4264-afd2-d39b757ea8da",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "47208c0d-c687-44fa-b7e5-fec104698587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1631e744-24e0-4b6d-ad66-7ddb1e116316",
        "cursor": {
          "ref": "6b02afd9-67f2-48a1-9ec7-eb921479a493",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ce7f4df4-9860-45ed-8da5-2858f5d6bfc9"
        },
        "item": {
          "id": "1631e744-24e0-4b6d-ad66-7ddb1e116316",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "15b76d19-f3c1-478b-8cc2-735e6631e0a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca68dbb7-9e81-4d38-b05a-9b1f0c1bcbe0",
        "cursor": {
          "ref": "8620a659-ff7f-40c2-870a-a35e61e56b05",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0598642e-551c-41f4-8a29-ae4b897b169d"
        },
        "item": {
          "id": "ca68dbb7-9e81-4d38-b05a-9b1f0c1bcbe0",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "10ab5dc3-3574-44cd-9844-db1f7d5a36d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e69ea9e8-2aa0-4088-a42a-4461c509dfa2",
        "cursor": {
          "ref": "bf5130c1-942d-46f1-8bfe-8095da007646",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a9e80b38-ec0c-448a-902e-6a9418a262f1"
        },
        "item": {
          "id": "e69ea9e8-2aa0-4088-a42a-4461c509dfa2",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "87acd148-bc30-4a52-a45c-a4e4f82d1096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea863e9c-972d-4421-b494-1f04cbc08322",
        "cursor": {
          "ref": "aa675e6a-f418-4692-8be5-02ebf52d9f6f",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "325dd6a9-50bd-49e3-a077-1956bd0b689d"
        },
        "item": {
          "id": "ea863e9c-972d-4421-b494-1f04cbc08322",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "cd35402c-7023-49b2-8610-d0ff31b14454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c37f0882-791a-4459-9d10-be637a7d01fd",
        "cursor": {
          "ref": "067f3ab7-d96e-4052-99c5-fd3d0b02e4b5",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "4e0cb8b4-bad9-4a17-af74-a9b51e378c0a"
        },
        "item": {
          "id": "c37f0882-791a-4459-9d10-be637a7d01fd",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7f90c132-32e4-4829-a9e2-5eb143d17627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f6f23a1-04dc-4118-9066-adca956840e9",
        "cursor": {
          "ref": "00cd0908-840a-4f81-8357-9e8e410320e5",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "f586031e-955d-4d24-8b46-6a6a2123ea1c"
        },
        "item": {
          "id": "1f6f23a1-04dc-4118-9066-adca956840e9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "116e63a3-5bf6-4d02-adce-02a136c83a36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf1ca20-86a7-474a-bcdf-bbb4e42786ce",
        "cursor": {
          "ref": "b2260d46-0fb0-4197-980d-c1c9ff724a84",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4c701748-7aa9-49c7-a2b7-b90743382896"
        },
        "item": {
          "id": "7cf1ca20-86a7-474a-bcdf-bbb4e42786ce",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c1d32359-5532-46b8-8111-5f93d61c0aef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "badcddfa-e0eb-4a70-a356-65b6772134b6",
        "cursor": {
          "ref": "f61e5757-5f9d-4bec-a095-7b4cf6459e99",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "40f53a3f-02ed-4323-9563-4d4bed9dc38a"
        },
        "item": {
          "id": "badcddfa-e0eb-4a70-a356-65b6772134b6",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "51b05656-ca39-4c31-bcb4-370904070c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "263d636a-9e74-415e-b03e-b91924060497",
        "cursor": {
          "ref": "d641376f-8263-473f-b7e6-a040bd45371c",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "f5349266-b787-4f0b-b4a9-60bcd939e61d"
        },
        "item": {
          "id": "263d636a-9e74-415e-b03e-b91924060497",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "449b872f-4207-4910-ac5e-9318adfc5ef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7104f0dd-5035-423d-80df-340861010014",
        "cursor": {
          "ref": "f7919fa5-3c0c-4bff-aa48-92df2db2f689",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "0c41e33a-ce23-4024-9877-9f2ae8064a4b"
        },
        "item": {
          "id": "7104f0dd-5035-423d-80df-340861010014",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "16e12353-17d4-4f2f-b92b-4f51d06dc15b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9877894b-3a31-4d43-94f6-a2d59252a801",
        "cursor": {
          "ref": "680f2507-6590-4d46-8937-9b58bd205711",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c3bce342-a66f-40f8-9a10-d87406cd5384"
        },
        "item": {
          "id": "9877894b-3a31-4d43-94f6-a2d59252a801",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "62617ec3-21fd-40bf-bb4a-9b0050734314",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d919acee-0bf8-490c-aedf-ea72079cc7e4",
        "cursor": {
          "ref": "7aef7168-4a40-4551-bbf3-d63764ba9f51",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f80359d7-b045-4e80-8dac-f0a8456f071a"
        },
        "item": {
          "id": "d919acee-0bf8-490c-aedf-ea72079cc7e4",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "89484ec0-d81f-409c-ac2a-93a7900db540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "018a942c-c05b-42d3-9fbc-e0d78ee289b7",
        "cursor": {
          "ref": "e3f6b0fc-5c44-41a7-815a-e9f6eb739582",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "9efa633d-6bb0-40c2-b486-72659e58321a"
        },
        "item": {
          "id": "018a942c-c05b-42d3-9fbc-e0d78ee289b7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "be5f2833-20d4-4a40-8743-335e860da98f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "679d9392-f509-4393-a5e6-febf484c2058",
        "cursor": {
          "ref": "11d41bc8-661c-4446-ad22-f5923c96d47b",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "85629434-87b2-4308-87ba-72d61864271e"
        },
        "item": {
          "id": "679d9392-f509-4393-a5e6-febf484c2058",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "58f7a80a-2ed1-4d16-9fff-4785bde82ddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eb41907-0e04-49e9-ae02-26d4828293d7",
        "cursor": {
          "ref": "2ce933e9-1d4f-49ae-89d0-8cd91f7fb9c8",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d7c60eac-3fc3-49f1-84a3-39c7f2c6c94f"
        },
        "item": {
          "id": "0eb41907-0e04-49e9-ae02-26d4828293d7",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "389d63c5-b4ff-464d-901f-45e5423fdb56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ce2e25-b40c-4b10-a4be-c4e32dc0b77f",
        "cursor": {
          "ref": "3d0b1610-29dd-494b-8b4e-55a4fc517bd3",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "8076c11e-b122-4f83-acef-0e170e5e5c32"
        },
        "item": {
          "id": "b5ce2e25-b40c-4b10-a4be-c4e32dc0b77f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "411b2606-652c-4881-9f51-81d617b81a2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a19c5ba-f89c-47ba-84ab-42974ba1dcad",
        "cursor": {
          "ref": "5c398918-c946-4386-94af-c01f793ceea7",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "7b18eab0-18d2-4b0d-adcd-8f1f3565b557"
        },
        "item": {
          "id": "7a19c5ba-f89c-47ba-84ab-42974ba1dcad",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "080ecddd-edb9-41d9-abe1-161fb1672e6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3471c59f-7b1a-4899-b2b4-8f8d698463bc",
        "cursor": {
          "ref": "69878fae-3727-4310-8eec-b392509eaf98",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2c75083e-5c35-4508-adf8-1b32ea8b85bf"
        },
        "item": {
          "id": "3471c59f-7b1a-4899-b2b4-8f8d698463bc",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d81db16d-a4f1-46f3-89e6-b26711aaa5d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7c725bd-b7e4-4a1e-83f2-6cb6f91040bc",
        "cursor": {
          "ref": "88f29276-d8a4-484f-a7dc-a85d96385489",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ed59d88c-60f8-447d-aec4-6978e2380168"
        },
        "item": {
          "id": "d7c725bd-b7e4-4a1e-83f2-6cb6f91040bc",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1cec231f-2169-4df9-8a8d-e43e9f5c1eff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da3227da-bae3-4ddc-b51d-98ca9b16754f",
        "cursor": {
          "ref": "e60a08dd-b759-444e-b144-0d21e38ce6e6",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c5b71d85-2cbc-465d-84a7-aea97708ce89"
        },
        "item": {
          "id": "da3227da-bae3-4ddc-b51d-98ca9b16754f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "0382702f-16fc-4cb9-b20c-7c202d647b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3eff0e5-1aaf-4b2b-8a56-171aa6451eae",
        "cursor": {
          "ref": "91976f2c-0b46-455f-9e03-8f7417d27fbb",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "549e8537-3445-4eef-a04b-b1225d1c9601"
        },
        "item": {
          "id": "b3eff0e5-1aaf-4b2b-8a56-171aa6451eae",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "549b6cc9-2536-464b-a096-09950af4c651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "110585d1-39c9-4c59-beef-2ea0d76c8366",
        "cursor": {
          "ref": "3940ff7b-1a20-4510-9302-e3ef95fb7088",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d1fdac12-760f-4ddf-8dff-28ffb16a2d7e"
        },
        "item": {
          "id": "110585d1-39c9-4c59-beef-2ea0d76c8366",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "bdaa1b01-6715-4528-a636-eca1aca2c3b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b806b03-c9ea-48cf-ac37-063a21b8d3d8",
        "cursor": {
          "ref": "169e5633-3ea9-4fa4-897d-b33457ad0557",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b26a89d4-a578-49f2-a198-b97f12c056a2"
        },
        "item": {
          "id": "3b806b03-c9ea-48cf-ac37-063a21b8d3d8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8e420897-bdbe-4d08-9ca0-a6c621afc6bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e75f951a-79b4-489b-8c5b-d80fec49cfa9",
        "cursor": {
          "ref": "a5488b9e-bde7-4cab-8cf9-710db67d9aed",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "9a38eeee-2b79-412c-bbae-d20f733cb203"
        },
        "item": {
          "id": "e75f951a-79b4-489b-8c5b-d80fec49cfa9",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "4b0a581b-94b4-418a-8082-78e3403b4aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6123906e-6b97-4219-9507-3e5c67cad95e",
        "cursor": {
          "ref": "a94d4142-4206-4442-a33e-a6b731b5a5f4",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "953eaf2a-8df0-485d-9b2d-e23f5dd98eeb"
        },
        "item": {
          "id": "6123906e-6b97-4219-9507-3e5c67cad95e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5114ff2c-5591-4b29-90c8-a264c2f9a725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1144a44f-0be4-465d-b2c6-180e57dd669f",
        "cursor": {
          "ref": "a9121b77-5e5e-433e-9111-f509907ba602",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "239fa587-b46a-4362-844d-9b4b2523888e"
        },
        "item": {
          "id": "1144a44f-0be4-465d-b2c6-180e57dd669f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "66db2f06-0730-464f-b219-7661c5e808b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "889540f1-f106-4c28-b5dd-ff157cad562b",
        "cursor": {
          "ref": "e00251f9-6850-4225-a6ea-c5494d3dedd5",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d033d251-9438-40c2-9210-96c2698f6c5f"
        },
        "item": {
          "id": "889540f1-f106-4c28-b5dd-ff157cad562b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "309c6861-8bb8-4fd9-8378-b52f09242004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "927b01d3-c581-4735-bf2f-d95c74bc341c",
        "cursor": {
          "ref": "35f88ff3-c06b-4743-82e4-e43c65d77ec3",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "4160ba8b-de3f-41a5-8f7a-dde7db010e8b"
        },
        "item": {
          "id": "927b01d3-c581-4735-bf2f-d95c74bc341c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "911ad90c-7871-4fad-99ab-cf6d8d98691e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a55df60-af1b-4190-b431-e9e5f46a8a82",
        "cursor": {
          "ref": "f3867a35-1a1c-4c4c-98fa-edca49e33aac",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "8661e71d-ec64-4f79-ba48-894c89a214b7"
        },
        "item": {
          "id": "1a55df60-af1b-4190-b431-e9e5f46a8a82",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0e929268-2bb5-423c-b480-41a1714ad77f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a7c6cca-e4a3-4e0f-b3d0-f845af80cb3a",
        "cursor": {
          "ref": "ad852be5-55fb-424a-959e-62876d643d72",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "acbcbdbc-2625-41d3-8800-769b52c741a4"
        },
        "item": {
          "id": "1a7c6cca-e4a3-4e0f-b3d0-f845af80cb3a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "43dabaec-e41c-4cab-9fef-995ab93bc610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b74b84df-359c-4cdc-a016-87065aee9bf2",
        "cursor": {
          "ref": "895f209c-3618-4555-be44-8c7715664781",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "c6bb84d8-4e23-41ee-8612-b940b8299e95"
        },
        "item": {
          "id": "b74b84df-359c-4cdc-a016-87065aee9bf2",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "1ea75730-ee0d-43c0-861f-6ee3b65b0f76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b5fbccf-517b-42f7-a533-e223e9a67f24",
        "cursor": {
          "ref": "9e20cc05-c4a9-4091-84ad-ce9a10331da8",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "d743b088-f83f-4551-a803-b994467cdd4b"
        },
        "item": {
          "id": "8b5fbccf-517b-42f7-a533-e223e9a67f24",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "af42d0be-1495-46fc-a638-f5e20b557afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28f200d4-cd42-44f8-8ff1-0236d780ee5a",
        "cursor": {
          "ref": "681b72d8-91bb-49bc-9bca-a277cd5c66df",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a56046ca-ea0f-4bf0-b2ac-ea42973566f2"
        },
        "item": {
          "id": "28f200d4-cd42-44f8-8ff1-0236d780ee5a",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "eaf82e0b-780a-45c6-a303-2e780e6398e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1116940c-ed2d-4a0e-8805-145848997fda",
        "cursor": {
          "ref": "948a68e2-a159-4ed9-a5bf-508520a6e624",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7fe47982-9deb-458d-9f6b-4d001c3509d5"
        },
        "item": {
          "id": "1116940c-ed2d-4a0e-8805-145848997fda",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "e8256000-97f8-43d5-afdf-4c4b2021d0e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd6d858d-f7e9-436a-ba06-e5898e0f91f7",
        "cursor": {
          "ref": "27267ac0-eb64-4ed0-af40-e115ef6acf8d",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "1ec628ea-c6d0-4e23-9b01-afffe4d99a5c"
        },
        "item": {
          "id": "cd6d858d-f7e9-436a-ba06-e5898e0f91f7",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "1632909e-11e7-425d-9d64-4a0a1ad8d356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa642a47-e0c1-40f1-9bcc-a829fdd8fdc5",
        "cursor": {
          "ref": "0d2423de-86a2-4a7d-8ab7-28e312197ab7",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2c59cfbe-f92c-4918-a282-4b473d10eed2"
        },
        "item": {
          "id": "fa642a47-e0c1-40f1-9bcc-a829fdd8fdc5",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "84dfb3be-3882-4d45-aa7e-7e05c37f8b7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1912838-d9be-4da0-8343-49601403cbce",
        "cursor": {
          "ref": "a0f8347d-5c6b-409c-ab65-bbf9a298afd3",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "9cc70b44-0ad3-4bbe-9061-df7b81df8589"
        },
        "item": {
          "id": "b1912838-d9be-4da0-8343-49601403cbce",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1390c489-31ae-4d99-8229-2704c102cb8a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9c96c6d-d27d-4b23-959d-d480cdfcb770",
        "cursor": {
          "ref": "4ff3d501-ab64-4fa1-8f9b-05ec8100af9f",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "18b26bba-85f2-437a-a47d-2e02aa920d74"
        },
        "item": {
          "id": "a9c96c6d-d27d-4b23-959d-d480cdfcb770",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f866d689-d3fa-4153-baee-c5f709325fe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0224dc6-230f-4275-86f1-53df36dbea9e",
        "cursor": {
          "ref": "ab52ea13-f726-49a6-a523-2515afc4b109",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "14febe3f-03be-4ab9-b559-3791699ba935"
        },
        "item": {
          "id": "d0224dc6-230f-4275-86f1-53df36dbea9e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "1df5919f-5de2-4cf8-9358-dafe8d1fbb42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ebca171-8028-431e-a500-160d4d39fd2b",
        "cursor": {
          "ref": "99e33bab-ed81-4252-8168-997c066b14bd",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "965dc63b-7e99-4023-8102-0368fae2fc27"
        },
        "item": {
          "id": "0ebca171-8028-431e-a500-160d4d39fd2b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8365a316-00d7-414a-9271-da852c367a70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "741fe3aa-1cbc-4550-aa3e-9eb3b506807d",
        "cursor": {
          "ref": "71e84d92-55aa-4ef6-85eb-dbe084c59d06",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "1cd1a2df-c2a3-4ef1-9096-28ddb81a4ed5"
        },
        "item": {
          "id": "741fe3aa-1cbc-4550-aa3e-9eb3b506807d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c56c010f-bfeb-49c4-baef-adc8b210c550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a947f536-c404-4ff0-a344-5c358b3336ee",
        "cursor": {
          "ref": "5601cad4-bb0b-41eb-8947-1a1635d3714e",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "a5bc7f30-ef44-466a-a598-968c7d5b0d97"
        },
        "item": {
          "id": "a947f536-c404-4ff0-a344-5c358b3336ee",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "54ada948-8b88-4a96-9dc1-14840f29e998",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81bbb67f-71db-42bd-af9b-4a9b7844719c",
        "cursor": {
          "ref": "64a1c172-1caf-45a5-acd2-64df99e140dd",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "3aff5595-0d1c-4c4f-9eae-8ab2e99c49dc"
        },
        "item": {
          "id": "81bbb67f-71db-42bd-af9b-4a9b7844719c",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "6a6c4079-5720-4294-977d-9853cba70102",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "313a2d3d-5ddb-4aa5-b2c3-7bd9b6cb60de",
        "cursor": {
          "ref": "1c910c4e-e7dc-481b-9a90-000348da820e",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "34b2715c-c8f9-46f0-a5ac-421a1db755dd"
        },
        "item": {
          "id": "313a2d3d-5ddb-4aa5-b2c3-7bd9b6cb60de",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a8813b77-c8c3-410d-913a-24e0d48a3e81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b13d795-721d-469f-a22a-42ad9c5a0ddc",
        "cursor": {
          "ref": "31e257e8-6a83-477f-a9a9-a14796665efb",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "7f6b723c-9d32-43c4-8fb2-adf7605263a1"
        },
        "item": {
          "id": "2b13d795-721d-469f-a22a-42ad9c5a0ddc",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "1442d647-45ab-4ff8-bfdb-8841fb5738e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b301152-9c6f-45a8-8135-6e442afd5e18",
        "cursor": {
          "ref": "3b9761d5-a0b5-4ffa-8f17-45b3cf461c95",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "4f988df3-a596-4e47-ae51-53eb296d8129"
        },
        "item": {
          "id": "1b301152-9c6f-45a8-8135-6e442afd5e18",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c7b36c58-cc47-4ae7-8a11-e5765227c0eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "532081c6-c529-444f-8d5f-94fdb111c6d3",
        "cursor": {
          "ref": "97bdb019-8871-4af8-a6a1-b886dcad7e80",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "dc462566-9142-4329-8514-013172077eda"
        },
        "item": {
          "id": "532081c6-c529-444f-8d5f-94fdb111c6d3",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "88f22810-bfa1-4359-abbe-5e97cbfc8d97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "680a944a-f6e3-4e02-ad12-7d8f299bb3e3",
        "cursor": {
          "ref": "3b24fa2b-e129-41c7-882c-7bc1e0deddb4",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f7392f60-b8e1-4e35-8533-b14c45bd63d9"
        },
        "item": {
          "id": "680a944a-f6e3-4e02-ad12-7d8f299bb3e3",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "ace7811b-f2f3-4188-a493-7d46fea8181c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb40fb0a-6645-4785-8ad8-2fa8e2672fb8",
        "cursor": {
          "ref": "fb65e44a-5792-4b11-afb9-b78531afc176",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "dbb019f0-c7e0-4071-a808-d18d788424a1"
        },
        "item": {
          "id": "bb40fb0a-6645-4785-8ad8-2fa8e2672fb8",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "4157252b-d57d-482b-9044-bffae5a84129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87a7bb3c-5a09-4fd8-b22e-bc29ed203724",
        "cursor": {
          "ref": "8508630b-53a6-4dd0-b6ab-8d752161ee1c",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "196771a1-48b3-4139-90bc-432793b26047"
        },
        "item": {
          "id": "87a7bb3c-5a09-4fd8-b22e-bc29ed203724",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "0a0b3a31-85be-4ba8-bd16-c84f8d09d946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d12e4ebb-5fcb-441c-9ff7-7af11a039607",
        "cursor": {
          "ref": "9263336b-93a5-44f3-8d78-4ba229d08417",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "d39af368-e6c5-42ef-b3d7-3b39469149f5"
        },
        "item": {
          "id": "d12e4ebb-5fcb-441c-9ff7-7af11a039607",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "6ecfd96f-6f53-4321-ae7f-20f76e1635e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c10dee-c60d-47d9-9dfe-3a4855f96db9",
        "cursor": {
          "ref": "410bfe43-1543-4848-9fe4-24c42041346c",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5c8eb78b-2103-464c-917c-2196f819ebd6"
        },
        "item": {
          "id": "f5c10dee-c60d-47d9-9dfe-3a4855f96db9",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "98a142bc-63ee-4103-92e0-148da336bcd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a69d0e34-c45c-44f6-8d5b-1c25fc57e491",
        "cursor": {
          "ref": "c26f8485-3530-4bef-a802-dce89ad5ca49",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "be1f8f89-8dd9-4cb1-9f8d-f99e6d8e5de2"
        },
        "item": {
          "id": "a69d0e34-c45c-44f6-8d5b-1c25fc57e491",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e9d8e391-aa54-49eb-ab20-168cfd033a4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e7fb012-6344-4091-b49e-602d39c558ec",
        "cursor": {
          "ref": "7064086b-5ad9-4d98-b465-57060592db66",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "3efa5f0d-e2b5-4331-aa63-214939224f54"
        },
        "item": {
          "id": "6e7fb012-6344-4091-b49e-602d39c558ec",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "26596c74-6716-48b1-8f8b-7950df471f99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c766cef7-8172-4c5b-8ed0-4457ebf70343",
        "cursor": {
          "ref": "ad2a6023-3055-4883-b9ef-d4eb7e289c51",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "58ab2c59-026a-49ac-97ab-b3ce277ab585"
        },
        "item": {
          "id": "c766cef7-8172-4c5b-8ed0-4457ebf70343",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "cd94f694-4a94-47b0-a98a-7d2afd60bf0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36ddb4a4-8ff5-45c8-ac7f-934ce57fafe4",
        "cursor": {
          "ref": "cd2c3e1d-16a3-4b55-ba71-5606f72dc01a",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9c6c4834-9f95-4d27-9282-39abdab66613"
        },
        "item": {
          "id": "36ddb4a4-8ff5-45c8-ac7f-934ce57fafe4",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1b7e885f-271a-413c-8b66-36860145f11a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec1e135b-75b5-435e-be2b-7e013e90e039",
        "cursor": {
          "ref": "f10e2fbe-5d32-400f-895a-3dfbabd64679",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d9848273-52db-42a2-8609-bc23d4dc5d63"
        },
        "item": {
          "id": "ec1e135b-75b5-435e-be2b-7e013e90e039",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "16cfded2-0836-4438-b2ac-a95ef89fc426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9295fe7-4f89-4738-b314-9ba31cf1b32e",
        "cursor": {
          "ref": "0255659d-f78f-4b2c-a372-c908bd9cc304",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "73b65415-ba7a-4234-9133-bbdf3e9eec40"
        },
        "item": {
          "id": "c9295fe7-4f89-4738-b314-9ba31cf1b32e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "711a4087-c119-4152-913b-b0d9417ccbd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaafd6ac-e261-45d7-9188-9fbba7009a2e",
        "cursor": {
          "ref": "d96b8011-d25f-4345-a8b9-142603fbd26c",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d1127eba-ca79-409e-8164-53d7cb2bec5a"
        },
        "item": {
          "id": "aaafd6ac-e261-45d7-9188-9fbba7009a2e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "04fc6c36-7bd4-4a30-ad0d-deceb4572e6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21551338-9dbf-4794-9e40-fae48d6552b4",
        "cursor": {
          "ref": "0a2d7be1-5839-4d53-8941-dd4f361e3403",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b81044de-7010-4094-a2cb-31dc623fc8fd"
        },
        "item": {
          "id": "21551338-9dbf-4794-9e40-fae48d6552b4",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f657d4d9-05fa-45c9-8eeb-bf3bee308bd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef9c1aa-21bb-4837-be5f-7a65b4be0303",
        "cursor": {
          "ref": "78465c48-676d-4040-8d32-913f5ff75c06",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "70de5b8f-ce58-4060-aae6-d21e9f504b43"
        },
        "item": {
          "id": "9ef9c1aa-21bb-4837-be5f-7a65b4be0303",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ceef1191-6558-43a0-8f40-cc429ac51a4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f30f466-499f-4821-8faf-b038ecaa2c28",
        "cursor": {
          "ref": "3c5958eb-cbcc-4d56-a834-b9b4b7fd9799",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "4e676a70-bae3-4942-af46-a2cfb64a8e5c"
        },
        "item": {
          "id": "5f30f466-499f-4821-8faf-b038ecaa2c28",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "81ed9b14-c32e-4f28-9a85-e7e14c83fe50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d39efd0a-b898-45d4-bc12-5f1a36eef334",
        "cursor": {
          "ref": "c1d694e9-d279-4c58-a61e-4ef0229a75e0",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "27d98b80-309c-440a-bd1e-eb3a35e0b5a9"
        },
        "item": {
          "id": "d39efd0a-b898-45d4-bc12-5f1a36eef334",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "93306c47-a302-4159-97e7-8e022393a328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b349caf0-2a6b-4c8d-9d18-bc0f181a9155",
        "cursor": {
          "ref": "b5ace68e-cf34-4c10-b05c-5cde3f3c766f",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "16628466-32e0-4e8b-9551-d909bc95c96e"
        },
        "item": {
          "id": "b349caf0-2a6b-4c8d-9d18-bc0f181a9155",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3031be48-db93-4d93-afab-5278e157d23a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d330ff7-f23e-4c20-bae5-7f8a9af2fb00",
        "cursor": {
          "ref": "d7946858-6c47-4a0f-8737-ee511a9856cc",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "2cbbd4bb-97a7-4f41-a955-7e962d1ba6df"
        },
        "item": {
          "id": "9d330ff7-f23e-4c20-bae5-7f8a9af2fb00",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "36aa8882-dd22-4860-be1f-d633d7dedcd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2210e5f-826e-43db-8a4f-9d46a0094079",
        "cursor": {
          "ref": "6c1b235f-d70b-465a-8405-af40321dc569",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2a62d9ff-9641-40c4-88f1-ca4e6e0dcddb"
        },
        "item": {
          "id": "b2210e5f-826e-43db-8a4f-9d46a0094079",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "d4728c03-a467-4cb1-80b7-dd8c004a5fc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c6ba7a1-ca79-4459-a84a-6ce1f45168ef",
        "cursor": {
          "ref": "c61f1f32-287e-499d-9f47-5cf6f04ecd17",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "bb3554fe-5bcd-44c5-9f5d-eb14203250f6"
        },
        "item": {
          "id": "3c6ba7a1-ca79-4459-a84a-6ce1f45168ef",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "4c7f2963-1d96-4e91-a475-2150b81c3012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc6a564a-072b-4a4d-809b-f3d0a8d9d0de",
        "cursor": {
          "ref": "cf8261a4-9438-4f9d-9b69-c398ebbeb348",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "4ff1df40-e182-4234-9937-c9269e7c8bb6"
        },
        "item": {
          "id": "cc6a564a-072b-4a4d-809b-f3d0a8d9d0de",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "f2a1d6a5-52cb-46e7-bedb-7e5b77eaf9a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "143cde52-671e-4dca-96d2-db7f6e7a598d",
        "cursor": {
          "ref": "bfced300-f891-4eff-98f5-6354c67282f8",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "1ba377cb-b5a0-49c6-b949-7108bec748d2"
        },
        "item": {
          "id": "143cde52-671e-4dca-96d2-db7f6e7a598d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "13520aa0-1878-4e25-aba0-64fa36e90c29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c8cc9b5-2038-4c20-95f2-1ef459b863f6",
        "cursor": {
          "ref": "7771e8c6-d3a3-4972-b723-576a917246f1",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "772c42f4-3a9e-4846-bc81-9732ebd4c7f3"
        },
        "item": {
          "id": "8c8cc9b5-2038-4c20-95f2-1ef459b863f6",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "6b7ba475-0adf-45dc-9e4c-319f31e6efdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b41ebdf6-af2b-4cf1-bdb5-760134d99d9b",
        "cursor": {
          "ref": "8588980b-2988-4b34-8116-8f2ffbd4b66d",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "9f804607-9805-4d08-8007-c79e4b1128e3"
        },
        "item": {
          "id": "b41ebdf6-af2b-4cf1-bdb5-760134d99d9b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "1e6f5dd2-c17f-452c-9322-990129adaf20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f081614-b864-4e83-aeec-fd6bca1db3ab",
        "cursor": {
          "ref": "69c8e2eb-38f5-4f24-9f4b-75f09c892545",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "5092c3e2-4052-4bad-9083-9378fa76efe2"
        },
        "item": {
          "id": "7f081614-b864-4e83-aeec-fd6bca1db3ab",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "2428ccda-0b13-4809-ad96-a0f635057ad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e50dae6-f591-405e-9ae4-02182658685c",
        "cursor": {
          "ref": "97e5b8e3-6222-482c-b8f9-4593f6925578",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "61e4fa44-7f20-45e5-8e59-68281a84a4f9"
        },
        "item": {
          "id": "2e50dae6-f591-405e-9ae4-02182658685c",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "9b2bfad9-e569-49e7-a3ec-23464f98a0fd",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "86c854a4-e5fd-487b-ac87-22c4b85ff7f7",
        "cursor": {
          "ref": "7463ebff-6f29-42be-9292-43dde03b4eee",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b28d0037-32c6-4fb3-b3a7-555f8fc6fc5a"
        },
        "item": {
          "id": "86c854a4-e5fd-487b-ac87-22c4b85ff7f7",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ed52dc5d-975e-4a79-9a34-6c3dad75d0f4",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "b81e6c4e-b101-47d2-88de-4119175808f7",
        "cursor": {
          "ref": "7b5ced9d-52ee-42ae-a2b2-c7725b094144",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "c45fb3f7-6613-4fe2-a216-b2b994f3d209"
        },
        "item": {
          "id": "b81e6c4e-b101-47d2-88de-4119175808f7",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "232e08f4-974c-4f97-9f9a-5e83eab12649",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "a94c88a8-7394-4ebb-b1ea-d0680c6ce6b5",
        "cursor": {
          "ref": "f4980850-e505-431e-bb4b-55944338d39c",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "2a9dde12-1b82-4872-8a00-0d4364e9137f"
        },
        "item": {
          "id": "a94c88a8-7394-4ebb-b1ea-d0680c6ce6b5",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c3e691b9-c230-48ad-bda9-8fdab964c5b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "071da166-2d33-49c0-91da-d432e455d681",
        "cursor": {
          "ref": "b0e3ebe6-4358-46a9-a79b-e7ee82e867e5",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "40bb6912-f9cd-4d99-94f9-53d2a66fde00"
        },
        "item": {
          "id": "071da166-2d33-49c0-91da-d432e455d681",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a31e0796-79dd-4102-9752-ea0754fdc743",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "b8242c74-9c5a-4057-b13a-a96d70b1c1de",
        "cursor": {
          "ref": "e5fae48f-49a1-4fc2-b740-411a8b9489de",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "c99701cd-f9b7-4bac-90c7-6dfa4a7390bf"
        },
        "item": {
          "id": "b8242c74-9c5a-4057-b13a-a96d70b1c1de",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "3a535edc-8d71-4095-b98f-77a2da9765c9",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "25940494-8b92-44d1-a0f7-f26df964487b",
        "cursor": {
          "ref": "4f255b99-6982-4651-aee8-4ae2b4035cbd",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "34274e51-cfed-4e48-9489-47d73860e1fd"
        },
        "item": {
          "id": "25940494-8b92-44d1-a0f7-f26df964487b",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "5067174a-fb96-4beb-8b88-2ca7bd44e56c",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "3fbfb78a-46d6-4c9b-a9ae-531abbd584ae",
        "cursor": {
          "ref": "50cd7863-29bc-45be-ac41-a2d690bc19c4",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c1f79c6b-70f8-4313-9134-049a7b96b00a"
        },
        "item": {
          "id": "3fbfb78a-46d6-4c9b-a9ae-531abbd584ae",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "8aff1a1d-407c-42f7-9d68-0f7d7666bc6e",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "cf6a4601-e6c3-400e-93d7-a1757692ff7b",
        "cursor": {
          "ref": "077eff10-fcfc-4f7b-b031-07d3cba73d6f",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ac642af5-8d48-4500-b2f7-ceed9bbcfcd2"
        },
        "item": {
          "id": "cf6a4601-e6c3-400e-93d7-a1757692ff7b",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6ccb3562-a0b6-4e27-8df8-030def713e6d",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "0b9d5253-2dfa-4b48-8f26-d6596de77534",
        "cursor": {
          "ref": "2a23ad15-f1d6-4595-8c89-1690dcd70af0",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "24271a83-991d-44ed-96a1-f632a1ffd10c"
        },
        "item": {
          "id": "0b9d5253-2dfa-4b48-8f26-d6596de77534",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "5d089efc-abff-4cc4-8230-2f5278f8bfe6",
          "status": "OK",
          "code": 200,
          "responseTime": 105,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "56326109-500b-4359-b10a-7fbd1ce5a9e8",
        "cursor": {
          "ref": "89f0cb82-5292-4b40-83e6-4f850f61f952",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "916da2f8-d6e0-46f7-b129-384b156b260b"
        },
        "item": {
          "id": "56326109-500b-4359-b10a-7fbd1ce5a9e8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "55485036-947a-4556-9b9f-2d2122a93569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc3984a-492f-4619-b110-cff5a6150183",
        "cursor": {
          "ref": "7c56827c-9a04-4dc2-a6c3-a9dd09a8ca51",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "50d6999a-6962-427e-8969-04972e5c6cde"
        },
        "item": {
          "id": "bbc3984a-492f-4619-b110-cff5a6150183",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "545bd8e0-f75e-47e3-baa8-4141b2106eee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "849bc955-49f5-4b14-b16c-25e0479ade81",
        "cursor": {
          "ref": "2efd728d-41ab-41a6-94cc-2b447c709969",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "7e4c9888-d453-466f-95a0-9ee6709ccc69"
        },
        "item": {
          "id": "849bc955-49f5-4b14-b16c-25e0479ade81",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "770bad6f-cfa0-4f5c-993d-c1eae04cac42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5a8dd86-25a4-4e30-9d2e-7f817cf8d449",
        "cursor": {
          "ref": "0f52b2b4-4252-4271-95d2-ed9edf82cea4",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "31b31e76-a630-4a87-a640-be7e132bf1e4"
        },
        "item": {
          "id": "d5a8dd86-25a4-4e30-9d2e-7f817cf8d449",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "9e82dfc1-09ac-44a7-aaae-d3f93bc0c614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b41ddeff-0688-4669-9d8b-3f685e552576",
        "cursor": {
          "ref": "3bdc9b23-9c41-41a6-b03a-f0fc16f31abf",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3890c5ef-7c61-4223-b8b2-400c3084ded1"
        },
        "item": {
          "id": "b41ddeff-0688-4669-9d8b-3f685e552576",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "4c70d56b-e932-41cd-9561-018d2581afab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c55bfd69-9dc8-4cb8-adbf-3a9ba50f5dad",
        "cursor": {
          "ref": "8c5cbbdf-ff69-4d41-9c83-ccd0e4148ac2",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "9cd949e0-d677-4a1e-a75d-7e90148310b0"
        },
        "item": {
          "id": "c55bfd69-9dc8-4cb8-adbf-3a9ba50f5dad",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "08a99146-0991-44de-a8ff-e7a9ad7504b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db4e08a9-3e16-4a2b-97e1-f74c2c6b86ea",
        "cursor": {
          "ref": "95ff2f65-081f-4ea0-abdb-4b4084a1c2a3",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "fc77dd26-02f2-4d28-bfcb-d699bcdaa7ac"
        },
        "item": {
          "id": "db4e08a9-3e16-4a2b-97e1-f74c2c6b86ea",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "98e936a0-196e-47d0-93d5-c8aa2aa0a438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e943ee8-e516-4eb7-83f1-f3ae291ce33b",
        "cursor": {
          "ref": "9240bfbf-158d-49fe-a058-43a2a5973cad",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "fee341fc-fcc7-408d-b024-3e435709d43d"
        },
        "item": {
          "id": "0e943ee8-e516-4eb7-83f1-f3ae291ce33b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "d619ab9e-e0b6-4b2d-b401-ce900e9b3749",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31201775-6dd7-43de-bc47-57010f5fb055",
        "cursor": {
          "ref": "26226f51-b1ea-4959-b82a-b34171dd3cdd",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "95afd8ba-fb97-4451-bec6-e5e71a80aa27"
        },
        "item": {
          "id": "31201775-6dd7-43de-bc47-57010f5fb055",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a7f3b22a-b72d-466f-8d18-8fc7d170dde2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eb83667-1cd1-4eaa-9a26-7dcb9d748818",
        "cursor": {
          "ref": "c9e90e56-1706-4ba8-a9c6-2ffcd15114a5",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f812c27b-4e50-4a1c-b817-4ed9419ee58a"
        },
        "item": {
          "id": "6eb83667-1cd1-4eaa-9a26-7dcb9d748818",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c5a303ab-b033-4a60-a410-4f860d75ec78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2de7030d-9c1d-4bed-afff-de917678db2c",
        "cursor": {
          "ref": "85ed409c-49df-49dc-a88c-61ebd561ecd1",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "8670de33-09c0-40eb-b380-297689399e8e"
        },
        "item": {
          "id": "2de7030d-9c1d-4bed-afff-de917678db2c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "7f727375-0214-486d-9b01-75d7ef440a96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04a1d6e4-7cbb-4c98-ac29-2f14f223d5e5",
        "cursor": {
          "ref": "9e77e63a-4efc-4e0a-a315-d0df619549b3",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "823e6ee8-84e6-499f-8475-8d85b9521dea"
        },
        "item": {
          "id": "04a1d6e4-7cbb-4c98-ac29-2f14f223d5e5",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a315cc87-485d-4950-974b-e3bb2e49dfb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a13c134-764a-4798-b55b-d3359e4c8f8a",
        "cursor": {
          "ref": "ca2a21f4-4b07-4f54-924f-5782d6b37744",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "ac98514b-904d-4f5c-a949-2be9a9dfbb5b"
        },
        "item": {
          "id": "3a13c134-764a-4798-b55b-d3359e4c8f8a",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "41c16cad-8a35-427d-98fe-654dd895ab9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "255b426c-b2fb-4dd7-a6b2-98d1b6747ae6",
        "cursor": {
          "ref": "f309cc78-2d03-4894-b6ed-0347d48aeaca",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b0fd9761-9092-470b-8852-ec5f5bfc0cfd"
        },
        "item": {
          "id": "255b426c-b2fb-4dd7-a6b2-98d1b6747ae6",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "01899a7b-70f5-44fd-b6d9-fdfefc568060",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "65e5dbc2-9a79-4590-9701-848cffdcb013",
        "cursor": {
          "ref": "b2924e75-db7f-4f8c-af6e-0c18fa3f6103",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "e7c57512-5eb4-4640-ace7-d0567a94081d"
        },
        "item": {
          "id": "65e5dbc2-9a79-4590-9701-848cffdcb013",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "de929aa2-f8a9-4806-8219-2e0f0e10b617",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "b81268ea-43ba-49cb-9b2d-2ee7fc3b2768",
        "cursor": {
          "ref": "2a4ac5cd-49dc-4cab-bc9e-9f1651df649f",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "61080046-9f21-42d3-a1a7-626b150a6c62"
        },
        "item": {
          "id": "b81268ea-43ba-49cb-9b2d-2ee7fc3b2768",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "37b41f5f-a0c4-47ac-b181-4bea1b42b141",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "f3a038c6-8324-4474-aaed-e7c0d83edda1",
        "cursor": {
          "ref": "72ba88b8-cc51-4a01-95df-0fc5b0278d99",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "55b643c0-da7f-4127-9293-da505a382079"
        },
        "item": {
          "id": "f3a038c6-8324-4474-aaed-e7c0d83edda1",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "aaa7a012-2a78-4074-8da7-9733c6c233ed",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "7ba9af36-c304-44a4-8edd-393096f9164f",
        "cursor": {
          "ref": "de9a57e2-d82b-4ed3-89cc-ff64a63c123e",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b8fad5ea-83e0-468b-add2-a2c50c5c51a1"
        },
        "item": {
          "id": "7ba9af36-c304-44a4-8edd-393096f9164f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "af08921b-d5b9-494f-96a1-9161dd07700e",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "2abde016-0480-4155-817a-93d697734d08",
        "cursor": {
          "ref": "5382eefc-e7b9-4f75-8345-1cdac0fd6cb3",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "3b19756a-d1d0-47c8-add2-eaf9038329a6"
        },
        "item": {
          "id": "2abde016-0480-4155-817a-93d697734d08",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ad50d987-e1f0-4e08-b372-34d0fc871356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cadf138-ab12-40b6-a5db-d7b6cc6d4cbd",
        "cursor": {
          "ref": "cd1c0d9c-950c-4dec-837d-0aa80f906656",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "6e84e67e-5c57-4033-ab02-21bcc7a0f9d3"
        },
        "item": {
          "id": "2cadf138-ab12-40b6-a5db-d7b6cc6d4cbd",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "115decce-5645-49b9-a806-965d789adf6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a87c300b-a13d-46ae-bc24-98cfb46bddb9",
        "cursor": {
          "ref": "f6451d92-4528-43f5-bf4d-f0c9d1208420",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "7e2ca044-f9f0-4b5f-81ee-2751cce26a7b"
        },
        "item": {
          "id": "a87c300b-a13d-46ae-bc24-98cfb46bddb9",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "d044507f-a25f-47f0-a26b-0d8f2e0c7fae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "539d9e5d-a960-4770-8579-6936762077e0",
        "cursor": {
          "ref": "71ea679e-4ea2-4b35-aca3-fc6763fa8f13",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "831232c4-4f52-4d8b-8314-5fba029321d4"
        },
        "item": {
          "id": "539d9e5d-a960-4770-8579-6936762077e0",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "697f57ed-bb23-4e14-9039-5dd979a282e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f15e9d1a-bc75-4a11-ad82-85903ed9d51b",
        "cursor": {
          "ref": "cc1020d9-deb1-4d74-8bff-dc89e590c354",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a1c79bc6-95b0-4a5a-96c9-55a48ac7f96a"
        },
        "item": {
          "id": "f15e9d1a-bc75-4a11-ad82-85903ed9d51b",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "1025d938-d34a-419f-a18e-48c1b4d44b86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0716a74-2481-4fa1-a846-ef718439fe94",
        "cursor": {
          "ref": "5f91752f-79e1-4c90-bc79-5b3e50047012",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b628f471-9d2b-4692-a3bc-75a4307b596f"
        },
        "item": {
          "id": "c0716a74-2481-4fa1-a846-ef718439fe94",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c8ef0f82-4e56-4c67-a200-3e89c724c97f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d83248c-9406-4c4d-879e-a21414859254",
        "cursor": {
          "ref": "f24bd2d0-ad83-43f4-9d6b-e787b7420e36",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d75e8fcc-5b4d-4cb5-969d-43119c08b4ac"
        },
        "item": {
          "id": "2d83248c-9406-4c4d-879e-a21414859254",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "376dac43-ae2f-40bd-801d-16bbbd80c423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "925be2bd-c59c-4ec4-a7f7-19864b737c90",
        "cursor": {
          "ref": "014e4b4f-86b8-4720-a7ca-87da72729975",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "023c0485-aeb2-40c6-b23c-c75b47dea78f"
        },
        "item": {
          "id": "925be2bd-c59c-4ec4-a7f7-19864b737c90",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "4095ee12-16ad-4b96-9582-a7a248346893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbff95a2-3107-45bb-b1ed-7b7dee337d96",
        "cursor": {
          "ref": "0f6183e5-d812-4220-9d0d-5085d82e8bea",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "baa24598-00fe-4412-981a-876bd86a8e06"
        },
        "item": {
          "id": "dbff95a2-3107-45bb-b1ed-7b7dee337d96",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b19d6a1a-0fd0-4905-8021-12130dbfaeeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5364162-cbaa-48dc-a20f-f73490a6602f",
        "cursor": {
          "ref": "109c58e2-5c4a-4201-af37-0f046e97e9f9",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e40dd6ec-d064-4efb-bc2a-f43c190b08d9"
        },
        "item": {
          "id": "a5364162-cbaa-48dc-a20f-f73490a6602f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e2d1fc71-d167-4a83-9eab-3360c538da03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "936db069-2c24-4e4a-98b9-617ce42b9ced",
        "cursor": {
          "ref": "1a686718-9cab-499c-9a7e-929507f937ea",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "248953d5-3b0d-406e-8c87-8e99896585ae"
        },
        "item": {
          "id": "936db069-2c24-4e4a-98b9-617ce42b9ced",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "59890165-8a1c-4318-ba67-06d1ab5ef7c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bf63d3c-622f-4bd4-8104-3af0e9369fd6",
        "cursor": {
          "ref": "815ff722-f1ca-475b-af1b-af4c831c5797",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "fdf9a5cc-4024-4aeb-8de5-bfbe959b1da2"
        },
        "item": {
          "id": "5bf63d3c-622f-4bd4-8104-3af0e9369fd6",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "e19ff1d5-2a98-4743-91bc-d561b807ec84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "380cf55f-7e78-4ef5-953c-a03fcd64d41e",
        "cursor": {
          "ref": "fa4bc2f0-4da8-40a0-8c79-69f96f7ac01d",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a07e58fa-3223-4cfb-86d9-f65ea644357d"
        },
        "item": {
          "id": "380cf55f-7e78-4ef5-953c-a03fcd64d41e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "0042575a-3aac-46a6-8df1-7840cbfcc25b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24476a17-0c8c-4681-bb03-28b310b187be",
        "cursor": {
          "ref": "1aef243f-1708-49ce-bdd0-a2fed1bcbc7c",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "71df22f0-273d-43d5-8c61-020b9a2139b5"
        },
        "item": {
          "id": "24476a17-0c8c-4681-bb03-28b310b187be",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "b0697bd8-8ec6-4db2-9ba5-a3dff39d3e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c61c934f-bc40-49ae-b4ac-8257c55cf3cc",
        "cursor": {
          "ref": "5c282fd5-59ac-4f4d-a716-bec5aad81a3f",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "8aa2d4a4-297c-430d-a874-84af8f577256"
        },
        "item": {
          "id": "c61c934f-bc40-49ae-b4ac-8257c55cf3cc",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "1dabbaf7-9d6b-4199-8a87-e0136c52f033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a99c5b58-d34e-475f-bc23-e208d552ed78",
        "cursor": {
          "ref": "ac031241-0c73-4d04-b58c-6816e5b8fc40",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e4514b62-a767-4fdd-9d75-d04880827427"
        },
        "item": {
          "id": "a99c5b58-d34e-475f-bc23-e208d552ed78",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f2efa53a-3295-418c-a468-a7038350463e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa9df155-655e-4175-85f0-dbaf1a738006",
        "cursor": {
          "ref": "55d81e5e-2dc4-4e44-ba48-79181a9c8690",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "7120c820-7f10-4384-95aa-1dee99a6b2dd"
        },
        "item": {
          "id": "fa9df155-655e-4175-85f0-dbaf1a738006",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "84102043-e480-489f-a0da-ea035639ca9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26ca3b9b-5b26-44f9-9606-9f88e8a8e973",
        "cursor": {
          "ref": "ffd5d6e2-2e21-46a4-b99b-725161b526fe",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "9fdb043b-8980-47de-9624-4373ccb12783"
        },
        "item": {
          "id": "26ca3b9b-5b26-44f9-9606-9f88e8a8e973",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c57d02c0-57c6-45f8-9be8-78cd843708fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3848701-0346-425c-842a-60940815a953",
        "cursor": {
          "ref": "b80dab52-4248-4364-b600-76707ca0d1cd",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7b334757-180d-41ae-84a2-6c6f1ab06600"
        },
        "item": {
          "id": "a3848701-0346-425c-842a-60940815a953",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "bee6233d-60f0-4e63-8353-1ae30039b42e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8916d9a5-42e9-47dc-aa45-3c8d675509bf",
        "cursor": {
          "ref": "b423bf3a-81a3-4ce0-8dd5-91e5e77db77e",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "d73e3d03-2370-4906-bad4-6d84af569e52"
        },
        "item": {
          "id": "8916d9a5-42e9-47dc-aa45-3c8d675509bf",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "1d71d0c6-d5e6-4763-a3ff-86276c666396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5f60a16-7d7c-4d1b-8501-64880e265d57",
        "cursor": {
          "ref": "983bc244-b15f-4e36-be5c-6c4652cad89c",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "fb825023-a26c-4d9e-a813-ce79722a56e1"
        },
        "item": {
          "id": "b5f60a16-7d7c-4d1b-8501-64880e265d57",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "eabf8f75-8616-4306-8ec7-df8cbfae1ea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87a757ff-f93f-4c18-816a-0cb176c16767",
        "cursor": {
          "ref": "af321126-92d9-4408-9627-a36c90cc6254",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1bfa6219-1f24-4521-8c0b-b04afe617b7f"
        },
        "item": {
          "id": "87a757ff-f93f-4c18-816a-0cb176c16767",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "8607887e-3d27-403b-84b2-10a4a530d887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dd79ded-968d-4b91-9894-24b155241016",
        "cursor": {
          "ref": "a6e37f75-1798-46e6-ace9-05976a7bebb4",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "12927243-cb76-426d-8d9a-1ffb22514e85"
        },
        "item": {
          "id": "3dd79ded-968d-4b91-9894-24b155241016",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d0ed316d-c371-410c-98b7-e562ed06c784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2610debe-741b-44bc-a76d-309f72930784",
        "cursor": {
          "ref": "a71784fc-b0e2-4250-bd94-5704f9464836",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "07fd7a08-fef4-48e2-9902-f5bf82bc3359"
        },
        "item": {
          "id": "2610debe-741b-44bc-a76d-309f72930784",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9235b47c-0fc0-43aa-827b-fd389e7ecb55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50ae51be-8c10-49b4-865f-fc110f78b90d",
        "cursor": {
          "ref": "91738b0f-694f-441c-8d49-9138ffdb31ad",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "4efc3fb7-9ee8-41e6-9eb7-efaa035b37d0"
        },
        "item": {
          "id": "50ae51be-8c10-49b4-865f-fc110f78b90d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "48dce930-e905-454f-b231-441e3cddae7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14b656de-8516-4b57-a0e7-2e6be0a062b3",
        "cursor": {
          "ref": "ef4bb9d5-80af-4fbf-8741-cae10f5ade1e",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "90f3257f-6cdb-4614-9b24-e74de6f62b83"
        },
        "item": {
          "id": "14b656de-8516-4b57-a0e7-2e6be0a062b3",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a99a57ec-3ae0-4f70-ba09-4b92b9a56dbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45bc545c-798e-4fb6-8958-1ff48852b56a",
        "cursor": {
          "ref": "8a6f59e4-4883-4b74-ae7f-cfdfed49b02b",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "470e6f28-e461-4342-a3a8-91ab96d83782"
        },
        "item": {
          "id": "45bc545c-798e-4fb6-8958-1ff48852b56a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "5739541e-db33-4742-96fb-fb84cefb3d99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cd7a29c-f58d-4b47-acbf-0992efd499ff",
        "cursor": {
          "ref": "cc1091a6-93d6-496c-b51f-afef68016a46",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "a3c0c6bc-f6f9-4296-a912-728dcad36f1c"
        },
        "item": {
          "id": "2cd7a29c-f58d-4b47-acbf-0992efd499ff",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "75d5bac9-d6b2-4b12-b5fd-9a2b745f0c37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adb5eafd-4421-48bd-b8a2-69a3922d7cae",
        "cursor": {
          "ref": "1de06fad-da4f-4d40-8b1e-2b0cc9a7b45e",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "4452d45d-38cf-4810-8977-902b1cbce081"
        },
        "item": {
          "id": "adb5eafd-4421-48bd-b8a2-69a3922d7cae",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "81f7f8b7-88bb-4f13-8bff-1a326a34b915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "781f5ec9-f52a-43d7-a293-ffe164cfe38b",
        "cursor": {
          "ref": "428f8220-e227-4e1e-8670-50f9ef29a079",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "69ae930e-baa5-424f-9dc4-349d802975d5"
        },
        "item": {
          "id": "781f5ec9-f52a-43d7-a293-ffe164cfe38b",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7da8719b-8ace-4d8d-8985-330f800f8ea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2514d0a-0692-49cf-a4fb-e3cf96077998",
        "cursor": {
          "ref": "b1a7716b-e817-4db8-90fa-82b7f6d636ac",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "c416d82f-ef1c-4476-9662-5a488e87fd3c"
        },
        "item": {
          "id": "c2514d0a-0692-49cf-a4fb-e3cf96077998",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "fb2e88d1-83d3-402a-b19b-70532c18978e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f18f25f-7438-4685-ac93-4553e7fa802b",
        "cursor": {
          "ref": "8057437a-70bd-4625-8f5c-d7ad092623b0",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "72c37232-e0b8-4f65-9892-bf538f6727ac"
        },
        "item": {
          "id": "4f18f25f-7438-4685-ac93-4553e7fa802b",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "3d2603d4-1e50-4cec-b712-2aa077d41e44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c92e4fd9-1abd-4c8e-805f-bcf17cb9a7cf",
        "cursor": {
          "ref": "944851f8-213c-4ee1-8509-60a1715b0243",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "972824fe-e57a-4b98-b2f3-afa6fed4949a"
        },
        "item": {
          "id": "c92e4fd9-1abd-4c8e-805f-bcf17cb9a7cf",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "863ead6c-ba31-4a90-8ad7-d17b30d36699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d07f0e6-e6c0-4a59-96f5-e817538792fa",
        "cursor": {
          "ref": "5603efad-7527-48a2-8929-1f2672f9dad1",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "0b5daefa-9d0d-4964-8515-447fa7b497e9"
        },
        "item": {
          "id": "4d07f0e6-e6c0-4a59-96f5-e817538792fa",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "e7594be8-dea5-401d-8bc0-67a6759fcf27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24166f23-eb4f-494e-a861-1f7aa6377833",
        "cursor": {
          "ref": "456e0282-0a31-4837-991a-2ccfbfa9c358",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "ae56a6f9-0827-461c-aad7-dd9f44bbba07"
        },
        "item": {
          "id": "24166f23-eb4f-494e-a861-1f7aa6377833",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d28474ae-c517-445b-96c5-197555acf0f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "777748d6-ae81-4fd6-af0f-579a5c816e0d",
        "cursor": {
          "ref": "bf9cdad3-753f-43b6-8cd7-b17e0e84d144",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "bd8dddf4-922f-4695-9b11-8dda5d541823"
        },
        "item": {
          "id": "777748d6-ae81-4fd6-af0f-579a5c816e0d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "c33eac09-0eaf-45a9-b40a-d2ab3732644f",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "199cd8b9-eac1-4b97-85d1-f4871f6bc486",
        "cursor": {
          "ref": "5b9b4281-3f2e-4b37-acd4-3a4f08128945",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e8188126-7230-4b34-914f-d4d949f8f4ce"
        },
        "item": {
          "id": "199cd8b9-eac1-4b97-85d1-f4871f6bc486",
          "name": "credentials_verify"
        },
        "response": {
          "id": "fbe5e2bb-57c6-4018-b0a4-845d89092601",
          "status": "OK",
          "code": 200,
          "responseTime": 105,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d6bd3de-a5e1-4717-a2ab-62da12c5edbe",
        "cursor": {
          "ref": "816fa71b-2d92-4dce-9473-abe3b0b30768",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4c4461ed-4b68-4603-b361-81c425b2a8ea"
        },
        "item": {
          "id": "6d6bd3de-a5e1-4717-a2ab-62da12c5edbe",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "7d3584d5-2252-4aeb-8327-89b3e7615610",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bed48a8-e44b-4fb0-a19b-13dd7c5dbf39",
        "cursor": {
          "ref": "5fd137e6-15b1-4f70-82ed-78c97568823e",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "faa1e425-98e1-4470-a715-775439be563f"
        },
        "item": {
          "id": "7bed48a8-e44b-4fb0-a19b-13dd7c5dbf39",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8efdbe26-a3bc-4042-bf39-23710a459eab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bed48a8-e44b-4fb0-a19b-13dd7c5dbf39",
        "cursor": {
          "ref": "5fd137e6-15b1-4f70-82ed-78c97568823e",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "faa1e425-98e1-4470-a715-775439be563f"
        },
        "item": {
          "id": "7bed48a8-e44b-4fb0-a19b-13dd7c5dbf39",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8efdbe26-a3bc-4042-bf39-23710a459eab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a23b2973-0f7e-4588-8b60-24b97eddb8e9",
        "cursor": {
          "ref": "99a8bb14-eaf8-48a3-8094-e1789cfaae83",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3ad06635-86d0-4cb1-8d5e-7fc513a05ce4"
        },
        "item": {
          "id": "a23b2973-0f7e-4588-8b60-24b97eddb8e9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ceae8d6c-f57f-43f8-a47e-801f6b274e11",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3acccdd2-cce6-492c-9c48-0867a372016e",
        "cursor": {
          "ref": "acd2e3f5-b7eb-4c86-8f8b-65f13a59f0b8",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c756a23f-358a-4442-88bf-f2275da9c6ef"
        },
        "item": {
          "id": "3acccdd2-cce6-492c-9c48-0867a372016e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "68bb3814-e71d-452f-be3f-39d139e1ee5b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}